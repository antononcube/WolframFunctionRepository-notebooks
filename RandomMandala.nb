(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2659017,      45596]
NotebookOptionsPosition[   2554530,      43510]
NotebookOutlinePosition[   2631234,      45009]
CellTagsIndexPosition[   2630512,      44986]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["RandomMandala", "Title",
 CellTags->"Title"],

Cell["Make random mandala plots", "Text",
 CellTags->"Description"],

Cell[CellGroupData[{

Cell[TextData[{
 "Definition",
 Cell[BoxData[
  TemplateBox[{"Definition",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Define your function using the name you gave in the Title line above. \
You can add input cells and extra code to define additional input cases or \
prerequisites. All definitions, including dependencies, will be included in \
the generated resource function.\n\nThis section should be evaluated before \
creating the Examples section below.", "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Section",
 Deletable->False,
 DefaultNewCellStyle->"Input",
 CellTags->"Definition",
 CellID->474513213],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "MakeSeedSegment", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeSeedSegment", "[", 
    RowBox[{"radius_", ",", "angle_", ",", 
     RowBox[{"n_Integer:", "10"}], ",", 
     RowBox[{"connectingFunc_:", "Polygon"}], ",", 
     RowBox[{"keepGridPoints_:", "False"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"t", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Point", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"radius", "*", "r", "*", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Cos", "[", "angle", "]"}], ",", 
               RowBox[{"Sin", "[", "angle", "]"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"radius", "*", "r"}], ",", "0"}], "}"}]}], "}"}], "]"}],
          ",", 
         RowBox[{"{", 
          RowBox[{"r", ",", "0", ",", "1", ",", 
           RowBox[{"1", "/", "n"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", "keepGridPoints", "]"}], ",", "t", ",", 
          RowBox[{"{", "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"GrayLevel", "[", "0.25", "]"}], ",", 
          RowBox[{"connectingFunc", "@", 
           RowBox[{"RandomSample", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"t", "/.", 
               RowBox[{
                RowBox[{"Point", "[", 
                 RowBox[{"{", 
                  RowBox[{"x_", ",", "y_"}], "}"}], "]"}], "\[RuleDelayed]", 
                RowBox[{"{", 
                 RowBox[{"x", ",", "y"}], "}"}]}]}], ",", "1"}], "]"}], 
            "]"}]}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.695247608834527*^9, 3.695247688948646*^9}, {
   3.695247740486519*^9, 3.695247748787524*^9}, {3.695248200834244*^9, 
   3.695248219644912*^9}, {3.69524830101731*^9, 3.695248303029666*^9}, {
   3.695248651560013*^9, 3.695248692622301*^9}, 3.695249141614985*^9, 
   3.6952616280819283`*^9, {3.6952952072964077`*^9, 3.695295242491837*^9}, {
   3.779208777054577*^9, 3.7792087781559*^9}, {3.7792649196690207`*^9, 
   3.779264926809774*^9}},
 CellLabel->"In[16]:=",
 CellID->68469169],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "MakeSymmetric", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeSymmetric", "[", "seed_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"seed", ",", 
     RowBox[{"GeometricTransformation", "[", 
      RowBox[{"seed", ",", 
       RowBox[{"ReflectionTransform", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "]"}]}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6952499365942574`*^9, 3.695250016370844*^9}, {
   3.6952500564095507`*^9, 3.695250091113983*^9}, {3.69525013355013*^9, 
   3.695250143371181*^9}, {3.695250323553672*^9, 3.695250403485111*^9}, {
   3.695250694698203*^9, 3.695250724732189*^9}, {3.695252798863687*^9, 
   3.6952528179874067`*^9}, 3.7792087756031017`*^9},
 CellLabel->"In[18]:=",
 CellID->1961522917],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "MakeMandala", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeMandala", "[", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"MakeMandala", "[", 
    RowBox[{
     RowBox[{"MakeSymmetric", "[", 
      RowBox[{"MakeSeedSegment", "[", 
       RowBox[{"10", ",", 
        RowBox[{"\[Pi]", "/", "12"}], ",", "12", ",", 
        RowBox[{"RandomChoice", "[", 
         RowBox[{"{", 
          RowBox[{"Line", ",", "Polygon", ",", "BezierCurve", ",", 
           RowBox[{
            RowBox[{"FilledCurve", "[", 
             RowBox[{"BezierCurve", "[", "#", "]"}], "]"}], "&"}]}], "}"}], 
         "]"}], ",", "False"}], "]"}], "]"}], ",", 
     RowBox[{"\[Pi]", "/", "6"}], ",", "opts"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeMandala", "[", 
    RowBox[{"seed_", ",", 
     RowBox[{"angle_", "?", "NumericQ"}], ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"angle", ",", 
        RowBox[{"2", "\[Pi]"}]}], "]"}], "\[Equal]", "0"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{"RandomMandala", "::", "zeroa"}], "]"}], ";", "$Failed"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"GeometricTransformation", "[", 
        RowBox[{"seed", ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"RotationMatrix", "[", "a", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "0", ",", 
             RowBox[{
              RowBox[{"2", "\[Pi]"}], "-", 
              RowBox[{"Mod", "[", 
               RowBox[{"angle", ",", 
                RowBox[{"2", "\[Pi]"}]}], "]"}]}], ",", 
             RowBox[{"Mod", "[", 
              RowBox[{"angle", ",", 
               RowBox[{"2", "\[Pi]"}]}], "]"}]}], "}"}]}], "]"}]}], "]"}], 
       ",", "opts"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.695247779852276*^9, 3.695247943763608*^9}, {
   3.695247986359975*^9, 3.695247990941917*^9}, {3.695248266962071*^9, 
   3.695248297664145*^9}, {3.695248448327593*^9, 3.6952484562235317`*^9}, {
   3.695248816712*^9, 3.6952488759321947`*^9}, {3.6952509878622637`*^9, 
   3.6952510206687613`*^9}, {3.695251068277595*^9, 3.6952511094428368`*^9}, {
   3.695251608780675*^9, 3.69525164433225*^9}, {3.695251846393911*^9, 
   3.695251859207601*^9}, {3.695252020041128*^9, 3.695252024483486*^9}, 
   3.6952520940422373`*^9, 3.695261659480897*^9, {3.695262586036075*^9, 
   3.695262589737647*^9}, {3.69526303289018*^9, 3.695263033080852*^9}, {
   3.695263328486271*^9, 3.695263346328897*^9}, 3.6952645281932087`*^9, {
   3.6952955766700897`*^9, 3.695295578142789*^9}, {3.695295996907536*^9, 
   3.695295997739851*^9}, {3.695296035522781*^9, 3.6952960451816187`*^9}, {
   3.779209900981441*^9, 3.7792099021160316`*^9}, {3.779210099854669*^9, 
   3.779210100256907*^9}, {3.7792513355772142`*^9, 3.779251347444737*^9}, {
   3.7792570325933104`*^9, 3.7792570475878143`*^9}, {3.779257133798553*^9, 
   3.7792571782358418`*^9}},
 CellLabel->"In[20]:=",
 CellID->299579828],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ColorizeMandala", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala_Graphics", ",", "colorFuncName_String"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala", ",", 
     RowBox[{"ColorData", "[", 
      RowBox[{"colorFuncName", ",", "\"\<ColorFunction\>\""}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala_Graphics", ",", "colorFunc_ColorDataFunction"}], "]"}], ":=",
    "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "cols", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cols", "=", 
       RowBox[{"colorFunc", "/@", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "1", ",", "0.1"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ColorizeMandala", "[", 
       RowBox[{"mandala", ",", "cols"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala_Graphics", ",", "col_RGBColor"}], "]"}], ":=", 
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala", ",", 
     RowBox[{"{", "col", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala_Graphics", ",", 
     RowBox[{"cols", ":", 
      RowBox[{"{", 
       RowBox[{"_RGBColor", ".."}], "}"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"mandala", "/.", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FilledCurve", "[", "x___", "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FaceForm", "[", 
            RowBox[{"RandomChoice", "[", "cols", "]"}], "]"}], ",", 
           RowBox[{"FilledCurve", "[", "x", "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Polygon", "[", "x___", "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FaceForm", "[", 
            RowBox[{"RandomChoice", "[", "cols", "]"}], "]"}], ",", 
           RowBox[{"Polygon", "[", "x", "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Line", "[", "x___", "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"RandomChoice", "[", "cols", "]"}], ",", 
           RowBox[{"Line", "[", "x", "]"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"BezierCurve", "[", "x___", "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"RandomChoice", "[", "cols", "]"}], ",", 
           RowBox[{"BezierCurve", "[", "x", "]"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorizeMandala", "[", 
    RowBox[{"mandala_Graphics", ",", "___"}], "]"}], ":=", "mandala"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.779530508949201*^9, 3.779530513864477*^9}, {
  3.779530638191552*^9, 3.779530691846704*^9}, {3.779551467657506*^9, 
  3.779551515975642*^9}, {3.779551551953815*^9, 3.7795516006653967`*^9}, {
  3.779551759677599*^9, 3.779551763973611*^9}, {3.779551875408444*^9, 
  3.7795518816835947`*^9}, {3.779552047446056*^9, 3.779552048242494*^9}, {
  3.779553682099478*^9, 3.779553712362566*^9}, {3.780397177450379*^9, 
  3.780397182813395*^9}, {3.780400228732912*^9, 3.780400230508951*^9}, {
  3.780400294309824*^9, 3.780400297315612*^9}, {3.780400360146806*^9, 
  3.780400370089611*^9}},
 CellLabel->"In[23]:=",
 CellID->1736113201],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "RandomMandala", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.695247779852276*^9, 3.695247943763608*^9}, {
   3.695247986359975*^9, 3.695247990941917*^9}, {3.695248266962071*^9, 
   3.695248297664145*^9}, {3.695248448327593*^9, 3.6952484562235317`*^9}, {
   3.695248816712*^9, 3.6952488759321947`*^9}, {3.6952509878622637`*^9, 
   3.6952510206687613`*^9}, {3.695251068277595*^9, 3.6952511094428368`*^9}, {
   3.695251608780675*^9, 3.69525164433225*^9}, {3.695251846393911*^9, 
   3.695251859207601*^9}, {3.695252020041128*^9, 3.695252024483486*^9}, 
   3.6952520940422373`*^9, 3.695261659480897*^9, {3.695262586036075*^9, 
   3.695262589737647*^9}, {3.69526303289018*^9, 3.695263033080852*^9}, {
   3.695263328486271*^9, 3.695263346328897*^9}, 3.6952645281932087`*^9, {
   3.6952955766700897`*^9, 3.695295578142789*^9}, {3.695295996907536*^9, 
   3.695295997739851*^9}, {3.695296035522781*^9, 3.6952960451816187`*^9}, {
   3.7792090179664392`*^9, 3.7792090302775507`*^9}, {3.7792090892226887`*^9, 
   3.779209100202937*^9}, {3.77920916598263*^9, 3.779209587764409*^9}, {
   3.779209745381796*^9, 3.779209760522246*^9}, {3.779209868614072*^9, 
   3.7792098844924717`*^9}, {3.779209965333282*^9, 3.779210001410881*^9}, {
   3.779210123458024*^9, 3.7792101489732323`*^9}, {3.779215460365892*^9, 
   3.779215460367449*^9}, {3.779215512003118*^9, 3.779215515094359*^9}, {
   3.779216258193989*^9, 3.779216304790779*^9}},
 CellLabel->"In[29]:=",
 CellID->398101051],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomMandala", "::", "ipopt"}], "=", 
   "\"\<The value of the option \\\"`1`\\\" is expected to be a positive \
integer.\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.77921630681887*^9, 3.779216371862569*^9}, {
  3.779252087130287*^9, 3.779252089457347*^9}},
 CellLabel->"In[30]:=",
 CellID->1815363322],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomMandala", "::", "rpopt"}], "=", 
   "\"\<The value of the option \\\"`1`\\\" is expected to be a positive real \
number or list of positive real numbers.\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.7792163526360826`*^9, 3.779216374259025*^9}, {
  3.779252093621643*^9, 3.779252095791271*^9}, {3.780351993723178*^9, 
  3.780352007706156*^9}},
 CellLabel->"In[31]:=",
 CellID->237276367],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomMandala", "::", "zeroa"}], "=", 
   "\"\<Zero rotational angle obtained.\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.7792163526360826`*^9, 3.779216374259025*^9}, {
  3.779252093621643*^9, 3.779252095791271*^9}, {3.779257191018009*^9, 
  3.779257212818903*^9}},
 CellLabel->"In[32]:=",
 CellID->368738492],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SyntaxInformation", "[", "RandomMandala", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<ArgumentsPattern\>\"", "->", 
     RowBox[{"{", 
      RowBox[{"OptionsPattern", "[", "]"}], "}"}]}], "}"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.695247779852276*^9, 3.695247943763608*^9}, {
   3.695247986359975*^9, 3.695247990941917*^9}, {3.695248266962071*^9, 
   3.695248297664145*^9}, {3.695248448327593*^9, 3.6952484562235317`*^9}, {
   3.695248816712*^9, 3.6952488759321947`*^9}, {3.6952509878622637`*^9, 
   3.6952510206687613`*^9}, {3.695251068277595*^9, 3.6952511094428368`*^9}, {
   3.695251608780675*^9, 3.69525164433225*^9}, {3.695251846393911*^9, 
   3.695251859207601*^9}, {3.695252020041128*^9, 3.695252024483486*^9}, 
   3.6952520940422373`*^9, 3.695261659480897*^9, {3.695262586036075*^9, 
   3.695262589737647*^9}, {3.69526303289018*^9, 3.695263033080852*^9}, {
   3.695263328486271*^9, 3.695263346328897*^9}, 3.6952645281932087`*^9, {
   3.6952955766700897`*^9, 3.695295578142789*^9}, {3.695295996907536*^9, 
   3.695295997739851*^9}, {3.695296035522781*^9, 3.6952960451816187`*^9}, {
   3.7792090179664392`*^9, 3.7792090302775507`*^9}, {3.7792090892226887`*^9, 
   3.779209100202937*^9}, {3.77920916598263*^9, 3.779209587764409*^9}, {
   3.779209745381796*^9, 3.779209760522246*^9}, {3.779209868614072*^9, 
   3.7792098844924717`*^9}, {3.779209965333282*^9, 3.779210001410881*^9}, {
   3.779210123458024*^9, 3.7792101489732323`*^9}, {3.779215460365892*^9, 
   3.779215460367449*^9}, {3.779215512003118*^9, 3.779215515094359*^9}, {
   3.779216258193989*^9, 3.779216304790779*^9}},
 CellLabel->"In[33]:=",
 CellID->647426583],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RandomMandala", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Radius\>\"", "\[Rule]", "10"}], ",", 
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "6"}], ",", 
       RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "Automatic"}], ",", 
       
       RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", "Random"}], ",", 
       RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "False"}], ",", 
       RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "True"}], ",", 
       RowBox[{"ColorFunction", "\[Rule]", "None"}]}], "}"}], ",", 
     RowBox[{"Options", "[", "Graphics", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.780399851817832*^9, 3.7803998530093718`*^9}},
 CellLabel->"In[34]:=",
 CellID->534216816],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomMandala", "[", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "radius", ",", "rotOrder", ",", "angle", ",", "nElems", ",", 
       "connectingFunc", ",", "keepGridPointsQ", ",", "symmetricQ", ",", 
       "colorFunc", ",", "seed", ",", "res"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"radius", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMandala", ",", "\"\<Radius\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"radius", ",", "NumericQ"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"RandomMultiMandala", "[", "opts", "]"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"radius", "===", "Automatic"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"RandomMultiMandala", "[", 
          RowBox[{
           RowBox[{"\"\<Radius\>\"", "\[Rule]", 
            RowBox[{"Reverse", "[", 
             RowBox[{"Rescale", "[", 
              RowBox[{
               RowBox[{"Range", "[", "4", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "10"}], "}"}]}], "]"}], "]"}]}], ",", 
           "opts"}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"NumericQ", "[", "radius", "]"}], "&&", 
           RowBox[{"radius", ">", "0"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"RandomMandala", "::", "rpopt"}], ",", "\"\<Radius\>\""}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rotOrder", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMandala", ",", "\"\<RotationalSymmetryOrder\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"NumericQ", "[", "rotOrder", "]"}], "&&", 
           RowBox[{"rotOrder", ">", "0"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"RandomMandala", "::", "rpopt"}], ",", 
           "\"\<RotationalSymmetryOrder\>\""}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"nElems", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMandala", ",", "\"\<NumberOfSeedElements\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"nElems", "===", "Automatic"}], "]"}], ",", 
        RowBox[{"nElems", "=", "6"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerQ", "[", "nElems", "]"}], "&&", 
           RowBox[{"nElems", ">", "0"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"RandomMandala", "::", "ipopt"}], ",", 
           "\"\<NumberOfSeedElements\>\""}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"connectingFunc", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMandala", ",", "\"\<ConnectingFunction\>\""}], "]"}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"keepGridPointsQ", "=", 
       RowBox[{"TrueQ", "[", 
        RowBox[{"OptionValue", "[", 
         RowBox[{"RandomMandala", ",", "\"\<KeepGridPoints\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"symmetricQ", "=", 
       RowBox[{"TrueQ", "[", 
        RowBox[{"OptionValue", "[", 
         RowBox[{"RandomMandala", ",", "\"\<SymmetricSeed\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"colorFunc", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMandala", ",", "ColorFunction"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"connectingFunc", "===", "Random"}], "]"}], ",", 
        RowBox[{"connectingFunc", "=", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"Line", ",", "Polygon", ",", "BezierCurve", ",", 
            RowBox[{
             RowBox[{"FilledCurve", "[", 
              RowBox[{"BezierCurve", "[", "#", "]"}], "]"}], "&"}]}], "}"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"connectingFunc", "===", "Automatic"}], "]"}], ",", 
        RowBox[{"connectingFunc", "=", 
         RowBox[{
          RowBox[{"FilledCurve", "[", 
           RowBox[{"BezierCurve", "[", "#", "]"}], "]"}], "&"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"seed", "=", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"symmetricQ", ",", "\[IndentingNewLine]", 
         RowBox[{"MakeSymmetric", "[", 
          RowBox[{"MakeSeedSegment", "[", 
           RowBox[{"radius", ",", 
            RowBox[{"\[Pi]", "/", "rotOrder"}], ",", "nElems", ",", 
            "connectingFunc", ",", "keepGridPointsQ"}], "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MakeSeedSegment", "[", 
          RowBox[{"radius", ",", 
           RowBox[{"2", 
            RowBox[{"\[Pi]", "/", "rotOrder"}]}], ",", "nElems", ",", 
           "connectingFunc", ",", "keepGridPointsQ"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"res", "=", 
       RowBox[{"MakeMandala", "[", 
        RowBox[{"seed", ",", 
         RowBox[{"2", 
          RowBox[{"\[Pi]", "/", "rotOrder"}]}], ",", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"{", "opts", "}"}], ",", 
           RowBox[{"Options", "[", "Graphics", "]"}]}], "]"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"colorFunc", "===", "None"}], "]"}], ",", 
        "\[IndentingNewLine]", "res", ",", "\[IndentingNewLine]", 
        RowBox[{"ColorizeMandala", "[", 
         RowBox[{"res", ",", "colorFunc"}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7803521571002398`*^9, 3.780352319540702*^9}, {
   3.7803911899862833`*^9, 3.780391198853726*^9}, 3.7803964407593307`*^9, {
   3.7803967665141783`*^9, 3.780396793304659*^9}, 3.78040224184326*^9},
 CellLabel->"In[35]:=",
 CellID->180484729],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "RandomMultiMandala", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.780351838268936*^9, 3.780351986703182*^9}, {
   3.780352020308646*^9, 3.780352064723638*^9}, {3.780352109398347*^9, 
   3.780352130808576*^9}, {3.780352780888913*^9, 3.780352798629896*^9}, {
   3.780390861852784*^9, 3.780390902441757*^9}, {3.780395102730707*^9, 
   3.7803951054436493`*^9}, {3.780395154662032*^9, 3.780395248655085*^9}, {
   3.780395298450264*^9, 3.780395301834629*^9}, {3.780396603565196*^9, 
   3.780396642253642*^9}, 3.7803966837465982`*^9, {3.780398111768958*^9, 
   3.7803982005500917`*^9}, {3.780398250166478*^9, 3.780398309764447*^9}, {
   3.7803984845958*^9, 3.780398490062376*^9}, {3.78039980794316*^9, 
   3.780399841141591*^9}, 3.780401214744907*^9, {3.780401249204912*^9, 
   3.780401273323071*^9}},
 CellLabel->"In[36]:=",
 CellID->1324200482],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RandomMultiMandala", "]"}], "=", 
   RowBox[{"Options", "[", "RandomMandala", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.780351838268936*^9, 3.780351986703182*^9}, {
   3.780352020308646*^9, 3.780352064723638*^9}, {3.780352109398347*^9, 
   3.780352130808576*^9}, {3.780352780888913*^9, 3.780352798629896*^9}, {
   3.780390861852784*^9, 3.780390902441757*^9}, {3.780395102730707*^9, 
   3.7803951054436493`*^9}, {3.780395154662032*^9, 3.780395248655085*^9}, {
   3.780395298450264*^9, 3.780395301834629*^9}, {3.780396603565196*^9, 
   3.780396642253642*^9}, 3.7803966837465982`*^9, {3.780398111768958*^9, 
   3.7803982005500917`*^9}, {3.780398250166478*^9, 3.780398309764447*^9}, {
   3.7803984845958*^9, 3.780398490062376*^9}, {3.78039980794316*^9, 
   3.780399841141591*^9}, 3.780401214744907*^9, {3.780401249204912*^9, 
   3.780401273323071*^9}},
 CellLabel->"In[37]:=",
 CellID->1482419059],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomMultiMandala", "[", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "radiuses", ",", "colorFunc", ",", "connectingFunc", ",", 
       "generatedMandalas", ",", "nElems"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"radiuses", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMultiMandala", ",", "\"\<Radius\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"radiuses", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "radiuses", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"VectorQ", "[", 
            RowBox[{"radiuses", ",", "NumericQ"}], "]"}], "&&", 
           RowBox[{"Apply", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "\[GreaterEqual]", "0"}], "&"}], ",", "radiuses"}],
             "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"RandomMandala", "::", "rpopt"}], ",", "\"\<Radius\>\""}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"colorFunc", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMultiMandala", ",", "ColorFunction"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"colorFunc", "===", "None"}], "]"}], ",", 
        RowBox[{"colorFunc", "=", "GrayLevel"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "colorFunc", "]"}], ",", 
        RowBox[{"colorFunc", "=", 
         RowBox[{"ColorData", "[", "colorFunc", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"nElems", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMultiMandala", ",", "\"\<NumberOfSeedElements\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"nElems", "===", "Automatic"}], "]"}], ",", 
        RowBox[{"nElems", "=", "3"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"connectingFunc", "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"RandomMultiMandala", ",", "\"\<ConnectingFunction\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Which", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"connectingFunc", "===", "Automatic"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"connectingFunc", "=", 
         RowBox[{"{", 
          RowBox[{"Polygon", ",", 
           RowBox[{"FilledCurve", "@*", "BezierCurve"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"connectingFunc", "===", "Random"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"connectingFunc", "=", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"Line", ",", "Polygon", ",", "BezierCurve", ",", 
            RowBox[{
             RowBox[{"FilledCurve", "[", 
              RowBox[{"BezierCurve", "[", "#", "]"}], "]"}], "&"}]}], "}"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"connectingFunc", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "connectingFunc", "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"generatedMandalas", "=", "\[IndentingNewLine]", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Block", "[", 
           RowBox[{
            RowBox[{"{", "rm", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"rm", "=", 
              RowBox[{"RandomMandala", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"\"\<Radius\>\"", "\[Rule]", "#1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "connectingFunc", "]"}], 
                    "\[Equal]", "1"}], ",", 
                   RowBox[{"First", "[", "connectingFunc", "]"}], ",", 
                   RowBox[{"RandomChoice", "[", "connectingFunc", "]"}]}], 
                  "]"}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "nElems"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"FilterRules", "[", 
                 RowBox[{
                  RowBox[{"{", "opts", "}"}], ",", 
                  RowBox[{"Options", "[", "RandomMandala", "]"}]}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"TrueQ", "[", 
                RowBox[{"rm", "===", "$Failed"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Return", "[", "$Failed", "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"#2", ",", 
                 RowBox[{
                  RowBox[{
                  "rm", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], "/.", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.25`", "]"}],
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True], "->", "#2"}], ",", 
                    RowBox[{
                    RowBox[{"RGBColor", "[", "x___", "]"}], ":>", "#2"}]}], 
                   "}"}]}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
           "]"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"radiuses", ",", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{
             RowBox[{"colorFunc", "/@", 
              RowBox[{"Range", "[", 
               RowBox[{"0", ",", "1", ",", "0.1"}], "]"}]}], ",", 
             RowBox[{"Length", "[", "radiuses", "]"}]}], "]"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{"generatedMandalas", ",", "$Failed"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Graphics", "[", 
         RowBox[{"generatedMandalas", ",", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "opts", "}"}], ",", 
            RowBox[{"Options", "[", "Graphics", "]"}]}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", "$Failed"}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.780351838268936*^9, 3.780351986703182*^9}, {
   3.780352020308646*^9, 3.780352064723638*^9}, {3.780352109398347*^9, 
   3.780352130808576*^9}, {3.780352780888913*^9, 3.780352798629896*^9}, {
   3.780390861852784*^9, 3.780390902441757*^9}, {3.780395102730707*^9, 
   3.7803951054436493`*^9}, {3.780395154662032*^9, 3.780395248655085*^9}, {
   3.780395298450264*^9, 3.780395301834629*^9}, {3.780396603565196*^9, 
   3.780396642253642*^9}, 3.7803966837465982`*^9, {3.780398111768958*^9, 
   3.7803982005500917`*^9}, {3.780398250166478*^9, 3.780398309764447*^9}, {
   3.7803984845958*^9, 3.780398490062376*^9}, {3.78039980794316*^9, 
   3.780399841141591*^9}, 3.780401214744907*^9, {3.780401249204912*^9, 
   3.780401272436454*^9}, 3.7804018064058867`*^9, 3.780402247569116*^9},
 CellLabel->"In[38]:=",
 CellID->1328355169]
}, Open  ]],

Cell["Documentation", "Section",
 Deletable->False,
 CellTags->"Documentation",
 CellID->855965831],

Cell[CellGroupData[{

Cell[TextData[{
 "Usage",
 Cell[BoxData[
  TemplateBox[{"Usage",Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "Document input usage cases by first typing an input structure, then \
pressing ", 
          Cell[
           BoxData[
            StyleBox[
             DynamicBox[
              ToBoxes[
               
               If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
              Evaluator -> "System"], ShowStringCharacters -> False]]], 
          " to add a brief explanation of the function\[CloseCurlyQuote]s \
behavior for that structure. Pressing ", 
          Cell[
           BoxData[
            StyleBox[
             DynamicBox[
              ToBoxes[
               
               If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
              Evaluator -> "System"], ShowStringCharacters -> False]]], 
          " repeatedly will create new cases as needed. Every input usage \
case defined above should be demonstrated explicitly here.\n\nSee existing \
documentation pages for examples."}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoUsage"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->{"UsageInputs", FontFamily -> "Source Sans Pro"},
 CellTags->"Usage",
 CellID->643497520],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", "]"}]], "UsageInputs"],

Cell["generates a mandala graphic.", "UsageDescription"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Details & Options",
 Cell[BoxData[
  TemplateBox[{"Details & Options",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Give a detailed explanation of how the function is used and \
configured (e.g. acceptable input types, result formats, options \
specifications, background information). This section may include multiple \
cells, bullet lists, tables, hyperlinks and additional styles/structures as \
needed.\n\nAdd any other information that may be relevant, such as when the \
function was first discovered or how and why it is used within a given field. \
Include all relevant background or contextual information related to the \
function, its development, and its usage.", "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDetailsOptions"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Notes",
 CellTags->"Details & Options",
 CellID->66019318],

Cell[TextData[{
 "The mandalas made by ",
 Cell[BoxData["RandomMandala"], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " are generated through rotational symmetry of a \[OpenCurlyDoubleQuote]seed \
segment\[CloseCurlyDoubleQuote]."
}], "Notes",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.779250676907956*^9, 3.779250744120441*^9}, {
  3.77955511790189*^9, 3.779555120602274*^9}, {3.77981356604928*^9, 
  3.779813571644074*^9}},
 CellTags->"TabNext",
 CellID->521904482],

Cell[TextData[{
 "RandomMandala accepts the same options as ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Graphics", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Graphics",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " as well as the following options to specify different features of the seed \
segment generation and rotational symmetry order:"
}], "Notes",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.779250676907956*^9, 3.779250837087666*^9}, {
  3.779262291365052*^9, 3.7792622931538153`*^9}, {3.77955516306131*^9, 
  3.779555174793887*^9}, {3.779812419904851*^9, 3.7798124465269423`*^9}, {
  3.7798125716606607`*^9, 3.779812572115924*^9}, {3.779812662675913*^9, 
  3.779812676976956*^9}},
 CellID->81468097],

Cell[BoxData[GridBox[{
   {Cell["\"RotationalSymmetryOrder\"", "TableText"], Cell["6", "TableText"], 
    Cell[TextData[{
     "a value k defining the rotation symmetry angle, ",
     Cell[BoxData[
      FormBox[
       RowBox[{"2", " ", 
        RowBox[{"\[Pi]", "/", "k"}]}], TraditionalForm]]]
    }], "TableText"]},
   {Cell["\"Radius\"", "TableText"], Cell["10", "TableText"], Cell[
    "maximum radius of the seed segment generation points", "TableText"]},
   {Cell["\"SymmetricSeed\"", "TableText"], Cell[TextData[Cell[BoxData[
     TagBox[
      ButtonBox[
       StyleBox["True", "SymbolsRefLink",
        ShowStringCharacters->True,
        FontFamily->"Source Sans Pro"],
       BaseStyle->Dynamic[
         FEPrivate`If[
          CurrentValue["MouseOver"], {
          "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
          "Link"}]],
       ButtonData->"paclet:ref/True",
       ContentPadding->False],
      MouseAppearanceTag["LinkHand"]]], "InlineFormula",
     FontFamily->"Source Sans Pro"]], "TableText"], Cell[
    "should the seed be symmetric or not", "TableText"]},
   {Cell["\"NumberOfSeedElements\"", "TableText"], Cell[
    "Automatic", "TableText"], Cell[
    "the number of elements in a seed segment", "TableText"]},
   {Cell["\"KeepGridPoints\"", "TableText"], Cell[TextData[Cell[BoxData[
     TagBox[
      ButtonBox[
       StyleBox["False", "SymbolsRefLink",
        ShowStringCharacters->True,
        FontFamily->"Source Sans Pro"],
       BaseStyle->Dynamic[
         FEPrivate`If[
          CurrentValue["MouseOver"], {
          "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
          "Link"}]],
       ButtonData->"paclet:ref/False",
       ContentPadding->False],
      MouseAppearanceTag["LinkHand"]]], "InlineFormula",
     FontFamily->"Source Sans Pro"]], "TableText"], Cell[
    "should the grid points be shown", "TableText"]},
   {Cell["\"ConnectionFunction\"", "TableText"], Cell["Random", "TableText"], 
    Cell["how to connect grid point", "TableText"]},
   {Cell["\"ColorFunction\"", "TableText"], Cell[TextData[Cell[BoxData[
     TagBox[
      ButtonBox[
       StyleBox["None", "SymbolsRefLink",
        ShowStringCharacters->True,
        FontFamily->"Source Sans Pro"],
       BaseStyle->Dynamic[
         FEPrivate`If[
          CurrentValue["MouseOver"], {
          "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
          "Link"}]],
       ButtonData->"paclet:ref/None",
       ContentPadding->False],
      MouseAppearanceTag["LinkHand"]]], "InlineFormula",
     FontFamily->"Source Sans Pro"]], "TableText"], Cell[
    "how to colorize the mandala", "TableText"]}
  }]], "TableNotes",
 CellChangeTimes->{{3.7798125019744387`*^9, 3.77981256239156*^9}, {
  3.7798127350566673`*^9, 3.779812744981463*^9}, {3.779812815714518*^9, 
  3.7798130718497*^9}, {3.780401396163025*^9, 3.780401400291712*^9}},
 CellID->1507942041],

Cell[TextData[{
 "The option ",
 Cell[BoxData["\"\<ConnectionFunction\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " specifies what ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Graphics", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Graphics",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " primitive function should be used to connect the grid points of the seed \
segment. If the value is ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Automatic", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Automatic",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " then ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Polygon", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Polygon",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " is used. If the value is ",
 StyleBox["Random", "Program"],
 " then a random choice is made from the following: ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Line", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Line",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Polygon", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Polygon",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["BezierCurve", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/BezierCurve",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 ", ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    TagBox[
     ButtonBox[
      StyleBox["FilledCurve", "SymbolsRefLink",
       ShowStringCharacters->True,
       FontFamily->"Source Sans Pro"],
      BaseStyle->Dynamic[
        FEPrivate`If[
         CurrentValue["MouseOver"], {
         "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
         "Link"}]],
      ButtonData->"paclet:ref/FilledCurve",
      ContentPadding->False],
     MouseAppearanceTag["LinkHand"]], "[", 
    RowBox[{
     TagBox[
      ButtonBox[
       StyleBox["BezierCurve", "SymbolsRefLink",
        ShowStringCharacters->True,
        FontFamily->"Source Sans Pro"],
       BaseStyle->Dynamic[
         FEPrivate`If[
          CurrentValue["MouseOver"], {
          "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
          "Link"}]],
       ButtonData->"paclet:ref/BezierCurve",
       ContentPadding->False],
      MouseAppearanceTag["LinkHand"]], "[", "#", "]"}], "]"}], "&"}]], 
  "InlineFormula",
  FontFamily->"Source Sans Pro"],
 "."
}], "Notes",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.779250676907956*^9, 3.779250786090657*^9}, {
  3.779262296641114*^9, 3.779262417265724*^9}, {3.779263977534329*^9, 
  3.779263989177372*^9}, {3.779264024536922*^9, 3.7792643202255707`*^9}, {
  3.7792643704133863`*^9, 3.7792643751604137`*^9}, {3.779530200336047*^9, 
  3.779530200336995*^9}, {3.77981309102433*^9, 3.779813229122711*^9}},
 CellID->1341278363]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples",
 Cell[BoxData[
  TemplateBox[{"Examples",Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "Demonstrate the function\[CloseCurlyQuote]s usage, starting with \
the most basic use case and describing each example in a preceding text cell.\
\n\nWithin a group, individual examples can be delimited by inserting page \
breaks between them (either using ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"[Right-click]\"", FontFamily -> "Source Sans Pro Semibold", 
                FontColor -> GrayLevel[0.286275], FontSize -> 14, 
                StripOnInput -> False], 
               StyleBox[
               "\" \[FilledRightTriangle] \"", FontFamily -> 
                "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                GrayLevel[0.5], StripOnInput -> False], 
               StyleBox[
               "\"Insert Page Break\"", FontFamily -> 
                "Source Sans Pro Semibold", FontColor -> GrayLevel[0.286275], 
                FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
             ShowStringCharacters -> False]]], 
          " between cells or through the menu using ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"Insert\"", FontFamily -> "Source Sans Pro Semibold", 
                FontColor -> GrayLevel[0.286275], FontSize -> 14, 
                StripOnInput -> False], 
               StyleBox[
               "\" \[FilledRightTriangle] \"", FontFamily -> 
                "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                GrayLevel[0.5], StripOnInput -> False], 
               StyleBox[
               "\"Page Break\"", FontFamily -> "Source Sans Pro Semibold", 
                FontColor -> GrayLevel[0.286275], FontSize -> 14, 
                StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
             False]]], 
          ").\n\nExamples should be grouped into Subsection and Subsubsection \
cells similarly to existing documentation pages. Here are some typical \
Subsection names and the types of examples they normally contain:\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Basic Examples: \"", FontFamily -> 
                "Source Sans Pro Semibold", FontSize -> 14, StripOnInput -> 
                False]}, "RowDefault"], ShowStringCharacters -> False]]], 
          "most basic function usage\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Scope: \"", FontFamily -> "Source Sans Pro Semibold", 
                FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
             ShowStringCharacters -> False]]], 
          "input and display conventions, standard computational attributes \
(e.g. threading over lists)\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Options: \"", FontFamily -> "Source Sans Pro Semibold", 
                FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
             ShowStringCharacters -> False]]], 
          "available options and parameters for the function\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Applications: \"", FontFamily -> "Source Sans Pro Semibold",
                 FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
             ShowStringCharacters -> False]]], 
          "standard industry or academic applications\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Properties and Relations: \"", FontFamily -> 
                "Source Sans Pro Semibold", FontSize -> 14, StripOnInput -> 
                False]}, "RowDefault"], ShowStringCharacters -> False]]], 
          "how the function relates to other functions\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Possible Issues: \"", FontFamily -> 
                "Source Sans Pro Semibold", FontSize -> 14, StripOnInput -> 
                False]}, "RowDefault"], ShowStringCharacters -> False]]], 
          "limitations or unexpected behavior a user might experience\n  ", 
          Cell[
           BoxData[
            StyleBox[
             TemplateBox[{
               StyleBox[
               "\"\[FilledSmallSquare] \"", FontColor -> 
                RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
               StyleBox[
               "\"Neat Examples: \"", FontFamily -> 
                "Source Sans Pro Semibold", FontSize -> 14, StripOnInput -> 
                False]}, "RowDefault"], ShowStringCharacters -> False]]], 
          "particularly interesting, unconventional, or otherwise unique \
usage"}], "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
       FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5]], "MoreInfoText", 
     Deletable -> True, CellTags -> {"SectionMoreInfoExamples"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Section",
 Deletable->False,
 CellTags->"Examples",
 CellID->180595041],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 CellLabel->"In[1]:=",
 CellID->462042388],

Cell["Here we generate a random mandala:", "Text",
 CellChangeTimes->{{3.779209621974771*^9, 3.7792096538014297`*^9}},
 CellID->13078159],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "4243", "]"}], "\[IndentingNewLine]", 
 RowBox[{"RandomMandala", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.779209597621125*^9, 3.779209605166996*^9}, {
   3.779550088567747*^9, 3.779550099150223*^9}, {3.779550954459326*^9, 
   3.779550954997319*^9}, 3.7795511654455442`*^9, {3.779551301494671*^9, 
   3.779551302661871*^9}, {3.7795530991370783`*^9, 3.7795531000121307`*^9}, {
   3.7795534942662897`*^9, 3.7795535506494904`*^9}},
 CellLabel->"In[1]:=",
 CellID->443871870],

Cell[BoxData[
 GraphicsBox[GeometricTransformationBox[{
    {GrayLevel[0.25], 
     FilledCurveBox[NCache[
      BezierCurve[{{5, 0}, {Rational[10, 3], 0}, {
         Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
         5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
         Rational[5, 3], 0}, {
         Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
         Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
         5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {10, 0}, {0, 0}, {
         10 3^Rational[-1, 2], Rational[10, 3]}}], 
       BezierCurve[{{5, 0}, {3.3333333333333335`, 0}, {7.216878364870323, 
         4.166666666666667}, {0, 0}, {2.886751345948129, 
         1.6666666666666667`}, {6.666666666666667, 0}, {
         1.6666666666666667`, 0}, {4.330127018922193, 2.5}, {
         1.4433756729740645`, 0.8333333333333334}, {8.660254037844386, 5}, {
         8.333333333333334, 0}, {10, 0}, {0, 0}, {5.773502691896258, 
         3.3333333333333335`}}]]]}, GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{5, 0}, {Rational[10, 3], 0}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
          Rational[5, 3], 0}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {10, 0}, {0, 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}}], 
        BezierCurve[{{5, 0}, {3.3333333333333335`, 0}, {7.216878364870323, 
          4.166666666666667}, {0, 0}, {2.886751345948129, 
          1.6666666666666667`}, {6.666666666666667, 0}, {
          1.6666666666666667`, 0}, {4.330127018922193, 2.5}, {
          1.4433756729740645`, 0.8333333333333334}, {8.660254037844386, 5}, {
          8.333333333333334, 0}, {10, 0}, {0, 0}, {5.773502691896258, 
          3.3333333333333335`}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
   NCache[{{{1, 0}, {0, 
     1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
      Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
      Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
      Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
     0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
      Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
      Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
      Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
     1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
     0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1, 
     0}, {0, -1}}, {{-0.5, 
     0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
     0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]]], "Output",
 CellChangeTimes->{
  3.779530189289238*^9, 3.779530695894944*^9, 3.779549725744611*^9, {
   3.7795500585496817`*^9, 3.779550099687768*^9}, {3.779550952798534*^9, 
   3.779550955245048*^9}, 3.7795511659654827`*^9, 3.7795513029739017`*^9, 
   3.779552077848742*^9, 3.7795531004430227`*^9, {3.779553497670311*^9, 
   3.779553551019264*^9}, 3.779554206936789*^9, 3.7795548227541122`*^9, 
   3.780352327078562*^9, 3.780396445982522*^9, 3.780396924221985*^9, 
   3.7803974446756573`*^9, 3.780399857639822*^9, 3.780400232352318*^9, 
   3.7804003719101877`*^9, 3.780401124857996*^9, 3.78040128793688*^9, 
   3.780401810438039*^9, 3.780402265004505*^9, 3.7804023932277412`*^9},
 CellLabel->"Out[2]=",
 CellID->1785267929]
}, Open  ]],

Cell["Here we generate a mandala with different option settings:", "Text",
 CellChangeTimes->{{3.779211108318758*^9, 3.779211124518875*^9}},
 CellID->1857041771],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "1", "]"}], "\n", 
 RowBox[{"RandomMandala", "[", 
  RowBox[{
   RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "7"}], ",", 
   RowBox[{"\"\<Radius\>\"", "\[Rule]", "12"}], ",", 
   RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "False"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7795500704301567`*^9, 3.77955008207556*^9}, {
   3.779550993576579*^9, 3.7795510096860743`*^9}, 3.779553111186166*^9, {
   3.779553206724779*^9, 3.779553220198059*^9}},
 CellLabel->"In[3]:=",
 CellID->1006543421],

Cell[BoxData[
 GraphicsBox[GeometricTransformationBox[
   {GrayLevel[0.25], 
    FilledCurveBox[NCache[
     BezierCurve[{{4 Sin[Rational[3, 14] Pi], 4 Cos[Rational[3, 14] Pi]}, {4, 
        0}, {0, 0}, {0, 0}, {10, 0}, {
        2 Sin[Rational[3, 14] Pi], 2 Cos[Rational[3, 14] Pi]}, {8, 0}, {
        6 Sin[Rational[3, 14] Pi], 6 Cos[Rational[3, 14] Pi]}, {6, 0}, {2, 
        0}, {12, 0}, {
        10 Sin[Rational[3, 14] Pi], 10 Cos[Rational[3, 14] Pi]}, {
        12 Sin[Rational[3, 14] Pi], 12 Cos[Rational[3, 14] Pi]}, {
        8 Sin[Rational[3, 14] Pi], 8 Cos[Rational[3, 14] Pi]}}], 
      BezierCurve[{{2.493959207434934, 3.127325929872119}, {4, 0}, {0, 0}, {0,
         0}, {10, 0}, {1.246979603717467, 1.5636629649360596`}, {8, 0}, {
        3.740938811152401, 4.690988894808179}, {6, 0}, {2, 0}, {12, 0}, {
        6.234898018587335, 7.818314824680298}, {7.481877622304802, 
        9.381977789616357}, {4.987918414869868, 6.254651859744238}}]]]}, 
   NCache[{{{1, 0}, {0, 
     1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
      Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
       Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
      Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
       Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
      Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
       Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
       Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
       Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
       Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
      Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
       Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {0, 
     1}}, {{0.6234898018587335, -0.7818314824680298}, {0.7818314824680298, 
     0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, {
     0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
     0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
     0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
     0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, {{
     0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
     0.6234898018587335}}}]]]], "Output",
 CellChangeTimes->{
  3.779550961405864*^9, 3.7795510105166073`*^9, 3.7795520778581676`*^9, 
   3.77955311158782*^9, {3.779553207519372*^9, 3.779553220460392*^9}, 
   3.7795542069458637`*^9, 3.779554822812557*^9, 3.7803523270898046`*^9, 
   3.780396448566662*^9, 3.7803969242338552`*^9, 3.780397444728104*^9, 
   3.7803998576826267`*^9, 3.7804002323628817`*^9, 3.78040037194368*^9, 
   3.7804011248715763`*^9, 3.780401287949215*^9, 3.780401810472773*^9, 
   3.7804022650458612`*^9, 3.7804023932923393`*^9},
 CellLabel->"Out[4]=",
 CellID->356566819]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scope", "Subsection",
 CellChangeTimes->{{3.780355712863207*^9, 3.780355714382448*^9}},
 CellLabel->"In[5]:=",
 CellID->555722944],

Cell["\<\
There are two modes of making random mandalas: (i) single-mandala mode and \
(ii) multi-mandala mode. The multi-mandala mode is activated by giving the \
\[OpenCurlyDoubleQuote]Radius\[CloseCurlyDoubleQuote] option a list of \
positive reals.\
\>", "Text",
 CellChangeTimes->{{3.780393206269218*^9, 3.7803932386519327`*^9}, {
  3.780393288827743*^9, 3.7803933339445*^9}, {3.780393419274227*^9, 
  3.780393516632539*^9}, {3.780398532091058*^9, 3.78039854484061*^9}},
 CellID->396379541],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->1616697876],

Cell["\<\
Here are gray-level and colorized mandalas generated with the single-mandala \
mode:\
\>", "Text",
 CellChangeTimes->{{3.780393496978554*^9, 3.780393520502687*^9}, {
  3.780394181923073*^9, 3.78039420939526*^9}, {3.7803943496292677`*^9, 
  3.7803943863838882`*^9}, {3.780394537687252*^9, 3.78039453931781*^9}, {
  3.780394781377273*^9, 3.780394791345282*^9}, {3.780397387114999*^9, 
  3.780397387417383*^9}, {3.7803985731878853`*^9, 3.7803985775745497`*^9}},
 CellID->205003358],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "54929", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomMandala", "[", 
    RowBox[{"\"\<Radius\>\"", "\[Rule]", "10"}], "]"}], ",", "4"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.780394398716584*^9, 3.780394499054377*^9}, 
   3.780394562193512*^9, {3.7803946134200573`*^9, 3.78039475972418*^9}, 
   3.780395634508923*^9, {3.7803957201416073`*^9, 3.780395763359642*^9}, 
   3.780395888353071*^9, {3.780396969599572*^9, 3.780396990625786*^9}, 
   3.7803970395269423`*^9, {3.780397088335663*^9, 3.7803970888177423`*^9}, 
   3.780397333044794*^9, {3.780400866518042*^9, 3.780400867032325*^9}, {
   3.7804010301959047`*^9, 3.780401031825234*^9}, {3.780402110303616*^9, 
   3.780402124931271*^9}},
 CellLabel->"In[1]:=",
 CellID->1827208279],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       PolygonBox[
        NCache[{{Rational[5, 3], 0}, {Rational[25, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {10, 0}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[20, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
          Rational[10, 3], 0}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}}, {{1.6666666666666667`, 0}, {
          8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
          10, 0}, {1.4433756729740645`, 0.8333333333333334}, {
          6.666666666666667, 0}, {5, 0}, {8.660254037844386, 5}, {0, 0}, {
          3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {
          7.216878364870323, 4.166666666666667}, {0, 0}, {2.886751345948129, 
          1.6666666666666667`}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {Rational[25, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {10, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[20, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
           Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}}, {{1.6666666666666667`, 0}, {
           8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
           10, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           6.666666666666667, 0}, {5, 0}, {8.660254037844386, 5}, {0, 0}, {
           3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {
           7.216878364870323, 4.166666666666667}, {0, 0}, {2.886751345948129, 
           1.6666666666666667`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       LineBox[NCache[{{5, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[25, 3], 0}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
          Rational[20, 3], 0}, {Rational[10, 3], 0}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
          Rational[5, 3], 0}}, {{5, 0}, {8.660254037844386, 5}, {
          8.333333333333334, 0}, {7.216878364870323, 4.166666666666667}, {
          1.4433756729740645`, 0.8333333333333334}, {10, 0}, {
          2.886751345948129, 1.6666666666666667`}, {5.773502691896258, 
          3.3333333333333335`}, {0, 0}, {6.666666666666667, 0}, {
          3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {0, 0}, {
          1.6666666666666667`, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        LineBox[NCache[{{5, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[25, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           Rational[20, 3], 0}, {Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
           Rational[5, 3], 0}}, {{5, 0}, {8.660254037844386, 5}, {
           8.333333333333334, 0}, {7.216878364870323, 4.166666666666667}, {
           1.4433756729740645`, 0.8333333333333334}, {10, 0}, {
           2.886751345948129, 1.6666666666666667`}, {5.773502691896258, 
           3.3333333333333335`}, {0, 0}, {6.666666666666667, 0}, {
           3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {0, 0}, {
           1.6666666666666667`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[10, 3], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
          Rational[5, 3], 0}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
          Rational[20, 3], 0}, {Rational[25, 3], 0}, {5, 0}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}}, {{
          3.3333333333333335`, 0}, {0, 0}, {8.660254037844386, 5}, {
          1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
          1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
          6.666666666666667, 0}, {8.333333333333334, 0}, {5, 0}, {
          4.330127018922193, 2.5}, {2.886751345948129, 1.6666666666666667`}, {
          10, 0}, {5.773502691896258, 3.3333333333333335`}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[10, 3], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
           Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[20, 3], 0}, {Rational[25, 3], 0}, {5, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}}, {{
           3.3333333333333335`, 0}, {0, 0}, {8.660254037844386, 5}, {
           1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           6.666666666666667, 0}, {8.333333333333334, 0}, {5, 0}, {
           4.330127018922193, 2.5}, {2.886751345948129, 
           1.6666666666666667`}, {10, 0}, {5.773502691896258, 
           3.3333333333333335`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       PolygonBox[
        NCache[{{5 3^Rational[1, 2], 5}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {
          Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[10, 3], 0}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}}, {{
          8.660254037844386, 5}, {2.886751345948129, 1.6666666666666667`}, {
          8.333333333333334, 0}, {6.666666666666667, 0}, {0, 0}, {
          1.6666666666666667`, 0}, {5.773502691896258, 3.3333333333333335`}, {
          5, 0}, {1.4433756729740645`, 0.8333333333333334}, {
          3.3333333333333335`, 0}, {7.216878364870323, 4.166666666666667}, {0,
           0}, {4.330127018922193, 2.5}, {10, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{5 3^Rational[1, 2], 5}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[10, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}}, {{
           8.660254037844386, 5}, {2.886751345948129, 1.6666666666666667`}, {
           8.333333333333334, 0}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {5, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {3.3333333333333335`, 0}, {7.216878364870323, 
           4.166666666666667}, {0, 0}, {4.330127018922193, 2.5}, {10, 
           0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.780395754237809*^9, 3.7803957638166656`*^9}, 
   3.780395888748962*^9, 3.7803964518909903`*^9, 3.780396666923264*^9, 
   3.7803969243639593`*^9, {3.7803969867712317`*^9, 3.780396991013547*^9}, 
   3.780397040213585*^9, 3.780397089063835*^9, 3.780397190504829*^9, 
   3.780397333382917*^9, 3.780397444820895*^9, 3.7803998578198023`*^9, 
   3.7804002325003033`*^9, 3.780400372054669*^9, 3.7804008672573643`*^9, 
   3.780401040328208*^9, 3.780401124975657*^9, 3.780401288063802*^9, 
   3.780401810581596*^9, {3.780402111473281*^9, 3.7804021255651617`*^9}, 
   3.780402265152874*^9, 3.780402393396572*^9},
 CellLabel->"Out[2]=",
 CellID->1339151803]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "54929", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomMandala", "[", 
    RowBox[{
     RowBox[{"\"\<Radius\>\"", "\[Rule]", "10"}], ",", 
     RowBox[{"ColorFunction", "\[Rule]", 
      RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}]}]}], "]"}], ",", 
   "4"}], "]"}]}], "Input",
 CellChangeTimes->{{3.780394398716584*^9, 3.780394499054377*^9}, 
   3.780394562193512*^9, {3.7803946134200573`*^9, 3.78039475972418*^9}, 
   3.780395634508923*^9, {3.7803957201416073`*^9, 3.780395763359642*^9}, 
   3.780395888353071*^9, {3.780396969599572*^9, 3.780396990625786*^9}, {
   3.7803970395269423`*^9, 3.780397047805448*^9}, {3.780397091226653*^9, 
   3.780397091764803*^9}, 3.780397328398294*^9, {3.7804008635815573`*^9, 
   3.780400864039873*^9}, {3.7804009418485527`*^9, 3.780401044617303*^9}, {
   3.780402105342958*^9, 3.7804021279799232`*^9}},
 CellLabel->"In[3]:=",
 CellID->358079763],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {Rational[25, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {10, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[20, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
           Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}}, {{1.6666666666666667`, 0}, {
           8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
           10, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           6.666666666666667, 0}, {5, 0}, {8.660254037844386, 5}, {0, 0}, {
           3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {
           7.216878364870323, 4.166666666666667}, {0, 0}, {2.886751345948129, 
           1.6666666666666667`}}]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
         PolygonBox[
          NCache[{{Rational[5, 3], 0}, {Rational[25, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {10, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[20, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}}, {{
            1.6666666666666667`, 0}, {8.333333333333334, 0}, {
            5.773502691896258, 3.3333333333333335`}, {10, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {
            6.666666666666667, 0}, {5, 0}, {8.660254037844386, 5}, {0, 0}, {
            3.3333333333333335`, 0}, {4.330127018922193, 2.5}, {
            7.216878364870323, 4.166666666666667}, {0, 0}, {2.886751345948129,
             1.6666666666666667`}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
            Rational[20, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
            Rational[10, 3], 0}, {Rational[5, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}}], 
          BezierCurve[{{7.216878364870323, 4.166666666666667}, {
            1.4433756729740645`, 0.8333333333333334}, {5, 0}, {
            6.666666666666667, 0}, {0, 0}, {4.330127018922193, 2.5}, {
            8.660254037844386, 5}, {8.333333333333334, 0}, {2.886751345948129,
             1.6666666666666667`}, {10, 0}, {3.3333333333333335`, 0}, {
            1.6666666666666667`, 0}, {5.773502691896258, 
            3.3333333333333335`}, {0, 0}}]]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
             Rational[20, 3], 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
             Rational[10, 3], 0}, {Rational[5, 3], 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}}], 
           BezierCurve[{{7.216878364870323, 4.166666666666667}, {
             1.4433756729740645`, 0.8333333333333334}, {5, 0}, {
             6.666666666666667, 0}, {0, 0}, {4.330127018922193, 2.5}, {
             8.660254037844386, 5}, {8.333333333333334, 0}, {
             2.886751345948129, 1.6666666666666667`}, {10, 0}, {
             3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {
             5.773502691896258, 3.3333333333333335`}, {0, 0}}]]]}}, {{{1, 
        0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
           5, 0}, {Rational[25, 3], 0}, {0, 0}, {10, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}, {{
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {5, 0}, {8.333333333333334, 0}, {0, 0}, {10, 
           0}, {4.330127018922193, 2.5}, {6.666666666666667, 0}, {
           7.216878364870323, 4.166666666666667}, {3.3333333333333335`, 0}, {
           8.660254037844386, 5}, {0, 0}, {5.773502691896258, 
           3.3333333333333335`}, {1.4433756729740645`, 
           0.8333333333333334}}]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
         PolygonBox[
          NCache[{{Rational[5, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {
            Rational[25, 3], 0}, {0, 0}, {10, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}, {{
            1.6666666666666667`, 0}, {2.886751345948129, 
            1.6666666666666667`}, {5, 0}, {8.333333333333334, 0}, {0, 0}, {10,
             0}, {4.330127018922193, 2.5}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {3.3333333333333335`, 0}, {
            8.660254037844386, 5}, {0, 0}, {5.773502691896258, 
            3.3333333333333335`}, {1.4433756729740645`, 
            0.8333333333333334}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
        PolygonBox[
         NCache[{{Rational[25, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
           Rational[5, 3], 0}, {0, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
           5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {5, 
           0}, {10, 0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{
           8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
           6.666666666666667, 0}, {1.6666666666666667`, 0}, {0, 0}, {
           5.773502691896258, 3.3333333333333335`}, {
           3.3333333333333335`, 0}, {8.660254037844386, 5}, {
           1.4433756729740645`, 0.8333333333333334}, {0, 0}, {5, 0}, {10, 
           0}, {4.330127018922193, 2.5}, {7.216878364870323, 
           4.166666666666667}}]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
         PolygonBox[
          NCache[{{Rational[25, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
            Rational[5, 3], 0}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
            5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {5, 
            0}, {10, 0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            6.666666666666667, 0}, {1.6666666666666667`, 0}, {0, 0}, {
            5.773502691896258, 3.3333333333333335`}, {
            3.3333333333333335`, 0}, {8.660254037844386, 5}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {5, 0}, {10, 
            0}, {4.330127018922193, 2.5}, {7.216878364870323, 
            4.166666666666667}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.780397048161131*^9, 3.780397092007296*^9, 3.780397191725655*^9, 
   3.7803973288527107`*^9, 3.7803974448776283`*^9, 3.78039985786707*^9, 
   3.780400232548769*^9, 3.780400372089654*^9, {3.7804008605739183`*^9, 
   3.780400864334991*^9}, {3.7804009470298557`*^9, 3.780401044892887*^9}, 
   3.780401125039598*^9, 3.7804012881003513`*^9, 3.780401810618803*^9, {
   3.780402106411892*^9, 3.780402128305264*^9}, 3.7804022651974087`*^9, 
   3.780402393471637*^9},
 CellLabel->"Out[4]=",
 CellID->1495732461]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->1534391003],

Cell["\<\
Here are gray-level and colorized mandalas generated with a multi-mandala \
mode:\
\>", "Text",
 CellChangeTimes->{{3.780394510147457*^9, 3.780394532883582*^9}, {
  3.780394939329956*^9, 3.7803949435827017`*^9}},
 CellID->1525954245],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "54929", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomMandala", "[", 
    RowBox[{"\"\<Radius\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "5", ",", "3"}], "}"}]}], "]"}], ",", "4"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.780395818432042*^9, 3.7803958499327707`*^9}, {
   3.7803959124277143`*^9, 3.7803959521232643`*^9}, {3.780396239682152*^9, 
   3.780396258934867*^9}, 3.780396399537137*^9, {3.7803964682810593`*^9, 
   3.780396468705717*^9}, {3.78039694378224*^9, 3.7803969478639174`*^9}, {
   3.780397094162942*^9, 3.7803971110156813`*^9}, 3.780397310836629*^9, {
   3.7803998954681787`*^9, 3.780399914501299*^9}, {3.7804000778345346`*^9, 
   3.780400078552199*^9}, {3.780400124578426*^9, 3.780400149765416*^9}, 
   3.780400194606288*^9, 3.780400493128027*^9},
 CellLabel->"In[1]:=",
 CellID->669079167],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {GrayLevel[0.30000000000000004`], GeometricTransformationBox[{
        {GrayLevel[0.30000000000000004`], 
         PolygonBox[
          NCache[{{0, 0}, {0, 0}, {Rational[14, 3], 0}, {
            7 3^Rational[-1, 2], Rational[7, 3]}, {
            Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
            Rational[7, 3], 0}, {
            Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {7, 0}}, {{0, 
            0}, {0, 0}, {4.666666666666667, 0}, {4.041451884327381, 
            2.3333333333333335`}, {6.06217782649107, 3.5}, {
            2.3333333333333335`, 0}, {2.0207259421636903`, 
            1.1666666666666667`}, {7, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.30000000000000004`], 
          PolygonBox[
           NCache[{{0, 0}, {0, 0}, {Rational[14, 3], 0}, {
             7 3^Rational[-1, 2], Rational[7, 3]}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
             Rational[7, 3], 0}, {
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {7, 0}}, {{0, 
             0}, {0, 0}, {4.666666666666667, 0}, {4.041451884327381, 
             2.3333333333333335`}, {6.06217782649107, 3.5}, {
             2.3333333333333335`, 0}, {2.0207259421636903`, 
             1.1666666666666667`}, {7, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.8], GeometricTransformationBox[{
        {GrayLevel[0.8], 
         PolygonBox[
          NCache[{{Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 3], 0}, {5, 0}, {0, 0}}, {{3.3333333333333335`, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
            2.886751345948129, 1.6666666666666667`}, {4.330127018922193, 
            2.5}, {1.6666666666666667`, 0}, {5, 0}, {0, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.8], 
          PolygonBox[
           NCache[{{Rational[10, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 3], 0}, {5, 0}, {0, 0}}, {{3.3333333333333335`, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
             2.886751345948129, 1.6666666666666667`}, {4.330127018922193, 
             2.5}, {1.6666666666666667`, 0}, {5, 0}, {0, 0}}]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.30000000000000004`], GeometricTransformationBox[{
        {GrayLevel[0.30000000000000004`], 
         PolygonBox[
          NCache[{{1, 0}, {Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
            Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {
            3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {2, 0}}, {{1, 0}, {
            0.8660254037844386, 0.5}, {2.598076211353316, 1.5}, {3, 0}, {
            1.7320508075688772`, 1}, {0, 0}, {0, 0}, {2, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.30000000000000004`], 
          PolygonBox[
           NCache[{{1, 0}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
             Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {
             3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {2, 0}}, {{1, 0}, {
             0.8660254037844386, 0.5}, {2.598076211353316, 1.5}, {3, 0}, {
             1.7320508075688772`, 1}, {0, 0}, {0, 0}, {2, 0}}]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {GrayLevel[0.2], GeometricTransformationBox[{
        {GrayLevel[0.2], 
         LineBox[NCache[{{0, 0}, {
            Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
            Rational[14, 3], 0}, {7 3^Rational[-1, 2], Rational[7, 3]}, {7, 
            0}, {Rational[7, 3], 0}, {
            Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{0, 0}, {
            2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
            4.666666666666667, 0}, {4.041451884327381, 2.3333333333333335`}, {
            7, 0}, {2.3333333333333335`, 0}, {6.06217782649107, 3.5}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.2], 
          LineBox[NCache[{{0, 0}, {
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
             Rational[14, 3], 0}, {7 3^Rational[-1, 2], Rational[7, 3]}, {7, 
             0}, {Rational[7, 3], 0}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{0, 0}, {
             2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
             4.666666666666667, 0}, {4.041451884327381, 
             2.3333333333333335`}, {7, 0}, {2.3333333333333335`, 0}, {
             6.06217782649107, 3.5}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.9], GeometricTransformationBox[{
        {GrayLevel[0.9], 
         LineBox[NCache[{{Rational[10, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}}, {{
            3.3333333333333335`, 0}, {0, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {1.6666666666666667`, 0}, {0, 0}, {
            4.330127018922193, 2.5}, {5, 0}, {2.886751345948129, 
            1.6666666666666667`}}]]}, GeometricTransformationBox[
         {GrayLevel[0.9], 
          LineBox[NCache[{{Rational[10, 3], 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 3], 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}}, {{
             3.3333333333333335`, 0}, {0, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {1.6666666666666667`, 0}, {0, 0}, {
             4.330127018922193, 2.5}, {5, 0}, {2.886751345948129, 
             1.6666666666666667`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.9], GeometricTransformationBox[{
        {GrayLevel[0.9], 
         LineBox[NCache[{{3, 0}, {1, 0}, {3^Rational[1, 2], 1}, {
            Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {0, 0}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {2, 0}, {0, 
            0}}, {{3, 0}, {1, 0}, {1.7320508075688772`, 1}, {
            2.598076211353316, 1.5}, {0, 0}, {0.8660254037844386, 0.5}, {2, 
            0}, {0, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.9], 
          LineBox[NCache[{{3, 0}, {1, 0}, {3^Rational[1, 2], 1}, {
             Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {0, 0}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {2, 0}, {0, 
             0}}, {{3, 0}, {1, 0}, {1.7320508075688772`, 1}, {
             2.598076211353316, 1.5}, {0, 0}, {0.8660254037844386, 0.5}, {2, 
             0}, {0, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {GrayLevel[0.7000000000000001], GeometricTransformationBox[{
        {GrayLevel[0.7000000000000001], 
         FilledCurveBox[NCache[
          BezierCurve[{{7, 0}, {0, 0}, {0, 0}, {Rational[7, 3], 0}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
             Rational[14, 3], 0}, {7 3^Rational[-1, 2], Rational[7, 3]}}], 
           BezierCurve[{{7, 0}, {0, 0}, {0, 0}, {2.3333333333333335`, 0}, {
             6.06217782649107, 3.5}, {2.0207259421636903`, 
             1.1666666666666667`}, {4.666666666666667, 0}, {4.041451884327381,
              2.3333333333333335`}}]]]}, GeometricTransformationBox[
         {GrayLevel[0.7000000000000001], 
          FilledCurveBox[NCache[
           BezierCurve[{{7, 0}, {0, 0}, {0, 0}, {Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
              Rational[14, 3], 0}, {7 3^Rational[-1, 2], Rational[7, 3]}}], 
            BezierCurve[{{7, 0}, {0, 0}, {0, 0}, {2.3333333333333335`, 0}, {
              6.06217782649107, 3.5}, {2.0207259421636903`, 
              1.1666666666666667`}, {4.666666666666667, 0}, {
              4.041451884327381, 2.3333333333333335`}}]]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.1], GeometricTransformationBox[{
        {GrayLevel[0.1], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 
             0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
             Rational[5, 3], 0}, {0, 0}}], 
           BezierCurve[{{4.330127018922193, 2.5}, {5, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
             1.6666666666666667`, 0}, {0, 0}}]]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.1], 
          FilledCurveBox[NCache[
           BezierCurve[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5,
               0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
              Rational[10, 3], 0}, {
              Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
              Rational[5, 3], 0}, {0, 0}}], 
            BezierCurve[{{4.330127018922193, 2.5}, {5, 0}, {2.886751345948129,
               1.6666666666666667`}, {3.3333333333333335`, 0}, {
              1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
              1.6666666666666667`, 0}, {0, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.2], GeometricTransformationBox[{
        {GrayLevel[0.2], 
         FilledCurveBox[NCache[
          BezierCurve[{{2, 0}, {3^Rational[1, 2], 1}, {0, 0}, {1, 0}, {0, 
             0}, {3, 0}, {Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
             Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
           BezierCurve[{{2, 0}, {1.7320508075688772`, 1}, {0, 0}, {1, 0}, {0, 
             0}, {3, 0}, {0.8660254037844386, 0.5}, {2.598076211353316, 
             1.5}}]]]}, GeometricTransformationBox[
         {GrayLevel[0.2], 
          FilledCurveBox[NCache[
           BezierCurve[{{2, 0}, {3^Rational[1, 2], 1}, {0, 0}, {1, 0}, {0, 
              0}, {3, 0}, {Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
              Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
            BezierCurve[{{2, 0}, {1.7320508075688772`, 1}, {0, 0}, {1, 0}, {0,
               0}, {3, 0}, {0.8660254037844386, 0.5}, {2.598076211353316, 
              1.5}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {GrayLevel[0.5], GeometricTransformationBox[{
        {GrayLevel[0.5], 
         LineBox[NCache[{{Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
            7 3^Rational[-1, 2], Rational[7, 3]}, {7, 0}, {
            Rational[14, 3], 0}, {
            Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
            Rational[7, 3], 0}, {0, 0}, {0, 0}}, {{2.0207259421636903`, 
            1.1666666666666667`}, {4.041451884327381, 2.3333333333333335`}, {
            7, 0}, {4.666666666666667, 0}, {6.06217782649107, 3.5}, {
            2.3333333333333335`, 0}, {0, 0}, {0, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.5], 
          LineBox[NCache[{{
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
             7 3^Rational[-1, 2], Rational[7, 3]}, {7, 0}, {
             Rational[14, 3], 0}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
             Rational[7, 3], 0}, {0, 0}, {0, 0}}, {{2.0207259421636903`, 
             1.1666666666666667`}, {4.041451884327381, 2.3333333333333335`}, {
             7, 0}, {4.666666666666667, 0}, {6.06217782649107, 3.5}, {
             2.3333333333333335`, 0}, {0, 0}, {0, 0}}]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.9], GeometricTransformationBox[{
        {GrayLevel[0.9], 
         LineBox[NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}}, {{
            2.886751345948129, 1.6666666666666667`}, {4.330127018922193, 
            2.5}, {3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 
            0}, {0, 0}, {1.4433756729740645`, 0.8333333333333334}, {5, 0}}]]},
         GeometricTransformationBox[
         {GrayLevel[0.9], 
          LineBox[NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}}, {{
             2.886751345948129, 1.6666666666666667`}, {4.330127018922193, 
             2.5}, {3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 
             0}, {0, 0}, {1.4433756729740645`, 0.8333333333333334}, {5, 
             0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {GrayLevel[0.9], GeometricTransformationBox[{
        {GrayLevel[0.9], 
         LineBox[NCache[{{2, 0}, {3, 0}, {1, 0}, {3^Rational[1, 2], 1}, {0, 
            0}, {Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}}, {{2, 
            0}, {3, 0}, {1, 0}, {1.7320508075688772`, 1}, {0, 0}, {
            2.598076211353316, 1.5}, {0.8660254037844386, 0.5}, {0, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.9], 
          LineBox[NCache[{{2, 0}, {3, 0}, {1, 0}, {3^Rational[1, 2], 1}, {0, 
             0}, {Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}}, {{2, 
             0}, {3, 0}, {1, 0}, {1.7320508075688772`, 1}, {0, 0}, {
             2.598076211353316, 1.5}, {0.8660254037844386, 0.5}, {0, 
             0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7803958192394133`*^9, 3.7803958506844873`*^9}, {
   3.7803958983360567`*^9, 3.780395952468265*^9}, {3.780396240325055*^9, 
   3.780396259238031*^9}, 3.780396400250524*^9, {3.780396456390711*^9, 
   3.7803964690357027`*^9}, {3.78039666983661*^9, 3.780396689877343*^9}, {
   3.780396924485264*^9, 3.78039694826442*^9}, {3.780397095241826*^9, 
   3.7803971114441233`*^9}, 3.7803971943407173`*^9, 3.780397311586341*^9, 
   3.7803974449450912`*^9, 3.7803998579230328`*^9, {3.7803998958703003`*^9, 
   3.780399914834762*^9}, 3.7804000788708982`*^9, {3.7804001270764008`*^9, 
   3.780400150097171*^9}, 3.78040019491459*^9, 3.780400232605166*^9, 
   3.780400372136203*^9, 3.7804004934398327`*^9, 3.780401125220106*^9, 
   3.7804012881515417`*^9, 3.780401810663563*^9, 3.780402265250587*^9, 
   3.780402393545755*^9},
 CellLabel->"Out[2]=",
 CellID->331900245]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "54929", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomMandala", "[", 
    RowBox[{
     RowBox[{"\"\<Radius\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"7", ",", "5", ",", "3"}], "}"}]}], ",", 
     RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}]}], "]"}], ",", 
   "4"}], "]"}]}], "Input",
 CellChangeTimes->{{3.780395818432042*^9, 3.7803958499327707`*^9}, {
   3.7803959124277143`*^9, 3.7803959910603523`*^9}, {3.7803960951126833`*^9, 
   3.780396230430608*^9}, {3.780396261597587*^9, 3.7803962832941513`*^9}, 
   3.780396396747696*^9, {3.780396464017982*^9, 3.780396464452886*^9}, {
   3.780396951409787*^9, 3.7803969539270687`*^9}, {3.780397099158125*^9, 
   3.780397105301323*^9}, {3.78039730387854*^9, 3.7803973044723253`*^9}, {
   3.780399906263817*^9, 3.780399919991992*^9}, {3.7804000821761427`*^9, 
   3.780400136331676*^9}, 3.780400198376176*^9, 3.780400496177256*^9},
 CellLabel->"In[3]:=",
 CellID->1730229550],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
      GeometricTransformationBox[{
        {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
         {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
          PolygonBox[
           NCache[{{0, 0}, {0, 0}, {Rational[14, 3], 0}, {
             7 3^Rational[-1, 2], Rational[7, 3]}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
             Rational[7, 3], 0}, {
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {7, 0}}, {{0, 
             0}, {0, 0}, {4.666666666666667, 0}, {4.041451884327381, 
             2.3333333333333335`}, {6.06217782649107, 3.5}, {
             2.3333333333333335`, 0}, {2.0207259421636903`, 
             1.1666666666666667`}, {7, 0}}]]}}, GeometricTransformationBox[
         {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
          {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
           PolygonBox[
            NCache[{{0, 0}, {0, 0}, {Rational[14, 3], 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {
              Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {7, 0}}, {{0,
               0}, {0, 0}, {4.666666666666667, 0}, {4.041451884327381, 
              2.3333333333333335`}, {6.06217782649107, 3.5}, {
              2.3333333333333335`, 0}, {2.0207259421636903`, 
              1.1666666666666667`}, {7, 0}}]]}}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
      GeometricTransformationBox[{
        {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
         {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
          PolygonBox[
           NCache[{{5, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}}, {{5, 0}, {
             4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {3.3333333333333335`, 0}, {
             1.6666666666666667`, 0}, {0, 0}, {0, 0}, {2.886751345948129, 
             1.6666666666666667`}}]]}}, GeometricTransformationBox[
         {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
          {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
           PolygonBox[
            NCache[{{5, 0}, {
              Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
              Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
              Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}, {
              5 3^Rational[-1, 2], Rational[5, 3]}}, {{5, 0}, {
              4.330127018922193, 2.5}, {1.4433756729740645`, 
              0.8333333333333334}, {3.3333333333333335`, 0}, {
              1.6666666666666667`, 0}, {0, 0}, {0, 0}, {2.886751345948129, 
              1.6666666666666667`}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
      GeometricTransformationBox[{
        {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
         {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
          PolygonBox[
           NCache[{{0, 0}, {2, 0}, {0, 0}, {3^Rational[1, 2], 1}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
             Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {1, 
             0}}, {{0, 0}, {2, 0}, {0, 0}, {1.7320508075688772`, 1}, {
             0.8660254037844386, 0.5}, {2.598076211353316, 1.5}, {3, 0}, {1, 
             0}}]]}}, GeometricTransformationBox[
         {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
          {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
           PolygonBox[
            NCache[{{0, 0}, {2, 0}, {0, 0}, {3^Rational[1, 2], 1}, {
              Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
              Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {1, 
              0}}, {{0, 0}, {2, 0}, {0, 0}, {1.7320508075688772`, 1}, {
              0.8660254037844386, 0.5}, {2.598076211353316, 1.5}, {3, 0}, {1, 
              0}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
        {RGBColor[0.513417, 0.72992, 0.440682], 
         {RGBColor[0.513417, 0.72992, 0.440682], 
          LineBox[NCache[{{Rational[7, 3], 0}, {
             Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {0, 
             0}, {7, 0}, {7 3^Rational[-1, 2], Rational[7, 3]}, {
             Rational[14, 3], 0}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{
             2.3333333333333335`, 0}, {2.0207259421636903`, 
             1.1666666666666667`}, {0, 0}, {0, 0}, {7, 0}, {4.041451884327381,
              2.3333333333333335`}, {4.666666666666667, 0}, {6.06217782649107,
              3.5}}]]}}, GeometricTransformationBox[
         {RGBColor[0.513417, 0.72992, 0.440682], 
          {RGBColor[0.513417, 0.72992, 0.440682], 
           LineBox[NCache[{{Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {0, 
              0}, {7, 0}, {7 3^Rational[-1, 2], Rational[7, 3]}, {
              Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{
              2.3333333333333335`, 0}, {2.0207259421636903`, 
              1.1666666666666667`}, {0, 0}, {0, 0}, {7, 0}, {
              4.041451884327381, 2.3333333333333335`}, {
              4.666666666666667, 0}, {6.06217782649107, 3.5}}]]}}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
      GeometricTransformationBox[{
        {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
         {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
          LineBox[NCache[{{0, 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
             Rational[5, 3], 0}}, {{0, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {5, 0}, {
             4.330127018922193, 2.5}, {0, 0}, {1.6666666666666667`, 0}}]]}}, 
        GeometricTransformationBox[
         {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           LineBox[NCache[{{0, 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
              Rational[10, 3], 0}, {
              Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
              Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
              Rational[5, 3], 0}}, {{0, 0}, {2.886751345948129, 
              1.6666666666666667`}, {3.3333333333333335`, 0}, {
              1.4433756729740645`, 0.8333333333333334}, {5, 0}, {
              4.330127018922193, 2.5}, {0, 0}, {
              1.6666666666666667`, 0}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.2484884, 0.3863264, 0.813373], GeometricTransformationBox[{
        {RGBColor[0.2484884, 0.3863264, 0.813373], 
         {RGBColor[0.2484884, 0.3863264, 0.813373], 
          LineBox[NCache[{{Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
             3^Rational[1, 2], 1}, {3, 0}, {2, 0}, {1, 0}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}, {0, 
             0}}, {{2.598076211353316, 1.5}, {1.7320508075688772`, 1}, {3, 
             0}, {2, 0}, {1, 0}, {0.8660254037844386, 0.5}, {0, 0}, {0, 
             0}}]]}}, GeometricTransformationBox[
         {RGBColor[0.2484884, 0.3863264, 0.813373], 
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           LineBox[NCache[{{
              Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
              3^Rational[1, 2], 1}, {3, 0}, {2, 0}, {1, 0}, {
              Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}, {0, 
              0}}, {{2.598076211353316, 1.5}, {1.7320508075688772`, 1}, {3, 
              0}, {2, 0}, {1, 0}, {0.8660254037844386, 0.5}, {0, 0}, {0, 
              0}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
      GeometricTransformationBox[{
        {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
         {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
          PolygonBox[
           NCache[{{Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
             Rational[14, 3], 0}, {0, 0}, {
             7 3^Rational[-1, 2], Rational[7, 3]}, {7, 0}, {
             Rational[7, 3], 0}, {0, 0}, {
             Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{
             2.0207259421636903`, 1.1666666666666667`}, {
             4.666666666666667, 0}, {0, 0}, {4.041451884327381, 
             2.3333333333333335`}, {7, 0}, {2.3333333333333335`, 0}, {0, 0}, {
             6.06217782649107, 3.5}}]]}}, GeometricTransformationBox[
         {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
          {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
           PolygonBox[
            NCache[{{Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {
              Rational[14, 3], 0}, {0, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {7, 0}, {
              Rational[7, 3], 0}, {0, 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}, {{
              2.0207259421636903`, 1.1666666666666667`}, {
              4.666666666666667, 0}, {0, 0}, {4.041451884327381, 
              2.3333333333333335`}, {7, 0}, {2.3333333333333335`, 0}, {0, 
              0}, {6.06217782649107, 3.5}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]},
        NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
      GeometricTransformationBox[{
        {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
         {FaceForm[RGBColor[
          0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
          PolygonBox[
           NCache[{{0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}, {5, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 3], 0}, {0, 0}}, {{0, 0}, {4.330127018922193, 2.5}, {
             3.3333333333333335`, 0}, {5, 0}, {2.886751345948129, 
             1.6666666666666667`}, {1.4433756729740645`, 
             0.8333333333333334}, {1.6666666666666667`, 0}, {0, 0}}]]}}, 
        GeometricTransformationBox[
         {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
          {FaceForm[RGBColor[
           0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
           PolygonBox[
            NCache[{{0, 0}, {
              Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
              Rational[10, 3], 0}, {5, 0}, {
              5 3^Rational[-1, 2], Rational[5, 3]}, {
              Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
              Rational[5, 3], 0}, {0, 0}}, {{0, 0}, {4.330127018922193, 
              2.5}, {3.3333333333333335`, 0}, {5, 0}, {2.886751345948129, 
              1.6666666666666667`}, {1.4433756729740645`, 
              0.8333333333333334}, {1.6666666666666667`, 0}, {0, 0}}]]}}, {{{
          1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
      GeometricTransformationBox[{
        {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
         {FaceForm[RGBColor[
          0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
          PolygonBox[
           NCache[{{2, 0}, {
             Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {1, 0}, {0, 
             0}, {3, 0}, {0, 0}, {3^Rational[1, 2], 1}, {
             Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}, {{2, 0}, {
             0.8660254037844386, 0.5}, {1, 0}, {0, 0}, {3, 0}, {0, 0}, {
             1.7320508075688772`, 1}, {2.598076211353316, 1.5}}]]}}, 
        GeometricTransformationBox[
         {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
          {FaceForm[RGBColor[
           0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
           PolygonBox[
            NCache[{{2, 0}, {
              Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {1, 0}, {0, 
              0}, {3, 0}, {0, 0}, {3^Rational[1, 2], 1}, {
              Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}, {{2, 0}, {
              0.8660254037844386, 0.5}, {1, 0}, {0, 0}, {3, 0}, {0, 0}, {
              1.7320508075688772`, 1}, {2.598076211353316, 1.5}}]]}}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}], ",", 
   GraphicsBox[{
     {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
      GeometricTransformationBox[{
        {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
         {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {0, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {7, 0}, {
              Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}}], 
            BezierCurve[{{0, 0}, {0, 0}, {4.041451884327381, 
              2.3333333333333335`}, {4.666666666666667, 0}, {6.06217782649107,
               3.5}, {7, 0}, {2.3333333333333335`, 0}, {2.0207259421636903`, 
              1.1666666666666667`}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
          {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
           FilledCurveBox[NCache[
            BezierCurve[{{0, 0}, {0, 0}, {
               7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[14, 3], 0}, {
               Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}, {7, 0}, {
               Rational[7, 3], 0}, {
               Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}}], 
             BezierCurve[{{0, 0}, {0, 0}, {4.041451884327381, 
               2.3333333333333335`}, {4.666666666666667, 0}, {
               6.06217782649107, 3.5}, {7, 0}, {2.3333333333333335`, 0}, {
               2.0207259421636903`, 1.1666666666666667`}}]]]}}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
      GeometricTransformationBox[{
        {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
         {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
          FilledCurveBox[NCache[
           BezierCurve[{{5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {
              Rational[10, 3], 0}, {0, 0}, {
              Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
              Rational[5, 3], 0}, {0, 0}, {
              Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}], 
            BezierCurve[{{2.886751345948129, 1.6666666666666667`}, {5, 0}, {
              3.3333333333333335`, 0}, {0, 0}, {4.330127018922193, 2.5}, {
              1.6666666666666667`, 0}, {0, 0}, {1.4433756729740645`, 
              0.8333333333333334}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
          {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {
               Rational[10, 3], 0}, {0, 0}, {
               Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
               Rational[5, 3], 0}, {0, 0}, {
               Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}], 
             BezierCurve[{{2.886751345948129, 1.6666666666666667`}, {5, 0}, {
               3.3333333333333335`, 0}, {0, 0}, {4.330127018922193, 2.5}, {
               1.6666666666666667`, 0}, {0, 0}, {1.4433756729740645`, 
               0.8333333333333334}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
        {RGBColor[0.471412, 0.108766, 0.527016], 
         {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
          FilledCurveBox[NCache[
           BezierCurve[{{Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {2,
               0}, {3^Rational[1, 2], 1}, {1, 0}, {0, 0}, {0, 0}, {3, 0}, {
              Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
            BezierCurve[{{2.598076211353316, 1.5}, {2, 0}, {
              1.7320508075688772`, 1}, {1, 0}, {0, 0}, {0, 0}, {3, 0}, {
              0.8660254037844386, 0.5}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.471412, 0.108766, 0.527016], 
          {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
           FilledCurveBox[NCache[
            BezierCurve[{{Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
               2, 0}, {3^Rational[1, 2], 1}, {1, 0}, {0, 0}, {0, 0}, {3, 0}, {
               Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
             BezierCurve[{{2.598076211353316, 1.5}, {2, 0}, {
               1.7320508075688772`, 1}, {1, 0}, {0, 0}, {0, 0}, {3, 0}, {
               0.8660254037844386, 0.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.780395972378644*^9, 3.7803959914584093`*^9}, {
   3.780396095842421*^9, 3.780396230900197*^9}, {3.780396262250168*^9, 
   3.780396284020586*^9}, 3.780396397455832*^9, {3.780396457945063*^9, 
   3.7803964648201103`*^9}, 3.780396691434078*^9, {3.780396924561651*^9, 
   3.780396954303347*^9}, {3.780397099760519*^9, 3.7803971060309353`*^9}, {
   3.7803971965867968`*^9, 3.7803971994923077`*^9}, {3.780397302276845*^9, 
   3.78039730488511*^9}, 3.780397445007362*^9, 3.780399857973111*^9, {
   3.7803999069363194`*^9, 3.780399920370541*^9}, {3.780400083187571*^9, 
   3.780400136618594*^9}, 3.78040019871835*^9, 3.780400232657566*^9, 
   3.780400372182777*^9, 3.780400496492489*^9, 3.780401125350338*^9, 
   3.780401288195386*^9, 3.7804018107064543`*^9, 3.780402265305092*^9, 
   3.780402393620893*^9},
 CellLabel->"Out[4]=",
 CellID->1232386456]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsection",
 CellLabel->"In[5]:=",
 CellID->776923543],

Cell[CellGroupData[{

Cell["ColorFunction", "Subsubsection",
 CellLabel->"In[1]:=",
 CellID->1483442460],

Cell[TextData[{
 "The function given to ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["ColorFunction", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/ColorFunction",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " is run over ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["Range", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/Range",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "[", 
   RowBox[{"0", ",", "1", ",", "0.1"}], "]"}]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " the obtained colors are used to colorize the mandala. By default no \
colorizing is done, ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["ColorFunction", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/ColorFunction",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "->", 
   TagBox[
    ButtonBox[
     StyleBox["None", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/None",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]]}]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 "."
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779530269915707*^9, 3.779530340802986*^9}, {
  3.779813262971105*^9, 3.779813319977639*^9}, {3.780398748387518*^9, 
  3.780398748735271*^9}},
 CellID->343138894],

Cell[TextData[{
 StyleBox["ColorFunction", "Program"],
 " can also take strings that are color schemes known by ",
 StyleBox["ColorData", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.780398754101062*^9, 3.780398814188437*^9}, {
  3.7804020049329987`*^9, 3.7804020056639347`*^9}},
 CellID->1275709849],

Cell["\<\
Here is a list of colorized mandalas using single-mandala mode:\
\>", "Text",
 CellChangeTimes->{{3.780398823806905*^9, 3.780398858987082*^9}},
 CellID->844764130],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"SeedRandom", "[", "17", "]"}], ";", 
    RowBox[{"RandomMandala", "[", 
     RowBox[{
      RowBox[{"ColorFunction", "\[Rule]", 
       RowBox[{"ColorData", "[", "cf", "]"}]}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", " ", "cf"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"cf", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Rainbow\>\"", ",", "\"\<SouthwestColors\>\"", ",", 
       "\"\<BrightBands\>\"", ",", "\"\<DeepSeaColors\>\""}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77953037370051*^9, 3.779530382867572*^9}, {
  3.779553317481024*^9, 3.779553405670693*^9}, {3.780355671499227*^9, 
  3.780355672017824*^9}, {3.780398708407544*^9, 3.780398738487629*^9}, {
  3.780402031351685*^9, 3.780402073435117*^9}},
 CellLabel->"In[1]:=",
 CellID->1794786791],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
          BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {0, 0}, {0, 0}, {
            4.330127018922193, 2.5}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            1.6666666666666667`, 0}}]]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
         FilledCurveBox[NCache[
          BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
             Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {Rational[20, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
             0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
           BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
             8.333333333333334, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
             0, 0}, {0, 0}, {4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
             1.6666666666666667`, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["\"Rainbow\"", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[0.6612548, 0.3598462, 0.15670679999999998`]], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
          BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {0, 0}, {0, 0}, {
            4.330127018922193, 2.5}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            1.6666666666666667`, 0}}]]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.396811, 0.31014, 0.204105]], 
         FilledCurveBox[NCache[
          BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
             Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {Rational[20, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
             0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
           BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
             8.333333333333334, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
             0, 0}, {0, 0}, {4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
             1.6666666666666667`, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["\"SouthwestColors\"", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[
        0.512227148190099, 0.42680966628910977`, 0.9998892092475745]], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
          BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {0, 0}, {0, 0}, {
            4.330127018922193, 2.5}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            1.6666666666666667`, 0}}]]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.90222, 0.101808, 0.198306]], 
         FilledCurveBox[NCache[
          BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
             Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {Rational[20, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
             0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
           BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
             8.333333333333334, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
             0, 0}, {0, 0}, {4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
             1.6666666666666667`, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["\"BrightBands\"", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       {FaceForm[RGBColor[
        0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
          BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {0, 0}, {0, 0}, {
            4.330127018922193, 2.5}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            1.6666666666666667`, 0}}]]]}}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        {FaceForm[RGBColor[0.16791, 0., 0.301671]], 
         FilledCurveBox[NCache[
          BezierCurve[{{5 3^Rational[1, 2], 5}, {10, 0}, {5, 0}, {
             Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[10, 3], 0}, {Rational[20, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {0, 
             0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}}], 
           BezierCurve[{{8.660254037844386, 5}, {10, 0}, {5, 0}, {
             8.333333333333334, 0}, {2.886751345948129, 
             1.6666666666666667`}, {3.3333333333333335`, 0}, {
             6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
             0, 0}, {0, 0}, {4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
             1.6666666666666667`, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["\"DeepSeaColors\"", TraditionalForm]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.779530189466844*^9, 3.7795303832531347`*^9, 3.779530696077829*^9, 
   3.779549725888031*^9, 3.7795520781178617`*^9, {3.779553318643825*^9, 
   3.7795534059124937`*^9}, 3.779554207225411*^9, 3.779554822981872*^9, 
   3.780352327237673*^9, 3.780355672487226*^9, 3.780396924702713*^9, 
   3.780397445110383*^9, {3.7803987015144377`*^9, 3.7803987389092627`*^9}, 
   3.780399858119697*^9, 3.780400232810481*^9, 3.780400372292354*^9, 
   3.780401125565481*^9, 3.780401288866192*^9, 3.780401810828774*^9, {
   3.780402034635741*^9, 3.780402073893982*^9}, 3.780402265443681*^9, 
   3.780402393738154*^9},
 CellLabel->"Out[1]=",
 CellID->239390677]
}, Open  ]],

Cell["Here are mandalas generated using multi-mandala mode:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7803986291237*^9, 3.7803986341406507`*^9}, {
  3.780398666519458*^9, 3.780398688985127*^9}, {3.7804019865499687`*^9, 
  3.7804019922535048`*^9}},
 CellID->2083897094],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"SeedRandom", "[", "74", "]"}], ";", 
    RowBox[{"RandomMandala", "[", 
     RowBox[{
      RowBox[{"\"\<Radius\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"7", ",", "6", ",", "4"}], "}"}]}], ",", 
      RowBox[{"ColorFunction", "\[Rule]", "cf"}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", " ", "cf"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"cf", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Rainbow\>\"", ",", "\"\<SouthwestColors\>\"", ",", 
       "\"\<BrightBands\>\"", ",", "\"\<DeepSeaColors\>\""}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77953037370051*^9, 3.779530382867572*^9}, {
  3.779553317481024*^9, 3.779553405670693*^9}, {3.7803535642050257`*^9, 
  3.7803536154262466`*^9}, {3.780353652903132*^9, 3.7803537674503593`*^9}, {
  3.780353799959899*^9, 3.780353843953443*^9}, {3.78035387791236*^9, 
  3.78035388358661*^9}, {3.780353999750248*^9, 3.7803540101649647`*^9}, {
  3.780355409991108*^9, 3.7803555198784237`*^9}, {3.780355559101288*^9, 
  3.780355611131426*^9}, {3.780355660316709*^9, 3.780355660880186*^9}, {
  3.780398639914453*^9, 3.780398658039859*^9}, {3.7803987341920958`*^9, 
  3.780398734437459*^9}, {3.780401826527835*^9, 3.780401892577033*^9}, {
  3.780402166104003*^9, 3.7804021768708963`*^9}},
 CellLabel->"In[2]:=",
 CellID->957107712],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
      GeometricTransformationBox[{
        {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
         {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {7, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
              Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
            BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
              2.3333333333333335`}, {2.3333333333333335`, 0}, {
              2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
              4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, 
        GeometricTransformationBox[
         {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
          {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
           FilledCurveBox[NCache[
            BezierCurve[{{0, 0}, {7, 0}, {
               7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
               Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
               Rational[14, 3], 0}, {
               Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
             BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
               2.3333333333333335`}, {2.3333333333333335`, 0}, {
               2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
               4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.8083416, 0.7110806, 0.255976], GeometricTransformationBox[{
        {RGBColor[0.8083416, 0.7110806, 0.255976], 
         {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
              3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 0}}],
             BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {0, 0}, {
              1.7320508075688772`, 1}, {6, 0}, {5.196152422706632, 3}, {0, 
              0}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.8083416, 0.7110806, 0.255976], 
          {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
               3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 
               0}}], BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {
               0, 0}, {1.7320508075688772`, 1}, {6, 0}, {
               5.196152422706632, 3}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
      GeometricTransformationBox[{
        {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
         {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
              4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
              Rational[8, 3], 0}, {Rational[4, 3], 0}, {
              2 3^Rational[1, 2], 2}}], 
            BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
              2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
              0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
              3.4641016151377544`, 2}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
          {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
               4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
               Rational[8, 3], 0}, {Rational[4, 3], 0}, {
               2 3^Rational[1, 2], 2}}], 
             BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
               2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
               0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
               3.4641016151377544`, 2}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
    PlotLabel->FormBox["\"Rainbow\"", TraditionalForm]], ",", 
   GraphicsBox[{
     {RGBColor[0.7107918000000001, 0.4905029000000001, 0.2686893000000001], 
      GeometricTransformationBox[{
        {RGBColor[0.7107918000000001, 0.4905029000000001, 0.2686893000000001], 
         {FaceForm[RGBColor[
          0.7107918000000001, 0.4905029000000001, 0.2686893000000001]], 
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {7, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
              Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
            BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
              2.3333333333333335`}, {2.3333333333333335`, 0}, {
              2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
              4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, 
        GeometricTransformationBox[
         {RGBColor[
          0.7107918000000001, 0.4905029000000001, 0.2686893000000001], 
          {FaceForm[RGBColor[
           0.7107918000000001, 0.4905029000000001, 0.2686893000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{0, 0}, {7, 0}, {
               7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
               Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
               Rational[14, 3], 0}, {
               Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
             BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
               2.3333333333333335`}, {2.3333333333333335`, 0}, {
               2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
               4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.7998088, 0.7938813, 0.3432391999999999], 
      GeometricTransformationBox[{
        {RGBColor[0.7998088, 0.7938813, 0.3432391999999999], 
         {FaceForm[RGBColor[0.7998088, 0.7938813, 0.3432391999999999]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
              3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 0}}],
             BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {0, 0}, {
              1.7320508075688772`, 1}, {6, 0}, {5.196152422706632, 3}, {0, 
              0}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.7998088, 0.7938813, 0.3432391999999999], 
          {FaceForm[RGBColor[0.7998088, 0.7938813, 0.3432391999999999]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
               3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 
               0}}], BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {
               0, 0}, {1.7320508075688772`, 1}, {6, 0}, {
               5.196152422706632, 3}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.5383754999999999, 0.6729875, 0.49908170000000024`], 
      GeometricTransformationBox[{
        {RGBColor[0.5383754999999999, 0.6729875, 0.49908170000000024`], 
         {FaceForm[RGBColor[
          0.5383754999999999, 0.6729875, 0.49908170000000024`]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
              4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
              Rational[8, 3], 0}, {Rational[4, 3], 0}, {
              2 3^Rational[1, 2], 2}}], 
            BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
              2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
              0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
              3.4641016151377544`, 2}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.5383754999999999, 0.6729875, 0.49908170000000024`], 
          {FaceForm[RGBColor[
           0.5383754999999999, 0.6729875, 0.49908170000000024`]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
               4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
               Rational[8, 3], 0}, {Rational[4, 3], 0}, {
               2 3^Rational[1, 2], 2}}], 
             BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
               2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
               0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
               3.4641016151377544`, 2}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
    PlotLabel->FormBox["\"SouthwestColors\"", TraditionalForm]], ",", 
   GraphicsBox[{
     {RGBColor[0.7494445735287143, 0.6918528382415734, 0.9996537797815309], 
      GeometricTransformationBox[{
        {RGBColor[0.7494445735287143, 0.6918528382415734, 0.9996537797815309], 
         {FaceForm[RGBColor[
          0.7494445735287143, 0.6918528382415734, 0.9996537797815309]], 
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {7, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
              Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
            BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
              2.3333333333333335`}, {2.3333333333333335`, 0}, {
              2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
              4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, 
        GeometricTransformationBox[
         {RGBColor[
          0.7494445735287143, 0.6918528382415734, 0.9996537797815309], 
          {FaceForm[RGBColor[
           0.7494445735287143, 0.6918528382415734, 0.9996537797815309]], 
           FilledCurveBox[NCache[
            BezierCurve[{{0, 0}, {7, 0}, {
               7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
               Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
               Rational[14, 3], 0}, {
               Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
             BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
               2.3333333333333335`}, {2.3333333333333335`, 0}, {
               2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
               4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.9783995078041606, 0.9467332737623645, 0.281985850997462], 
      GeometricTransformationBox[{
        {RGBColor[
         0.9783995078041606, 0.9467332737623645, 0.281985850997462], 
         {FaceForm[RGBColor[
          0.9783995078041606, 0.9467332737623645, 0.281985850997462]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
              3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 0}}],
             BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {0, 0}, {
              1.7320508075688772`, 1}, {6, 0}, {5.196152422706632, 3}, {0, 
              0}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.9783995078041606, 0.9467332737623645, 0.281985850997462], 
          {FaceForm[RGBColor[
           0.9783995078041606, 0.9467332737623645, 0.281985850997462]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
               3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 
               0}}], 
             BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {0, 0}, {
               1.7320508075688772`, 1}, {6, 0}, {5.196152422706632, 3}, {0, 
               0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[1., 0.6019458954022784, 0.20411381416380536`], 
      GeometricTransformationBox[{
        {RGBColor[1., 0.6019458954022784, 0.20411381416380536`], 
         {FaceForm[RGBColor[1., 0.6019458954022784, 0.20411381416380536`]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
              4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
              Rational[8, 3], 0}, {Rational[4, 3], 0}, {
              2 3^Rational[1, 2], 2}}], 
            BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
              2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
              0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
              3.4641016151377544`, 2}}]]]}}, GeometricTransformationBox[
         {RGBColor[1., 0.6019458954022784, 0.20411381416380536`], 
          {FaceForm[RGBColor[1., 0.6019458954022784, 0.20411381416380536`]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
               4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
               Rational[8, 3], 0}, {Rational[4, 3], 0}, {
               2 3^Rational[1, 2], 2}}], 
             BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
               2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
               0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
               3.4641016151377544`, 2}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
    PlotLabel->FormBox["\"BrightBands\"", TraditionalForm]], ",", 
   GraphicsBox[{
     {RGBColor[0.2917374, 0.11413976000000005`, 0.6482166], 
      GeometricTransformationBox[{
        {RGBColor[0.2917374, 0.11413976000000005`, 0.6482166], 
         {FaceForm[RGBColor[0.2917374, 0.11413976000000005`, 0.6482166]], 
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {7, 0}, {
              7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
              Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
              Rational[14, 3], 0}, {
              Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
            BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
              2.3333333333333335`}, {2.3333333333333335`, 0}, {
              2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
              4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, 
        GeometricTransformationBox[
         {RGBColor[0.2917374, 0.11413976000000005`, 0.6482166], 
          {FaceForm[RGBColor[0.2917374, 0.11413976000000005`, 0.6482166]], 
           FilledCurveBox[NCache[
            BezierCurve[{{0, 0}, {7, 0}, {
               7 3^Rational[-1, 2], Rational[7, 3]}, {Rational[7, 3], 0}, {
               Rational[7, 2] 3^Rational[-1, 2], Rational[7, 6]}, {0, 0}, {
               Rational[14, 3], 0}, {
               Rational[7, 2] 3^Rational[1, 2], Rational[7, 2]}}], 
             BezierCurve[{{0, 0}, {7, 0}, {4.041451884327381, 
               2.3333333333333335`}, {2.3333333333333335`, 0}, {
               2.0207259421636903`, 1.1666666666666667`}, {0, 0}, {
               4.666666666666667, 0}, {6.06217782649107, 3.5}}]]]}}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.2729462, 0.5950244000000001, 0.9451238000000001], 
      GeometricTransformationBox[{
        {RGBColor[0.2729462, 0.5950244000000001, 0.9451238000000001], 
         {FaceForm[RGBColor[
          0.2729462, 0.5950244000000001, 0.9451238000000001]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
              3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 0}}],
             BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {0, 0}, {
              1.7320508075688772`, 1}, {6, 0}, {5.196152422706632, 3}, {0, 
              0}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.2729462, 0.5950244000000001, 0.9451238000000001], 
          {FaceForm[RGBColor[
           0.2729462, 0.5950244000000001, 0.9451238000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
               3^Rational[1, 2], 1}, {6, 0}, {3 3^Rational[1, 2], 3}, {0, 
               0}}], BezierCurve[{{2, 0}, {4, 0}, {3.4641016151377544`, 2}, {
               0, 0}, {1.7320508075688772`, 1}, {6, 0}, {
               5.196152422706632, 3}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
     {RGBColor[0.5761666000000001, 0.8195192, 0.9884546], 
      GeometricTransformationBox[{
        {RGBColor[0.5761666000000001, 0.8195192, 0.9884546], 
         {FaceForm[RGBColor[0.5761666000000001, 0.8195192, 0.9884546]], 
          FilledCurveBox[NCache[
           BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
              4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
              Rational[8, 3], 0}, {Rational[4, 3], 0}, {
              2 3^Rational[1, 2], 2}}], 
            BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
              2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
              0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
              3.4641016151377544`, 2}}]]]}}, GeometricTransformationBox[
         {RGBColor[0.5761666000000001, 0.8195192, 0.9884546], 
          {FaceForm[RGBColor[0.5761666000000001, 0.8195192, 0.9884546]], 
           FilledCurveBox[NCache[
            BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
               4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}, {4, 0}, {0, 0}, {
               Rational[8, 3], 0}, {Rational[4, 3], 0}, {
               2 3^Rational[1, 2], 2}}], 
             BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
               2.3094010767585034`, 1.3333333333333333`}, {0, 0}, {4, 0}, {0, 
               0}, {2.6666666666666665`, 0}, {1.3333333333333333`, 0}, {
               3.4641016151377544`, 2}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
    PlotLabel->FormBox["\"DeepSeaColors\"", TraditionalForm]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.780354010827001*^9, {3.780355410943349*^9, 3.7803555222999077`*^9}, {
   3.780355559566243*^9, 3.780355629633761*^9}, {3.780355661446582*^9, 
   3.780355674522629*^9}, 3.780396924797756*^9, 3.7803974451733217`*^9, {
   3.780398640713986*^9, 3.780398658581655*^9}, {3.780398717940898*^9, 
   3.7803987351465797`*^9}, 3.780399858173492*^9, 3.78040023286283*^9, 
   3.780400372346031*^9, 3.780401125664921*^9, 3.7804012889168653`*^9, {
   3.7804018108812227`*^9, 3.7804018931157103`*^9}, 3.7804020374278708`*^9, {
   3.780402166774561*^9, 3.7804021772547817`*^9}, 3.7804022654936237`*^9, 
   3.780402393810329*^9},
 CellLabel->"Out[2]=",
 CellID->1202237508]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ConnectingFunction", "Subsubsection",
 CellChangeTimes->{{3.7792104475045767`*^9, 3.779210450452279*^9}, {
  3.779210532590407*^9, 3.779210535986945*^9}, {3.779813617292745*^9, 
  3.7798136188202763`*^9}},
 CellLabel->"In[3]:=",
 CellID->131236541],

Cell[TextData[{
 "The option ",
 Cell[BoxData["\"\<ConnectingFunction\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " specifies which graphics primitive to be used over the seed segment points:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779211872445244*^9, 3.7792119374235077`*^9}, {
   3.779555224365015*^9, 3.77955523753621*^9}, 3.779813581386714*^9},
 CellID->607542971],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "263", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", "cf"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", " ", "cf"}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"cf", ",", 
     RowBox[{"{", 
      RowBox[{"Line", ",", "Arrow", ",", "Polygon", ",", "BezierCurve", ",", 
       RowBox[{"FilledCurve", "@*", "BezierCurve"}]}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
   3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
   3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
   3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
   3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
   3.7792103389880943`*^9, 3.779210494339717*^9}, {3.779210540327084*^9, 
   3.779210643070304*^9}, 3.7792110519571323`*^9, {3.779211958284672*^9, 
   3.7792119585187473`*^9}, {3.779212001012145*^9, 3.779212096661046*^9}, {
   3.7795532455249767`*^9, 3.779553271406996*^9}, {3.7795534241548347`*^9, 
   3.779553457059461*^9}},
 CellLabel->"In[1]:=",
 CellID->226839118],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       LineBox[NCache[{{10, 0}, {Rational[10, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
          0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
          3.3333333333333335`, 0}, {5.773502691896258, 3.3333333333333335`}, {
          8.333333333333334, 0}, {5, 0}, {0, 0}, {8.660254037844386, 5}, {
          1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
          2.5}, {6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {
          2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
          4.166666666666667}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        LineBox[NCache[{{10, 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
           3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["Line", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       ArrowBox[
        NCache[{{10, 0}, {Rational[10, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
          0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
          3.3333333333333335`, 0}, {5.773502691896258, 3.3333333333333335`}, {
          8.333333333333334, 0}, {5, 0}, {0, 0}, {8.660254037844386, 5}, {
          1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
          2.5}, {6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {
          2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
          4.166666666666667}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        ArrowBox[
         NCache[{{10, 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
           3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["Arrow", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       PolygonBox[
        NCache[{{10, 0}, {Rational[10, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
          0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
          3.3333333333333335`, 0}, {5.773502691896258, 3.3333333333333335`}, {
          8.333333333333334, 0}, {5, 0}, {0, 0}, {8.660254037844386, 5}, {
          1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
          2.5}, {6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {
          2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
          4.166666666666667}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{10, 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
           3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["Polygon", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{10, 0}, {Rational[10, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
          0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
          3.3333333333333335`, 0}, {5.773502691896258, 3.3333333333333335`}, {
          8.333333333333334, 0}, {5, 0}, {0, 0}, {8.660254037844386, 5}, {
          1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
          2.5}, {6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {
          2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
          4.166666666666667}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
           3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["BezierCurve", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{10, 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}], 
         BezierCurve[{{10, 0}, {3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 4.166666666666667}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{10, 0}, {Rational[10, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
            0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}], 
          BezierCurve[{{10, 0}, {3.3333333333333335`, 0}, {5.773502691896258, 
            3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {0, 0}, {
            8.660254037844386, 5}, {1.4433756729740645`, 
            0.8333333333333334}, {4.330127018922193, 2.5}, {
            6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {
            2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
            4.166666666666667}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox[
      RowBox[{"FilledCurve", "@*", "BezierCurve"}], TraditionalForm]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.779530189527767*^9, 3.779530696134408*^9, 3.779549725936206*^9, 
   3.7795520781827602`*^9, {3.7795532468634243`*^9, 3.779553288482802*^9}, {
   3.779553427011969*^9, 3.7795534573050117`*^9}, 3.7795542072861958`*^9, 
   3.7795548230430193`*^9, 3.780352327306759*^9, 3.780396924985127*^9, 
   3.780397445238615*^9, 3.780399858267785*^9, 3.780400232938692*^9, 
   3.78040037238885*^9, 3.780401125882422*^9, 3.780401288963827*^9, 
   3.780401810925457*^9, 3.780402265579844*^9, 3.780402393887314*^9},
 CellLabel->"Out[1]=",
 CellID->332162333]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["KeepGridPoints", "Subsubsection",
 CellChangeTimes->{{3.7792104475045767`*^9, 3.779210450452279*^9}, {
  3.779210532590407*^9, 3.779210535986945*^9}, {3.779215553456703*^9, 
  3.779215559902858*^9}, {3.779813624625099*^9, 3.779813625421233*^9}},
 CellLabel->"In[2]:=",
 CellID->179610317],

Cell[TextData[{
 "The option ",
 Cell[BoxData["\"\<KeepGridPoints\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " specifies should the points used to generate the seed segment be kept or \
not:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779211872445244*^9, 3.7792119374235077`*^9}, {
   3.779215717293913*^9, 3.7792157465658092`*^9}, 3.779813587035244*^9},
 CellID->1496073784],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "163", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "k"}], ",", 
       RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "3"}], ",", 
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "6"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", " ", "k"}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
   3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
   3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
   3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
   3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
   3.7792103389880943`*^9, 3.779210494339717*^9}, {3.779210540327084*^9, 
   3.779210643070304*^9}, 3.7792110519571323`*^9, {3.779211958284672*^9, 
   3.7792119585187473`*^9}, {3.779212001012145*^9, 3.779212096661046*^9}, {
   3.779215590316019*^9, 3.7792157025445223`*^9}, {3.779263225878866*^9, 
   3.779263238183571*^9}},
 CellLabel->"In[1]:=",
 CellID->1773548612],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    GeometricTransformationBox[{{PointBox[{{0, 0}, {0, 0}}], 
       PointBox[
        NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[10, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
          3.3333333333333335`, 0}}]], 
       PointBox[
        NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {
          Rational[20, 3], 0}}, {{5.773502691896258, 3.3333333333333335`}, {
          6.666666666666667, 0}}]], 
       PointBox[
        NCache[{{5 3^Rational[1, 2], 5}, {10, 0}}, {{8.660254037844386, 5}, {
          10, 0}}]], 
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {0, 
           0}}, {{10, 0}, {8.660254037844386, 5}, {3.3333333333333335`, 0}, {
           5.773502691896258, 3.3333333333333335`}, {0, 0}, {
           2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
           0, 0}}]]}}, 
      GeometricTransformationBox[{PointBox[{{0, 0}, {0, 0}}], 
        PointBox[
         NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[10, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
           3.3333333333333335`, 0}}]], 
        PointBox[
         NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[20, 3], 0}}, {{5.773502691896258, 3.3333333333333335`}, {
           6.666666666666667, 0}}]], 
        PointBox[
         NCache[{{5 3^Rational[1, 2], 5}, {10, 0}}, {{8.660254037844386, 5}, {
           10, 0}}]], 
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{10, 0}, {5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {0, 
            0}}, {{10, 0}, {8.660254037844386, 5}, {3.3333333333333335`, 0}, {
            5.773502691896258, 3.3333333333333335`}, {0, 0}, {
            2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
            0, 0}}]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["True", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{10, 0}, {5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {0, 
          0}}, {{10, 0}, {8.660254037844386, 5}, {3.3333333333333335`, 0}, {
          5.773502691896258, 3.3333333333333335`}, {0, 0}, {2.886751345948129,
           1.6666666666666667`}, {6.666666666666667, 0}, {0, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {0, 
           0}}, {{10, 0}, {8.660254037844386, 5}, {3.3333333333333335`, 0}, {
           5.773502691896258, 3.3333333333333335`}, {0, 0}, {
           2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
           0, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["False", TraditionalForm]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530189582287*^9, 3.779530696189101*^9, 
  3.7795497259775667`*^9, 3.779552078238736*^9, 3.779554207345862*^9, 
  3.779554823100451*^9, 3.7803523273617773`*^9, 3.780396925038899*^9, 
  3.780397445303213*^9, 3.7803998584014387`*^9, 3.7804002330816174`*^9, 
  3.780400372430441*^9, 3.780401125954836*^9, 3.780401289007777*^9, 
  3.780401810968501*^9, 3.7804022656276627`*^9, 3.780402393958337*^9},
 CellLabel->"Out[1]=",
 CellID->1342332178]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "163", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "k"}], ",", 
       RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "5"}], ",", 
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "6"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", " ", "k"}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
   3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
   3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
   3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
   3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
   3.7792103389880943`*^9, 3.779210494339717*^9}, {3.779210540327084*^9, 
   3.779210643070304*^9}, 3.7792110519571323`*^9, {3.779211958284672*^9, 
   3.7792119585187473`*^9}, {3.779212001012145*^9, 3.779212096661046*^9}, {
   3.779215590316019*^9, 3.779215697695903*^9}, {3.7792157558607283`*^9, 
   3.7792157568489513`*^9}, 3.779263244783729*^9},
 CellLabel->"In[2]:=",
 CellID->1801385332],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    GeometricTransformationBox[{{PointBox[{{0, 0}, {0, 0}}], 
       PointBox[
        NCache[{{3^Rational[1, 2], 1}, {2, 0}}, {{1.7320508075688772`, 1}, {2,
           0}}]], PointBox[
        NCache[{{2 3^Rational[1, 2], 2}, {4, 0}}, {{3.4641016151377544`, 2}, {
          4, 0}}]], 
       PointBox[
        NCache[{{3 3^Rational[1, 2], 3}, {6, 0}}, {{5.196152422706632, 3}, {6,
           0}}]], PointBox[
        NCache[{{4 3^Rational[1, 2], 4}, {8, 0}}, {{6.928203230275509, 4}, {8,
           0}}]], PointBox[
        NCache[{{5 3^Rational[1, 2], 5}, {10, 0}}, {{8.660254037844386, 5}, {
          10, 0}}]], 
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{8, 0}, {4 3^Rational[1, 2], 4}, {2 3^Rational[1, 2], 2}, {6,
            0}, {3^Rational[1, 2], 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 
           0}, {5 3^Rational[1, 2], 5}, {3 3^Rational[1, 2], 3}}, {{8, 0}, {
           6.928203230275509, 4}, {3.4641016151377544`, 2}, {6, 0}, {
           1.7320508075688772`, 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 0}, {
           8.660254037844386, 5}, {5.196152422706632, 3}}]]}}, 
      GeometricTransformationBox[{PointBox[{{0, 0}, {0, 0}}], 
        PointBox[
         NCache[{{3^Rational[1, 2], 1}, {2, 0}}, {{1.7320508075688772`, 1}, {
           2, 0}}]], 
        PointBox[
         NCache[{{2 3^Rational[1, 2], 2}, {4, 0}}, {{
           3.4641016151377544`, 2}, {4, 0}}]], 
        PointBox[
         NCache[{{3 3^Rational[1, 2], 3}, {6, 0}}, {{5.196152422706632, 3}, {
           6, 0}}]], 
        PointBox[
         NCache[{{4 3^Rational[1, 2], 4}, {8, 0}}, {{6.928203230275509, 4}, {
           8, 0}}]], 
        PointBox[
         NCache[{{5 3^Rational[1, 2], 5}, {10, 0}}, {{8.660254037844386, 5}, {
           10, 0}}]], 
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{8, 0}, {4 3^Rational[1, 2], 4}, {2 3^Rational[1, 2], 2}, {
            6, 0}, {3^Rational[1, 2], 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0,
             0}, {5 3^Rational[1, 2], 5}, {3 3^Rational[1, 2], 3}}, {{8, 0}, {
            6.928203230275509, 4}, {3.4641016151377544`, 2}, {6, 0}, {
            1.7320508075688772`, 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 
            0}, {8.660254037844386, 5}, {5.196152422706632, 3}}]]}}, {{{1, 
        0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["True", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{8, 0}, {4 3^Rational[1, 2], 4}, {2 3^Rational[1, 2], 2}, {6, 
          0}, {3^Rational[1, 2], 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 
          0}, {5 3^Rational[1, 2], 5}, {3 3^Rational[1, 2], 3}}, {{8, 0}, {
          6.928203230275509, 4}, {3.4641016151377544`, 2}, {6, 0}, {
          1.7320508075688772`, 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 0}, {
          8.660254037844386, 5}, {5.196152422706632, 3}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{8, 0}, {4 3^Rational[1, 2], 4}, {2 3^Rational[1, 2], 2}, {6,
            0}, {3^Rational[1, 2], 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 
           0}, {5 3^Rational[1, 2], 5}, {3 3^Rational[1, 2], 3}}, {{8, 0}, {
           6.928203230275509, 4}, {3.4641016151377544`, 2}, {6, 0}, {
           1.7320508075688772`, 1}, {10, 0}, {0, 0}, {2, 0}, {4, 0}, {0, 0}, {
           8.660254037844386, 5}, {5.196152422706632, 3}}]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["False", TraditionalForm]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530189629854*^9, 3.779530696237277*^9, 
  3.779549726011815*^9, 3.779552078288327*^9, 3.779554207400689*^9, 
  3.779554823152779*^9, 3.780352327410261*^9, 3.780396925088835*^9, 
  3.780397445359598*^9, 3.780399858447588*^9, 3.7804002331182833`*^9, 
  3.780400372445546*^9, 3.780401126024431*^9, 3.780401289022127*^9, 
  3.78040181100432*^9, 3.780402265775351*^9, 3.7804023939729137`*^9},
 CellLabel->"Out[2]=",
 CellID->1261203911]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NumberOfElements", "Subsubsection",
 CellChangeTimes->{{3.779210757902939*^9, 3.7792107662574883`*^9}, {
  3.779813629644432*^9, 3.779813630565316*^9}},
 CellLabel->"In[3]:=",
 CellID->2007040362],

Cell[TextData[{
 "The option",
 Cell[BoxData[
  RowBox[{" ", "\"\<NumberOfElements\>\""}]], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " controls how may graphics elements are in the seed segment:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779211752886689*^9, 3.779211808519041*^9}, {
   3.779211941575605*^9, 3.779211943611198*^9}, {3.779250952830481*^9, 
   3.779250955079228*^9}, {3.779555256505122*^9, 3.779555257617887*^9}, 
   3.779813592635495*^9},
 CellID->738370878],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "200", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "n"}], ",", 
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "3"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<n:\>\"", ",", 
           RowBox[{"Spacer", "[", "2", "]"}], ",", " ", "n"}], "}"}], 
         "]"}]}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779210790996304*^9, 3.779210867823667*^9}, {
   3.7792108980775003`*^9, 3.779210898581602*^9}, {3.7792109452606916`*^9, 
   3.779210981776726*^9}, {3.7792110580207577`*^9, 3.779211060888012*^9}, {
   3.779211781487322*^9, 3.7792118328531237`*^9}, 3.7792154477696447`*^9, 
   3.7792632494637327`*^9, {3.779264682321988*^9, 3.7792646827925997`*^9}, {
   3.779264730996026*^9, 3.779264787847101*^9}},
 CellLabel->"In[1]:=",
 CellID->638512766],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{10, 0}, {0, 0}, {0, 0}, {5, 5 3^Rational[1, 2]}}, {{10, 0}, {
          0, 0}, {0, 0}, {5, 8.660254037844386}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {0, 0}, {0, 0}, {5, 5 3^Rational[1, 2]}}, {{10, 
           0}, {0, 0}, {0, 0}, {5, 8.660254037844386}}]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "1"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{5, 5 3^Rational[1, 2]}, {10, 0}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {0, 0}, {
          5, 0}}, {{5, 8.660254037844386}, {10, 0}, {2.5, 
          4.330127018922193}, {0, 0}, {0, 0}, {5, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5, 5 3^Rational[1, 2]}, {10, 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {0, 0}, {
           5, 0}}, {{5, 8.660254037844386}, {10, 0}, {2.5, 
           4.330127018922193}, {0, 0}, {0, 0}, {5, 0}}]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "2"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{10, 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {
          5, 5 3^Rational[1, 2]}, {Rational[20, 3], 0}, {
          Rational[5, 3], 5 3^Rational[-1, 2]}, {0, 0}, {0, 0}, {
          Rational[10, 3], 0}}, {{10, 0}, {3.3333333333333335`, 
          5.773502691896258}, {5, 8.660254037844386}, {
          6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {0,
           0}, {0, 0}, {3.3333333333333335`, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {
           5, 5 3^Rational[1, 2]}, {Rational[20, 3], 0}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}, {0, 0}, {0, 0}, {
           Rational[10, 3], 0}}, {{10, 0}, {3.3333333333333335`, 
           5.773502691896258}, {5, 8.660254037844386}, {
           6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {
           0, 0}, {0, 0}, {3.3333333333333335`, 0}}]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "3"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {5, 0}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[15, 2], 0}, {10, 0}, {0, 0}, {5, 5 3^Rational[1, 2]}, {
          Rational[15, 4], Rational[15, 4] 3^Rational[1, 2]}, {
          Rational[5, 2], 0}, {0, 0}}, {{1.25, 2.1650635094610964`}, {5, 0}, {
          2.5, 4.330127018922193}, {7.5, 0}, {10, 0}, {0, 0}, {
          5, 8.660254037844386}, {3.75, 6.495190528383289}, {2.5, 0}, {0, 
          0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {5, 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[15, 2], 0}, {10, 0}, {0, 0}, {5, 5 3^Rational[1, 2]}, {
           Rational[15, 4], Rational[15, 4] 3^Rational[1, 2]}, {
           Rational[5, 2], 0}, {0, 0}}, {{1.25, 2.1650635094610964`}, {5, 
           0}, {2.5, 4.330127018922193}, {7.5, 0}, {10, 0}, {0, 0}, {
           5, 8.660254037844386}, {3.75, 6.495190528383289}, {2.5, 0}, {0, 
           0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "4"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{1, 3^Rational[1, 2]}, {4, 0}, {8, 0}, {0, 0}, {0, 0}, {
          3, 3 3^Rational[1, 2]}, {2, 0}, {6, 0}, {10, 0}, {
          5, 5 3^Rational[1, 2]}, {4, 4 3^Rational[1, 2]}, {
          2, 2 3^Rational[1, 2]}}, {{1, 1.7320508075688772`}, {4, 0}, {8, 
          0}, {0, 0}, {0, 0}, {3, 5.196152422706632}, {2, 0}, {6, 0}, {10, 
          0}, {5, 8.660254037844386}, {4, 6.928203230275509}, {
          2, 3.4641016151377544`}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{1, 3^Rational[1, 2]}, {4, 0}, {8, 0}, {0, 0}, {0, 0}, {
           3, 3 3^Rational[1, 2]}, {2, 0}, {6, 0}, {10, 0}, {
           5, 5 3^Rational[1, 2]}, {4, 4 3^Rational[1, 2]}, {
           2, 2 3^Rational[1, 2]}}, {{1, 1.7320508075688772`}, {4, 0}, {8, 
           0}, {0, 0}, {0, 0}, {3, 5.196152422706632}, {2, 0}, {6, 0}, {10, 
           0}, {5, 8.660254037844386}, {4, 6.928203230275509}, {
           2, 3.4641016151377544`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "5"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
          Rational[10, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
          Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
          Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 5 3^Rational[1, 2]}, {
          Rational[5, 3], 0}, {5, 0}, {0, 0}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[5, 3], 5 3^Rational[-1, 2]}, {10, 0}, {
          Rational[25, 3], 0}}, {{0.8333333333333334, 1.4433756729740645`}, {
          3.3333333333333335`, 0}, {6.666666666666667, 0}, {0, 0}, {
          4.166666666666667, 7.216878364870323}, {3.3333333333333335`, 
          5.773502691896258}, {5, 8.660254037844386}, {
          1.6666666666666667`, 0}, {5, 0}, {0, 0}, {2.5, 4.330127018922193}, {
          1.6666666666666667`, 2.886751345948129}, {10, 0}, {
          8.333333333333334, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
           Rational[10, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
           Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
           Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 5 3^Rational[1, 2]}, {
           Rational[5, 3], 0}, {5, 0}, {0, 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}, {10, 0}, {
           Rational[25, 3], 0}}, {{0.8333333333333334, 1.4433756729740645`}, {
           3.3333333333333335`, 0}, {6.666666666666667, 0}, {0, 0}, {
           4.166666666666667, 7.216878364870323}, {3.3333333333333335`, 
           5.773502691896258}, {5, 8.660254037844386}, {
           1.6666666666666667`, 0}, {5, 0}, {0, 0}, {2.5, 
           4.330127018922193}, {1.6666666666666667`, 2.886751345948129}, {10, 
           0}, {8.333333333333334, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "6"}, "RowDefault"], TraditionalForm]]}],
   "}"}]], "Output",
 CellChangeTimes->{3.779530189686376*^9, 3.779530696291856*^9, 
  3.779549726054483*^9, 3.7795520784323463`*^9, 3.779554207460943*^9, 
  3.779554823211252*^9, 3.780352327465667*^9, 3.780396925148479*^9, 
  3.7803974454235153`*^9, 3.78039985850099*^9, 3.7804002331614313`*^9, 
  3.780400372505501*^9, 3.780401126099154*^9, 3.780401289088861*^9, 
  3.780401811045521*^9, 3.780402265827321*^9, 3.7804023940695677`*^9},
 CellLabel->"Out[1]=",
 CellID->1390536287]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "200", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "n"}], ",", 
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "3"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<n:\>\"", ",", 
           RowBox[{"Spacer", "[", "2", "]"}], ",", " ", "n"}], "}"}], 
         "]"}]}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "5", ",", "20", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779210790996304*^9, 3.779210867823667*^9}, {
   3.7792108980775003`*^9, 3.779210898581602*^9}, {3.7792109452606916`*^9, 
   3.779210945776209*^9}, {3.77921098567092*^9, 3.7792109866366568`*^9}, 
   3.779211067401986*^9, {3.779211848771269*^9, 3.77921185285646*^9}, 
   3.779215447773831*^9, 3.779263254953826*^9, {3.779264695496049*^9, 
   3.779264695876223*^9}, {3.77926477356666*^9, 3.779264783178423*^9}},
 CellLabel->"In[2]:=",
 CellID->1662086136],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{1, 3^Rational[1, 2]}, {4, 0}, {8, 0}, {0, 0}, {0, 0}, {
          3, 3 3^Rational[1, 2]}, {2, 0}, {6, 0}, {10, 0}, {
          5, 5 3^Rational[1, 2]}, {4, 4 3^Rational[1, 2]}, {
          2, 2 3^Rational[1, 2]}}, {{1, 1.7320508075688772`}, {4, 0}, {8, 
          0}, {0, 0}, {0, 0}, {3, 5.196152422706632}, {2, 0}, {6, 0}, {10, 
          0}, {5, 8.660254037844386}, {4, 6.928203230275509}, {
          2, 3.4641016151377544`}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{1, 3^Rational[1, 2]}, {4, 0}, {8, 0}, {0, 0}, {0, 0}, {
           3, 3 3^Rational[1, 2]}, {2, 0}, {6, 0}, {10, 0}, {
           5, 5 3^Rational[1, 2]}, {4, 4 3^Rational[1, 2]}, {
           2, 2 3^Rational[1, 2]}}, {{1, 1.7320508075688772`}, {4, 0}, {8, 
           0}, {0, 0}, {0, 0}, {3, 5.196152422706632}, {2, 0}, {6, 0}, {10, 
           0}, {5, 8.660254037844386}, {4, 6.928203230275509}, {
           2, 3.4641016151377544`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "5"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{4, 0}, {3, 3 3^Rational[1, 2]}, {8, 0}, {1, 0}, {
          Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {2, 0}, {3, 0}, {
          1, 3^Rational[1, 2]}, {9, 0}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {10, 0}, {7, 0}, {
          5, 5 3^Rational[1, 2]}, {2, 2 3^Rational[1, 2]}, {
          Rational[7, 2], Rational[7, 2] 3^Rational[1, 2]}, {0, 0}, {5, 0}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[9, 2], Rational[9, 2] 3^Rational[1, 2]}, {
          4, 4 3^Rational[1, 2]}, {6, 0}, {0, 0}}, {{4, 0}, {
          3, 5.196152422706632}, {8, 0}, {1, 0}, {1.5, 2.598076211353316}, {2,
           0}, {3, 0}, {1, 1.7320508075688772`}, {9, 0}, {0.5, 
          0.8660254037844386}, {10, 0}, {7, 0}, {5, 8.660254037844386}, {
          2, 3.4641016151377544`}, {3.5, 6.06217782649107}, {0, 0}, {5, 0}, {
          2.5, 4.330127018922193}, {4.5, 7.794228634059947}, {
          4, 6.928203230275509}, {6, 0}, {0, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{4, 0}, {3, 3 3^Rational[1, 2]}, {8, 0}, {1, 0}, {
           Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {2, 0}, {3, 0}, {
           1, 3^Rational[1, 2]}, {9, 0}, {
           Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {10, 0}, {7, 
           0}, {5, 5 3^Rational[1, 2]}, {2, 2 3^Rational[1, 2]}, {
           Rational[7, 2], Rational[7, 2] 3^Rational[1, 2]}, {0, 0}, {5, 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[9, 2], Rational[9, 2] 3^Rational[1, 2]}, {
           4, 4 3^Rational[1, 2]}, {6, 0}, {0, 0}}, {{4, 0}, {
           3, 5.196152422706632}, {8, 0}, {1, 0}, {1.5, 2.598076211353316}, {
           2, 0}, {3, 0}, {1, 1.7320508075688772`}, {9, 0}, {0.5, 
           0.8660254037844386}, {10, 0}, {7, 0}, {5, 8.660254037844386}, {
           2, 3.4641016151377544`}, {3.5, 6.06217782649107}, {0, 0}, {5, 0}, {
           2.5, 4.330127018922193}, {4.5, 7.794228634059947}, {
           4, 6.928203230275509}, {6, 0}, {0, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "10"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{5, 5 3^Rational[1, 2]}, {Rational[8, 3], 0}, {
          2, 2 3^Rational[1, 2]}, {Rational[16, 3], 0}, {Rational[2, 3], 0}, {
          1, 3^Rational[1, 2]}, {Rational[4, 3], 0}, {
          Rational[7, 3], 7 3^Rational[-1, 2]}, {
          Rational[14, 3], 14 3^Rational[-1, 2]}, {Rational[22, 3], 0}, {10, 
          0}, {4, 4 3^Rational[1, 2]}, {Rational[10, 3], 0}, {
          Rational[28, 3], 0}, {Rational[4, 3], 4 3^Rational[-1, 2]}, {
          Rational[1, 3], 3^Rational[-1, 2]}, {Rational[20, 3], 0}, {
          3, 3 3^Rational[1, 2]}, {4, 0}, {2, 0}, {
          Rational[8, 3], 8 3^Rational[-1, 2]}, {
          Rational[13, 3], 13 3^Rational[-1, 2]}, {8, 0}, {6, 0}, {0, 0}, {
          Rational[26, 3], 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {0, 
          0}, {Rational[14, 3], 0}, {Rational[2, 3], 2 3^Rational[-1, 2]}, {
          Rational[11, 3], 11 3^Rational[-1, 2]}, {
          Rational[5, 3], 5 3^Rational[-1, 2]}}, {{5, 8.660254037844386}, {
          2.6666666666666665`, 0}, {2, 3.4641016151377544`}, {
          5.333333333333333, 0}, {0.6666666666666666, 0}, {
          1, 1.7320508075688772`}, {1.3333333333333333`, 0}, {
          2.3333333333333335`, 4.041451884327381}, {4.666666666666667, 
          8.082903768654761}, {7.333333333333333, 0}, {10, 0}, {
          4, 6.928203230275509}, {3.3333333333333335`, 0}, {
          9.333333333333334, 0}, {1.3333333333333333`, 2.3094010767585034`}, {
          0.3333333333333333, 0.5773502691896258}, {6.666666666666667, 0}, {
          3, 5.196152422706632}, {4, 0}, {2, 0}, {2.6666666666666665`, 
          4.618802153517007}, {4.333333333333333, 7.505553499465136}, {8, 
          0}, {6, 0}, {0, 0}, {8.666666666666666, 0}, {3.3333333333333335`, 
          5.773502691896258}, {0, 0}, {4.666666666666667, 0}, {
          0.6666666666666666, 1.1547005383792517`}, {3.6666666666666665`, 
          6.350852961085884}, {1.6666666666666667`, 2.886751345948129}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5, 5 3^Rational[1, 2]}, {Rational[8, 3], 0}, {
           2, 2 3^Rational[1, 2]}, {Rational[16, 3], 0}, {
           Rational[2, 3], 0}, {1, 3^Rational[1, 2]}, {Rational[4, 3], 0}, {
           Rational[7, 3], 7 3^Rational[-1, 2]}, {
           Rational[14, 3], 14 3^Rational[-1, 2]}, {Rational[22, 3], 0}, {10, 
           0}, {4, 4 3^Rational[1, 2]}, {Rational[10, 3], 0}, {
           Rational[28, 3], 0}, {Rational[4, 3], 4 3^Rational[-1, 2]}, {
           Rational[1, 3], 3^Rational[-1, 2]}, {Rational[20, 3], 0}, {
           3, 3 3^Rational[1, 2]}, {4, 0}, {2, 0}, {
           Rational[8, 3], 8 3^Rational[-1, 2]}, {
           Rational[13, 3], 13 3^Rational[-1, 2]}, {8, 0}, {6, 0}, {0, 0}, {
           Rational[26, 3], 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {0, 
           0}, {Rational[14, 3], 0}, {Rational[2, 3], 2 3^Rational[-1, 2]}, {
           Rational[11, 3], 11 3^Rational[-1, 2]}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}}, {{5, 8.660254037844386}, {
           2.6666666666666665`, 0}, {2, 3.4641016151377544`}, {
           5.333333333333333, 0}, {0.6666666666666666, 0}, {
           1, 1.7320508075688772`}, {1.3333333333333333`, 0}, {
           2.3333333333333335`, 4.041451884327381}, {4.666666666666667, 
           8.082903768654761}, {7.333333333333333, 0}, {10, 0}, {
           4, 6.928203230275509}, {3.3333333333333335`, 0}, {
           9.333333333333334, 0}, {1.3333333333333333`, 
           2.3094010767585034`}, {0.3333333333333333, 0.5773502691896258}, {
           6.666666666666667, 0}, {3, 5.196152422706632}, {4, 0}, {2, 0}, {
           2.6666666666666665`, 4.618802153517007}, {4.333333333333333, 
           7.505553499465136}, {8, 0}, {6, 0}, {0, 0}, {
           8.666666666666666, 0}, {3.3333333333333335`, 5.773502691896258}, {
           0, 0}, {4.666666666666667, 0}, {0.6666666666666666, 
           1.1547005383792517`}, {3.6666666666666665`, 6.350852961085884}, {
           1.6666666666666667`, 2.886751345948129}}]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "15"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{9, 0}, {Rational[9, 2], Rational[9, 2] 3^Rational[1, 2]}, {4,
           0}, {Rational[19, 4], Rational[19, 4] 3^Rational[1, 2]}, {
          Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {
          Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[11, 4], Rational[11, 4] 3^Rational[1, 2]}, {0, 0}, {7, 
          0}, {Rational[7, 4], Rational[7, 4] 3^Rational[1, 2]}, {2, 0}, {
          Rational[9, 4], Rational[9, 4] 3^Rational[1, 2]}, {6, 0}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2], 0}, {8, 0}, {Rational[19, 2], 0}, {
          Rational[17, 2], 0}, {Rational[15, 2], 0}, {
          2, 2 3^Rational[1, 2]}, {10, 0}, {0, 0}, {Rational[9, 2], 0}, {
          Rational[11, 2], 0}, {Rational[3, 2], 0}, {
          Rational[13, 4], Rational[13, 4] 3^Rational[1, 2]}, {
          5, 5 3^Rational[1, 2]}, {1, 0}, {4, 4 3^Rational[1, 2]}, {
          Rational[17, 4], Rational[17, 4] 3^Rational[1, 2]}, {
          1, 3^Rational[1, 2]}, {3, 0}, {Rational[5, 2], 0}, {
          Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {5, 0}, {
          Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
          3, 3 3^Rational[1, 2]}, {Rational[13, 2], 0}, {Rational[7, 2], 0}, {
          Rational[7, 2], Rational[7, 2] 3^Rational[1, 2]}, {
          Rational[15, 4], Rational[15, 4] 3^Rational[1, 2]}}, {{9, 0}, {4.5, 
          7.794228634059947}, {4, 0}, {4.75, 8.227241335952167}, {1.25, 
          2.1650635094610964`}, {1.5, 2.598076211353316}, {2.5, 
          4.330127018922193}, {2.75, 4.763139720814412}, {0, 0}, {7, 0}, {
          1.75, 3.031088913245535}, {2, 0}, {2.25, 3.8971143170299736`}, {6, 
          0}, {0.5, 0.8660254037844386}, {0.5, 0}, {8, 0}, {9.5, 0}, {
          8.5, 0}, {7.5, 0}, {2, 3.4641016151377544`}, {10, 0}, {0, 0}, {
          4.5, 0}, {5.5, 0}, {1.5, 0}, {3.25, 5.629165124598851}, {
          5, 8.660254037844386}, {1, 0}, {4, 6.928203230275509}, {4.25, 
          7.361215932167728}, {1, 1.7320508075688772`}, {3, 0}, {2.5, 0}, {
          0.25, 0.4330127018922193}, {5, 0}, {0.75, 1.299038105676658}, {
          3, 5.196152422706632}, {6.5, 0}, {3.5, 0}, {3.5, 
          6.06217782649107}, {3.75, 6.495190528383289}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{9, 0}, {Rational[9, 2], Rational[9, 2] 3^Rational[1, 2]}, {
           4, 0}, {Rational[19, 4], Rational[19, 4] 3^Rational[1, 2]}, {
           Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {
           Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[11, 4], Rational[11, 4] 3^Rational[1, 2]}, {0, 0}, {7, 
           0}, {Rational[7, 4], Rational[7, 4] 3^Rational[1, 2]}, {2, 0}, {
           Rational[9, 4], Rational[9, 4] 3^Rational[1, 2]}, {6, 0}, {
           Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
           Rational[1, 2], 0}, {8, 0}, {Rational[19, 2], 0}, {
           Rational[17, 2], 0}, {Rational[15, 2], 0}, {
           2, 2 3^Rational[1, 2]}, {10, 0}, {0, 0}, {Rational[9, 2], 0}, {
           Rational[11, 2], 0}, {Rational[3, 2], 0}, {
           Rational[13, 4], Rational[13, 4] 3^Rational[1, 2]}, {
           5, 5 3^Rational[1, 2]}, {1, 0}, {4, 4 3^Rational[1, 2]}, {
           Rational[17, 4], Rational[17, 4] 3^Rational[1, 2]}, {
           1, 3^Rational[1, 2]}, {3, 0}, {Rational[5, 2], 0}, {
           Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {5, 0}, {
           Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
           3, 3 3^Rational[1, 2]}, {Rational[13, 2], 0}, {
           Rational[7, 2], 0}, {
           Rational[7, 2], Rational[7, 2] 3^Rational[1, 2]}, {
           Rational[15, 4], Rational[15, 4] 3^Rational[1, 2]}}, {{9, 0}, {4.5,
            7.794228634059947}, {4, 0}, {4.75, 8.227241335952167}, {1.25, 
           2.1650635094610964`}, {1.5, 2.598076211353316}, {2.5, 
           4.330127018922193}, {2.75, 4.763139720814412}, {0, 0}, {7, 0}, {
           1.75, 3.031088913245535}, {2, 0}, {2.25, 3.8971143170299736`}, {6, 
           0}, {0.5, 0.8660254037844386}, {0.5, 0}, {8, 0}, {9.5, 0}, {
           8.5, 0}, {7.5, 0}, {2, 3.4641016151377544`}, {10, 0}, {0, 0}, {
           4.5, 0}, {5.5, 0}, {1.5, 0}, {3.25, 5.629165124598851}, {
           5, 8.660254037844386}, {1, 0}, {4, 6.928203230275509}, {4.25, 
           7.361215932167728}, {1, 1.7320508075688772`}, {3, 0}, {2.5, 0}, {
           0.25, 0.4330127018922193}, {5, 0}, {0.75, 1.299038105676658}, {
           3, 5.196152422706632}, {6.5, 0}, {3.5, 0}, {3.5, 
           6.06217782649107}, {3.75, 6.495190528383289}}]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"n:\"", 
        TemplateBox[{2}, "Spacer1"], "20"}, "RowDefault"], 
      TraditionalForm]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530189748101*^9, 3.779530696349279*^9, 
  3.779549726102799*^9, 3.779552078490097*^9, 3.779554207523673*^9, 
  3.779554823272841*^9, 3.780352327527114*^9, 3.7803969252086287`*^9, 
  3.780397445492181*^9, 3.78039985855621*^9, 3.780400233206872*^9, 
  3.7804003725480013`*^9, 3.7804011261795073`*^9, 3.78040128913553*^9, 
  3.780401811091136*^9, 3.780402265882186*^9, 3.780402394244734*^9},
 CellLabel->"Out[2]=",
 CellID->1826328955]
}, Open  ]],

Cell[TextData[{
 "If the value of \[OpenCurlyDoubleQuote]NumberOfElements\
\[CloseCurlyDoubleQuote] is ",
 StyleBox["Automatic", "Program"],
 " in single-mandala mode ",
 Cell[BoxData[
  FormBox["6", TraditionalForm]]],
 " elements are used, and in multi-mandala mode ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]]],
 " elements are used (for each mandala.)"
}], "Text",
 CellChangeTimes->{{3.7804014418608027`*^9, 3.780401554928094*^9}},
 CellID->1309521567]
}, Open  ]],

Cell[CellGroupData[{

Cell["Radius", "Subsubsection",
 CellChangeTimes->{{3.7792104475045767`*^9, 3.779210450452279*^9}, {
  3.779813636547844*^9, 3.779813637620281*^9}},
 CellLabel->"In[3]:=",
 CellID->2143089842],

Cell[TextData[{
 "In single-mandala mode the option ",
 Cell[BoxData["\"\<Radius\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " specifies the radius of the seed segment and the mandala:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779215776446734*^9, 3.7792158126494417`*^9}, 
   3.7798136409390078`*^9, {3.780398891489297*^9, 3.780398907812546*^9}},
 CellID->243091625],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "226", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<Radius\>\"", "\[Rule]", "r"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<radius:\>\"", ",", 
           RowBox[{"Spacer", "[", "2", "]"}], ",", " ", "r"}], "}"}], "]"}]}],
        ",", 
       RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "5", ",", "20", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
  3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
  3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
  3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
  3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
  3.7792103389880943`*^9, 3.779210494339717*^9}, {3.779210890416614*^9, 
  3.779210930914516*^9}, {3.779211071206423*^9, 3.779211078527849*^9}},
 CellLabel->"In[1]:=",
 CellID->1752536521],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
          Rational[5, 6], 0}, {0, 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
          Rational[25, 4] 3^Rational[-1, 2], Rational[25, 12]}, {
          Rational[5, 3], 0}, {Rational[10, 3], 0}, {0, 0}, {
          Rational[5, 4] 3^Rational[-1, 2], Rational[5, 12]}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[5, 2], 0}, {Rational[25, 6], 0}}, {{2.1650635094610964`, 
          1.25}, {0.8333333333333334, 0}, {0, 0}, {2.886751345948129, 
          1.6666666666666667`}, {1.4433756729740645`, 0.8333333333333334}, {5,
           0}, {3.6084391824351614`, 2.0833333333333335`}, {
          1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {0, 0}, {
          0.7216878364870323, 0.4166666666666667}, {4.330127018922193, 2.5}, {
          2.5, 0}, {4.166666666666667, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
           Rational[5, 6], 0}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
           Rational[25, 4] 3^Rational[-1, 2], Rational[25, 12]}, {
           Rational[5, 3], 0}, {Rational[10, 3], 0}, {0, 0}, {
           Rational[5, 4] 3^Rational[-1, 2], Rational[5, 12]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[5, 2], 0}, {Rational[25, 6], 0}}, {{2.1650635094610964`, 
           1.25}, {0.8333333333333334, 0}, {0, 0}, {2.886751345948129, 
           1.6666666666666667`}, {1.4433756729740645`, 0.8333333333333334}, {
           5, 0}, {3.6084391824351614`, 2.0833333333333335`}, {
           1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {0, 0}, {
           0.7216878364870323, 0.4166666666666667}, {4.330127018922193, 
           2.5}, {2.5, 0}, {4.166666666666667, 0}}]]}, {{{1, 0}, {0, -1}}, {0,
         0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    Frame->True,
    PlotLabel->FormBox[
      TemplateBox[{"\"radius:\"", 
        TemplateBox[{2}, "Spacer1"], "5"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
          Rational[5, 3], 0}, {0, 0}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
          Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
          Rational[10, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
          Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
          5 3^Rational[1, 2], 5}, {5, 0}, {Rational[25, 3], 0}}, {{
          4.330127018922193, 2.5}, {1.6666666666666667`, 0}, {0, 0}, {
          5.773502691896258, 3.3333333333333335`}, {2.886751345948129, 
          1.6666666666666667`}, {10, 0}, {7.216878364870323, 
          4.166666666666667}, {3.3333333333333335`, 0}, {
          6.666666666666667, 0}, {0, 0}, {1.4433756729740645`, 
          0.8333333333333334}, {8.660254037844386, 5}, {5, 0}, {
          8.333333333333334, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[5, 3], 0}, {0, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {10, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[10, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           5 3^Rational[1, 2], 5}, {5, 0}, {Rational[25, 3], 0}}, {{
           4.330127018922193, 2.5}, {1.6666666666666667`, 0}, {0, 0}, {
           5.773502691896258, 3.3333333333333335`}, {2.886751345948129, 
           1.6666666666666667`}, {10, 0}, {7.216878364870323, 
           4.166666666666667}, {3.3333333333333335`, 0}, {
           6.666666666666667, 0}, {0, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {8.660254037844386, 5}, {5, 0}, {
           8.333333333333334, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    Frame->True,
    PlotLabel->FormBox[
      TemplateBox[{"\"radius:\"", 
        TemplateBox[{2}, "Spacer1"], "10"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{Rational[15, 4] 3^Rational[1, 2], Rational[15, 4]}, {
          Rational[5, 2], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
          Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {15, 0}, {
          Rational[25, 4] 3^Rational[1, 2], Rational[25, 4]}, {5, 0}, {10, 
          0}, {0, 0}, {Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
          Rational[15, 2] 3^Rational[1, 2], Rational[15, 2]}, {
          Rational[15, 2], 0}, {Rational[25, 2], 0}}, {{6.495190528383289, 
          3.75}, {2.5, 0}, {0, 0}, {8.660254037844386, 5}, {4.330127018922193,
           2.5}, {15, 0}, {10.825317547305483`, 6.25}, {5, 0}, {10, 0}, {0, 
          0}, {2.1650635094610964`, 1.25}, {12.990381056766578`, 7.5}, {
          7.5, 0}, {12.5, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[15, 4] 3^Rational[1, 2], Rational[15, 4]}, {
           Rational[5, 2], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {15, 0}, {
           Rational[25, 4] 3^Rational[1, 2], Rational[25, 4]}, {5, 0}, {10, 
           0}, {0, 0}, {Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
           Rational[15, 2] 3^Rational[1, 2], Rational[15, 2]}, {
           Rational[15, 2], 0}, {Rational[25, 2], 0}}, {{6.495190528383289, 
           3.75}, {2.5, 0}, {0, 0}, {8.660254037844386, 5}, {
           4.330127018922193, 2.5}, {15, 0}, {10.825317547305483`, 6.25}, {5, 
           0}, {10, 0}, {0, 0}, {2.1650635094610964`, 1.25}, {
           12.990381056766578`, 7.5}, {7.5, 0}, {12.5, 0}}]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    Frame->True,
    PlotLabel->FormBox[
      TemplateBox[{"\"radius:\"", 
        TemplateBox[{2}, "Spacer1"], "15"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {0, 0}, {
          20 3^Rational[-1, 2], Rational[20, 3]}, {
          10 3^Rational[-1, 2], Rational[10, 3]}, {20, 0}, {
          25 3^Rational[-1, 2], Rational[25, 3]}, {Rational[20, 3], 0}, {
          Rational[40, 3], 0}, {0, 0}, {
          5 3^Rational[-1, 2], Rational[5, 3]}, {10 3^Rational[1, 2], 10}, {
          10, 0}, {Rational[50, 3], 0}}, {{8.660254037844386, 5}, {
          3.3333333333333335`, 0}, {0, 0}, {11.547005383792516`, 
          6.666666666666667}, {5.773502691896258, 3.3333333333333335`}, {20, 
          0}, {14.433756729740645`, 8.333333333333334}, {
          6.666666666666667, 0}, {13.333333333333334`, 0}, {0, 0}, {
          2.886751345948129, 1.6666666666666667`}, {17.32050807568877, 10}, {
          10, 0}, {16.666666666666668`, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {0, 0}, {
           20 3^Rational[-1, 2], Rational[20, 3]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {20, 0}, {
           25 3^Rational[-1, 2], Rational[25, 3]}, {Rational[20, 3], 0}, {
           Rational[40, 3], 0}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {10 3^Rational[1, 2], 10}, {
           10, 0}, {Rational[50, 3], 0}}, {{8.660254037844386, 5}, {
           3.3333333333333335`, 0}, {0, 0}, {11.547005383792516`, 
           6.666666666666667}, {5.773502691896258, 3.3333333333333335`}, {20, 
           0}, {14.433756729740645`, 8.333333333333334}, {
           6.666666666666667, 0}, {13.333333333333334`, 0}, {0, 0}, {
           2.886751345948129, 1.6666666666666667`}, {17.32050807568877, 10}, {
           10, 0}, {16.666666666666668`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    Frame->True,
    PlotLabel->FormBox[
      TemplateBox[{"\"radius:\"", 
        TemplateBox[{2}, "Spacer1"], "20"}, "RowDefault"], 
      TraditionalForm]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530189810899*^9, 3.779530696406304*^9, 
  3.779549726148584*^9, 3.779552078550557*^9, 3.779554207589572*^9, 
  3.77955482333646*^9, 3.7803523275884047`*^9, 3.78039692527777*^9, 
  3.780397445684495*^9, 3.780399858612138*^9, 3.780400233256839*^9, 
  3.7804003726876307`*^9, 3.780401126259115*^9, 3.7804012891838827`*^9, 
  3.780401811141083*^9, 3.780402265936804*^9, 3.78040239432714*^9},
 CellLabel->"Out[1]=",
 CellID->1126980114]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->1474856175],

Cell["\<\
If the value given to \[OpenCurlyDoubleQuote]Radius\[CloseCurlyDoubleQuote] \
is a list of positive numbers then multi-mandala mode is used. \
\>", "Text",
 CellChangeTimes->{{3.7803523532106123`*^9, 3.7803527179301367`*^9}, {
  3.780357999193799*^9, 3.78035802765632*^9}, {3.7803989174999123`*^9, 
  3.780399001811801*^9}},
 CellID->550679557],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\"\<Radius\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["r", "1"], ",", "\[Ellipsis]", ",", 
      SubscriptBox["r", "k"]}], "}"}]}], TraditionalForm]]],
 ", then for each ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "i"], TraditionalForm]]],
 " is made a mandala with radius ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "i"], TraditionalForm]]],
 " and the mandalas are drawn upon each other according to their radii \
order:"
}], "Text",
 CellChangeTimes->{{3.7803523532106123`*^9, 3.7803527179301367`*^9}, {
  3.780357999193799*^9, 3.78035802765632*^9}, {3.7803989174999123`*^9, 
  3.780399033781681*^9}, {3.780401598577044*^9, 3.780401599633678*^9}},
 CellID->1756522347],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "98", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<Radius\>\"", "\[Rule]", 
   RowBox[{"Range", "[", 
    RowBox[{"8", ",", "2", ",", 
     RowBox[{"-", "2"}]}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.78035272038799*^9, 3.780352763605698*^9}, {
   3.7803528181260138`*^9, 3.780352822523449*^9}, {3.780352918106587*^9, 
   3.7803529193313227`*^9}, {3.780355765302945*^9, 3.780355811438033*^9}, {
   3.780355845617735*^9, 3.7803558711422653`*^9}, {3.780355919002684*^9, 
   3.780355949668729*^9}, {3.7803560362527237`*^9, 3.780356041301*^9}, 
   3.780397500415825*^9, {3.780399058558549*^9, 3.7803990636846237`*^9}, {
   3.780400528078211*^9, 3.780400560647031*^9}},
 CellLabel->"In[1]:=",
 CellID->1158968662],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.30000000000000004`], GeometricTransformationBox[{
      {GrayLevel[0.30000000000000004`], 
       FilledCurveBox[NCache[
        BezierCurve[{{Rational[16, 3], 0}, {
           8 3^Rational[-1, 2], Rational[8, 3]}, {4 3^Rational[1, 2], 4}, {
           Rational[8, 3], 0}, {0, 0}, {8, 0}, {
           4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}}], 
         BezierCurve[{{5.333333333333333, 0}, {4.618802153517007, 
           2.6666666666666665`}, {6.928203230275509, 4}, {
           2.6666666666666665`, 0}, {0, 0}, {8, 0}, {2.3094010767585034`, 
           1.3333333333333333`}, {0, 0}}]]]}, GeometricTransformationBox[
       {GrayLevel[0.30000000000000004`], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[16, 3], 0}, {
            8 3^Rational[-1, 2], Rational[8, 3]}, {4 3^Rational[1, 2], 4}, {
            Rational[8, 3], 0}, {0, 0}, {8, 0}, {
            4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}}], 
          BezierCurve[{{5.333333333333333, 0}, {4.618802153517007, 
            2.6666666666666665`}, {6.928203230275509, 4}, {
            2.6666666666666665`, 0}, {0, 0}, {8, 0}, {2.3094010767585034`, 
            1.3333333333333333`}, {0, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
   {GrayLevel[0.], 
    StyleBox[GeometricTransformationBox[{
       {GrayLevel[0.], 
        StyleBox[
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {3 3^Rational[1, 2], 3}, {4, 0}, {2, 0}, {
             3^Rational[1, 2], 1}, {2 3^Rational[1, 2], 2}, {6, 0}, {0, 0}}], 
           BezierCurve[{{0, 0}, {5.196152422706632, 3}, {4, 0}, {2, 0}, {
             1.7320508075688772`, 1}, {3.4641016151377544`, 2}, {6, 0}, {0, 
             0}}]]],
         FontColor->GrayLevel[0.]]}, GeometricTransformationBox[
        {GrayLevel[0.], 
         StyleBox[
          FilledCurveBox[NCache[
           BezierCurve[{{0, 0}, {3 3^Rational[1, 2], 3}, {4, 0}, {2, 0}, {
              3^Rational[1, 2], 1}, {2 3^Rational[1, 2], 2}, {6, 0}, {0, 0}}],
             BezierCurve[{{0, 0}, {5.196152422706632, 3}, {4, 0}, {2, 0}, {
              1.7320508075688772`, 1}, {3.4641016151377544`, 2}, {6, 0}, {0, 
              0}}]]],
          FontColor->GrayLevel[0.]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.6000000000000001], GeometricTransformationBox[{
      {GrayLevel[0.6000000000000001], 
       FilledCurveBox[NCache[
        BezierCurve[{{Rational[8, 3], 0}, {0, 0}, {4, 0}, {
           2 3^Rational[1, 2], 2}, {0, 0}, {Rational[4, 3], 0}, {
           2 3^Rational[-1, 2], Rational[2, 3]}, {
           4 3^Rational[-1, 2], Rational[4, 3]}}], 
         BezierCurve[{{2.6666666666666665`, 0}, {0, 0}, {4, 0}, {
           3.4641016151377544`, 2}, {0, 0}, {1.3333333333333333`, 0}, {
           1.1547005383792517`, 0.6666666666666666}, {2.3094010767585034`, 
           1.3333333333333333`}}]]]}, GeometricTransformationBox[
       {GrayLevel[0.6000000000000001], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[8, 3], 0}, {0, 0}, {4, 0}, {
            2 3^Rational[1, 2], 2}, {0, 0}, {Rational[4, 3], 0}, {
            2 3^Rational[-1, 2], Rational[2, 3]}, {
            4 3^Rational[-1, 2], Rational[4, 3]}}], 
          BezierCurve[{{2.6666666666666665`, 0}, {0, 0}, {4, 0}, {
            3.4641016151377544`, 2}, {0, 0}, {1.3333333333333333`, 0}, {
            1.1547005383792517`, 0.6666666666666666}, {2.3094010767585034`, 
            1.3333333333333333`}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
   {GrayLevel[0.5], GeometricTransformationBox[{
      {GrayLevel[0.5], 
       FilledCurveBox[NCache[
        BezierCurve[{{3^Rational[-1, 2], Rational[1, 3]}, {
           2 3^Rational[-1, 2], Rational[2, 3]}, {Rational[4, 3], 0}, {
           Rational[2, 3], 0}, {3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {2, 
           0}}], BezierCurve[{{0.5773502691896258, 0.3333333333333333}, {
           1.1547005383792517`, 0.6666666666666666}, {
           1.3333333333333333`, 0}, {0.6666666666666666, 0}, {
           1.7320508075688772`, 1}, {0, 0}, {0, 0}, {2, 0}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.5], 
        FilledCurveBox[NCache[
         BezierCurve[{{3^Rational[-1, 2], Rational[1, 3]}, {
            2 3^Rational[-1, 2], Rational[2, 3]}, {Rational[4, 3], 0}, {
            Rational[2, 3], 0}, {3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {2, 
            0}}], BezierCurve[{{0.5773502691896258, 0.3333333333333333}, {
            1.1547005383792517`, 0.6666666666666666}, {
            1.3333333333333333`, 0}, {0.6666666666666666, 0}, {
            1.7320508075688772`, 1}, {0, 0}, {0, 0}, {2, 0}}]]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}]], "Output",
 CellChangeTimes->{
  3.780352764657557*^9, {3.7803528082602158`*^9, 3.780352822936346*^9}, 
   3.780352919619977*^9, {3.7803557661407433`*^9, 3.780355811973094*^9}, {
   3.7803558466129704`*^9, 3.780355871486659*^9}, {3.7803559200275707`*^9, 
   3.780355966418314*^9}, {3.780356037454155*^9, 3.780356041772314*^9}, 
   3.7803969253547707`*^9, 3.7803974457577477`*^9, {3.780397500931127*^9, 
   3.78039752066059*^9}, 3.780399064263102*^9, 3.780399858730023*^9, 
   3.7804002333667717`*^9, 3.7804003727633753`*^9, {3.780400529383724*^9, 
   3.780400561093937*^9}, 3.7804011271274977`*^9, 3.7804012892595053`*^9, 
   3.7804018112180157`*^9, 3.780402266018321*^9, 3.780402394482888*^9},
 CellLabel->"Out[2]=",
 CellID->349009458]
}, Open  ]],

Cell[TextData[{
 "Using the option ",
 StyleBox["ColorFunction", "Program"],
 " colorized mandalas are obtained:"
}], "Text",
 CellChangeTimes->{{3.780352831950411*^9, 3.7803528634063997`*^9}, {
  3.780399076824996*^9, 3.780399088321889*^9}},
 CellID->1291275064],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "98", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomMandala", "[", 
  RowBox[{
   RowBox[{"\"\<Radius\>\"", "\[Rule]", 
    RowBox[{"Range", "[", 
     RowBox[{"8", ",", "2", ",", 
      RowBox[{"-", "2"}]}], "]"}]}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"ColorData", "[", "\"\<Rainbow\>\"", "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.78035272038799*^9, 3.780352763605698*^9}, {
   3.7803528181260138`*^9, 3.780352822523449*^9}, {3.780352864419767*^9, 
   3.7803529133027697`*^9}, 3.780355779480691*^9, {3.780355817627421*^9, 
   3.7803558190541487`*^9}, {3.7803558492542963`*^9, 
   3.7803559537188387`*^9}, {3.780356047805509*^9, 3.7803560572880917`*^9}, {
   3.780397435876933*^9, 3.780397516489586*^9}, 3.780399070488058*^9, {
   3.7804005453080873`*^9, 3.780400553627207*^9}},
 CellLabel->"In[3]:=",
 CellID->785014743],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
    GeometricTransformationBox[{
      {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
       {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[16, 3], 0}, {
            8 3^Rational[-1, 2], Rational[8, 3]}, {4 3^Rational[1, 2], 4}, {
            Rational[8, 3], 0}, {0, 0}, {8, 0}, {
            4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}}], 
          BezierCurve[{{5.333333333333333, 0}, {4.618802153517007, 
            2.6666666666666665`}, {6.928203230275509, 4}, {
            2.6666666666666665`, 0}, {0, 0}, {8, 0}, {2.3094010767585034`, 
            1.3333333333333333`}, {0, 0}}]]]}}, GeometricTransformationBox[
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[16, 3], 0}, {
             8 3^Rational[-1, 2], Rational[8, 3]}, {4 3^Rational[1, 2], 4}, {
             Rational[8, 3], 0}, {0, 0}, {8, 0}, {
             4 3^Rational[-1, 2], Rational[4, 3]}, {0, 0}}], 
           BezierCurve[{{5.333333333333333, 0}, {4.618802153517007, 
             2.6666666666666665`}, {6.928203230275509, 4}, {
             2.6666666666666665`, 0}, {0, 0}, {8, 0}, {2.3094010767585034`, 
             1.3333333333333333`}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
   {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
      {RGBColor[0.471412, 0.108766, 0.527016], 
       {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
        FilledCurveBox[NCache[
         BezierCurve[{{4, 0}, {2, 0}, {6, 0}, {3^Rational[1, 2], 1}, {
            2 3^Rational[1, 2], 2}, {0, 0}, {3 3^Rational[1, 2], 3}, {0, 0}}],
           BezierCurve[{{4, 0}, {2, 0}, {6, 0}, {1.7320508075688772`, 1}, {
            3.4641016151377544`, 2}, {0, 0}, {5.196152422706632, 3}, {0, 
            0}}]]]}}, GeometricTransformationBox[
       {RGBColor[0.471412, 0.108766, 0.527016], 
        {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
         FilledCurveBox[NCache[
          BezierCurve[{{4, 0}, {2, 0}, {6, 0}, {3^Rational[1, 2], 1}, {
             2 3^Rational[1, 2], 2}, {0, 0}, {3 3^Rational[1, 2], 3}, {0, 
             0}}], BezierCurve[{{4, 0}, {2, 0}, {6, 0}, {
             1.7320508075688772`, 1}, {3.4641016151377544`, 2}, {0, 0}, {
             5.196152422706632, 3}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
   {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
    GeometricTransformationBox[{
      {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
       {FaceForm[RGBColor[
        0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {Rational[8, 3], 0}, {0, 0}, {
            2 3^Rational[-1, 2], Rational[2, 3]}, {Rational[4, 3], 0}, {
            2 3^Rational[1, 2], 2}, {4, 0}, {
            4 3^Rational[-1, 2], Rational[4, 3]}}], 
          BezierCurve[{{0, 0}, {2.6666666666666665`, 0}, {0, 0}, {
            1.1547005383792517`, 0.6666666666666666}, {
            1.3333333333333333`, 0}, {3.4641016151377544`, 2}, {4, 0}, {
            2.3094010767585034`, 1.3333333333333333`}}]]]}}, 
      GeometricTransformationBox[
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        {FaceForm[RGBColor[
         0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {Rational[8, 3], 0}, {0, 0}, {
             2 3^Rational[-1, 2], Rational[2, 3]}, {Rational[4, 3], 0}, {
             2 3^Rational[1, 2], 2}, {4, 0}, {
             4 3^Rational[-1, 2], Rational[4, 3]}}], 
           BezierCurve[{{0, 0}, {2.6666666666666665`, 0}, {0, 0}, {
             1.1547005383792517`, 0.6666666666666666}, {
             1.3333333333333333`, 0}, {3.4641016151377544`, 2}, {4, 0}, {
             2.3094010767585034`, 1.3333333333333333`}}]]]}}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
   {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
      {RGBColor[0.513417, 0.72992, 0.440682], 
       {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {Rational[2, 3], 0}, {2, 0}, {
            Rational[4, 3], 0}, {3^Rational[1, 2], 1}, {0, 0}, {
            2 3^Rational[-1, 2], Rational[2, 3]}, {
            3^Rational[-1, 2], Rational[1, 3]}}], 
          BezierCurve[{{0, 0}, {0.6666666666666666, 0}, {2, 0}, {
            1.3333333333333333`, 0}, {1.7320508075688772`, 1}, {0, 0}, {
            1.1547005383792517`, 0.6666666666666666}, {0.5773502691896258, 
            0.3333333333333333}}]]]}}, GeometricTransformationBox[
       {RGBColor[0.513417, 0.72992, 0.440682], 
        {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {Rational[2, 3], 0}, {2, 0}, {
             Rational[4, 3], 0}, {3^Rational[1, 2], 1}, {0, 0}, {
             2 3^Rational[-1, 2], Rational[2, 3]}, {
             3^Rational[-1, 2], Rational[1, 3]}}], 
           BezierCurve[{{0, 0}, {0.6666666666666666, 0}, {2, 0}, {
             1.3333333333333333`, 0}, {1.7320508075688772`, 1}, {0, 0}, {
             1.1547005383792517`, 0.6666666666666666}, {0.5773502691896258, 
             0.3333333333333333}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}}]], "Output",
 CellChangeTimes->{{3.780352878900381*^9, 3.780352913669449*^9}, 
   3.780355779921562*^9, 3.780355820105206*^9, {3.7803558502763777`*^9, 
   3.78035596358084*^9}, {3.780356048540967*^9, 3.780356057888439*^9}, 
   3.780396925408024*^9, {3.7803974368902493`*^9, 3.780397516973599*^9}, {
   3.780399082612617*^9, 3.780399093208192*^9}, 3.780399858773913*^9, 
   3.780400233415513*^9, 3.780400372795405*^9, {3.780400545941224*^9, 
   3.78040055408335*^9}, 3.7804011272962027`*^9, 3.780401289296255*^9, 
   3.7804018113279457`*^9, 3.780402266061675*^9, 3.780402394547426*^9},
 CellLabel->"Out[4]=",
 CellID->1024120649]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RotationalSymmetryOrder", "Subsubsection",
 CellChangeTimes->{{3.7792096714085712`*^9, 3.779209680295725*^9}, {
  3.779210278729834*^9, 3.779210279606997*^9}, {3.779263126131741*^9, 
  3.779263132824936*^9}, {3.779813643757214*^9, 3.779813644438074*^9}},
 CellLabel->"In[5]:=",
 CellID->1591450289],

Cell[TextData[{
 "The ",
 Cell[BoxData["\"\<RotationalSymmetryOrder\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " option specifies how many copies of the seed segment comprise the \
mandala:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779554653322496*^9, 3.779554690259698*^9}, {
   3.779555272593183*^9, 3.779555373134893*^9}, 3.779813647840884*^9},
 CellID->348738944],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "122", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "a"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<order:\>\"", ",", 
           RowBox[{"Spacer", "[", "2", "]"}], ",", " ", "a"}], "}"}], 
         "]"}]}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "6"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
  3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
  3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
  3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
  3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
  3.7792103389880943`*^9, 3.7792104365025063`*^9}, {3.779211021501114*^9, 
  3.779211044126947*^9}, {3.779251905225918*^9, 3.77925190595535*^9}, {
  3.779257003230566*^9, 3.779257003363258*^9}, {3.7792631364219723`*^9, 
  3.7792631568897142`*^9}},
 CellLabel->"In[1]:=",
 CellID->596183838],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{0, Rational[20, 3]}, {5, 0}, {0, 0}, {
           0, Rational[5, 3]}, {0, 5}, {Rational[25, 3], 0}, {
           Rational[20, 3], 0}, {0, Rational[10, 3]}, {0, Rational[25, 3]}, {
           10, 0}, {0, 10}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 
           0}}], BezierCurve[{{0, 6.666666666666667}, {5, 0}, {0, 0}, {
           0, 1.6666666666666667`}, {0, 5}, {8.333333333333334, 0}, {
           6.666666666666667, 0}, {0, 3.3333333333333335`}, {
           0, 8.333333333333334}, {10, 0}, {0, 10}, {
           3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 0}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, Rational[20, 3]}, {5, 0}, {0, 0}, {
            0, Rational[5, 3]}, {0, 5}, {Rational[25, 3], 0}, {
            Rational[20, 3], 0}, {0, Rational[10, 3]}, {0, Rational[25, 3]}, {
            10, 0}, {0, 10}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 
            0}}], BezierCurve[{{0, 6.666666666666667}, {5, 0}, {0, 0}, {
            0, 1.6666666666666667`}, {0, 5}, {8.333333333333334, 0}, {
            6.666666666666667, 0}, {0, 3.3333333333333335`}, {
            0, 8.333333333333334}, {10, 0}, {0, 10}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 
            0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{-1, 
     0}, {0, -1}}}],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "2"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 0}, {0, 
           0}, {Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}, {
           Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 0}, {
           5, 5 3^Rational[1, 2]}, {Rational[10, 3], 0}, {
           Rational[5, 3], 0}, {0, 0}}], 
         BezierCurve[{{3.3333333333333335`, 5.773502691896258}, {5, 0}, {0, 
           0}, {0.8333333333333334, 1.4433756729740645`}, {2.5, 
           4.330127018922193}, {8.333333333333334, 0}, {
           6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {
           4.166666666666667, 7.216878364870323}, {10, 0}, {
           5, 8.660254037844386}, {3.3333333333333335`, 0}, {
           1.6666666666666667`, 0}, {0, 0}}]]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 0}, {0, 
            0}, {Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 0}, {
            5, 5 3^Rational[1, 2]}, {Rational[10, 3], 0}, {
            Rational[5, 3], 0}, {0, 0}}], 
          BezierCurve[{{3.3333333333333335`, 5.773502691896258}, {5, 0}, {0, 
            0}, {0.8333333333333334, 1.4433756729740645`}, {2.5, 
            4.330127018922193}, {8.333333333333334, 0}, {
            6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {
            4.166666666666667, 7.216878364870323}, {10, 0}, {
            5, 8.660254037844386}, {3.3333333333333335`, 0}, {
            1.6666666666666667`, 0}, {0, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "3"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{
           Rational[10, 3] 2^Rational[1, 2], Rational[10, 3] 
            2^Rational[1, 2]}, {5, 0}, {0, 0}, {
           Rational[5, 3] 2^Rational[-1, 2], Rational[5, 3] 
            2^Rational[-1, 2]}, {5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {
           Rational[5, 3] 2^Rational[1, 2], Rational[5, 3] 
            2^Rational[1, 2]}, {
           Rational[25, 3] 2^Rational[-1, 2], Rational[25, 3] 
            2^Rational[-1, 2]}, {10, 0}, {
           5 2^Rational[1, 2], 5 2^Rational[1, 2]}, {Rational[10, 3], 0}, {
           Rational[5, 3], 0}, {0, 0}}], 
         BezierCurve[{{4.714045207910317, 4.714045207910317}, {5, 0}, {0, 
           0}, {1.1785113019775793`, 1.1785113019775793`}, {
           3.5355339059327373`, 3.5355339059327373`}, {
           8.333333333333334, 0}, {6.666666666666667, 0}, {
           2.3570226039551585`, 2.3570226039551585`}, {5.892556509887896, 
           5.892556509887896}, {10, 0}, {7.0710678118654755`, 
           7.0710678118654755`}, {3.3333333333333335`, 0}, {
           1.6666666666666667`, 0}, {0, 0}}]]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{
            Rational[10, 3] 2^Rational[1, 2], Rational[10, 3] 
             2^Rational[1, 2]}, {5, 0}, {0, 0}, {
            Rational[5, 3] 2^Rational[-1, 2], Rational[5, 3] 
             2^Rational[-1, 2]}, {5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            Rational[5, 3] 2^Rational[1, 2], Rational[5, 3] 
             2^Rational[1, 2]}, {
            Rational[25, 3] 2^Rational[-1, 2], Rational[25, 3] 
             2^Rational[-1, 2]}, {10, 0}, {
            5 2^Rational[1, 2], 5 2^Rational[1, 2]}, {Rational[10, 3], 0}, {
            Rational[5, 3], 0}, {0, 0}}], 
          BezierCurve[{{4.714045207910317, 4.714045207910317}, {5, 0}, {0, 
            0}, {1.1785113019775793`, 1.1785113019775793`}, {
            3.5355339059327373`, 3.5355339059327373`}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {
            2.3570226039551585`, 2.3570226039551585`}, {5.892556509887896, 
            5.892556509887896}, {10, 0}, {7.0710678118654755`, 
            7.0710678118654755`}, {3.3333333333333335`, 0}, {
            1.6666666666666667`, 0}, {0, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 
        0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 
     1}, {-1, 0}}}],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "4"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 
           0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
           5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           Rational[5, 3], 0}, {0, 0}}], 
         BezierCurve[{{5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 
           0}, {1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
           2.5}, {8.333333333333334, 0}, {6.666666666666667, 0}, {
           2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}, {10, 0}, {8.660254037844386, 5}, {
           3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 0}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
            5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
            Rational[5, 3], 0}, {0, 0}}], 
          BezierCurve[{{5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 
            0}, {1.4433756729740645`, 0.8333333333333334}, {4.330127018922193,
             2.5}, {8.333333333333334, 0}, {6.666666666666667, 0}, {
            2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
            4.166666666666667}, {10, 0}, {8.660254037844386, 5}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 
            0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "6"}, "RowDefault"], TraditionalForm]]}],
   "}"}]], "Output",
 CellChangeTimes->{3.779530189927194*^9, 3.779530696477406*^9, 
  3.779549726206019*^9, 3.779552078620487*^9, 3.7795542077666407`*^9, 
  3.779554823410139*^9, 3.780352327659851*^9, 3.780396925465775*^9, 
  3.78039744587792*^9, 3.780399858886779*^9, 3.780400233563921*^9, 
  3.78040037291685*^9, 3.780401127441173*^9, 3.7804012901712303`*^9, 
  3.7804018114032803`*^9, 3.780402266148513*^9, 3.780402394670643*^9},
 CellLabel->"Out[1]=",
 CellID->314317038]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "122", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "a"}], ",", 
       RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "False"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<order:\>\"", ",", 
           RowBox[{"Spacer", "[", "2", "]"}], ",", " ", "a"}], "}"}], 
         "]"}]}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "6"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
  3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
  3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
  3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
  3.7792102201386213`*^9}, {3.7792102857846823`*^9, 3.77921029146478*^9}, {
  3.7792103389880943`*^9, 3.7792104365025063`*^9}, {3.779211021501114*^9, 
  3.779211044126947*^9}, {3.779251021100274*^9, 3.779251037635249*^9}, {
  3.779251834192518*^9, 3.7792518984285994`*^9}, {3.779257009665217*^9, 
  3.77925700991092*^9}, {3.779263163556967*^9, 3.77926318751266*^9}, {
  3.7792638535806704`*^9, 3.779263886092898*^9}, {3.7792649615182133`*^9, 
  3.7792649616964273`*^9}},
 CellLabel->"In[2]:=",
 CellID->514215138],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{Rational[-20, 3], 0}, {5, 0}, {0, 0}, {
          Rational[-5, 3], 0}, {-5, 0}, {Rational[25, 3], 0}, {
          Rational[20, 3], 0}, {Rational[-10, 3], 0}, {Rational[-25, 3], 0}, {
          10, 0}, {-10, 0}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 
          0}}], BezierCurve[{{-6.666666666666667, 0}, {5, 0}, {0, 
          0}, {-1.6666666666666667`, 0}, {-5, 0}, {8.333333333333334, 0}, {
          6.666666666666667, 0}, {-3.3333333333333335`, 
           0}, {-8.333333333333334, 0}, {10, 0}, {-10, 0}, {
          3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 0}}]]]}, {{{
     1, 0}, {0, 1}}, {{-1, 0}, {0, -1}}}],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "2"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{Rational[-10, 3], 10 3^Rational[-1, 2]}, {5, 0}, {0, 
          0}, {Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
          Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[25, 3], 0}, {Rational[20, 3], 0}, {
          Rational[-5, 3], 5 3^Rational[-1, 2]}, {
          Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 
          0}, {-5, 5 3^Rational[1, 2]}, {Rational[10, 3], 0}, {
          Rational[5, 3], 0}, {0, 0}}], 
        BezierCurve[{{-3.3333333333333335`, 5.773502691896258}, {5, 0}, {0, 
          0}, {-0.8333333333333334, 1.4433756729740645`}, {-2.5, 
          4.330127018922193}, {8.333333333333334, 0}, {
          6.666666666666667, 0}, {-1.6666666666666667`, 
          2.886751345948129}, {-4.166666666666667, 7.216878364870323}, {10, 
          0}, {-5, 8.660254037844386}, {3.3333333333333335`, 0}, {
          1.6666666666666667`, 0}, {0, 0}}]]]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-0.5,
        0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "3"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{0, Rational[20, 3]}, {5, 0}, {0, 0}, {
          0, Rational[5, 3]}, {0, 5}, {Rational[25, 3], 0}, {
          Rational[20, 3], 0}, {0, Rational[10, 3]}, {0, Rational[25, 3]}, {
          10, 0}, {0, 10}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {0, 
          0}}], BezierCurve[{{0, 6.666666666666667}, {5, 0}, {0, 0}, {
          0, 1.6666666666666667`}, {0, 5}, {8.333333333333334, 0}, {
          6.666666666666667, 0}, {0, 3.3333333333333335`}, {
          0, 8.333333333333334}, {10, 0}, {0, 10}, {3.3333333333333335`, 0}, {
          1.6666666666666667`, 0}, {0, 0}}]]]}, {{{1, 0}, {0, 1}}, {{0, -1}, {
     1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 0}}}],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "4"}, "RowDefault"], TraditionalForm]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 0}, {0, 0}, {
          Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[25, 3], 0}, {Rational[20, 3], 0}, {
          Rational[5, 3], 5 3^Rational[-1, 2]}, {
          Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 0}, {
          5, 5 3^Rational[1, 2]}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {
          0, 0}}], 
        BezierCurve[{{3.3333333333333335`, 5.773502691896258}, {5, 0}, {0, 
          0}, {0.8333333333333334, 1.4433756729740645`}, {2.5, 
          4.330127018922193}, {8.333333333333334, 0}, {
          6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {
          4.166666666666667, 7.216878364870323}, {10, 0}, {
          5, 8.660254037844386}, {3.3333333333333335`, 0}, {
          1.6666666666666667`, 0}, {0, 0}}]]]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox[
      TemplateBox[{"\"order:\"", 
        TemplateBox[{2}, "Spacer1"], "6"}, "RowDefault"], TraditionalForm]]}],
   "}"}]], "Output",
 CellChangeTimes->{3.7795301899807796`*^9, 3.779530696496313*^9, 
  3.779549726243931*^9, 3.779552078674882*^9, 3.779554207826466*^9, 
  3.7795548234692163`*^9, 3.780352327711418*^9, 3.780396925520132*^9, 
  3.780397445941585*^9, 3.780399858927557*^9, 3.780400233617079*^9, 
  3.780400372955287*^9, 3.7804011275227203`*^9, 3.7804012902156067`*^9, 
  3.7804018114443493`*^9, 3.780402266196188*^9, 3.780402394741074*^9},
 CellLabel->"Out[2]=",
 CellID->2064169693]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SymmetricSeed", "Subsubsection",
 CellChangeTimes->{{3.7792096714085712`*^9, 3.779209680295725*^9}, 
   3.7792509423068247`*^9, {3.779813653511994*^9, 3.779813654155367*^9}},
 CellLabel->"In[3]:=",
 CellID->102779823],

Cell[TextData[{
 "The option ",
 Cell[BoxData["\"\<SymmetricSeed\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro"],
 " specifies should the seed segment be symmetric or not:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7795554198248053`*^9, 3.7795554360570917`*^9}, 
   3.779813657990252*^9},
 CellID->864129566],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "122", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{
       RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "s"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", "s"}]}], "]"}]}], ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7792096816355667`*^9, 3.779209715576331*^9}, {
  3.779209822736602*^9, 3.7792098279882298`*^9}, {3.779209917993441*^9, 
  3.7792099429427433`*^9}, {3.779209977584106*^9, 3.779209990182027*^9}, {
  3.779210021719304*^9, 3.7792100595641727`*^9}, {3.779210132816928*^9, 
  3.7792102201386213`*^9}, {3.779210673764666*^9, 3.779210736120331*^9}},
 CellLabel->"In[1]:=",
 CellID->153699908],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 
           0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
           5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           Rational[5, 3], 0}, {0, 0}}], 
         BezierCurve[{{5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 
           0}, {1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
           2.5}, {8.333333333333334, 0}, {6.666666666666667, 0}, {
           2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
           4.166666666666667}, {10, 0}, {8.660254037844386, 5}, {
           3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 0}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
            5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
            Rational[5, 3], 0}, {0, 0}}], 
          BezierCurve[{{5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 
            0}, {1.4433756729740645`, 0.8333333333333334}, {4.330127018922193,
             2.5}, {8.333333333333334, 0}, {6.666666666666667, 0}, {
            2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
            4.166666666666667}, {10, 0}, {8.660254037844386, 5}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {0, 
            0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["True", TraditionalForm]], ",", 
   GraphicsBox[GeometricTransformationBox[
     {GrayLevel[0.25], 
      FilledCurveBox[NCache[
       BezierCurve[{{Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 0}, {0, 0}, {
          Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
          Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
          Rational[25, 3], 0}, {Rational[20, 3], 0}, {
          Rational[5, 3], 5 3^Rational[-1, 2]}, {
          Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 0}, {
          5, 5 3^Rational[1, 2]}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {
          0, 0}}], 
        BezierCurve[{{3.3333333333333335`, 5.773502691896258}, {5, 0}, {0, 
          0}, {0.8333333333333334, 1.4433756729740645`}, {2.5, 
          4.330127018922193}, {8.333333333333334, 0}, {
          6.666666666666667, 0}, {1.6666666666666667`, 2.886751345948129}, {
          4.166666666666667, 7.216878364870323}, {10, 0}, {
          5, 8.660254037844386}, {3.3333333333333335`, 0}, {
          1.6666666666666667`, 0}, {0, 0}}]]]}, 
     NCache[{{{1, 0}, {0, 
       1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
        Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
        Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
       0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
        Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
        Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
       1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
       0.5}}, {{-0.5, -0.8660254037844386}, {0.8660254037844386, -0.5}}, {{-1,
        0}, {0, -1}}, {{-0.5, 
       0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
       0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
    PlotLabel->FormBox["False", TraditionalForm]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530190036433*^9, 3.7795306966126223`*^9, 
  3.7795497262854633`*^9, 3.7795520787628593`*^9, 3.779554207889797*^9, 
  3.779554823548723*^9, 3.780352327767679*^9, 3.780396925564261*^9, 
  3.78039744601023*^9, 3.7803998589835987`*^9, 3.78040023366628*^9, 
  3.780400373001276*^9, 3.780401127604788*^9, 3.780401290266555*^9, 
  3.780401811503352*^9, 3.780402266249761*^9, 3.780402394811124*^9},
 CellLabel->"Out[1]=",
 CellID->2049196613]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Possible Issues", "Subsection",
 CellLabel->"In[2]:=",
 CellID->92483860],

Cell["\<\
In general, the rotational symmetry order should be an integer, but for \
didactic purposes it is permitted to be a positive real. If the specified \
rotational symmetry order is not an integer, then the produced mandalas will \
appear \[OpenCurlyDoubleQuote]open\[CloseCurlyDoubleQuote]:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.779263400927953*^9, 3.7792635026073713`*^9}, {
  3.77955473289776*^9, 3.779554763835937*^9}, {3.779554960894959*^9, 
  3.7795549825845947`*^9}},
 CellID->33251573],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "23", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"rotOrders", "=", 
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "10"}], "}"}], ",", "5"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.779263560002858*^9, 3.779263584554348*^9}},
 CellLabel->"In[1]:=",
 CellID->1011908234],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6.085484626482263`", ",", "2.9381790110368655`", ",", "3.128109253466171`",
    ",", "8.847769237462618`", ",", "3.5230051458598517`"}], "}"}]], "Output",\

 CellChangeTimes->{3.779530190254772*^9, 3.779530696720546*^9, 
  3.779549726367083*^9, 3.779552078908875*^9, 3.779554208018536*^9, 
  3.779554823805475*^9, 3.780352327932832*^9, 3.780396925656107*^9, 
  3.780397446130047*^9, 3.7803998590705223`*^9, 3.7804002337455072`*^9, 
  3.7804003730771027`*^9, 3.7804011277588253`*^9, 3.78040129039657*^9, 
  3.780401811607382*^9, 3.780402266347795*^9, 3.780402394928472*^9},
 CellLabel->"Out[2]=",
 CellID->1652227752]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "32", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "r"}], "]"}]}], 
    ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "rotOrders"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251247722981*^9}, {
   3.779251430624795*^9, 3.779251433986175*^9}, {3.779251469640259*^9, 
   3.779251472399377*^9}, {3.779263268206717*^9, 3.779263319015059*^9}, {
   3.779263509742968*^9, 3.779263543436346*^9}, {3.779263588848214*^9, 
   3.7792636572186832`*^9}},
 CellLabel->"In[3]:=",
 CellID->284227293],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{4.3483975999188464`, 2.468083935570267}, {
          Rational[10, 3], 0}, {7.247329333198078, 4.113473225950445}, {5, 
          0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
          1.4494658666396154`, 0.822694645190089}, {5.797863466558462, 
          3.290778580760356}, {Rational[25, 3], 0}, {8.696795199837693, 
          4.936167871140534}, {2.898931733279231, 1.645389290380178}, {0., 
          0.}, {10, 0}}, {{4.3483975999188464`, 2.468083935570267}, {
          3.3333333333333335`, 0}, {7.247329333198078, 4.113473225950445}, {5,
           0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
          1.4494658666396154`, 0.822694645190089}, {5.797863466558462, 
          3.290778580760356}, {8.333333333333334, 0}, {8.696795199837693, 
          4.936167871140534}, {2.898931733279231, 1.645389290380178}, {0., 
          0.}, {10, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{4.3483975999188464`, 2.468083935570267}, {
           Rational[10, 3], 0}, {7.247329333198078, 4.113473225950445}, {5, 
           0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
           1.4494658666396154`, 0.822694645190089}, {5.797863466558462, 
           3.290778580760356}, {Rational[25, 3], 0}, {8.696795199837693, 
           4.936167871140534}, {2.898931733279231, 1.645389290380178}, {0., 
           0.}, {10, 0}}, {{4.3483975999188464`, 2.468083935570267}, {
           3.3333333333333335`, 0}, {7.247329333198078, 4.113473225950445}, {
           5, 0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
           1.4494658666396154`, 0.822694645190089}, {5.797863466558462, 
           3.290778580760356}, {8.333333333333334, 0}, {8.696795199837693, 
           4.936167871140534}, {2.898931733279231, 1.645389290380178}, {0., 
           0.}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{0.5126849349583986, -0.8585768209465607}, {
      0.8585768209465607, 
      0.5126849349583986}}, {{-0.47430831493340525`, -0.8803588032075522}, {
      0.8803588032075522, -0.47430831493340525`}}, {{-0.9990263901421196, \
-0.044116570578474505`}, {
      0.044116570578474505`, -0.9990263901421196}}, {{-0.5500632447700673, 
      0.8351230009723268}, {-0.8351230009723268, -0.5500632447700673}}, {{
      0.43500811240622456`, 0.9004265334499942}, {-0.9004265334499942, 
      0.43500811240622456`}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{2.4039924182678254`, 4.384155614586555}, {
          Rational[10, 3], 0}, {4.006654030446375, 7.3069260243109255`}, {5, 
          0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
          0.8013308060892751, 1.4613852048621851`}, {3.2053232243571004`, 
          5.845540819448741}, {Rational[25, 3], 0}, {4.807984836535651, 
          8.76831122917311}, {1.6026616121785502`, 2.9227704097243703`}, {0., 
          0.}, {10, 0}}, {{2.4039924182678254`, 4.384155614586555}, {
          3.3333333333333335`, 0}, {4.006654030446375, 7.3069260243109255`}, {
          5, 0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
          0.8013308060892751, 1.4613852048621851`}, {3.2053232243571004`, 
          5.845540819448741}, {8.333333333333334, 0}, {4.807984836535651, 
          8.76831122917311}, {1.6026616121785502`, 2.9227704097243703`}, {0., 
          0.}, {10, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{2.4039924182678254`, 4.384155614586555}, {
           Rational[10, 3], 0}, {4.006654030446375, 7.3069260243109255`}, {5, 
           0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
           0.8013308060892751, 1.4613852048621851`}, {3.2053232243571004`, 
           5.845540819448741}, {Rational[25, 3], 0}, {4.807984836535651, 
           8.76831122917311}, {1.6026616121785502`, 2.9227704097243703`}, {0.,
            0.}, {10, 0}}, {{2.4039924182678254`, 4.384155614586555}, {
           3.3333333333333335`, 0}, {4.006654030446375, 
           7.3069260243109255`}, {5, 0}, {0, 0}, {1.6666666666666667`, 0}, {
           6.666666666666667, 0}, {0.8013308060892751, 1.4613852048621851`}, {
           3.2053232243571004`, 5.845540819448741}, {8.333333333333334, 0}, {
           4.807984836535651, 8.76831122917311}, {1.6026616121785502`, 
           2.9227704097243703`}, {0., 0.}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{-0.5376656362328651, -0.8431581486377916}, {
      0.8431581486377916, -0.5376656362328651}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{2.6833511091418583`, 4.218960396243031}, {
          Rational[10, 3], 0}, {4.472251848569764, 7.031600660405053}, {5, 
          0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
          0.8944503697139528, 1.4063201320810106`}, {3.577801478855811, 
          5.625280528324042}, {Rational[25, 3], 0}, {5.3667022182837165`, 
          8.437920792486063}, {1.7889007394279055`, 2.812640264162021}, {0., 
          0.}, {10, 0}}, {{2.6833511091418583`, 4.218960396243031}, {
          3.3333333333333335`, 0}, {4.472251848569764, 7.031600660405053}, {5,
           0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
          0.8944503697139528, 1.4063201320810106`}, {3.577801478855811, 
          5.625280528324042}, {8.333333333333334, 0}, {5.3667022182837165`, 
          8.437920792486063}, {1.7889007394279055`, 2.812640264162021}, {0., 
          0.}, {10, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{2.6833511091418583`, 4.218960396243031}, {
           Rational[10, 3], 0}, {4.472251848569764, 7.031600660405053}, {5, 
           0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
           0.8944503697139528, 1.4063201320810106`}, {3.577801478855811, 
           5.625280528324042}, {Rational[25, 3], 0}, {5.3667022182837165`, 
           8.437920792486063}, {1.7889007394279055`, 2.812640264162021}, {0., 
           0.}, {10, 0}}, {{2.6833511091418583`, 4.218960396243031}, {
           3.3333333333333335`, 0}, {4.472251848569764, 7.031600660405053}, {
           5, 0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
           0.8944503697139528, 1.4063201320810106`}, {3.577801478855811, 
           5.625280528324042}, {8.333333333333334, 0}, {5.3667022182837165`, 
           8.437920792486063}, {1.7889007394279055`, 2.812640264162021}, {0., 
           0.}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{-0.4239701460053728, -0.905676164694745}, {
      0.905676164694745, -0.4239701460053728}}, {{-0.6404986305923658, 
      0.7679593115584342}, {-0.7679593115584342, -0.6404986305923658}}}]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{4.688107783721539, 1.7382880682468942`}, {
          Rational[10, 3], 0}, {7.8135129728692325`, 2.8971467804114908`}, {5,
           0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
          1.5627025945738464`, 0.5794293560822982}, {6.250810378295386, 
          2.3177174243291927`}, {Rational[25, 3], 0}, {9.376215567443078, 
          3.4765761364937884`}, {3.125405189147693, 1.1588587121645963`}, {0.,
           0.}, {10, 0}}, {{4.688107783721539, 1.7382880682468942`}, {
          3.3333333333333335`, 0}, {7.8135129728692325`, 
          2.8971467804114908`}, {5, 0}, {0, 0}, {1.6666666666666667`, 0}, {
          6.666666666666667, 0}, {1.5627025945738464`, 0.5794293560822982}, {
          6.250810378295386, 2.3177174243291927`}, {8.333333333333334, 0}, {
          9.376215567443078, 3.4765761364937884`}, {3.125405189147693, 
          1.1588587121645963`}, {0., 0.}, {10, 0}}]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{4.688107783721539, 1.7382880682468942`}, {
           Rational[10, 3], 0}, {7.8135129728692325`, 2.8971467804114908`}, {
           5, 0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
           1.5627025945738464`, 0.5794293560822982}, {6.250810378295386, 
           2.3177174243291927`}, {Rational[25, 3], 0}, {9.376215567443078, 
           3.4765761364937884`}, {3.125405189147693, 1.1588587121645963`}, {
           0., 0.}, {10, 0}}, {{4.688107783721539, 1.7382880682468942`}, {
           3.3333333333333335`, 0}, {7.8135129728692325`, 
           2.8971467804114908`}, {5, 0}, {0, 0}, {1.6666666666666667`, 0}, {
           6.666666666666667, 0}, {1.5627025945738464`, 0.5794293560822982}, {
           6.250810378295386, 2.3177174243291927`}, {8.333333333333334, 0}, {
           9.376215567443078, 3.4765761364937884`}, {3.125405189147693, 
           1.1588587121645963`}, {0., 0.}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, {{{1., 0}, {0, 1.}}, {{
      0.7582683673432384, -0.6519425458478834}, {0.6519425458478834, 
      0.7582683673432384}}, {{0.14994183382676085`, -0.9886948196833379}, {
      0.9886948196833379, 
      0.14994183382676085`}}, {{-0.5308760682787003, -0.8474494675961208}, {
      0.8474494675961208, -0.5308760682787003}}, {{-0.9550348929373361, \
-0.29649342871667667`}, {
      0.29649342871667667`, -0.9550348929373361}}, {{-0.9174694297681365, 
      0.39780629135413426`}, {-0.39780629135413426`, -0.9174694297681365}}, \
{{-0.4363412002578974, 
      0.899781282844613}, {-0.899781282844613, -0.4363412002578974}}, {{
      0.255741970719846, 0.9667450772630443}, {-0.9667450772630443, 
      0.255741970719846}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       BezierCurveBox[
        NCache[{{3.140308051414003, 3.8908180813582622`}, {
          Rational[10, 3], 0}, {5.233846752356672, 6.4846968022637705`}, {5, 
          0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
          1.0467693504713345`, 1.2969393604527542`}, {4.187077401885338, 
          5.187757441811017}, {Rational[25, 3], 0}, {6.280616102828006, 
          7.7816361627165245`}, {2.093538700942669, 2.5938787209055083`}, {0.,
           0.}, {10, 0}}, {{3.140308051414003, 3.8908180813582622`}, {
          3.3333333333333335`, 0}, {5.233846752356672, 6.4846968022637705`}, {
          5, 0}, {0, 0}, {1.6666666666666667`, 0}, {6.666666666666667, 0}, {
          1.0467693504713345`, 1.2969393604527542`}, {4.187077401885338, 
          5.187757441811017}, {8.333333333333334, 0}, {6.280616102828006, 
          7.7816361627165245`}, {2.093538700942669, 2.5938787209055083`}, {0.,
           0.}, {10, 0}}]]}, GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{3.140308051414003, 3.8908180813582622`}, {
           Rational[10, 3], 0}, {5.233846752356672, 6.4846968022637705`}, {5, 
           0}, {0, 0}, {Rational[5, 3], 0}, {Rational[20, 3], 0}, {
           1.0467693504713345`, 1.2969393604527542`}, {4.187077401885338, 
           5.187757441811017}, {Rational[25, 3], 0}, {6.280616102828006, 
           7.7816361627165245`}, {2.093538700942669, 2.5938787209055083`}, {
           0., 0.}, {10, 0}}, {{3.140308051414003, 3.8908180813582622`}, {
           3.3333333333333335`, 0}, {5.233846752356672, 
           6.4846968022637705`}, {5, 0}, {0, 0}, {1.6666666666666667`, 0}, {
           6.666666666666667, 0}, {1.0467693504713345`, 
           1.2969393604527542`}, {4.187077401885338, 5.187757441811017}, {
           8.333333333333334, 0}, {6.280616102828006, 7.7816361627165245`}, {
           2.093538700942669, 2.5938787209055083`}, {0., 0.}, {10, 0}}]]}, {{{
        1, 0}, {0, -1}}, {0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{-0.21107722737795107`, -0.9774693877981226}, {
      0.9774693877981226, -0.21107722737795107`}}, {{-0.9108928081648735, 
      0.41264305644650195`}, {-0.41264305644650195`, \
-0.9108928081648735}}}]]}], "}"}]], "Output",
 CellChangeTimes->{3.7795301903124657`*^9, 3.779530696734569*^9, 
  3.779549726407813*^9, 3.7795520789551563`*^9, 3.7795542080733137`*^9, 
  3.7795548238565083`*^9, 3.780352327978743*^9, 3.780396925689237*^9, 
  3.7803974461848183`*^9, 3.7803998591032763`*^9, 3.7804002337765007`*^9, 
  3.780400373108409*^9, 3.7804011278285303`*^9, 3.7804012904140472`*^9, 
  3.780401811662142*^9, 3.7804022663938627`*^9, 3.780402394977028*^9},
 CellLabel->"Out[3]=",
 CellID->2028272154]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
     RowBox[{"RandomMandala", "[", 
      RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "r"}], "]"}]}], 
    ")"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "rotOrders"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251247722981*^9}, {
   3.779251430624795*^9, 3.779251433986175*^9}, {3.779251469640259*^9, 
   3.779251472399377*^9}, {3.779263268206717*^9, 3.779263319015059*^9}, {
   3.779263509742968*^9, 3.779263543436346*^9}, {3.779263588848214*^9, 
   3.779263633514599*^9}, 3.779555007271789*^9},
 CellLabel->"In[4]:=",
 CellID->1777398011],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{2.898931733279231, 1.645389290380178}, {
           Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
           1.4494658666396154`, 0.822694645190089}, {Rational[20, 3], 0}, {
           4.3483975999188464`, 2.468083935570267}, {5, 0}, {
           Rational[5, 3], 0}, {10, 0}, {7.247329333198078, 
           4.113473225950445}, {8.696795199837693, 4.936167871140534}, {
           5.797863466558462, 3.290778580760356}}], 
         BezierCurve[{{2.898931733279231, 1.645389290380178}, {
           3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
           8.333333333333334, 0}, {1.4494658666396154`, 0.822694645190089}, {
           6.666666666666667, 0}, {4.3483975999188464`, 2.468083935570267}, {
           5, 0}, {1.6666666666666667`, 0}, {10, 0}, {7.247329333198078, 
           4.113473225950445}, {8.696795199837693, 4.936167871140534}, {
           5.797863466558462, 3.290778580760356}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{2.898931733279231, 1.645389290380178}, {
            Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
            1.4494658666396154`, 0.822694645190089}, {Rational[20, 3], 0}, {
            4.3483975999188464`, 2.468083935570267}, {5, 0}, {
            Rational[5, 3], 0}, {10, 0}, {7.247329333198078, 
            4.113473225950445}, {8.696795199837693, 4.936167871140534}, {
            5.797863466558462, 3.290778580760356}}], 
          BezierCurve[{{2.898931733279231, 1.645389290380178}, {
            3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
            8.333333333333334, 0}, {1.4494658666396154`, 0.822694645190089}, {
            6.666666666666667, 0}, {4.3483975999188464`, 2.468083935570267}, {
            5, 0}, {1.6666666666666667`, 0}, {10, 0}, {7.247329333198078, 
            4.113473225950445}, {8.696795199837693, 4.936167871140534}, {
            5.797863466558462, 3.290778580760356}}]]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, {{{1., 0}, {0, 1.}}, {{
      0.5126849349583986, -0.8585768209465607}, {0.8585768209465607, 
      0.5126849349583986}}, {{-0.47430831493340525`, -0.8803588032075522}, {
      0.8803588032075522, -0.47430831493340525`}}, {{-0.9990263901421196, \
-0.044116570578474505`}, {
      0.044116570578474505`, -0.9990263901421196}}, {{-0.5500632447700673, 
      0.8351230009723268}, {-0.8351230009723268, -0.5500632447700673}}, {{
      0.43500811240622456`, 0.9004265334499942}, {-0.9004265334499942, 
      0.43500811240622456`}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{1.6026616121785502`, 2.9227704097243703`}, {
           Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
           0.8013308060892751, 1.4613852048621851`}, {Rational[20, 3], 0}, {
           2.4039924182678254`, 4.384155614586555}, {5, 0}, {
           Rational[5, 3], 0}, {10, 0}, {4.006654030446375, 
           7.3069260243109255`}, {4.807984836535651, 8.76831122917311}, {
           3.2053232243571004`, 5.845540819448741}}], 
         BezierCurve[{{1.6026616121785502`, 2.9227704097243703`}, {
           3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
           8.333333333333334, 0}, {0.8013308060892751, 1.4613852048621851`}, {
           6.666666666666667, 0}, {2.4039924182678254`, 4.384155614586555}, {
           5, 0}, {1.6666666666666667`, 0}, {10, 0}, {4.006654030446375, 
           7.3069260243109255`}, {4.807984836535651, 8.76831122917311}, {
           3.2053232243571004`, 5.845540819448741}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{1.6026616121785502`, 2.9227704097243703`}, {
            Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
            0.8013308060892751, 1.4613852048621851`}, {Rational[20, 3], 0}, {
            2.4039924182678254`, 4.384155614586555}, {5, 0}, {
            Rational[5, 3], 0}, {10, 0}, {4.006654030446375, 
            7.3069260243109255`}, {4.807984836535651, 8.76831122917311}, {
            3.2053232243571004`, 5.845540819448741}}], 
          BezierCurve[{{1.6026616121785502`, 2.9227704097243703`}, {
            3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
            8.333333333333334, 0}, {0.8013308060892751, 
            1.4613852048621851`}, {6.666666666666667, 0}, {
            2.4039924182678254`, 4.384155614586555}, {5, 0}, {
            1.6666666666666667`, 0}, {10, 0}, {4.006654030446375, 
            7.3069260243109255`}, {4.807984836535651, 8.76831122917311}, {
            3.2053232243571004`, 5.845540819448741}}]]]}, {{{1, 0}, {
        0, -1}}, {0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{-0.5376656362328651, -0.8431581486377916}, {
      0.8431581486377916, -0.5376656362328651}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{1.7889007394279055`, 2.812640264162021}, {
           Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
           0.8944503697139528, 1.4063201320810106`}, {Rational[20, 3], 0}, {
           2.6833511091418583`, 4.218960396243031}, {5, 0}, {
           Rational[5, 3], 0}, {10, 0}, {4.472251848569764, 
           7.031600660405053}, {5.3667022182837165`, 8.437920792486063}, {
           3.577801478855811, 5.625280528324042}}], 
         BezierCurve[{{1.7889007394279055`, 2.812640264162021}, {
           3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
           8.333333333333334, 0}, {0.8944503697139528, 1.4063201320810106`}, {
           6.666666666666667, 0}, {2.6833511091418583`, 4.218960396243031}, {
           5, 0}, {1.6666666666666667`, 0}, {10, 0}, {4.472251848569764, 
           7.031600660405053}, {5.3667022182837165`, 8.437920792486063}, {
           3.577801478855811, 5.625280528324042}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{1.7889007394279055`, 2.812640264162021}, {
            Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
            0.8944503697139528, 1.4063201320810106`}, {Rational[20, 3], 0}, {
            2.6833511091418583`, 4.218960396243031}, {5, 0}, {
            Rational[5, 3], 0}, {10, 0}, {4.472251848569764, 
            7.031600660405053}, {5.3667022182837165`, 8.437920792486063}, {
            3.577801478855811, 5.625280528324042}}], 
          BezierCurve[{{1.7889007394279055`, 2.812640264162021}, {
            3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
            8.333333333333334, 0}, {0.8944503697139528, 
            1.4063201320810106`}, {6.666666666666667, 0}, {
            2.6833511091418583`, 4.218960396243031}, {5, 0}, {
            1.6666666666666667`, 0}, {10, 0}, {4.472251848569764, 
            7.031600660405053}, {5.3667022182837165`, 8.437920792486063}, {
            3.577801478855811, 5.625280528324042}}]]]}, {{{1, 0}, {0, -1}}, {
        0, 0}}]}, {{{1., 0}, {
       0, 1.}}, {{-0.4239701460053728, -0.905676164694745}, {
      0.905676164694745, -0.4239701460053728}}, {{-0.6404986305923658, 
      0.7679593115584342}, {-0.7679593115584342, -0.6404986305923658}}}]], 
   ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{3.125405189147693, 1.1588587121645963`}, {
           Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
           1.5627025945738464`, 0.5794293560822982}, {Rational[20, 3], 0}, {
           4.688107783721539, 1.7382880682468942`}, {5, 0}, {
           Rational[5, 3], 0}, {10, 0}, {7.8135129728692325`, 
           2.8971467804114908`}, {9.376215567443078, 3.4765761364937884`}, {
           6.250810378295386, 2.3177174243291927`}}], 
         BezierCurve[{{3.125405189147693, 1.1588587121645963`}, {
           3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
           8.333333333333334, 0}, {1.5627025945738464`, 0.5794293560822982}, {
           6.666666666666667, 0}, {4.688107783721539, 1.7382880682468942`}, {
           5, 0}, {1.6666666666666667`, 0}, {10, 0}, {7.8135129728692325`, 
           2.8971467804114908`}, {9.376215567443078, 3.4765761364937884`}, {
           6.250810378295386, 2.3177174243291927`}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{3.125405189147693, 1.1588587121645963`}, {
            Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
            1.5627025945738464`, 0.5794293560822982}, {Rational[20, 3], 0}, {
            4.688107783721539, 1.7382880682468942`}, {5, 0}, {
            Rational[5, 3], 0}, {10, 0}, {7.8135129728692325`, 
            2.8971467804114908`}, {9.376215567443078, 3.4765761364937884`}, {
            6.250810378295386, 2.3177174243291927`}}], 
          BezierCurve[{{3.125405189147693, 1.1588587121645963`}, {
            3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
            8.333333333333334, 0}, {1.5627025945738464`, 
            0.5794293560822982}, {6.666666666666667, 0}, {4.688107783721539, 
            1.7382880682468942`}, {5, 0}, {1.6666666666666667`, 0}, {10, 0}, {
            7.8135129728692325`, 2.8971467804114908`}, {9.376215567443078, 
            3.4765761364937884`}, {6.250810378295386, 
            2.3177174243291927`}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
       1., 0}, {0, 1.}}, {{0.7582683673432384, -0.6519425458478834}, {
      0.6519425458478834, 0.7582683673432384}}, {{
      0.14994183382676085`, -0.9886948196833379}, {0.9886948196833379, 
      0.14994183382676085`}}, {{-0.5308760682787003, -0.8474494675961208}, {
      0.8474494675961208, -0.5308760682787003}}, {{-0.9550348929373361, \
-0.29649342871667667`}, {
      0.29649342871667667`, -0.9550348929373361}}, {{-0.9174694297681365, 
      0.39780629135413426`}, {-0.39780629135413426`, -0.9174694297681365}}, \
{{-0.4363412002578974, 
      0.899781282844613}, {-0.899781282844613, -0.4363412002578974}}, {{
      0.255741970719846, 0.9667450772630443}, {-0.9667450772630443, 
      0.255741970719846}}}]], ",", 
   GraphicsBox[GeometricTransformationBox[{
      {GrayLevel[0.25], 
       FilledCurveBox[NCache[
        BezierCurve[{{2.093538700942669, 2.5938787209055083`}, {
           Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
           1.0467693504713345`, 1.2969393604527542`}, {Rational[20, 3], 0}, {
           3.140308051414003, 3.8908180813582622`}, {5, 0}, {
           Rational[5, 3], 0}, {10, 0}, {5.233846752356672, 
           6.4846968022637705`}, {6.280616102828006, 7.7816361627165245`}, {
           4.187077401885338, 5.187757441811017}}], 
         BezierCurve[{{2.093538700942669, 2.5938787209055083`}, {
           3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
           8.333333333333334, 0}, {1.0467693504713345`, 
           1.2969393604527542`}, {6.666666666666667, 0}, {3.140308051414003, 
           3.8908180813582622`}, {5, 0}, {1.6666666666666667`, 0}, {10, 0}, {
           5.233846752356672, 6.4846968022637705`}, {6.280616102828006, 
           7.7816361627165245`}, {4.187077401885338, 5.187757441811017}}]]]}, 
      GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{2.093538700942669, 2.5938787209055083`}, {
            Rational[10, 3], 0}, {0., 0.}, {0, 0}, {Rational[25, 3], 0}, {
            1.0467693504713345`, 1.2969393604527542`}, {Rational[20, 3], 0}, {
            3.140308051414003, 3.8908180813582622`}, {5, 0}, {
            Rational[5, 3], 0}, {10, 0}, {5.233846752356672, 
            6.4846968022637705`}, {6.280616102828006, 7.7816361627165245`}, {
            4.187077401885338, 5.187757441811017}}], 
          BezierCurve[{{2.093538700942669, 2.5938787209055083`}, {
            3.3333333333333335`, 0}, {0., 0.}, {0, 0}, {
            8.333333333333334, 0}, {1.0467693504713345`, 
            1.2969393604527542`}, {6.666666666666667, 0}, {3.140308051414003, 
            3.8908180813582622`}, {5, 0}, {1.6666666666666667`, 0}, {10, 0}, {
            5.233846752356672, 6.4846968022637705`}, {6.280616102828006, 
            7.7816361627165245`}, {4.187077401885338, 
            5.187757441811017}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
       1., 0}, {0, 1.}}, {{-0.21107722737795107`, -0.9774693877981226}, {
      0.9774693877981226, -0.21107722737795107`}}, {{-0.9108928081648735, 
      0.41264305644650195`}, {-0.41264305644650195`, \
-0.9108928081648735}}}]]}], "}"}]], "Output",
 CellChangeTimes->{3.779530190373383*^9, 3.779530696767116*^9, 
  3.779549726443591*^9, 3.779552079022698*^9, 3.779554208129664*^9, 
  3.779554823881009*^9, 3.779555007561668*^9, 3.780352328027872*^9, 
  3.780396925721497*^9, 3.780397446240423*^9, 3.780399859137252*^9, 
  3.780400233812253*^9, 3.780400373141898*^9, 3.780401127901827*^9, 
  3.780401290454916*^9, 3.780401811710127*^9, 3.780402266436721*^9, 
  3.7804023950262938`*^9},
 CellLabel->"Out[4]=",
 CellID->14679800]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neat Examples", "Subsection",
 CellLabel->"In[5]:=",
 CellID->540091361],

Cell[CellGroupData[{

Cell["A table of random mandalas", "Subsubsection",
 CellChangeTimes->{{3.779215898015624*^9, 3.7792159077131643`*^9}, {
  3.77921605257127*^9, 3.7792160552710133`*^9}},
 CellLabel->"In[1]:=",
 CellID->483904929],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "342", "]"}], ";", 
  RowBox[{"Multicolumn", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RandomMandala", "[", 
       RowBox[{
        RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "6", ",", "12"}], "}"}], "]"}]}], ",", 
        RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"True", ",", "False"}], "}"}], "]"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}], ",", "36"}], "]"}],
     ",", "6"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7792159089343443`*^9, 3.779216031128572*^9}, {
  3.7792165900409107`*^9, 3.779216611908345*^9}, {3.779263681797743*^9, 
  3.779263694130961*^9}},
 CellLabel->"In[1]:=",
 CellID->143978082],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {0, 
            0}, {Rational[25, 3], 0}, {Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}}, {{
            8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {5, 
            0}, {2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {5.773502691896258, 
            3.3333333333333335`}, {6.666666666666667, 0}, {0, 0}, {
            8.333333333333334, 0}, {1.6666666666666667`, 0}, {
            4.330127018922193, 2.5}, {10, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{5 3^Rational[1, 2], 5}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {0,
              0}, {Rational[25, 3], 0}, {Rational[5, 3], 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}}, {{
             8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {5, 
             0}, {2.886751345948129, 1.6666666666666667`}, {
             3.3333333333333335`, 0}, {5.773502691896258, 
             3.3333333333333335`}, {6.666666666666667, 0}, {0, 0}, {
             8.333333333333334, 0}, {1.6666666666666667`, 0}, {
             4.330127018922193, 2.5}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 
          0}}]}, NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         LineBox[NCache[{{Rational[20, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
            5 3^Rational[1, 2], 5}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 3], 0}, {10, 0}, {0, 0}, {Rational[5, 3], 0}, {
            Rational[10, 3], 0}}, {{6.666666666666667, 0}, {2.886751345948129,
             1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {5,
             0}, {1.4433756729740645`, 0.8333333333333334}, {
            4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {
            5.773502691896258, 3.3333333333333335`}, {8.333333333333334, 0}, {
            10, 0}, {0, 0}, {1.6666666666666667`, 0}, {
            3.3333333333333335`, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          LineBox[NCache[{{Rational[20, 3], 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
             5 3^Rational[1, 2], 5}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {
             10, 0}, {0, 0}, {Rational[5, 3], 0}, {Rational[10, 3], 0}}, {{
             6.666666666666667, 0}, {2.886751345948129, 
             1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {5,
              0}, {1.4433756729740645`, 0.8333333333333334}, {
             4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {
             5.773502691896258, 3.3333333333333335`}, {
             8.333333333333334, 0}, {10, 0}, {0, 0}, {
             1.6666666666666667`, 0}, {3.3333333333333335`, 0}}]]}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {10, 
            0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {0, 0}, {Rational[20, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}}], 
          BezierCurve[{{8.660254037844386, 5}, {8.333333333333334, 0}, {10, 
            0}, {2.886751345948129, 1.6666666666666667`}, {5, 0}, {
            1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
            4.330127018922193, 2.5}, {3.3333333333333335`, 0}, {0, 0}, {
            6.666666666666667, 0}, {0, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 
            3.3333333333333335`}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[10, 3], 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {10, 
            0}, {Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[20, 3], 0}, {5, 0}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}}, {{
            3.3333333333333335`, 0}, {3.2197527542968944`, 
            0.8627301503417358}, {1.6098763771484472`, 0.4313650751708679}, {
            10, 0}, {4.829629131445341, 1.2940952255126035`}, {
            8.049381885742235, 2.1568253758543396`}, {9.659258262890681, 
            2.588190451025207}, {6.666666666666667, 0}, {5, 0}, {
            6.439505508593789, 1.7254603006834717`}, {8.333333333333334, 0}, {
            1.6666666666666667`, 0}, {0, 0}, {0, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{Rational[10, 3], 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {10, 
             0}, {Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[20, 3], 0}, {5, 0}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {0, 0}}, {{
             3.3333333333333335`, 0}, {3.2197527542968944`, 
             0.8627301503417358}, {1.6098763771484472`, 0.4313650751708679}, {
             10, 0}, {4.829629131445341, 1.2940952255126035`}, {
             8.049381885742235, 2.1568253758543396`}, {9.659258262890681, 
             2.588190451025207}, {6.666666666666667, 0}, {5, 0}, {
             6.439505508593789, 1.7254603006834717`}, {
             8.333333333333334, 0}, {1.6666666666666667`, 0}, {0, 0}, {0, 
             0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5, 0}, {Rational[20, 3], 0}, {0, 0}, {Rational[10, 3], 0}, {
           Rational[5, 3], 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
           Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
           Rational[10, 3], 10 3^Rational[-1, 2]}, {0, 0}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[25, 3], 0}, {
           5, 5 3^Rational[1, 2]}, {10, 0}}, {{5, 0}, {
           6.666666666666667, 0}, {0, 0}, {3.3333333333333335`, 0}, {
           1.6666666666666667`, 0}, {2.5, 4.330127018922193}, {
           4.166666666666667, 7.216878364870323}, {0.8333333333333334, 
           1.4433756729740645`}, {3.3333333333333335`, 5.773502691896258}, {0,
            0}, {1.6666666666666667`, 2.886751345948129}, {
           8.333333333333334, 0}, {5, 8.660254037844386}, {10, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {5, 5 3^Rational[1, 2]}, {5, 0}, {
            Rational[10, 3], 10 3^Rational[-1, 2]}, {10, 0}, {
            Rational[10, 3], 0}, {Rational[5, 3], 0}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[20, 3], 0}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[25, 3], 0}}], 
          BezierCurve[{{0, 0}, {5, 8.660254037844386}, {5, 0}, {
            3.3333333333333335`, 5.773502691896258}, {10, 0}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {
            1.6666666666666667`, 2.886751345948129}, {6.666666666666667, 0}, {
            0.8333333333333334, 1.4433756729740645`}, {2.5, 
            4.330127018922193}, {0, 0}, {4.166666666666667, 
            7.216878364870323}, {8.333333333333334, 0}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny]},
    {
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         LineBox[NCache[{{10, 0}, {Rational[25, 3], 0}, {
            Rational[20, 3], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {0, 
            0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[10, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {0, 0}, {
            8.660254037844386, 5}, {4.330127018922193, 2.5}, {
            1.4433756729740645`, 0.8333333333333334}, {5, 0}, {0, 0}, {
            5.773502691896258, 3.3333333333333335`}, {
            3.3333333333333335`, 0}, {2.886751345948129, 
            1.6666666666666667`}, {1.6666666666666667`, 0}, {
            7.216878364870323, 4.166666666666667}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          LineBox[NCache[{{10, 0}, {Rational[25, 3], 0}, {
             Rational[20, 3], 0}, {0, 0}, {5 3^Rational[1, 2], 5}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {0, 
             0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[10, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}}, {{10, 0}, {
             8.333333333333334, 0}, {6.666666666666667, 0}, {0, 0}, {
             8.660254037844386, 5}, {4.330127018922193, 2.5}, {
             1.4433756729740645`, 0.8333333333333334}, {5, 0}, {0, 0}, {
             5.773502691896258, 3.3333333333333335`}, {
             3.3333333333333335`, 0}, {2.886751345948129, 
             1.6666666666666667`}, {1.6666666666666667`, 0}, {
             7.216878364870323, 4.166666666666667}}]]}, {{{1, 0}, {0, -1}}, {
          0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{10, 0}, {0, 0}, {Rational[25, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {5, 
            0}, {0, 0}, {Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}}], 
          BezierCurve[{{10, 0}, {0, 0}, {8.333333333333334, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {2.886751345948129, 
            1.6666666666666667`}, {5.773502691896258, 3.3333333333333335`}, {
            6.666666666666667, 0}, {5, 0}, {0, 0}, {1.6666666666666667`, 0}, {
            4.330127018922193, 2.5}, {3.3333333333333335`, 0}, {
            7.216878364870323, 4.166666666666667}, {
            8.660254037844386, 5}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{
            Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[20, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[10, 3], 0}, {5, 0}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {0, 
            0}, {10, 0}, {Rational[25, 3], 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}}, {{4.829629131445341,
             1.2940952255126035`}, {8.049381885742235, 2.1568253758543396`}, {
            6.666666666666667, 0}, {1.6666666666666667`, 0}, {0, 0}, {
            1.6098763771484472`, 0.4313650751708679}, {
            3.3333333333333335`, 0}, {5, 0}, {6.439505508593789, 
            1.7254603006834717`}, {0, 0}, {10, 0}, {8.333333333333334, 0}, {
            3.2197527542968944`, 0.8627301503417358}, {9.659258262890681, 
            2.588190451025207}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{
             Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[20, 3], 0}, {Rational[5, 3], 0}, {0, 0}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[10, 3], 0}, {5, 0}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {0, 
             0}, {10, 0}, {Rational[25, 3], 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}}, {{
             4.829629131445341, 1.2940952255126035`}, {8.049381885742235, 
             2.1568253758543396`}, {6.666666666666667, 0}, {
             1.6666666666666667`, 0}, {0, 0}, {1.6098763771484472`, 
             0.4313650751708679}, {3.3333333333333335`, 0}, {5, 0}, {
             6.439505508593789, 1.7254603006834717`}, {0, 0}, {10, 0}, {
             8.333333333333334, 0}, {3.2197527542968944`, 
             0.8627301503417358}, {9.659258262890681, 
             2.588190451025207}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{Rational[20, 3], 0}, {Rational[25, 3], 0}, {
            5, 5 3^Rational[1, 2]}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[10, 3], 10 3^Rational[-1, 2]}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[5, 3], 0}, {10, 
            0}, {5, 0}, {0, 0}, {0, 0}, {Rational[10, 3], 0}}, {{
            6.666666666666667, 0}, {8.333333333333334, 0}, {
            5, 8.660254037844386}, {2.5, 4.330127018922193}, {
            3.3333333333333335`, 5.773502691896258}, {0.8333333333333334, 
            1.4433756729740645`}, {4.166666666666667, 7.216878364870323}, {
            1.6666666666666667`, 2.886751345948129}, {
            1.6666666666666667`, 0}, {10, 0}, {5, 0}, {0, 0}, {0, 0}, {
            3.3333333333333335`, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          BezierCurveBox[
           NCache[{{Rational[20, 3], 0}, {Rational[25, 3], 0}, {
             5, 5 3^Rational[1, 2]}, {
             Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
             Rational[10, 3], 10 3^Rational[-1, 2]}, {
             Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
             Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
             Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[5, 3], 0}, {10, 
             0}, {5, 0}, {0, 0}, {0, 0}, {Rational[10, 3], 0}}, {{
             6.666666666666667, 0}, {8.333333333333334, 0}, {
             5, 8.660254037844386}, {2.5, 4.330127018922193}, {
             3.3333333333333335`, 5.773502691896258}, {0.8333333333333334, 
             1.4433756729740645`}, {4.166666666666667, 7.216878364870323}, {
             1.6666666666666667`, 2.886751345948129}, {
             1.6666666666666667`, 0}, {10, 0}, {5, 0}, {0, 0}, {0, 0}, {
             3.3333333333333335`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[1, 2], 5}, {5 3^Rational[-1, 2], Rational[5, 3]}, {0,
             0}, {Rational[10, 3], 0}, {10, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[20, 3], 0}, {Rational[25, 3], 0}, {5, 0}}, {{0, 0}, {
            7.216878364870323, 4.166666666666667}, {1.6666666666666667`, 0}, {
            4.330127018922193, 2.5}, {8.660254037844386, 5}, {
            2.886751345948129, 1.6666666666666667`}, {0, 0}, {
            3.3333333333333335`, 0}, {10, 0}, {5.773502691896258, 
            3.3333333333333335`}, {1.4433756729740645`, 0.8333333333333334}, {
            6.666666666666667, 0}, {8.333333333333334, 0}, {5, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{0, 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 3], 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[1, 2], 5}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             0, 0}, {Rational[10, 3], 0}, {10, 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[20, 3], 0}, {Rational[25, 3], 0}, {5, 0}}, {{0, 0}, {
             7.216878364870323, 4.166666666666667}, {
             1.6666666666666667`, 0}, {4.330127018922193, 2.5}, {
             8.660254037844386, 5}, {2.886751345948129, 
             1.6666666666666667`}, {0, 0}, {3.3333333333333335`, 0}, {10, 
             0}, {5.773502691896258, 3.3333333333333335`}, {
             1.4433756729740645`, 0.8333333333333334}, {
             6.666666666666667, 0}, {8.333333333333334, 0}, {5, 0}}]]}, {{{1, 
          0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{5, 0}, {
           Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
           Rational[25, 3], 0}, {0, 0}, {Rational[5, 3], 0}, {10, 0}, {
           Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
           Rational[-5, 3], 5 3^Rational[-1, 2]}, {Rational[10, 3], 0}, {
           Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {-5, 5 
            3^Rational[1, 2]}, {Rational[-10, 3], 10 3^Rational[-1, 2]}, {
           Rational[20, 3], 0}}, {{5, 0}, {-4.166666666666667, 
           7.216878364870323}, {8.333333333333334, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {10, 0}, {-0.8333333333333334, 
           1.4433756729740645`}, {0, 0}, {-1.6666666666666667`, 
           2.886751345948129}, {3.3333333333333335`, 0}, {-2.5, 
           4.330127018922193}, {-5, 8.660254037844386}, {-3.3333333333333335`,
            5.773502691896258}, {6.666666666666667, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny]},
    {
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[10, 3], 0}, {-5, 5 3^Rational[1, 2]}, {
           Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
           Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[20, 3], 0}, {10, 0}, {Rational[25, 3], 0}, {
           Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
           Rational[-5, 3], 5 3^Rational[-1, 2]}, {5, 0}, {
           Rational[5, 3], 0}, {Rational[-10, 3], 10 3^Rational[-1, 2]}, {0, 
           0}}, {{3.3333333333333335`, 0}, {-5, 
            8.660254037844386}, {-0.8333333333333334, 1.4433756729740645`}, {
           0, 0}, {-2.5, 4.330127018922193}, {6.666666666666667, 0}, {10, 
           0}, {8.333333333333334, 0}, {-4.166666666666667, 
           7.216878364870323}, {-1.6666666666666667`, 2.886751345948129}, {5, 
           0}, {1.6666666666666667`, 0}, {-3.3333333333333335`, 
           5.773502691896258}, {0, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         LineBox[NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 3], 0}, {Rational[10, 3], 0}, {5, 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
            5 3^Rational[1, 2], 5}}, {{5.773502691896258, 
            3.3333333333333335`}, {8.333333333333334, 0}, {
            6.666666666666667, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {10, 0}, {2.886751345948129, 
            1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {
            1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {5, 0}, {0, 
            0}, {4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          LineBox[NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[25, 3], 0}, {Rational[20, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 3], 0}, {Rational[10, 3], 0}, {5, 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
             5 3^Rational[1, 2], 5}}, {{5.773502691896258, 
             3.3333333333333335`}, {8.333333333333334, 0}, {
             6.666666666666667, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {10, 0}, {2.886751345948129, 
             1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {
             1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {5, 0}, {0, 
             0}, {4.330127018922193, 2.5}, {0, 0}, {
             8.660254037844386, 5}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {5, 
            0}, {Rational[25, 3], 0}, {10, 0}, {5 3^Rational[1, 2], 5}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {0, 
            0}, {Rational[5, 3], 0}}, {{2.886751345948129, 
            1.6666666666666667`}, {4.330127018922193, 2.5}, {
            6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {5, 0}, {
            8.333333333333334, 0}, {10, 0}, {8.660254037844386, 5}, {
            5.773502691896258, 3.3333333333333335`}, {
            3.3333333333333335`, 0}, {0, 0}, {1.6666666666666667`, 0}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[20, 3], 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {5, 
             0}, {Rational[25, 3], 0}, {10, 0}, {5 3^Rational[1, 2], 5}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {0,
              0}, {Rational[5, 3], 0}}, {{2.886751345948129, 
             1.6666666666666667`}, {4.330127018922193, 2.5}, {
             6.666666666666667, 0}, {7.216878364870323, 4.166666666666667}, {
             1.4433756729740645`, 0.8333333333333334}, {0, 0}, {5, 0}, {
             8.333333333333334, 0}, {10, 0}, {8.660254037844386, 5}, {
             5.773502691896258, 3.3333333333333335`}, {
             3.3333333333333335`, 0}, {0, 0}, {
             1.6666666666666667`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 3], 0}, {Rational[25, 3], 0}, {10, 0}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[10, 3], 0}, {
            Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
            Rational[20, 3], 0}, {0, 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
            0}}, {{8.049381885742235, 2.1568253758543396`}, {
            1.6666666666666667`, 0}, {8.333333333333334, 0}, {10, 0}, {
            6.439505508593789, 1.7254603006834717`}, {
            3.3333333333333335`, 0}, {4.829629131445341, 
            1.2940952255126035`}, {9.659258262890681, 2.588190451025207}, {0, 
            0}, {6.666666666666667, 0}, {0, 0}, {3.2197527542968944`, 
            0.8627301503417358}, {1.6098763771484472`, 0.4313650751708679}, {
            5, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          BezierCurveBox[
           NCache[{{
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 3], 0}, {Rational[25, 3], 0}, {10, 0}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[10, 3], 0}, {
             Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
             Rational[20, 3], 0}, {0, 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
             0}}, {{8.049381885742235, 2.1568253758543396`}, {
             1.6666666666666667`, 0}, {8.333333333333334, 0}, {10, 0}, {
             6.439505508593789, 1.7254603006834717`}, {
             3.3333333333333335`, 0}, {4.829629131445341, 
             1.2940952255126035`}, {9.659258262890681, 2.588190451025207}, {0,
              0}, {6.666666666666667, 0}, {0, 0}, {3.2197527542968944`, 
             0.8627301503417358}, {1.6098763771484472`, 0.4313650751708679}, {
             5, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{0, 0}, {Rational[5, 3], 0}, {10, 0}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {5, 0}, {
            Rational[20, 3], 0}, {0, 0}, {Rational[25, 3], 0}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[10, 3], 10 3^Rational[-1, 2]}, {5, 5 3^Rational[1, 2]}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[10, 3], 0}}, {{0, 0}, {1.6666666666666667`, 0}, {10, 
            0}, {4.166666666666667, 7.216878364870323}, {1.6666666666666667`, 
            2.886751345948129}, {5, 0}, {6.666666666666667, 0}, {0, 0}, {
            8.333333333333334, 0}, {2.5, 4.330127018922193}, {
            3.3333333333333335`, 5.773502691896258}, {5, 8.660254037844386}, {
            0.8333333333333334, 1.4433756729740645`}, {
            3.3333333333333335`, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{0, 0}, {Rational[5, 3], 0}, {10, 0}, {
             Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
             Rational[5, 3], 5 3^Rational[-1, 2]}, {5, 0}, {
             Rational[20, 3], 0}, {0, 0}, {Rational[25, 3], 0}, {
             Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
             Rational[10, 3], 10 3^Rational[-1, 2]}, {
             5, 5 3^Rational[1, 2]}, {
             Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
             Rational[10, 3], 0}}, {{0, 0}, {1.6666666666666667`, 0}, {10, 
             0}, {4.166666666666667, 7.216878364870323}, {1.6666666666666667`,
              2.886751345948129}, {5, 0}, {6.666666666666667, 0}, {0, 0}, {
             8.333333333333334, 0}, {2.5, 4.330127018922193}, {
             3.3333333333333335`, 5.773502691896258}, {
             5, 8.660254037844386}, {0.8333333333333334, 
             1.4433756729740645`}, {3.3333333333333335`, 0}}]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[25, 3], 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {
            Rational[10, 3], 0}, {Rational[5, 3], 5 3^Rational[-1, 2]}, {0, 
            0}, {5, 5 3^Rational[1, 2]}, {10, 0}, {Rational[20, 3], 0}, {5, 
            0}, {0, 0}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 0}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}}], 
          BezierCurve[{{2.5, 4.330127018922193}, {8.333333333333334, 0}, {
            3.3333333333333335`, 5.773502691896258}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 
            2.886751345948129}, {0, 0}, {5, 8.660254037844386}, {10, 0}, {
            6.666666666666667, 0}, {5, 0}, {0, 0}, {4.166666666666667, 
            7.216878364870323}, {1.6666666666666667`, 0}, {0.8333333333333334,
             1.4433756729740645`}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny]},
    {
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{10, 0}, {Rational[10, 3], 0}, {
            Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[20, 3], 0}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 3], 0}, {
            5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
            0}, {0, 0}, {Rational[5, 3], 0}}, {{10, 0}, {
            3.3333333333333335`, 0}, {4.829629131445341, 
            1.2940952255126035`}, {1.6098763771484472`, 0.4313650751708679}, {
            6.666666666666667, 0}, {6.439505508593789, 1.7254603006834717`}, {
            8.333333333333334, 0}, {9.659258262890681, 2.588190451025207}, {0,
             0}, {3.2197527542968944`, 0.8627301503417358}, {
            8.049381885742235, 2.1568253758543396`}, {5, 0}, {0, 0}, {
            1.6666666666666667`, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{10, 0}, {Rational[10, 3], 0}, {
             Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[20, 3], 0}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 3], 0}, {
             5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
             0}, {0, 0}, {Rational[5, 3], 0}}, {{10, 0}, {
             3.3333333333333335`, 0}, {4.829629131445341, 
             1.2940952255126035`}, {1.6098763771484472`, 
             0.4313650751708679}, {6.666666666666667, 0}, {6.439505508593789, 
             1.7254603006834717`}, {8.333333333333334, 0}, {9.659258262890681,
              2.588190451025207}, {0, 0}, {3.2197527542968944`, 
             0.8627301503417358}, {8.049381885742235, 2.1568253758543396`}, {
             5, 0}, {0, 0}, {1.6666666666666667`, 0}}]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{5, 0}, {10, 0}, {
             Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
             Rational[5, 3], 5 3^Rational[-1, 2]}, {
             Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
             Rational[10, 3], 10 3^Rational[-1, 2]}, {Rational[10, 3], 0}, {0,
              0}, {Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
             Rational[5, 3], 0}, {Rational[20, 3], 0}, {Rational[25, 3], 0}, {
             5, 5 3^Rational[1, 2]}}], 
           BezierCurve[{{5, 0}, {10, 0}, {0.8333333333333334, 
             1.4433756729740645`}, {0, 0}, {1.6666666666666667`, 
             2.886751345948129}, {4.166666666666667, 7.216878364870323}, {
             3.3333333333333335`, 5.773502691896258}, {
             3.3333333333333335`, 0}, {0, 0}, {2.5, 4.330127018922193}, {
             1.6666666666666667`, 0}, {6.666666666666667, 0}, {
             8.333333333333334, 0}, {5, 8.660254037844386}}]]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          FilledCurveBox[NCache[
           BezierCurve[{{5, 0}, {10, 0}, {
              Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
              Rational[5, 3], 5 3^Rational[-1, 2]}, {
              Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
              Rational[10, 3], 10 3^Rational[-1, 2]}, {Rational[10, 3], 0}, {
              0, 0}, {Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
              Rational[5, 3], 0}, {Rational[20, 3], 0}, {
              Rational[25, 3], 0}, {5, 5 3^Rational[1, 2]}}], 
            BezierCurve[{{5, 0}, {10, 0}, {0.8333333333333334, 
              1.4433756729740645`}, {0, 0}, {1.6666666666666667`, 
              2.886751345948129}, {4.166666666666667, 7.216878364870323}, {
              3.3333333333333335`, 5.773502691896258}, {
              3.3333333333333335`, 0}, {0, 0}, {2.5, 4.330127018922193}, {
              1.6666666666666667`, 0}, {6.666666666666667, 0}, {
              8.333333333333334, 0}, {5, 8.660254037844386}}]]]}, {{{1, 0}, {
          0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        LineBox[NCache[{{Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
           Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[5, 3], 0}, {
           Rational[10, 3], 10 3^Rational[-1, 2]}, {Rational[20, 3], 0}, {
           5, 5 3^Rational[1, 2]}, {5, 0}, {10, 0}, {Rational[10, 3], 0}, {0, 
           0}, {0, 0}, {Rational[25, 3], 0}, {
           Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}}, {{
           0.8333333333333334, 1.4433756729740645`}, {1.6666666666666667`, 
           2.886751345948129}, {1.6666666666666667`, 0}, {3.3333333333333335`,
            5.773502691896258}, {6.666666666666667, 0}, {
           5, 8.660254037844386}, {5, 0}, {10, 0}, {3.3333333333333335`, 0}, {
           0, 0}, {0, 0}, {8.333333333333334, 0}, {2.5, 4.330127018922193}, {
           4.166666666666667, 7.216878364870323}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            0, 0}, {Rational[10, 3], 0}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {5, 5 3^Rational[1, 2]}, {
            Rational[25, 3], 0}, {10, 0}, {0, 0}, {Rational[20, 3], 0}, {
            Rational[10, 3], 10 3^Rational[-1, 2]}, {Rational[5, 3], 0}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {5, 0}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}}], 
          BezierCurve[{{4.166666666666667, 7.216878364870323}, {0, 0}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 
            2.886751345948129}, {5, 8.660254037844386}, {
            8.333333333333334, 0}, {10, 0}, {0, 0}, {6.666666666666667, 0}, {
            3.3333333333333335`, 5.773502691896258}, {
            1.6666666666666667`, 0}, {2.5, 4.330127018922193}, {5, 0}, {
            0.8333333333333334, 1.4433756729740645`}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[10, 3], 0}, {
            Rational[-5, 3], 5 3^Rational[-1, 2]}, {
            Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[-10, 3], 10 3^Rational[-1, 2]}, {-5, 5 
             3^Rational[1, 2]}, {Rational[20, 3], 0}, {
            Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {0, 
            0}, {Rational[5, 3], 0}, {Rational[25, 3], 0}, {5, 0}, {10, 0}, {
            Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}}], 
          BezierCurve[{{3.3333333333333335`, 0}, {-1.6666666666666667`, 
            2.886751345948129}, {-0.8333333333333334, 
            1.4433756729740645`}, {-3.3333333333333335`, 
            5.773502691896258}, {-5, 8.660254037844386}, {
            6.666666666666667, 0}, {-2.5, 4.330127018922193}, {0, 0}, {0, 
            0}, {1.6666666666666667`, 0}, {8.333333333333334, 0}, {5, 0}, {10,
             0}, {-4.166666666666667, 7.216878364870323}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        LineBox[NCache[{{0, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {5, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {10, 
           0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
           5 3^Rational[1, 2], 5}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 3], 0}, {Rational[25, 3], 0}, {Rational[20, 3], 0}}, {{
           0, 0}, {1.4433756729740645`, 0.8333333333333334}, {5, 0}, {
           4.330127018922193, 2.5}, {0, 0}, {10, 0}, {5.773502691896258, 
           3.3333333333333335`}, {2.886751345948129, 1.6666666666666667`}, {
           3.3333333333333335`, 0}, {8.660254037844386, 5}, {
           7.216878364870323, 4.166666666666667}, {1.6666666666666667`, 0}, {
           8.333333333333334, 0}, {6.666666666666667, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny]},
    {
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[25, 3], 0}, {5, 5 3^Rational[1, 2]}, {10, 
            0}, {Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[5, 3], 0}, {0, 
            0}, {Rational[10, 3], 0}, {5, 0}, {0, 0}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[20, 3], 0}, {Rational[10, 3], 10 3^Rational[-1, 2]}}], 
          BezierCurve[{{8.333333333333334, 0}, {5, 8.660254037844386}, {10, 
            0}, {0.8333333333333334, 1.4433756729740645`}, {4.166666666666667,
             7.216878364870323}, {1.6666666666666667`, 2.886751345948129}, {
            1.6666666666666667`, 0}, {0, 0}, {3.3333333333333335`, 0}, {5, 
            0}, {0, 0}, {2.5, 4.330127018922193}, {6.666666666666667, 0}, {
            3.3333333333333335`, 5.773502691896258}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {0, 
            0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {0, 0}, {10, 0}, {
            Rational[5, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}}, {{7.216878364870323, 4.166666666666667}, {
            5.773502691896258, 3.3333333333333335`}, {6.666666666666667, 0}, {
            0, 0}, {2.886751345948129, 1.6666666666666667`}, {
            8.660254037844386, 5}, {8.333333333333334, 0}, {0, 0}, {10, 0}, {
            1.6666666666666667`, 0}, {5, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {4.330127018922193, 2.5}, {
            3.3333333333333335`, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {0,
              0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {0, 0}, {10, 0}, {
             Rational[5, 3], 0}, {5, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}}, {{7.216878364870323, 4.166666666666667}, {
             5.773502691896258, 3.3333333333333335`}, {
             6.666666666666667, 0}, {0, 0}, {2.886751345948129, 
             1.6666666666666667`}, {8.660254037844386, 5}, {
             8.333333333333334, 0}, {0, 0}, {10, 0}, {
             1.6666666666666667`, 0}, {5, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {4.330127018922193, 2.5}, {
             3.3333333333333335`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[10, 3], 0}, {0, 0}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[20, 3], 0}, {Rational[5, 3], 0}, {
            5, 5 3^Rational[1, 2]}, {5, 0}, {
            Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[25, 3], 0}, {0, 0}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[10, 3], 10 3^Rational[-1, 2]}, {10, 0}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}}], 
          BezierCurve[{{3.3333333333333335`, 0}, {0, 0}, {0.8333333333333334, 
            1.4433756729740645`}, {6.666666666666667, 0}, {
            1.6666666666666667`, 0}, {5, 8.660254037844386}, {5, 0}, {
            4.166666666666667, 7.216878364870323}, {8.333333333333334, 0}, {0,
             0}, {2.5, 4.330127018922193}, {3.3333333333333335`, 
            5.773502691896258}, {10, 0}, {1.6666666666666667`, 
            2.886751345948129}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
         0.5}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
         0.8660254037844386}, {-0.8660254037844386, 0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           5, 0}, {0, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {
           Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {0, 
           0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}, {
           Rational[20, 3], 0}}, {{10, 0}, {4.330127018922193, 2.5}, {5, 0}, {
           0, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           7.216878364870323, 4.166666666666667}, {3.3333333333333335`, 0}, {
           8.660254037844386, 5}, {8.333333333333334, 0}, {2.886751345948129, 
           1.6666666666666667`}, {0, 0}, {5.773502691896258, 
           3.3333333333333335`}, {1.6666666666666667`, 0}, {
           6.666666666666667, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{5, 0}, {Rational[5, 3], 0}, {10, 0}, {0, 0}, {
            Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            5, 5 3^Rational[1, 2]}, {Rational[10, 3], 10 3^Rational[-1, 2]}, {
            0, 0}, {Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
            Rational[10, 3], 0}, {Rational[25, 3], 0}, {
            Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[20, 3], 0}}, {{5, 
            0}, {1.6666666666666667`, 0}, {10, 0}, {0, 0}, {2.5, 
            4.330127018922193}, {5, 8.660254037844386}, {3.3333333333333335`, 
            5.773502691896258}, {0, 0}, {4.166666666666667, 
            7.216878364870323}, {3.3333333333333335`, 0}, {
            8.333333333333334, 0}, {0.8333333333333334, 
            1.4433756729740645`}, {1.6666666666666667`, 2.886751345948129}, {
            6.666666666666667, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          PolygonBox[
           NCache[{{5, 0}, {Rational[5, 3], 0}, {10, 0}, {0, 0}, {
             Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
             5, 5 3^Rational[1, 2]}, {
             Rational[10, 3], 10 3^Rational[-1, 2]}, {0, 0}, {
             Rational[25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {
             Rational[10, 3], 0}, {Rational[25, 3], 0}, {
             Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
             Rational[5, 3], 5 3^Rational[-1, 2]}, {Rational[20, 3], 0}}, {{5,
              0}, {1.6666666666666667`, 0}, {10, 0}, {0, 0}, {2.5, 
             4.330127018922193}, {5, 8.660254037844386}, {3.3333333333333335`,
              5.773502691896258}, {0, 0}, {4.166666666666667, 
             7.216878364870323}, {3.3333333333333335`, 0}, {
             8.333333333333334, 0}, {0.8333333333333334, 
             1.4433756729740645`}, {1.6666666666666667`, 2.886751345948129}, {
             6.666666666666667, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[25, 3], 0}, {0, 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[20, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[10, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}}], 
          BezierCurve[{{8.333333333333334, 0}, {0, 0}, {0, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {
            1.6666666666666667`, 0}, {8.660254037844386, 5}, {
            7.216878364870323, 4.166666666666667}, {6.666666666666667, 0}, {
            2.886751345948129, 1.6666666666666667`}, {
            3.3333333333333335`, 0}, {5, 0}, {4.330127018922193, 2.5}, {10, 
            0}, {5.773502691896258, 3.3333333333333335`}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny]},
    {
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[20, 3], 0}, {
           Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
           Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
           Rational[-10, 3], 10 3^Rational[-1, 2]}, {
           Rational[10, 3], 0}, {-5, 5 3^Rational[1, 2]}, {
           Rational[5, 3], 0}, {Rational[-5, 3], 5 3^Rational[-1, 2]}, {5, 
           0}, {0, 0}, {10, 0}, {Rational[25, 3], 0}, {
           Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}}, {{
           6.666666666666667, 0}, {-0.8333333333333334, 
           1.4433756729740645`}, {0, 0}, {-2.5, 
           4.330127018922193}, {-3.3333333333333335`, 5.773502691896258}, {
           3.3333333333333335`, 0}, {-5, 8.660254037844386}, {
           1.6666666666666667`, 0}, {-1.6666666666666667`, 
           2.886751345948129}, {5, 0}, {0, 0}, {10, 0}, {
           8.333333333333334, 0}, {-4.166666666666667, 7.216878364870323}}]]},
        NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{
            5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
            Rational[20, 3], 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 3], 0}, {Rational[25, 3], 0}, {Rational[10, 3], 0}, {
            0, 0}, {5, 0}, {10, 0}}, {{9.659258262890681, 
            2.588190451025207}, {0, 0}, {6.666666666666667, 0}, {
            3.2197527542968944`, 0.8627301503417358}, {4.829629131445341, 
            1.2940952255126035`}, {8.049381885742235, 2.1568253758543396`}, {
            1.6098763771484472`, 0.4313650751708679}, {6.439505508593789, 
            1.7254603006834717`}, {1.6666666666666667`, 0}, {
            8.333333333333334, 0}, {3.3333333333333335`, 0}, {0, 0}, {5, 0}, {
            10, 0}}]]}, GeometricTransformationBox[
         {GrayLevel[0.25], 
          BezierCurveBox[
           NCache[{{
             5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 0}, {
             Rational[20, 3], 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 3], 0}, {Rational[25, 3], 0}, {Rational[10, 3], 0}, {
             0, 0}, {5, 0}, {10, 0}}, {{9.659258262890681, 
             2.588190451025207}, {0, 0}, {6.666666666666667, 0}, {
             3.2197527542968944`, 0.8627301503417358}, {4.829629131445341, 
             1.2940952255126035`}, {8.049381885742235, 2.1568253758543396`}, {
             1.6098763771484472`, 0.4313650751708679}, {6.439505508593789, 
             1.7254603006834717`}, {1.6666666666666667`, 0}, {
             8.333333333333334, 0}, {3.3333333333333335`, 0}, {0, 0}, {5, 
             0}, {10, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{0, 0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 3], 0}, {Rational[5, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {
           Rational[10, 3], 0}, {Rational[20, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {10, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           5 3^Rational[1, 2], 5}, {0, 0}}, {{0, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {8.333333333333334, 0}, {
           1.6666666666666667`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {5, 
           0}, {3.3333333333333335`, 0}, {6.666666666666667, 0}, {
           5.773502691896258, 3.3333333333333335`}, {10, 0}, {
           4.330127018922193, 2.5}, {8.660254037844386, 5}, {0, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[10, 3], 0}, {0, 
            0}, {-5, 5 3^Rational[1, 2]}, {
            Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
            Rational[5, 3], 0}, {
            Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {10, 0}, {
            Rational[20, 3], 0}, {
            Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
            Rational[25, 3], 0}, {0, 0}, {
            Rational[-5, 3], 5 3^Rational[-1, 2]}, {
            Rational[-10, 3], 10 3^Rational[-1, 2]}, {5, 0}}], 
          BezierCurve[{{3.3333333333333335`, 0}, {0, 
            0}, {-5, 8.660254037844386}, {-0.8333333333333334, 
            1.4433756729740645`}, {
            1.6666666666666667`, 0}, {-4.166666666666667, 
            7.216878364870323}, {10, 0}, {6.666666666666667, 0}, {-2.5, 
            4.330127018922193}, {8.333333333333334, 0}, {0, 
            0}, {-1.6666666666666667`, 
            2.886751345948129}, {-3.3333333333333335`, 5.773502691896258}, {5,
             0}}]]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[
       {GrayLevel[0.25], 
        LineBox[NCache[{{
           Rational[-25, 6], Rational[25, 2] 3^Rational[-1, 2]}, {0, 0}, {
           Rational[-5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {
           Rational[10, 3], 0}, {Rational[25, 3], 0}, {
           Rational[-10, 3], 10 3^Rational[-1, 2]}, {-5, 5 
            3^Rational[1, 2]}, {
           Rational[-5, 2], Rational[5, 2] 3^Rational[1, 2]}, {5, 0}, {0, 
           0}, {Rational[5, 3], 0}, {Rational[-5, 3], 5 3^Rational[-1, 2]}, {
           10, 0}, {Rational[20, 3], 0}}, {{-4.166666666666667, 
           7.216878364870323}, {0, 0}, {-0.8333333333333334, 
           1.4433756729740645`}, {3.3333333333333335`, 0}, {
           8.333333333333334, 0}, {-3.3333333333333335`, 
           5.773502691896258}, {-5, 8.660254037844386}, {-2.5, 
           4.330127018922193}, {5, 0}, {0, 0}, {
           1.6666666666666667`, 0}, {-1.6666666666666667`, 
           2.886751345948129}, {10, 0}, {6.666666666666667, 0}}]]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}}]],
      ImageSize->Tiny], 
     GraphicsBox[GeometricTransformationBox[{
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{
            Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 
            0}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {
            Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
            0}, {Rational[20, 3], 0}, {
            Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {10, 
            0}, {5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
             2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
            Rational[25, 3], 0}, {0, 0}, {
            Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
             Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}}, {{
            4.829629131445341, 1.2940952255126035`}, {0, 0}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {
            3.2197527542968944`, 0.8627301503417358}, {5, 0}, {
            6.666666666666667, 0}, {8.049381885742235, 2.1568253758543396`}, {
            10, 0}, {9.659258262890681, 2.588190451025207}, {
            6.439505508593789, 1.7254603006834717`}, {8.333333333333334, 0}, {
            0, 0}, {1.6098763771484472`, 0.4313650751708679}}]]}, 
        GeometricTransformationBox[
         {GrayLevel[0.25], 
          BezierCurveBox[
           NCache[{{
             Rational[5, 2] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 2] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {0, 
             0}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {
             Rational[5, 3] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {5, 
             0}, {Rational[20, 3], 0}, {
             Rational[25, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[25, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {10,
              0}, {5 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 5 
              2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[5, 3] 2^Rational[1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 3] 2^Rational[1, 2] (-1 + 3^Rational[1, 2])}, {
             Rational[25, 3], 0}, {0, 0}, {
             Rational[5, 6] 2^Rational[-1, 2] (1 + 3^Rational[1, 2]), 
              Rational[5, 6] 2^Rational[-1, 2] (-1 + 3^Rational[1, 2])}}, {{
             4.829629131445341, 1.2940952255126035`}, {0, 0}, {
             3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {
             3.2197527542968944`, 0.8627301503417358}, {5, 0}, {
             6.666666666666667, 0}, {8.049381885742235, 
             2.1568253758543396`}, {10, 0}, {9.659258262890681, 
             2.588190451025207}, {6.439505508593789, 1.7254603006834717`}, {
             8.333333333333334, 0}, {0, 0}, {1.6098763771484472`, 
             0.4313650751708679}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
       NCache[{{{1, 0}, {0, 
         1}}, {{Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}, {{
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{0, -1}, {1, 
         0}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
          Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}, {
          Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{-1, 0}, {
         0, -1}}, {{Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}}, {{
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{0, 1}, {-1, 
         0}}, {{Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
          Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
          Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
          Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}}}, {{{1, 0}, {0, 
         1}}, {{0.8660254037844386, -0.5}, {0.5, 0.8660254037844386}}, {{
         0.5, -0.8660254037844386}, {0.8660254037844386, 0.5}}, {{0, -1}, {1, 
         0}}, {{-0.5, -0.8660254037844386}, {
         0.8660254037844386, -0.5}}, {{-0.8660254037844386, -0.5}, {
         0.5, -0.8660254037844386}}, {{-1, 0}, {
         0, -1}}, {{-0.8660254037844386, 
         0.5}, {-0.5, -0.8660254037844386}}, {{-0.5, 
         0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0, 1}, {-1, 
         0}}, {{0.5, 0.8660254037844386}, {-0.8660254037844386, 0.5}}, {{
         0.8660254037844386, 0.5}, {-0.5, 0.8660254037844386}}}]],
      ImageSize->Tiny]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.7795301906724167`*^9, 3.7795306969731007`*^9, 
  3.7795497267008343`*^9, 3.779552079242979*^9, 3.779554208342949*^9, 
  3.779554775203483*^9, 3.779554824109336*^9, 3.780352328257865*^9, 
  3.780396925907222*^9, 3.7803974464650707`*^9, 3.780399859389803*^9, 
  3.78040023400458*^9, 3.7804003733598137`*^9, 3.780401128166308*^9, 
  3.780401290723884*^9, 3.7804018119175777`*^9, 3.780402266629084*^9, 
  3.780402395283636*^9},
 CellLabel->"Out[1]=",
 CellID->1910262842]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A table of random colorized mandalas", "Subsubsection",
 CellChangeTimes->{{3.780352942968034*^9, 3.78035296469176*^9}, {
  3.7803566687681093`*^9, 3.780356668929144*^9}, {3.780404839787134*^9, 
  3.780404869321515*^9}},
 CellID->2090320032],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "474", "]"}], ";", 
  RowBox[{"Multicolumn", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RandomMandala", "[", 
       RowBox[{
        RowBox[{"\"\<Radius\>\"", "\[Rule]", 
         RowBox[{"Reverse", "[", 
          RowBox[{"Range", "[", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{"{", 
             RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}], "]"}], "]"}],
           "]"}]}], ",", 
        RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
        RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "5", ",", "6", ",", "7"}], "}"}], 
          "]"}]}], ",", 
        RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", 
        RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", 
         RowBox[{"FilledCurve", "@*", "BezierCurve"}]}], ",", 
        RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}], ",", "36"}], "]"}],
     ",", "6"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7803529821749687`*^9, 3.780353152976318*^9}, {
   3.7803532101513166`*^9, 3.780353414917698*^9}, 3.780353460774776*^9, {
   3.780356101695457*^9, 3.780356197342009*^9}, {3.780356234515256*^9, 
   3.780356235055129*^9}, 3.78035629777501*^9, {3.780356345533884*^9, 
   3.780356473061005*^9}, {3.780356587311655*^9, 3.780356642703218*^9}},
 CellLabel->"In[1]:=",
 CellID->293255033],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
                Rational[8, 3], 0}, {4 3^Rational[-1, 2], Rational[4, 3]}, {0,
                 0}, {0, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {
                Rational[4, 3], 0}}], 
              BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
                2.6666666666666665`, 0}, {2.3094010767585034`, 
                1.3333333333333333`}, {0, 0}, {0, 0}, {4, 0}, {
                3.4641016151377544`, 2}, {1.3333333333333333`, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2 3^Rational[-1, 2], Rational[2, 3]}, {
                 Rational[8, 3], 0}, {4 3^Rational[-1, 2], Rational[4, 3]}, {
                 0, 0}, {0, 0}, {4, 0}, {2 3^Rational[1, 2], 2}, {
                 Rational[4, 3], 0}}], 
               BezierCurve[{{1.1547005383792517`, 0.6666666666666666}, {
                 2.6666666666666665`, 0}, {2.3094010767585034`, 
                 1.3333333333333333`}, {0, 0}, {0, 0}, {4, 0}, {
                 3.4641016151377544`, 2}, {1.3333333333333333`, 0}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                2, 0}, {0, 0}, {0, 0}, {3^Rational[1, 2], 1}, {3, 0}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {1, 0}}], 
              BezierCurve[{{0.8660254037844386, 0.5}, {2, 0}, {0, 0}, {0, 
                0}, {1.7320508075688772`, 1}, {3, 0}, {2.598076211353316, 
                1.5}, {1, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {2, 0}, {0,
                  0}, {0, 0}, {3^Rational[1, 2], 1}, {3, 0}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {1, 0}}], 
               BezierCurve[{{0.8660254037844386, 0.5}, {2, 0}, {0, 0}, {0, 
                 0}, {1.7320508075688772`, 1}, {3, 0}, {2.598076211353316, 
                 1.5}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3^Rational[1, 2], 1}, {
                3^Rational[-1, 2], Rational[1, 3]}, {0, 0}, {
                Rational[4, 3], 0}, {0, 0}, {
                2 3^Rational[-1, 2], Rational[2, 3]}, {2, 0}, {
                Rational[2, 3], 0}}], 
              BezierCurve[{{1.7320508075688772`, 1}, {0.5773502691896258, 
                0.3333333333333333}, {0, 0}, {1.3333333333333333`, 0}, {0, 
                0}, {1.1547005383792517`, 0.6666666666666666}, {2, 0}, {
                0.6666666666666666, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3^Rational[1, 2], 1}, {
                 3^Rational[-1, 2], Rational[1, 3]}, {0, 0}, {
                 Rational[4, 3], 0}, {0, 0}, {
                 2 3^Rational[-1, 2], Rational[2, 3]}, {2, 0}, {
                 Rational[2, 3], 0}}], 
               BezierCurve[{{1.7320508075688772`, 1}, {0.5773502691896258, 
                 0.3333333333333333}, {0, 0}, {1.3333333333333333`, 0}, {0, 
                 0}, {1.1547005383792517`, 0.6666666666666666}, {2, 0}, {
                 0.6666666666666666, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {3^Rational[-1, 2], Rational[1, 3]}, {
                Rational[2, 3], 0}, {0, 0}, {Rational[1, 3], 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}, {
                Rational[1, 2] 3^Rational[-1, 2], Rational[1, 6]}}], 
              BezierCurve[{{1, 0}, {0.5773502691896258, 0.3333333333333333}, {
                0.6666666666666666, 0}, {0, 0}, {0.3333333333333333, 0}, {
                0.8660254037844386, 0.5}, {0, 0}, {0.2886751345948129, 
                0.16666666666666666`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {3^Rational[-1, 2], Rational[1, 3]}, {
                 Rational[2, 3], 0}, {0, 0}, {Rational[1, 3], 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {0, 0}, {
                 Rational[1, 2] 3^Rational[-1, 2], Rational[1, 6]}}], 
               BezierCurve[{{1, 0}, {0.5773502691896258, 
                 0.3333333333333333}, {0.6666666666666666, 0}, {0, 0}, {
                 0.3333333333333333, 0}, {0.8660254037844386, 0.5}, {0, 0}, {
                 0.2886751345948129, 0.16666666666666666`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {3, 0}, {
                1, 0}, {Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 
                0}, {3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {2, 
                0}}], BezierCurve[{{0, 0}, {1.8019377358048383`, 
                0.8677674782351162}, {3, 0}, {1, 0}, {0.9009688679024191, 
                0.4338837391175581}, {0, 0}, {2.7029066037072575`, 
                1.3016512173526744`}, {2, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {3, 
                 0}, {1, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {2, 
                 0}}], BezierCurve[{{0, 0}, {1.8019377358048383`, 
                 0.8677674782351162}, {3, 0}, {1, 0}, {0.9009688679024191, 
                 0.4338837391175581}, {0, 0}, {2.7029066037072575`, 
                 1.3016512173526744`}, {2, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[2, 3], 0}, {2, 
                0}, {Rational[4, 3], 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{1.2012918238698922`, 0.5785116521567442}, {0, 
                0}, {0.6006459119349461, 0.2892558260783721}, {0, 0}, {
                0.6666666666666666, 0}, {2, 0}, {1.3333333333333333`, 0}, {
                1.8019377358048383`, 0.8677674782351162}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {
                 Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[2, 3], 0}, {2, 
                 0}, {Rational[4, 3], 0}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{1.2012918238698922`, 0.5785116521567442}, {0, 
                 0}, {0.6006459119349461, 0.2892558260783721}, {0, 0}, {
                 0.6666666666666666, 0}, {2, 0}, {1.3333333333333333`, 0}, {
                 1.8019377358048383`, 0.8677674782351162}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[1, 3], 0}, {0, 0}, {1, 0}, {
                Rational[2, 3], 0}, {
                Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                 Sin[Rational[1, 7] Pi]}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                Rational[1, 3] Cos[Rational[1, 7] Pi], Rational[1, 3] 
                 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {0.3333333333333333, 0}, {0, 0}, {1, 0}, {
                0.6666666666666666, 0}, {0.6006459119349461, 
                0.2892558260783721}, {0.9009688679024191, 
                0.4338837391175581}, {0.30032295596747305`, 
                0.14462791303918604`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[1, 3], 0}, {0, 0}, {1, 0}, {
                 Rational[2, 3], 0}, {
                 Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                  Sin[Rational[1, 7] Pi]}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 Rational[1, 3] Cos[Rational[1, 7] Pi], Rational[1, 3] 
                  Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {0.3333333333333333, 0}, {0, 0}, {1, 0}, {
                 0.6666666666666666, 0}, {0.6006459119349461, 
                 0.2892558260783721}, {0.9009688679024191, 
                 0.4338837391175581}, {0.30032295596747305`, 
                 0.14462791303918604`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                6, 0}, {6 Cos[Rational[1, 7] Pi], 6 Sin[Rational[1, 7] Pi]}, {
                3, 0}}], 
              BezierCurve[{{0, 0}, {2.7029066037072575`, 
                1.3016512173526744`}, {0, 0}, {6, 0}, {5.405813207414515, 
                2.603302434705349}, {3, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 
                 0}, {6, 0}, {
                 6 Cos[Rational[1, 7] Pi], 6 Sin[Rational[1, 7] Pi]}, {3, 
                 0}}], BezierCurve[{{0, 0}, {2.7029066037072575`, 
                 1.3016512173526744`}, {0, 0}, {6, 0}, {5.405813207414515, 
                 2.603302434705349}, {3, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[5, 2] Cos[Rational[1, 7] Pi], Rational[5, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[5, 2], 0}, {5, 
                0}, {5 Cos[Rational[1, 7] Pi], 5 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {2.252422169756048, 1.0847093477938954`}, {
                0, 0}, {2.5, 0}, {5, 0}, {4.504844339512096, 
                2.1694186955877908`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[5, 2] Cos[Rational[1, 7] Pi], Rational[5, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[5, 2], 0}, {5, 
                 0}, {5 Cos[Rational[1, 7] Pi], 5 Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {2.252422169756048, 
                 1.0847093477938954`}, {0, 0}, {2.5, 0}, {5, 0}, {
                 4.504844339512096, 2.1694186955877908`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {4, 0}, {0, 0}, {
                4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {2, 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {4, 0}, {0, 0}, {3.6038754716096766`, 
                1.7355349564702325`}, {2, 0}, {1.8019377358048383`, 
                0.8677674782351162}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {4, 0}, {0, 0}, {
                 4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {2, 
                 0}, {2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {4, 0}, {0, 0}, {3.6038754716096766`, 
                 1.7355349564702325`}, {2, 0}, {1.8019377358048383`, 
                 0.8677674782351162}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[3, 2], 0}, {0, 0}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}, {3, 0}}], 
              BezierCurve[{{0, 0}, {1.5, 0}, {0, 0}, {2.7029066037072575`, 
                1.3016512173526744`}, {1.3514533018536288`, 
                0.6508256086763372}, {3, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[3, 2], 0}, {0, 0}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}, {3, 0}}], 
               BezierCurve[{{0, 0}, {1.5, 0}, {0, 0}, {2.7029066037072575`, 
                 1.3016512173526744`}, {1.3514533018536288`, 
                 0.6508256086763372}, {3, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 0}, {
                0, 0}, {0, 0}, {1, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{1.8019377358048383`, 0.8677674782351162}, {2, 
                0}, {0, 0}, {0, 0}, {1, 0}, {0.9009688679024191, 
                0.4338837391175581}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 
                 0}, {0, 0}, {0, 0}, {1, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{1.8019377358048383`, 0.8677674782351162}, {2, 
                 0}, {0, 0}, {0, 0}, {1, 0}, {0.9009688679024191, 
                 0.4338837391175581}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {0, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                Rational[1, 2], 0}, {1, 0}}], 
              BezierCurve[{{0.4504844339512096, 0.21694186955877906`}, {0, 
                0}, {0, 0}, {0.9009688679024191, 0.4338837391175581}, {
                0.5, 0}, {1, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {0, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 Rational[1, 2], 0}, {1, 0}}], 
               BezierCurve[{{0.4504844339512096, 0.21694186955877906`}, {0, 
                 0}, {0, 0}, {0.9009688679024191, 0.4338837391175581}, {
                 0.5, 0}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[5, 4], 0}, {
                Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {0, 0}, {
                Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
                Rational[15, 4], 0}, {
                Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {
                Rational[5, 2], 0}, {5, 0}}], 
              BezierCurve[{{1.25, 0}, {1.0825317547305482`, 0.625}, {
                2.1650635094610964`, 1.25}, {0, 0}, {4.330127018922193, 
                2.5}, {0, 0}, {3.75, 0}, {3.2475952641916446`, 1.875}, {
                2.5, 0}, {5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[5, 4], 0}, {
                 Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                 Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {0, 0}, {
                 Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
                 Rational[15, 4], 0}, {
                 Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {
                 Rational[5, 2], 0}, {5, 0}}], 
               BezierCurve[{{1.25, 0}, {1.0825317547305482`, 0.625}, {
                 2.1650635094610964`, 1.25}, {0, 0}, {4.330127018922193, 
                 2.5}, {0, 0}, {3.75, 0}, {3.2475952641916446`, 1.875}, {
                 2.5, 0}, {5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
                3^Rational[1, 2], 1}, {3, 0}, {2, 0}, {0, 0}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {4, 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
              BezierCurve[{{1, 0}, {3.4641016151377544`, 2}, {0, 0}, {
                1.7320508075688772`, 1}, {3, 0}, {2, 0}, {0, 0}, {
                2.598076211353316, 1.5}, {4, 0}, {0.8660254037844386, 
                0.5}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {2 3^Rational[1, 2], 2}, {0, 0}, {
                 3^Rational[1, 2], 1}, {3, 0}, {2, 0}, {0, 0}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {4, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
               BezierCurve[{{1, 0}, {3.4641016151377544`, 2}, {0, 0}, {
                 1.7320508075688772`, 1}, {3, 0}, {2, 0}, {0, 0}, {
                 2.598076211353316, 1.5}, {4, 0}, {0.8660254037844386, 
                 0.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                Rational[3, 2], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 0}, {
                Rational[3, 4], 0}, {0, 0}, {Rational[9, 4], 0}, {3, 0}}], 
              BezierCurve[{{1.9485571585149868`, 1.125}, {1.5, 0}, {
                0.649519052838329, 0.375}, {2.598076211353316, 1.5}, {
                1.299038105676658, 0.75}, {0, 0}, {0.75, 0}, {0, 0}, {
                2.25, 0}, {3, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                 Rational[3, 2], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 0}, {
                 Rational[3, 4], 0}, {0, 0}, {Rational[9, 4], 0}, {3, 0}}], 
               BezierCurve[{{1.9485571585149868`, 1.125}, {1.5, 0}, {
                 0.649519052838329, 0.375}, {2.598076211353316, 1.5}, {
                 1.299038105676658, 0.75}, {0, 0}, {0.75, 0}, {0, 0}, {
                 2.25, 0}, {3, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                Rational[1, 2], 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[3, 2], 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {2, 0}, {
                3^Rational[1, 2], 1}, {1, 0}, {0, 0}}], 
              BezierCurve[{{0, 0}, {1.299038105676658, 0.75}, {0.5, 0}, {
                0.8660254037844386, 0.5}, {1.5, 0}, {0.4330127018922193, 
                0.25}, {2, 0}, {1.7320508075688772`, 1}, {1, 0}, {0, 0}}]]]}},
           GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                 Rational[1, 2], 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[3, 2], 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {2, 0}, {
                 3^Rational[1, 2], 1}, {1, 0}, {0, 0}}], 
               BezierCurve[{{0, 0}, {1.299038105676658, 0.75}, {0.5, 0}, {
                 0.8660254037844386, 0.5}, {1.5, 0}, {0.4330127018922193, 
                 0.25}, {2, 0}, {1.7320508075688772`, 1}, {1, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 4], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {0, 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                Rational[1, 2], 0}, {1, 0}, {0, 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[1, 4], 0}}], 
              BezierCurve[{{0.75, 0}, {0.649519052838329, 0.375}, {0, 0}, {
                0.4330127018922193, 0.25}, {0.21650635094610965`, 0.125}, {
                0.5, 0}, {1, 0}, {0, 0}, {0.8660254037844386, 0.5}, {
                0.25, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 4], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {0, 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                 Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                 Rational[1, 2], 0}, {1, 0}, {0, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[1, 4], 0}}], 
               BezierCurve[{{0.75, 0}, {0.649519052838329, 0.375}, {0, 0}, {
                 0.4330127018922193, 0.25}, {0.21650635094610965`, 0.125}, {
                 0.5, 0}, {1, 0}, {0, 0}, {0.8660254037844386, 0.5}, {
                 0.25, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[15, 4] 2^Rational[-1, 2], Rational[15, 4] 
                 2^Rational[-1, 2]}, {Rational[15, 4], 0}, {
                Rational[5, 4] 2^Rational[-1, 2], Rational[5, 4] 
                 2^Rational[-1, 2]}, {0, 0}, {
                5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {5, 0}, {
                Rational[5, 2] 2^Rational[-1, 2], Rational[5, 2] 
                 2^Rational[-1, 2]}, {0, 0}, {Rational[5, 2], 0}, {
                Rational[5, 4], 0}}], 
              BezierCurve[{{2.651650429449553, 2.651650429449553}, {
                3.75, 0}, {0.8838834764831843, 0.8838834764831843}, {0, 0}, {
                3.5355339059327373`, 3.5355339059327373`}, {5, 0}, {
                1.7677669529663687`, 1.7677669529663687`}, {0, 0}, {2.5, 0}, {
                1.25, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[15, 4] 2^Rational[-1, 2], Rational[15, 4] 
                  2^Rational[-1, 2]}, {Rational[15, 4], 0}, {
                 Rational[5, 4] 2^Rational[-1, 2], Rational[5, 4] 
                  2^Rational[-1, 2]}, {0, 0}, {
                 5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {5, 0}, {
                 Rational[5, 2] 2^Rational[-1, 2], Rational[5, 2] 
                  2^Rational[-1, 2]}, {0, 0}, {Rational[5, 2], 0}, {
                 Rational[5, 4], 0}}], 
               BezierCurve[{{2.651650429449553, 2.651650429449553}, {
                 3.75, 0}, {0.8838834764831843, 0.8838834764831843}, {0, 0}, {
                 3.5355339059327373`, 3.5355339059327373`}, {5, 0}, {
                 1.7677669529663687`, 1.7677669529663687`}, {0, 0}, {
                 2.5, 0}, {1.25, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
         1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 
         0}}}]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{4, 0}, {0, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {2, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}, {1, 0}, {3, 0}, {0, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                2 2^Rational[1, 2], 2 2^Rational[1, 2]}}], 
              BezierCurve[{{4, 0}, {0, 0}, {2.1213203435596424`, 
                2.1213203435596424`}, {2, 0}, {1.4142135623730951`, 
                1.4142135623730951`}, {1, 0}, {3, 0}, {0, 0}, {
                0.7071067811865475, 0.7071067811865475}, {2.8284271247461903`,
                 2.8284271247461903`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{4, 0}, {0, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {2, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}, {1, 0}, {3, 0}, {0, 
                 0}, {2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 2 2^Rational[1, 2], 2 2^Rational[1, 2]}}], 
               BezierCurve[{{4, 0}, {0, 0}, {2.1213203435596424`, 
                 2.1213203435596424`}, {2, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}, {1, 0}, {3, 0}, {0, 0}, {
                 0.7071067811865475, 0.7071067811865475}, {
                 2.8284271247461903`, 2.8284271247461903`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                Rational[9, 4], 0}, {0, 0}, {
                Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 4], 0}, {3, 0}}], 
              BezierCurve[{{2.1213203435596424`, 2.1213203435596424`}, {
                0.5303300858899106, 0.5303300858899106}, {1.0606601717798212`,
                 1.0606601717798212`}, {1.5, 0}, {0, 0}, {2.25, 0}, {0, 0}, {
                1.590990257669732, 1.590990257669732}, {0.75, 0}, {3, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                 Rational[9, 4], 0}, {0, 0}, {
                 Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 4], 0}, {3, 0}}], 
               BezierCurve[{{2.1213203435596424`, 2.1213203435596424`}, {
                 0.5303300858899106, 0.5303300858899106}, {
                 1.0606601717798212`, 1.0606601717798212`}, {1.5, 0}, {0, 
                 0}, {2.25, 0}, {0, 0}, {1.590990257669732, 
                 1.590990257669732}, {0.75, 0}, {3, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {1, 0}, {2, 0}, {0, 0}, {0, 0}, {
                Rational[3, 2], 0}, {Rational[1, 2], 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}}], 
              BezierCurve[{{0.35355339059327373`, 0.35355339059327373`}, {
                0.7071067811865475, 0.7071067811865475}, {1.0606601717798212`,
                 1.0606601717798212`}, {1, 0}, {2, 0}, {0, 0}, {0, 0}, {
                1.5, 0}, {0.5, 0}, {1.4142135623730951`, 
                1.4142135623730951`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {1, 0}, {2, 0}, {0, 0}, {0, 0}, {
                 Rational[3, 2], 0}, {Rational[1, 2], 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}}], 
               BezierCurve[{{0.35355339059327373`, 0.35355339059327373`}, {
                 0.7071067811865475, 0.7071067811865475}, {
                 1.0606601717798212`, 1.0606601717798212`}, {1, 0}, {2, 0}, {
                 0, 0}, {0, 0}, {1.5, 0}, {0.5, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 4], 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {Rational[1, 2], 0}, {
                Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 4], 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {0, 0}, {0, 0}, {1, 0}}], 
              BezierCurve[{{0.25, 0}, {0.7071067811865475, 
                0.7071067811865475}, {0.5303300858899106, 
                0.5303300858899106}, {0.5, 0}, {0.17677669529663687`, 
                0.17677669529663687`}, {0.75, 0}, {0.35355339059327373`, 
                0.35355339059327373`}, {0, 0}, {0, 0}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 4], 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {Rational[1, 2], 0}, {
                 Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 4], 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {0, 0}, {0, 0}, {1, 0}}], 
               BezierCurve[{{0.25, 0}, {0.7071067811865475, 
                 0.7071067811865475}, {0.5303300858899106, 
                 0.5303300858899106}, {0.5, 0}, {0.17677669529663687`, 
                 0.17677669529663687`}, {0.75, 0}, {0.35355339059327373`, 
                 0.35355339059327373`}, {0, 0}, {0, 0}, {1, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 
         0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {0, 0}, {
                Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {
                Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {3, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}}], 
              BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {0, 0}, {
                1.590990257669732, 1.590990257669732}, {1.5, 0}, {0.75, 0}, {
                2.25, 0}, {1.0606601717798212`, 1.0606601717798212`}, {3, 
                0}, {2.1213203435596424`, 2.1213203435596424`}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {0, 0}, {
                 Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 2], 0}, {
                 Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {3, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}}], 
               BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {0, 
                 0}, {1.590990257669732, 1.590990257669732}, {1.5, 0}, {
                 0.75, 0}, {2.25, 0}, {1.0606601717798212`, 
                 1.0606601717798212`}, {3, 0}, {2.1213203435596424`, 
                 2.1213203435596424`}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], 0}, {1, 0}, {0, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {2^Rational[-1, 2], 2^Rational[-1, 2]}}],
               BezierCurve[{{1.5, 0}, {1, 0}, {0, 0}, {1.4142135623730951`, 
                1.4142135623730951`}, {2, 0}, {1.0606601717798212`, 
                1.0606601717798212`}, {0.5, 0}, {0, 0}, {0.35355339059327373`,
                 0.35355339059327373`}, {0.7071067811865475, 
                0.7071067811865475}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 2], 0}, {1, 0}, {0, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
               BezierCurve[{{1.5, 0}, {1, 0}, {0, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}, {2, 0}, {1.0606601717798212`, 
                 1.0606601717798212`}, {0.5, 0}, {0, 0}, {
                 0.35355339059327373`, 0.35355339059327373`}, {
                 0.7071067811865475, 0.7071067811865475}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                Rational[1, 4], 0}, {1, 0}, {Rational[3, 4], 0}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {
                Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                 2^Rational[-1, 2]}}], 
              BezierCurve[{{0.7071067811865475, 0.7071067811865475}, {0, 0}, {
                0.35355339059327373`, 0.35355339059327373`}, {0.5, 0}, {0, 
                0}, {0.25, 0}, {1, 0}, {0.75, 0}, {0.5303300858899106, 
                0.5303300858899106}, {0.17677669529663687`, 
                0.17677669529663687`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                 Rational[1, 4], 0}, {1, 0}, {Rational[3, 4], 0}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {
                 Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                  2^Rational[-1, 2]}}], 
               BezierCurve[{{0.7071067811865475, 0.7071067811865475}, {0, 
                 0}, {0.35355339059327373`, 0.35355339059327373`}, {0.5, 0}, {
                 0, 0}, {0.25, 0}, {1, 0}, {0.75, 0}, {0.5303300858899106, 
                 0.5303300858899106}, {0.17677669529663687`, 
                 0.17677669529663687`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny]},
    {
     GraphicsBox[{
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                1 + 5^Rational[1, 2], 
                 4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {4, 0}, {0, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {3, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {1, 0}, {2, 0}}], 
              BezierCurve[{{0, 0}, {3.23606797749979, 2.3511410091698925`}, {
                1.618033988749895, 1.1755705045849463`}, {4, 0}, {0, 0}, {
                0.8090169943749475, 0.5877852522924731}, {3, 0}, {
                2.4270509831248424`, 1.7633557568774194`}, {1, 0}, {2, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 1 + 5^Rational[1, 2], 
                  4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {4, 0}, {0, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {3, 
                 0}, {Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {1, 0}, {2, 0}}], 
               BezierCurve[{{0, 0}, {3.23606797749979, 2.3511410091698925`}, {
                 1.618033988749895, 1.1755705045849463`}, {4, 0}, {0, 0}, {
                 0.8090169943749475, 0.5877852522924731}, {3, 0}, {
                 2.4270509831248424`, 1.7633557568774194`}, {1, 0}, {2, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[9, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  9, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[3, 4], 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[3, 2], 0}, {Rational[9, 4], 0}, {
                3, 0}, {0, 0}, {
                Rational[3, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {1.8202882373436318`, 
                1.3225168176580646`}, {0.75, 0}, {2.4270509831248424`, 
                1.7633557568774194`}, {1.5, 0}, {2.25, 0}, {3, 0}, {0, 0}, {
                0.6067627457812106, 0.44083893921935485`}, {
                1.2135254915624212`, 0.8816778784387097}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[9, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   9, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[3, 4], 0}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[3, 2], 0}, {
                 Rational[9, 4], 0}, {3, 0}, {0, 0}, {
                 Rational[3, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {1.8202882373436318`, 
                 1.3225168176580646`}, {0.75, 0}, {2.4270509831248424`, 
                 1.7633557568774194`}, {1.5, 0}, {2.25, 0}, {3, 0}, {0, 0}, {
                 0.6067627457812106, 0.44083893921935485`}, {
                 1.2135254915624212`, 0.8816778784387097}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {2, 0}, {
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[3, 2], 0}, {
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {1, 0}}], 
              BezierCurve[{{0, 0}, {1.618033988749895, 1.1755705045849463`}, {
                2, 0}, {1.2135254915624212`, 0.8816778784387097}, {0, 0}, {
                0.5, 0}, {0.8090169943749475, 0.5877852522924731}, {1.5, 0}, {
                0.4045084971874737, 0.29389262614623657`}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {2, 0}, {
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[3, 2], 0}, {
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {1, 0}}], 
               BezierCurve[{{0, 0}, {1.618033988749895, 
                 1.1755705045849463`}, {2, 0}, {1.2135254915624212`, 
                 0.8816778784387097}, {0, 0}, {0.5, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {1.5, 0}, {0.4045084971874737, 
                 0.29389262614623657`}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[3, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                Rational[3, 4], 0}, {1, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[1, 4], 0}, {
                Rational[1, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0.6067627457812106, 
                0.44083893921935485`}, {0.4045084971874737, 
                0.29389262614623657`}, {0.5, 0}, {0, 0}, {0.75, 0}, {1, 0}, {
                0.8090169943749475, 0.5877852522924731}, {0.25, 0}, {
                0.20225424859373686`, 0.14694631307311828`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[3, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[1, 2], 0}, {0, 0}, {
                 Rational[3, 4], 0}, {1, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[1, 4], 0}, {
                 Rational[1, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0.6067627457812106, 
                 0.44083893921935485`}, {0.4045084971874737, 
                 0.29389262614623657`}, {0.5, 0}, {0, 0}, {0.75, 0}, {1, 0}, {
                 0.8090169943749475, 0.5877852522924731}, {0.25, 0}, {
                 0.20225424859373686`, 0.14694631307311828`}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}, {
                Rational[3, 2], 0}, {0, 0}}], 
              BezierCurve[{{0, 0}, {0.75, 1.299038105676658}, {1.5, 
                2.598076211353316}, {3, 0}, {1.5, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}, {
                 Rational[3, 2], 0}, {0, 0}}], 
               BezierCurve[{{0, 0}, {0.75, 1.299038105676658}, {1.5, 
                 2.598076211353316}, {3, 0}, {1.5, 0}, {0, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 3^Rational[1, 2]}, {0, 0}, {0, 0}, {2, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {1, 0}}], 
              BezierCurve[{{1, 1.7320508075688772`}, {0, 0}, {0, 0}, {2, 0}, {
                0.5, 0.8660254037844386}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 3^Rational[1, 2]}, {0, 0}, {0, 0}, {2, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {1, 0}}], 
               BezierCurve[{{1, 1.7320508075688772`}, {0, 0}, {0, 0}, {2, 
                 0}, {0.5, 0.8660254037844386}, {1, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2], 0}, {1, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {0, 0}}], 
              BezierCurve[{{0.5, 0}, {1, 0}, {0.5, 0.8660254037844386}, {0, 
                0}, {0.25, 0.4330127018922193}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 2], 0}, {1, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {0, 0}}], 
               BezierCurve[{{0.5, 0}, {1, 0}, {0.5, 0.8660254037844386}, {0, 
                 0}, {0.25, 0.4330127018922193}, {0, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2, 2 3^Rational[1, 2]}, {4, 0}, {
                Rational[8, 3], 0}, {Rational[2, 3], 2 3^Rational[-1, 2]}, {
                Rational[4, 3], 0}, {0, 0}, {
                Rational[4, 3], 4 3^Rational[-1, 2]}, {0, 0}}], 
              BezierCurve[{{2, 3.4641016151377544`}, {4, 0}, {
                2.6666666666666665`, 0}, {0.6666666666666666, 
                1.1547005383792517`}, {1.3333333333333333`, 0}, {0, 0}, {
                1.3333333333333333`, 2.3094010767585034`}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2, 2 3^Rational[1, 2]}, {4, 0}, {
                 Rational[8, 3], 0}, {Rational[2, 3], 2 3^Rational[-1, 2]}, {
                 Rational[4, 3], 0}, {0, 0}, {
                 Rational[4, 3], 4 3^Rational[-1, 2]}, {0, 0}}], 
               BezierCurve[{{2, 3.4641016151377544`}, {4, 0}, {
                 2.6666666666666665`, 0}, {0.6666666666666666, 
                 1.1547005383792517`}, {1.3333333333333333`, 0}, {0, 0}, {
                 1.3333333333333333`, 2.3094010767585034`}, {0, 0}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {0, 0}, {
                1, 3^Rational[1, 2]}, {0, 0}, {1, 0}, {3, 0}}], 
              BezierCurve[{{2, 0}, {0.5, 0.8660254037844386}, {1.5, 
                2.598076211353316}, {0, 0}, {1, 1.7320508075688772`}, {0, 
                0}, {1, 0}, {3, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {0, 0}, {
                 1, 3^Rational[1, 2]}, {0, 0}, {1, 0}, {3, 0}}], 
               BezierCurve[{{2, 0}, {0.5, 0.8660254037844386}, {1.5, 
                 2.598076211353316}, {0, 0}, {1, 1.7320508075688772`}, {0, 
                 0}, {1, 0}, {3, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[2, 3], 2 3^Rational[-1, 2]}, {2, 0}, {
                Rational[1, 3], 3^Rational[-1, 2]}, {Rational[2, 3], 0}, {
                1, 3^Rational[1, 2]}, {0, 0}, {Rational[4, 3], 0}, {0, 0}}], 
              BezierCurve[{{0.6666666666666666, 1.1547005383792517`}, {2, 
                0}, {0.3333333333333333, 0.5773502691896258}, {
                0.6666666666666666, 0}, {1, 1.7320508075688772`}, {0, 0}, {
                1.3333333333333333`, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[2, 3], 2 3^Rational[-1, 2]}, {2, 0}, {
                 Rational[1, 3], 3^Rational[-1, 2]}, {Rational[2, 3], 0}, {
                 1, 3^Rational[1, 2]}, {0, 0}, {Rational[4, 3], 0}, {0, 0}}], 
               BezierCurve[{{0.6666666666666666, 1.1547005383792517`}, {2, 
                 0}, {0.3333333333333333, 0.5773502691896258}, {
                 0.6666666666666666, 0}, {1, 1.7320508075688772`}, {0, 0}, {
                 1.3333333333333333`, 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {
            0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[2, 3], 0}, {0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[1, 3], 0}, {1, 0}, {
                Rational[1, 3], 3^Rational[-1, 2]}, {0, 0}, {
                Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}}], 
              BezierCurve[{{0.6666666666666666, 0}, {0, 0}, {0.5, 
                0.8660254037844386}, {0.3333333333333333, 0}, {1, 0}, {
                0.3333333333333333, 0.5773502691896258}, {0, 0}, {
                0.16666666666666666`, 0.2886751345948129}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[2, 3], 0}, {0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[1, 3], 0}, {1, 0}, {
                 Rational[1, 3], 3^Rational[-1, 2]}, {0, 0}, {
                 Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}}], 
               BezierCurve[{{0.6666666666666666, 0}, {0, 0}, {0.5, 
                 0.8660254037844386}, {0.3333333333333333, 0}, {1, 0}, {
                 0.3333333333333333, 0.5773502691896258}, {0, 0}, {
                 0.16666666666666666`, 0.2886751345948129}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[9, 4], 0}, {
                Rational[3, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[9, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  9, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {3, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[3, 4], 0}, {0, 0}, {
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[3, 2], 0}, {0, 0}}], 
              BezierCurve[{{2.25, 0}, {0.6067627457812106, 
                0.44083893921935485`}, {1.8202882373436318`, 
                1.3225168176580646`}, {3, 0}, {2.4270509831248424`, 
                1.7633557568774194`}, {0.75, 0}, {0, 0}, {1.2135254915624212`,
                 0.8816778784387097}, {1.5, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[9, 4], 0}, {
                 Rational[3, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[9, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   9, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {3, 0}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[3, 4], 0}, {0, 0}, {
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[3, 2], 0}, {0, 0}}], 
               BezierCurve[{{2.25, 0}, {0.6067627457812106, 
                 0.44083893921935485`}, {1.8202882373436318`, 
                 1.3225168176580646`}, {3, 0}, {2.4270509831248424`, 
                 1.7633557568774194`}, {0.75, 0}, {0, 0}, {
                 1.2135254915624212`, 0.8816778784387097}, {1.5, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {0, 0}, {2, 0}, {
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[3, 2], 0}, {Rational[1, 2], 0}}],
               BezierCurve[{{1, 0}, {0.8090169943749475, 
                0.5877852522924731}, {1.2135254915624212`, 
                0.8816778784387097}, {0, 0}, {0, 0}, {2, 0}, {
                0.4045084971874737, 0.29389262614623657`}, {1.618033988749895,
                 1.1755705045849463`}, {1.5, 0}, {0.5, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {0, 0}, {2, 0}, {
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[3, 2], 0}, {
                 Rational[1, 2], 0}}], 
               BezierCurve[{{1, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {1.2135254915624212`, 
                 0.8816778784387097}, {0, 0}, {0, 0}, {2, 0}, {
                 0.4045084971874737, 0.29389262614623657`}, {
                 1.618033988749895, 1.1755705045849463`}, {1.5, 0}, {
                 0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {0, 0}, {Rational[1, 2], 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[3, 4], 0}, {1, 0}, {Rational[1, 4], 0}, {
                Rational[3, 16] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{0.20225424859373686`, 0.14694631307311828`}, {0, 
                0}, {0, 0}, {0.5, 0}, {0.8090169943749475, 
                0.5877852522924731}, {0.75, 0}, {1, 0}, {0.25, 0}, {
                0.6067627457812106, 0.44083893921935485`}, {
                0.4045084971874737, 0.29389262614623657`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {0, 0}, {Rational[1, 2], 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[3, 4], 0}, {1, 0}, {Rational[1, 4], 0}, {
                 Rational[3, 16] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 4] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{0.20225424859373686`, 0.14694631307311828`}, {0, 
                 0}, {0, 0}, {0.5, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {0.75, 0}, {1, 0}, {0.25, 0}, {
                 0.6067627457812106, 0.44083893921935485`}, {
                 0.4045084971874737, 0.29389262614623657`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3, 0}, {0, 0}, {0, 0}, {Rational[3, 2], 0}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{3, 0}, {0, 0}, {0, 0}, {1.5, 0}, {
                2.7029066037072575`, 1.3016512173526744`}, {
                1.3514533018536288`, 0.6508256086763372}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3, 0}, {0, 0}, {0, 0}, {Rational[3, 2], 0}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{3, 0}, {0, 0}, {0, 0}, {1.5, 0}, {
                 2.7029066037072575`, 1.3016512173526744`}, {
                 1.3514533018536288`, 0.6508256086763372}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 0}}],
               BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {0.9009688679024191, 
                0.4338837391175581}, {1.8019377358048383`, 
                0.8677674782351162}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 
                 0}}], BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {
                 0.9009688679024191, 0.4338837391175581}, {
                 1.8019377358048383`, 0.8677674782351162}, {0, 0}}]]]}}, {{{1,
             0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}, {1, 
                0}, {Rational[1, 2], 0}, {0, 0}}], 
              BezierCurve[{{0.4504844339512096, 0.21694186955877906`}, {
                0.9009688679024191, 0.4338837391175581}, {0, 0}, {1, 0}, {
                0.5, 0}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}, {1, 
                 0}, {Rational[1, 2], 0}, {0, 0}}], 
               BezierCurve[{{0.4504844339512096, 0.21694186955877906`}, {
                 0.9009688679024191, 0.4338837391175581}, {0, 0}, {1, 0}, {
                 0.5, 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                 2^Rational[-1, 2]}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                Rational[9, 4], 0}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 4], 0}, {0, 0}, {
                Rational[3, 2], 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {3, 0}, {0, 0}}], 
              BezierCurve[{{1.590990257669732, 1.590990257669732}, {
                2.1213203435596424`, 2.1213203435596424`}, {2.25, 0}, {
                0.5303300858899106, 0.5303300858899106}, {0.75, 0}, {0, 0}, {
                1.5, 0}, {1.0606601717798212`, 1.0606601717798212`}, {3, 0}, {
                0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                  2^Rational[-1, 2]}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                 Rational[9, 4], 0}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 4], 0}, {0, 0}, {
                 Rational[3, 2], 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {3, 0}, {0, 0}}], 
               BezierCurve[{{1.590990257669732, 1.590990257669732}, {
                 2.1213203435596424`, 2.1213203435596424`}, {2.25, 0}, {
                 0.5303300858899106, 0.5303300858899106}, {0.75, 0}, {0, 0}, {
                 1.5, 0}, {1.0606601717798212`, 1.0606601717798212`}, {3, 
                 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {
         0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 
         0}}}]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[1, 2], 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {1, 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
              BezierCurve[{{0, 0}, {0.5, 0}, {0.35355339059327373`, 
                0.35355339059327373`}, {1, 0}, {1.0606601717798212`, 
                1.0606601717798212`}, {1.5, 0}, {0, 0}, {1.4142135623730951`, 
                1.4142135623730951`}, {2, 0}, {0.7071067811865475, 
                0.7071067811865475}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[1, 2], 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {1, 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
               BezierCurve[{{0, 0}, {0.5, 0}, {0.35355339059327373`, 
                 0.35355339059327373`}, {1, 0}, {1.0606601717798212`, 
                 1.0606601717798212`}, {1.5, 0}, {0, 0}, {1.4142135623730951`,
                  1.4142135623730951`}, {2, 0}, {0.7071067811865475, 
                 0.7071067811865475}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
         1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 
         0}}}]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {1, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                 2^Rational[-1, 2]}, {Rational[1, 4], 0}, {0, 0}, {
                Rational[3, 4], 0}, {0, 0}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {Rational[1, 2], 0}}], 
              BezierCurve[{{0.35355339059327373`, 0.35355339059327373`}, {1, 
                0}, {0.7071067811865475, 0.7071067811865475}, {
                0.17677669529663687`, 0.17677669529663687`}, {0.25, 0}, {0, 
                0}, {0.75, 0}, {0, 0}, {0.5303300858899106, 
                0.5303300858899106}, {0.5, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {1, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                  2^Rational[-1, 2]}, {Rational[1, 4], 0}, {0, 0}, {
                 Rational[3, 4], 0}, {0, 0}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {Rational[1, 2], 0}}], 
               BezierCurve[{{0.35355339059327373`, 0.35355339059327373`}, {1, 
                 0}, {0.7071067811865475, 0.7071067811865475}, {
                 0.17677669529663687`, 0.17677669529663687`}, {0.25, 0}, {0, 
                 0}, {0.75, 0}, {0, 0}, {0.5303300858899106, 
                 0.5303300858899106}, {0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny]},
    {
     GraphicsBox[{
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], 0}, {Rational[9, 4], 0}, {0, 0}, {
                0, 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {
                Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 4], 0}, {3, 0}}], 
              BezierCurve[{{1.5, 0}, {2.25, 0}, {0, 0}, {0, 0}, {
                1.0606601717798212`, 1.0606601717798212`}, {
                2.1213203435596424`, 2.1213203435596424`}, {
                0.5303300858899106, 0.5303300858899106}, {1.590990257669732, 
                1.590990257669732}, {0.75, 0}, {3, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 2], 0}, {Rational[9, 4], 0}, {0, 0}, {
                 0, 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {
                 Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 4], 0}, {3, 0}}], 
               BezierCurve[{{1.5, 0}, {2.25, 0}, {0, 0}, {0, 0}, {
                 1.0606601717798212`, 1.0606601717798212`}, {
                 2.1213203435596424`, 2.1213203435596424`}, {
                 0.5303300858899106, 0.5303300858899106}, {1.590990257669732, 
                 1.590990257669732}, {0.75, 0}, {3, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2, 0}, {Rational[1, 2], 0}, {1, 0}, {0, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {0, 0}}], 
              BezierCurve[{{2, 0}, {0.5, 0}, {1, 0}, {0, 0}, {
                1.4142135623730951`, 1.4142135623730951`}, {
                0.7071067811865475, 0.7071067811865475}, {1.5, 0}, {
                1.0606601717798212`, 1.0606601717798212`}, {
                0.35355339059327373`, 0.35355339059327373`}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2, 0}, {Rational[1, 2], 0}, {1, 0}, {0, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {0, 0}}], 
               BezierCurve[{{2, 0}, {0.5, 0}, {1, 0}, {0, 0}, {
                 1.4142135623730951`, 1.4142135623730951`}, {
                 0.7071067811865475, 0.7071067811865475}, {1.5, 0}, {
                 1.0606601717798212`, 1.0606601717798212`}, {
                 0.35355339059327373`, 0.35355339059327373`}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 
         1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {
                Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                 2^Rational[-1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                Rational[3, 4], 0}, {1, 0}, {Rational[1, 4], 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}}], 
              BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {
                0.17677669529663687`, 0.17677669529663687`}, {0, 0}, {
                0.5, 0}, {0.7071067811865475, 0.7071067811865475}, {0, 0}, {
                0.75, 0}, {1, 0}, {0.25, 0}, {0.35355339059327373`, 
                0.35355339059327373`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {
                 Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                  2^Rational[-1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                 Rational[3, 4], 0}, {1, 0}, {Rational[1, 4], 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}}], 
               BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {
                 0.17677669529663687`, 0.17677669529663687`}, {0, 0}, {
                 0.5, 0}, {0.7071067811865475, 0.7071067811865475}, {0, 0}, {
                 0.75, 0}, {1, 0}, {0.25, 0}, {0.35355339059327373`, 
                 0.35355339059327373`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 4], 0}, {Rational[3, 2], 0}, {
                Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                 2^Rational[-1, 2]}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {0, 0}, {Rational[9, 4], 0}, {3, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {0, 0}}], 
              BezierCurve[{{0.75, 0}, {1.5, 0}, {1.590990257669732, 
                1.590990257669732}, {1.0606601717798212`, 
                1.0606601717798212`}, {0, 0}, {2.25, 0}, {3, 0}, {
                2.1213203435596424`, 2.1213203435596424`}, {
                0.5303300858899106, 0.5303300858899106}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 4], 0}, {Rational[3, 2], 0}, {
                 Rational[9, 4] 2^Rational[-1, 2], Rational[9, 4] 
                  2^Rational[-1, 2]}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {0, 0}, {Rational[9, 4], 0}, {3, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {0, 0}}], 
               BezierCurve[{{0.75, 0}, {1.5, 0}, {1.590990257669732, 
                 1.590990257669732}, {1.0606601717798212`, 
                 1.0606601717798212`}, {0, 0}, {2.25, 0}, {3, 0}, {
                 2.1213203435596424`, 2.1213203435596424`}, {
                 0.5303300858899106, 0.5303300858899106}, {0, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 
         0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {2, 0}, {Rational[3, 2], 0}, {0, 0}, {
                Rational[1, 2], 0}, {2^Rational[1, 2], 2^Rational[1, 2]}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {1, 0}}], 
              BezierCurve[{{1.0606601717798212`, 1.0606601717798212`}, {2, 
                0}, {1.5, 0}, {0, 0}, {0.5, 0}, {1.4142135623730951`, 
                1.4142135623730951`}, {0.7071067811865475, 
                0.7071067811865475}, {0, 0}, {0.35355339059327373`, 
                0.35355339059327373`}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {2, 0}, {Rational[3, 2], 0}, {0, 0}, {
                 Rational[1, 2], 0}, {2^Rational[1, 2], 2^Rational[1, 2]}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {0, 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {1, 0}}], 
               BezierCurve[{{1.0606601717798212`, 1.0606601717798212`}, {2, 
                 0}, {1.5, 0}, {0, 0}, {0.5, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}, {0.7071067811865475, 
                 0.7071067811865475}, {0, 0}, {0.35355339059327373`, 
                 0.35355339059327373`}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                 2^Rational[-1, 2]}, {0, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {
                Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                 2^Rational[-1, 2]}, {Rational[3, 4], 0}, {0, 0}, {1, 0}, {
                Rational[1, 2], 0}, {Rational[1, 4], 0}}], 
              BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {0, 0}, {
                0.7071067811865475, 0.7071067811865475}, {
                0.35355339059327373`, 0.35355339059327373`}, {
                0.17677669529663687`, 0.17677669529663687`}, {0.75, 0}, {0, 
                0}, {1, 0}, {0.5, 0}, {0.25, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4] 2^Rational[-1, 2], Rational[3, 4] 
                  2^Rational[-1, 2]}, {0, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {
                 Rational[1, 4] 2^Rational[-1, 2], Rational[1, 4] 
                  2^Rational[-1, 2]}, {Rational[3, 4], 0}, {0, 0}, {1, 0}, {
                 Rational[1, 2], 0}, {Rational[1, 4], 0}}], 
               BezierCurve[{{0.5303300858899106, 0.5303300858899106}, {0, 
                 0}, {0.7071067811865475, 0.7071067811865475}, {
                 0.35355339059327373`, 0.35355339059327373`}, {
                 0.17677669529663687`, 0.17677669529663687`}, {0.75, 0}, {0, 
                 0}, {1, 0}, {0.5, 0}, {0.25, 0}}]]]}}, {{{1, 0}, {0, -1}}, {
            0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{6, 0}, {
                6 Cos[Rational[1, 7] Pi], 6 Sin[Rational[1, 7] Pi]}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                3, 0}, {0, 0}}], 
              BezierCurve[{{6, 0}, {5.405813207414515, 2.603302434705349}, {
                2.7029066037072575`, 1.3016512173526744`}, {0, 0}, {3, 0}, {0,
                 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{6, 0}, {
                 6 Cos[Rational[1, 7] Pi], 6 Sin[Rational[1, 7] Pi]}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 
                 0}, {3, 0}, {0, 0}}], 
               BezierCurve[{{6, 0}, {5.405813207414515, 2.603302434705349}, {
                 2.7029066037072575`, 1.3016512173526744`}, {0, 0}, {3, 0}, {
                 0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[5, 2] Cos[Rational[1, 7] Pi], Rational[5, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {0, 0}, {5, 0}, {
                5 Cos[Rational[1, 7] Pi], 5 Sin[Rational[1, 7] Pi]}, {
                Rational[5, 2], 0}}], 
              BezierCurve[{{2.252422169756048, 1.0847093477938954`}, {0, 0}, {
                0, 0}, {5, 0}, {4.504844339512096, 2.1694186955877908`}, {
                2.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[5, 2] Cos[Rational[1, 7] Pi], Rational[5, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {0, 0}, {5, 0}, {
                 5 Cos[Rational[1, 7] Pi], 5 Sin[Rational[1, 7] Pi]}, {
                 Rational[5, 2], 0}}], 
               BezierCurve[{{2.252422169756048, 1.0847093477938954`}, {0, 
                 0}, {0, 0}, {5, 0}, {4.504844339512096, 
                 2.1694186955877908`}, {2.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0,
             0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {2, 0}, {
                4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {4, 0}, {
                0, 0}}], 
              BezierCurve[{{0, 0}, {2, 0}, {3.6038754716096766`, 
                1.7355349564702325`}, {1.8019377358048383`, 
                0.8677674782351162}, {4, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {2, 0}, {
                 4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {4, 
                 0}, {0, 0}}], 
               BezierCurve[{{0, 0}, {2, 0}, {3.6038754716096766`, 
                 1.7355349564702325`}, {1.8019377358048383`, 
                 0.8677674782351162}, {4, 0}, {0, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], 0}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {3, 0}, {0, 0}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{1.5, 0}, {1.3514533018536288`, 
                0.6508256086763372}, {0, 0}, {3, 0}, {0, 0}, {
                2.7029066037072575`, 1.3016512173526744`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 2], 0}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {3, 0}, {0, 0}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{1.5, 0}, {1.3514533018536288`, 
                 0.6508256086763372}, {0, 0}, {3, 0}, {0, 0}, {
                 2.7029066037072575`, 1.3016512173526744`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}}], 
              BezierCurve[{{0, 0}, {1, 0}, {1.8019377358048383`, 
                0.8677674782351162}, {2, 0}, {0.9009688679024191, 
                0.4338837391175581}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 
                 0}, {Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 
                 0}}], BezierCurve[{{0, 0}, {1, 0}, {1.8019377358048383`, 
                 0.8677674782351162}, {2, 0}, {0.9009688679024191, 
                 0.4338837391175581}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2], 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {1, 0}, {0, 0}, {0, 0}}], 
              BezierCurve[{{0.5, 0}, {0.9009688679024191, 
                0.4338837391175581}, {0.4504844339512096, 
                0.21694186955877906`}, {1, 0}, {0, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 2], 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {1, 0}, {0, 0}, {0, 0}}], 
               BezierCurve[{{0.5, 0}, {0.9009688679024191, 
                 0.4338837391175581}, {0.4504844339512096, 
                 0.21694186955877906`}, {1, 0}, {0, 0}, {0, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {0, 0}, {
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {3, 0}, {Rational[3, 2], 0}}], 
              BezierCurve[{{0, 0}, {0, 0}, {1.2135254915624212`, 
                0.8816778784387097}, {2.4270509831248424`, 
                1.7633557568774194`}, {3, 0}, {1.5, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {0, 0}, {
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {3, 0}, {Rational[3, 2], 0}}], 
               BezierCurve[{{0, 0}, {0, 0}, {1.2135254915624212`, 
                 0.8816778784387097}, {2.4270509831248424`, 
                 1.7633557568774194`}, {3, 0}, {1.5, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {1, 0}, {0, 0}, {2, 0}}], 
              BezierCurve[{{0.8090169943749475, 0.5877852522924731}, {0, 0}, {
                1.618033988749895, 1.1755705045849463`}, {1, 0}, {0, 0}, {2, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 
                 0}, {Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {1, 0}, {0, 0}, {2, 0}}], 
               BezierCurve[{{0.8090169943749475, 0.5877852522924731}, {0, 
                 0}, {1.618033988749895, 1.1755705045849463`}, {1, 0}, {0, 
                 0}, {2, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[1, 2], 0}}], 
              BezierCurve[{{0, 0}, {1, 0}, {0.4045084971874737, 
                0.29389262614623657`}, {0, 0}, {0.8090169943749475, 
                0.5877852522924731}, {0.5, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[1, 2], 0}}], 
               BezierCurve[{{0, 0}, {1, 0}, {0.4045084971874737, 
                 0.29389262614623657`}, {0, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                2, 2 3^Rational[1, 2]}, {1, 3^Rational[1, 2]}, {1, 0}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {2, 0}, {4, 
                0}, {0, 0}, {3, 0}}], 
              BezierCurve[{{0, 0}, {0.5, 0.8660254037844386}, {
                2, 3.4641016151377544`}, {1, 1.7320508075688772`}, {1, 0}, {
                1.5, 2.598076211353316}, {2, 0}, {4, 0}, {0, 0}, {3, 0}}]]]}},
           GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 2, 2 3^Rational[1, 2]}, {1, 3^Rational[1, 2]}, {1, 0}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {2, 0}, {4,
                  0}, {0, 0}, {3, 0}}], 
               BezierCurve[{{0, 0}, {0.5, 0.8660254037844386}, {
                 2, 3.4641016151377544`}, {1, 1.7320508075688772`}, {1, 0}, {
                 1.5, 2.598076211353316}, {2, 0}, {4, 0}, {0, 0}, {3, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {0, 0}, {3, 
                0}, {Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                Rational[3, 2], 0}, {0, 0}}], 
              BezierCurve[{{0.75, 1.299038105676658}, {1.5, 
                2.598076211353316}, {0, 0}, {3, 0}, {0.75, 0}, {2.25, 0}, {
                0.375, 0.649519052838329}, {1.125, 1.9485571585149868`}, {
                1.5, 0}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {0, 0}, {3,
                  0}, {Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                 Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                 Rational[3, 2], 0}, {0, 0}}], 
               BezierCurve[{{0.75, 1.299038105676658}, {1.5, 
                 2.598076211353316}, {0, 0}, {3, 0}, {0.75, 0}, {2.25, 0}, {
                 0.375, 0.649519052838329}, {1.125, 1.9485571585149868`}, {
                 1.5, 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[3, 2], 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {
                Rational[1, 2], 0}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                1, 3^Rational[1, 2]}, {1, 0}, {2, 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {1.5, 0}, {0.5, 0.8660254037844386}, {0, 
                0}, {0.5, 0}, {0.75, 1.299038105676658}, {
                1, 1.7320508075688772`}, {1, 0}, {2, 0}, {0.25, 
                0.4330127018922193}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[3, 2], 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {
                 Rational[1, 2], 0}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 1, 3^Rational[1, 2]}, {1, 0}, {2, 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {1.5, 0}, {0.5, 0.8660254037844386}, {0, 
                 0}, {0.5, 0}, {0.75, 1.299038105676658}, {
                 1, 1.7320508075688772`}, {1, 0}, {2, 0}, {0.25, 
                 0.4330127018922193}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[3, 4], 0}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                Rational[1, 4], 0}, {0, 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                Rational[1, 2], 0}, {1, 0}, {0, 0}}], 
              BezierCurve[{{0.125, 0.21650635094610965`}, {0.5, 
                0.8660254037844386}, {0.75, 0}, {0.375, 0.649519052838329}, {
                0.25, 0}, {0, 0}, {0.25, 0.4330127018922193}, {0.5, 0}, {1, 
                0}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[3, 4], 0}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                 Rational[1, 4], 0}, {0, 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {1, 0}, {0, 0}}], 
               BezierCurve[{{0.125, 0.21650635094610965`}, {0.5, 
                 0.8660254037844386}, {0.75, 0}, {0.375, 0.649519052838329}, {
                 0.25, 0}, {0, 0}, {0.25, 0.4330127018922193}, {0.5, 0}, {1, 
                 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {
                Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                 Sin[Rational[1, 7] Pi]}, {
                Rational[8, 3] Cos[Rational[1, 7] Pi], Rational[8, 3] 
                 Sin[Rational[1, 7] Pi]}, {Rational[8, 3], 0}, {0, 0}, {
                4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {4, 0}}],
               BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                1.2012918238698922`, 0.5785116521567442}, {
                2.4025836477397844`, 1.1570233043134883`}, {
                2.6666666666666665`, 0}, {0, 0}, {3.6038754716096766`, 
                1.7355349564702325`}, {4, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {
                 Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                  Sin[Rational[1, 7] Pi]}, {
                 Rational[8, 3] Cos[Rational[1, 7] Pi], Rational[8, 3] 
                  Sin[Rational[1, 7] Pi]}, {Rational[8, 3], 0}, {0, 0}, {
                 4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {4, 
                 0}}], BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                 1.2012918238698922`, 0.5785116521567442}, {
                 2.4025836477397844`, 1.1570233043134883`}, {
                 2.6666666666666665`, 0}, {0, 0}, {3.6038754716096766`, 
                 1.7355349564702325`}, {4, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {0, 0}, {1, 0}, {3, 0}, {2, 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {0, 0}, {1, 0}, {3, 0}, {2, 0}, {
                1.8019377358048383`, 0.8677674782351162}, {
                2.7029066037072575`, 1.3016512173526744`}, {
                0.9009688679024191, 0.4338837391175581}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {0, 0}, {1, 0}, {3, 0}, {2, 0}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {0, 0}, {1, 0}, {3, 0}, {2, 0}, {
                 1.8019377358048383`, 0.8677674782351162}, {
                 2.7029066037072575`, 1.3016512173526744`}, {
                 0.9009688679024191, 0.4338837391175581}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[2, 3], 0}, {2, 
                0}, {2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                Rational[4, 3], 0}, {
                Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {1.2012918238698922`, 
                0.5785116521567442}, {0, 0}, {0.6666666666666666, 0}, {2, 
                0}, {1.8019377358048383`, 0.8677674782351162}, {
                1.3333333333333333`, 0}, {0.6006459119349461, 
                0.2892558260783721}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[4, 3] Cos[Rational[1, 7] Pi], Rational[4, 3] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[2, 3], 0}, {2, 
                 0}, {2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                 Rational[4, 3], 0}, {
                 Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                  Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {1.2012918238698922`, 
                 0.5785116521567442}, {0, 0}, {0.6666666666666666, 0}, {2, 
                 0}, {1.8019377358048383`, 0.8677674782351162}, {
                 1.3333333333333333`, 0}, {0.6006459119349461, 
                 0.2892558260783721}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                Rational[1, 3], 0}, {0, 0}, {
                Rational[1, 3] Cos[Rational[1, 7] Pi], Rational[1, 3] 
                 Sin[Rational[1, 7] Pi]}, {
                Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                 Sin[Rational[1, 7] Pi]}, {1, 0}, {0, 0}, {
                Rational[2, 3], 0}}], 
              BezierCurve[{{0.9009688679024191, 0.4338837391175581}, {
                0.3333333333333333, 0}, {0, 0}, {0.30032295596747305`, 
                0.14462791303918604`}, {0.6006459119349461, 
                0.2892558260783721}, {1, 0}, {0, 0}, {
                0.6666666666666666, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 Rational[1, 3], 0}, {0, 0}, {
                 Rational[1, 3] Cos[Rational[1, 7] Pi], Rational[1, 3] 
                  Sin[Rational[1, 7] Pi]}, {
                 Rational[2, 3] Cos[Rational[1, 7] Pi], Rational[2, 3] 
                  Sin[Rational[1, 7] Pi]}, {1, 0}, {0, 0}, {
                 Rational[2, 3], 0}}], 
               BezierCurve[{{0.9009688679024191, 0.4338837391175581}, {
                 0.3333333333333333, 0}, {0, 0}, {0.30032295596747305`, 
                 0.14462791303918604`}, {0.6006459119349461, 
                 0.2892558260783721}, {1, 0}, {0, 0}, {
                 0.6666666666666666, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny]},
    {
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {0, 
                0}, {Rational[5, 4], 0}, {Rational[5, 2], 0}, {0, 0}, {
                Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {
                Rational[15, 4], 0}}], 
              BezierCurve[{{2.1650635094610964`, 1.25}, {4.330127018922193, 
                2.5}, {5, 0}, {0, 0}, {1.25, 0}, {2.5, 0}, {0, 0}, {
                1.0825317547305482`, 0.625}, {3.2475952641916446`, 1.875}, {
                3.75, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                 Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {0,
                  0}, {Rational[5, 4], 0}, {Rational[5, 2], 0}, {0, 0}, {
                 Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                 Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {
                 Rational[15, 4], 0}}], 
               BezierCurve[{{2.1650635094610964`, 1.25}, {4.330127018922193, 
                 2.5}, {5, 0}, {0, 0}, {1.25, 0}, {2.5, 0}, {0, 0}, {
                 1.0825317547305482`, 0.625}, {3.2475952641916446`, 1.875}, {
                 3.75, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                2, 0}, {0, 0}, {1, 0}, {2 3^Rational[1, 2], 2}, {3, 0}, {
                3^Rational[1, 2], 1}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {4, 0}, {0, 
                0}}], BezierCurve[{{2.598076211353316, 1.5}, {2, 0}, {0, 0}, {
                1, 0}, {3.4641016151377544`, 2}, {3, 0}, {
                1.7320508075688772`, 1}, {0.8660254037844386, 0.5}, {4, 0}, {
                0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {2, 0}, {0,
                  0}, {1, 0}, {2 3^Rational[1, 2], 2}, {3, 0}, {
                 3^Rational[1, 2], 1}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {4, 0}, {0,
                  0}}], BezierCurve[{{2.598076211353316, 1.5}, {2, 0}, {0, 
                 0}, {1, 0}, {3.4641016151377544`, 2}, {3, 0}, {
                 1.7320508075688772`, 1}, {0.8660254037844386, 0.5}, {4, 0}, {
                 0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                3, 0}, {0, 0}, {0, 0}, {
                Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                Rational[3, 2], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}}], 
              BezierCurve[{{1.299038105676658, 0.75}, {3, 0}, {0, 0}, {0, 
                0}, {1.9485571585149868`, 1.125}, {2.598076211353316, 1.5}, {
                0.75, 0}, {2.25, 0}, {1.5, 0}, {0.649519052838329, 
                0.375}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {3, 0}, {0,
                  0}, {0, 0}, {
                 Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[3, 4], 0}, {Rational[9, 4], 0}, {
                 Rational[3, 2], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}}], 
               BezierCurve[{{1.299038105676658, 0.75}, {3, 0}, {0, 0}, {0, 
                 0}, {1.9485571585149868`, 1.125}, {2.598076211353316, 1.5}, {
                 0.75, 0}, {2.25, 0}, {1.5, 0}, {0.649519052838329, 
                 0.375}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {Rational[3, 2], 0}, {2, 0}, {
                3^Rational[1, 2], 1}, {0, 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[1, 2], 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 0}}], 
              BezierCurve[{{1, 0}, {1.5, 0}, {2, 0}, {
                1.7320508075688772`, 1}, {0, 0}, {0.8660254037844386, 0.5}, {
                0.5, 0}, {0.4330127018922193, 0.25}, {1.299038105676658, 
                0.75}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {Rational[3, 2], 0}, {2, 0}, {
                 3^Rational[1, 2], 1}, {0, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[1, 2], 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 0}}], 
               BezierCurve[{{1, 0}, {1.5, 0}, {2, 0}, {
                 1.7320508075688772`, 1}, {0, 0}, {0.8660254037844386, 0.5}, {
                 0.5, 0}, {0.4330127018922193, 0.25}, {1.299038105676658, 
                 0.75}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {0, 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                Rational[1, 4], 0}, {1, 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[3, 4], 0}, {Rational[1, 2], 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0.21650635094610965`, 0.125}, {0, 0}, {
                0.4330127018922193, 0.25}, {0.25, 0}, {1, 0}, {
                0.649519052838329, 0.375}, {0.75, 0}, {0.5, 0}, {
                0.8660254037844386, 0.5}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {0, 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                 Rational[1, 4], 0}, {1, 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[3, 4], 0}, {Rational[1, 2], 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0.21650635094610965`, 0.125}, {0, 0}, {
                 0.4330127018922193, 0.25}, {0.25, 0}, {1, 0}, {
                 0.649519052838329, 0.375}, {0.75, 0}, {0.5, 0}, {
                 0.8660254037844386, 0.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[10, 3], 0}, {
                Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {
                Rational[5, 3], 5 3^Rational[-1, 2]}, {0, 0}, {
                Rational[5, 3], 0}, {5, 0}, {
                Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}}], 
              BezierCurve[{{3.3333333333333335`, 0}, {2.5, 
                4.330127018922193}, {0, 0}, {1.6666666666666667`, 
                2.886751345948129}, {0, 0}, {1.6666666666666667`, 0}, {5, 
                0}, {0.8333333333333334, 1.4433756729740645`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[10, 3], 0}, {
                 Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {0, 0}, {
                 Rational[5, 3], 5 3^Rational[-1, 2]}, {0, 0}, {
                 Rational[5, 3], 0}, {5, 0}, {
                 Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}}], 
               BezierCurve[{{3.3333333333333335`, 0}, {2.5, 
                 4.330127018922193}, {0, 0}, {1.6666666666666667`, 
                 2.886751345948129}, {0, 0}, {1.6666666666666667`, 0}, {5, 
                 0}, {0.8333333333333334, 1.4433756729740645`}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[8, 3], 0}, {Rational[4, 3], 0}, {
                Rational[2, 3], 2 3^Rational[-1, 2]}, {0, 0}, {4, 0}, {
                2, 2 3^Rational[1, 2]}, {0, 0}, {
                Rational[4, 3], 4 3^Rational[-1, 2]}}], 
              BezierCurve[{{2.6666666666666665`, 0}, {
                1.3333333333333333`, 0}, {0.6666666666666666, 
                1.1547005383792517`}, {0, 0}, {4, 0}, {
                2, 3.4641016151377544`}, {0, 0}, {1.3333333333333333`, 
                2.3094010767585034`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[8, 3], 0}, {Rational[4, 3], 0}, {
                 Rational[2, 3], 2 3^Rational[-1, 2]}, {0, 0}, {4, 0}, {
                 2, 2 3^Rational[1, 2]}, {0, 0}, {
                 Rational[4, 3], 4 3^Rational[-1, 2]}}], 
               BezierCurve[{{2.6666666666666665`, 0}, {
                 1.3333333333333333`, 0}, {0.6666666666666666, 
                 1.1547005383792517`}, {0, 0}, {4, 0}, {
                 2, 3.4641016151377544`}, {0, 0}, {1.3333333333333333`, 
                 2.3094010767585034`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                1, 3^Rational[1, 2]}, {2, 0}, {3, 0}, {1, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {0, 
                0}}], BezierCurve[{{1.5, 2.598076211353316}, {
                1, 1.7320508075688772`}, {2, 0}, {3, 0}, {1, 0}, {0.5, 
                0.8660254037844386}, {0, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                 1, 3^Rational[1, 2]}, {2, 0}, {3, 0}, {1, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {0,
                  0}}], BezierCurve[{{1.5, 2.598076211353316}, {
                 1, 1.7320508075688772`}, {2, 0}, {3, 0}, {1, 0}, {0.5, 
                 0.8660254037844386}, {0, 0}, {0, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {
                1, 3^Rational[1, 2]}, {Rational[2, 3], 2 3^Rational[-1, 2]}, {
                Rational[1, 3], 3^Rational[-1, 2]}, {2, 0}, {
                Rational[2, 3], 0}, {0, 0}}], 
              BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                1, 1.7320508075688772`}, {0.6666666666666666, 
                1.1547005383792517`}, {0.3333333333333333, 
                0.5773502691896258}, {2, 0}, {0.6666666666666666, 0}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {
                 1, 3^Rational[1, 2]}, {
                 Rational[2, 3], 2 3^Rational[-1, 2]}, {
                 Rational[1, 3], 3^Rational[-1, 2]}, {2, 0}, {
                 Rational[2, 3], 0}, {0, 0}}], 
               BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                 1, 1.7320508075688772`}, {0.6666666666666666, 
                 1.1547005383792517`}, {0.3333333333333333, 
                 0.5773502691896258}, {2, 0}, {0.6666666666666666, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[2, 3], 0}, {
                Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}, {
                Rational[1, 3], 3^Rational[-1, 2]}, {0, 0}, {
                Rational[1, 3], 0}}], 
              BezierCurve[{{0, 0}, {1, 0}, {0.5, 0.8660254037844386}, {
                0.6666666666666666, 0}, {0.16666666666666666`, 
                0.2886751345948129}, {0.3333333333333333, 
                0.5773502691896258}, {0, 0}, {0.3333333333333333, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[2, 3], 0}, {
                 Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}, {
                 Rational[1, 3], 3^Rational[-1, 2]}, {0, 0}, {
                 Rational[1, 3], 0}}], 
               BezierCurve[{{0, 0}, {1, 0}, {0.5, 0.8660254037844386}, {
                 0.6666666666666666, 0}, {0.16666666666666666`, 
                 0.2886751345948129}, {0.3333333333333333, 
                 0.5773502691896258}, {0, 0}, {
                 0.3333333333333333, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[9, 2], 0}, {6, 0}, {
                3 3^Rational[1, 2], 3}, {0, 0}, {
                Rational[9, 4] 3^Rational[1, 2], Rational[9, 4]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {3, 0}, {
                Rational[3, 2], 0}, {0, 0}}], 
              BezierCurve[{{4.5, 0}, {6, 0}, {5.196152422706632, 3}, {0, 0}, {
                3.8971143170299736`, 2.25}, {2.598076211353316, 1.5}, {
                1.299038105676658, 0.75}, {3, 0}, {1.5, 0}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[9, 2], 0}, {6, 0}, {
                 3 3^Rational[1, 2], 3}, {0, 0}, {
                 Rational[9, 4] 3^Rational[1, 2], Rational[9, 4]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {3, 0}, {
                 Rational[3, 2], 0}, {0, 0}}], 
               BezierCurve[{{4.5, 0}, {6, 0}, {5.196152422706632, 3}, {0, 
                 0}, {3.8971143170299736`, 2.25}, {2.598076211353316, 1.5}, {
                 1.299038105676658, 0.75}, {3, 0}, {1.5, 0}, {0, 0}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[5, 4], 0}, {Rational[15, 4], 0}, {
                0, 0}, {5, 0}, {
                Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
                Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                Rational[5, 2], 0}, {
                Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}}], 
              BezierCurve[{{0, 0}, {1.25, 0}, {3.75, 0}, {0, 0}, {5, 0}, {
                1.0825317547305482`, 0.625}, {4.330127018922193, 2.5}, {
                2.1650635094610964`, 1.25}, {2.5, 0}, {3.2475952641916446`, 
                1.875}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[5, 4], 0}, {
                 Rational[15, 4], 0}, {0, 0}, {5, 0}, {
                 Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}, {
                 Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
                 Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                 Rational[5, 2], 0}, {
                 Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}}], 
               BezierCurve[{{0, 0}, {1.25, 0}, {3.75, 0}, {0, 0}, {5, 0}, {
                 1.0825317547305482`, 0.625}, {4.330127018922193, 2.5}, {
                 2.1650635094610964`, 1.25}, {2.5, 0}, {3.2475952641916446`, 
                 1.875}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2 3^Rational[1, 2], 2}, {2, 0}, {0, 0}, {1, 0}, {0,
                 0}, {4, 0}, {3, 0}, {3^Rational[1, 2], 1}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
              BezierCurve[{{3.4641016151377544`, 2}, {2, 0}, {0, 0}, {1, 0}, {
                0, 0}, {4, 0}, {3, 0}, {1.7320508075688772`, 1}, {
                0.8660254037844386, 0.5}, {2.598076211353316, 1.5}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2 3^Rational[1, 2], 2}, {2, 0}, {0, 0}, {1, 0}, {
                 0, 0}, {4, 0}, {3, 0}, {3^Rational[1, 2], 1}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
               BezierCurve[{{3.4641016151377544`, 2}, {2, 0}, {0, 0}, {1, 
                 0}, {0, 0}, {4, 0}, {3, 0}, {1.7320508075688772`, 1}, {
                 0.8660254037844386, 0.5}, {2.598076211353316, 1.5}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[3, 4], 0}, {Rational[3, 2], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {3, 0}, {
                Rational[9, 4], 0}, {0, 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
              BezierCurve[{{0, 0}, {0.75, 0}, {1.5, 0}, {0.649519052838329, 
                0.375}, {1.9485571585149868`, 1.125}, {3, 0}, {2.25, 0}, {0, 
                0}, {1.299038105676658, 0.75}, {2.598076211353316, 1.5}}]]]}},
           GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[3, 4], 0}, {Rational[3, 2], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {3, 0}, {
                 Rational[9, 4], 0}, {0, 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}}], 
               BezierCurve[{{0, 0}, {0.75, 0}, {1.5, 0}, {0.649519052838329, 
                 0.375}, {1.9485571585149868`, 1.125}, {3, 0}, {2.25, 0}, {0, 
                 0}, {1.299038105676658, 0.75}, {2.598076211353316, 
                 1.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {2, 0}, {
                3^Rational[1, 2], 1}, {Rational[1, 2], 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[3, 2], 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {1, 0}, {0, 
                0}}], BezierCurve[{{0, 0}, {1.299038105676658, 0.75}, {2, 
                0}, {1.7320508075688772`, 1}, {0.5, 0}, {0.8660254037844386, 
                0.5}, {1.5, 0}, {0.4330127018922193, 0.25}, {1, 0}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {2, 0}, {
                 3^Rational[1, 2], 1}, {Rational[1, 2], 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[3, 2], 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {1, 0}, {0,
                  0}}], BezierCurve[{{0, 0}, {1.299038105676658, 0.75}, {2, 
                 0}, {1.7320508075688772`, 1}, {0.5, 0}, {0.8660254037844386, 
                 0.5}, {1.5, 0}, {0.4330127018922193, 0.25}, {1, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2], 0}, {Rational[3, 4], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {0, 0}, {0, 
                0}, {1, 0}, {
                Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[1, 4], 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}}], 
              BezierCurve[{{0.5, 0}, {0.75, 0}, {0.649519052838329, 0.375}, {
                0, 0}, {0, 0}, {1, 0}, {0.21650635094610965`, 0.125}, {
                0.8660254037844386, 0.5}, {0.25, 0}, {0.4330127018922193, 
                0.25}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 2], 0}, {Rational[3, 4], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {0, 0}, {0,
                  0}, {1, 0}, {
                 Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[1, 4], 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}}], 
               BezierCurve[{{0.5, 0}, {0.75, 0}, {0.649519052838329, 0.375}, {
                 0, 0}, {0, 0}, {1, 0}, {0.21650635094610965`, 0.125}, {
                 0.8660254037844386, 0.5}, {0.25, 0}, {0.4330127018922193, 
                 0.25}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {2, 0}, {1, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {3, 0}, {0, 0}}], 
              BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {2, 0}, {
                1, 0}, {0.8090169943749475, 0.5877852522924731}, {0, 0}, {
                2.4270509831248424`, 1.7633557568774194`}, {3, 0}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {2, 0}, {1, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 
                 0}, {Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {3, 0}, {0, 0}}], 
               BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {2, 
                 0}, {1, 0}, {0.8090169943749475, 0.5877852522924731}, {0, 
                 0}, {2.4270509831248424`, 1.7633557568774194`}, {3, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[4, 3], 0}, {2, 0}, {0, 0}, {0, 0}, {
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 3] (1 + 5^Rational[1, 2]), 
                 Rational[
                  4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[2, 3], 0}}], 
              BezierCurve[{{1.3333333333333333`, 0}, {2, 0}, {0, 0}, {0, 0}, {
                0.5393446629166316, 0.39185683486164874`}, {
                1.0786893258332633`, 0.7837136697232975}, {1.618033988749895, 
                1.1755705045849463`}, {0.6666666666666666, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[4, 3], 0}, {2, 0}, {0, 0}, {0, 0}, {
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 3] (1 + 5^Rational[1, 2]), 
                  Rational[
                   4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[2, 3], 0}}], 
               BezierCurve[{{1.3333333333333333`, 0}, {2, 0}, {0, 0}, {0, 
                 0}, {0.5393446629166316, 0.39185683486164874`}, {
                 1.0786893258332633`, 0.7837136697232975}, {1.618033988749895,
                  1.1755705045849463`}, {0.6666666666666666, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {0, 0}, {
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {Rational[1, 3], 0}, {
                Rational[1, 12] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[2, 3], 0}}], 
              BezierCurve[{{1, 0}, {0, 0}, {0.5393446629166316, 
                0.39185683486164874`}, {0, 0}, {0.3333333333333333, 0}, {
                0.2696723314583158, 0.19592841743082437`}, {
                0.8090169943749475, 0.5877852522924731}, {
                0.6666666666666666, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {0, 0}, {
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {Rational[1, 3], 0}, {
                 Rational[1, 12] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[2, 3], 0}}], 
               BezierCurve[{{1, 0}, {0, 0}, {0.5393446629166316, 
                 0.39185683486164874`}, {0, 0}, {0.3333333333333333, 0}, {
                 0.2696723314583158, 0.19592841743082437`}, {
                 0.8090169943749475, 0.5877852522924731}, {
                 0.6666666666666666, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {3, 0}, {0, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {1, 0}, {
                2, 0}, {0, 0}}], 
              BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {3, 0}, {
                0, 0}, {2.4270509831248424`, 1.7633557568774194`}, {
                0.8090169943749475, 0.5877852522924731}, {1, 0}, {2, 0}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {3, 0}, {0, 0}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {1, 
                 0}, {2, 0}, {0, 0}}], 
               BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {3, 
                 0}, {0, 0}, {2.4270509831248424`, 1.7633557568774194`}, {
                 0.8090169943749475, 0.5877852522924731}, {1, 0}, {2, 0}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[4, 3], 0}, {Rational[2, 3], 0}, {0, 0}, {
                0, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {2, 0}, {
                Rational[1, 3] (1 + 5^Rational[1, 2]), 
                 Rational[
                  4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{1.3333333333333333`, 0}, {
                0.6666666666666666, 0}, {0, 0}, {0, 0}, {1.618033988749895, 
                1.1755705045849463`}, {0.5393446629166316, 
                0.39185683486164874`}, {2, 0}, {1.0786893258332633`, 
                0.7837136697232975}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[4, 3], 0}, {Rational[2, 3], 0}, {0, 0}, {
                 0, 0}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {2, 0}, {
                 Rational[1, 3] (1 + 5^Rational[1, 2]), 
                  Rational[
                   4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{1.3333333333333333`, 0}, {
                 0.6666666666666666, 0}, {0, 0}, {0, 0}, {1.618033988749895, 
                 1.1755705045849463`}, {0.5393446629166316, 
                 0.39185683486164874`}, {2, 0}, {1.0786893258332633`, 
                 0.7837136697232975}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {Rational[2, 3], 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 0}, {
                0, 0}, {
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[1, 3], 0}, {
                Rational[1, 12] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{1, 0}, {0.6666666666666666, 0}, {
                0.8090169943749475, 0.5877852522924731}, {0, 0}, {0, 0}, {
                0.5393446629166316, 0.39185683486164874`}, {
                0.3333333333333333, 0}, {0.2696723314583158, 
                0.19592841743082437`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {Rational[2, 3], 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {0, 
                 0}, {0, 0}, {
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[1, 3], 0}, {
                 Rational[1, 12] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{1, 0}, {0.6666666666666666, 0}, {
                 0.8090169943749475, 0.5877852522924731}, {0, 0}, {0, 0}, {
                 0.5393446629166316, 0.39185683486164874`}, {
                 0.3333333333333333, 0}, {0.2696723314583158, 
                 0.19592841743082437`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{4, 0}, {0, 0}, {
                2 2^Rational[1, 2], 2 2^Rational[1, 2]}, {2, 0}, {0, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}}], 
              BezierCurve[{{4, 0}, {0, 0}, {2.8284271247461903`, 
                2.8284271247461903`}, {2, 0}, {0, 0}, {1.4142135623730951`, 
                1.4142135623730951`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{4, 0}, {0, 0}, {
                 2 2^Rational[1, 2], 2 2^Rational[1, 2]}, {2, 0}, {0, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}}], 
               BezierCurve[{{4, 0}, {0, 0}, {2.8284271247461903`, 
                 2.8284271247461903`}, {2, 0}, {0, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {0, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}, {3, 0}}], 
              BezierCurve[{{1.5, 0}, {1.0606601717798212`, 
                1.0606601717798212`}, {0, 0}, {2.1213203435596424`, 
                2.1213203435596424`}, {0, 0}, {3, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 2], 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {0, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}, {3, 0}}], 
               BezierCurve[{{1.5, 0}, {1.0606601717798212`, 
                 1.0606601717798212`}, {0, 0}, {2.1213203435596424`, 
                 2.1213203435596424`}, {0, 0}, {3, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {0, 0}, {
                2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {0, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
              BezierCurve[{{1, 0}, {0, 0}, {1.4142135623730951`, 
                1.4142135623730951`}, {2, 0}, {0, 0}, {0.7071067811865475, 
                0.7071067811865475}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {0, 0}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}, {0, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}}], 
               BezierCurve[{{1, 0}, {0, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}, {2, 0}, {0, 0}, {0.7071067811865475, 
                 0.7071067811865475}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
         1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 
         0}}}]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {1, 0}}], 
              BezierCurve[{{0, 0}, {0.35355339059327373`, 
                0.35355339059327373`}, {0, 0}, {0.5, 0}, {0.7071067811865475, 
                0.7071067811865475}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}, {0, 0}, {Rational[1, 2], 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {1, 0}}], 
               BezierCurve[{{0, 0}, {0.35355339059327373`, 
                 0.35355339059327373`}, {0, 0}, {0.5, 0}, {0.7071067811865475,
                  0.7071067811865475}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny]},
    {
     GraphicsBox[{
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                Rational[9, 4], 0}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[3, 2], 0}, {Rational[3, 4], 0}, {0, 0}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}}], 
              BezierCurve[{{0, 0}, {1.125, 1.9485571585149868`}, {0.375, 
                0.649519052838329}, {2.25, 0}, {0.75, 1.299038105676658}, {
                1.5, 0}, {0.75, 0}, {0, 0}, {1.5, 2.598076211353316}, {3, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                 Rational[9, 4], 0}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[3, 2], 0}, {Rational[3, 4], 0}, {0, 0}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}}], 
               BezierCurve[{{0, 0}, {1.125, 1.9485571585149868`}, {0.375, 
                 0.649519052838329}, {2.25, 0}, {0.75, 1.299038105676658}, {
                 1.5, 0}, {0.75, 0}, {0, 0}, {1.5, 2.598076211353316}, {3, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 3^Rational[1, 2]}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[1, 2], 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {0, 
                0}, {2, 0}, {1, 0}, {Rational[3, 2], 0}}], 
              BezierCurve[{{1, 1.7320508075688772`}, {0.25, 
                0.4330127018922193}, {0.75, 1.299038105676658}, {0.5, 0}, {
                0.5, 0.8660254037844386}, {0, 0}, {0, 0}, {2, 0}, {1, 0}, {
                1.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 3^Rational[1, 2]}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {0,
                  0}, {2, 0}, {1, 0}, {Rational[3, 2], 0}}], 
               BezierCurve[{{1, 1.7320508075688772`}, {0.25, 
                 0.4330127018922193}, {0.75, 1.299038105676658}, {0.5, 0}, {
                 0.5, 0.8660254037844386}, {0, 0}, {0, 0}, {2, 0}, {1, 0}, {
                 1.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                Rational[1, 2], 0}, {
                Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[3, 4], 0}, {Rational[1, 4], 0}, {0, 0}, {1, 0}, {0, 
                0}}], BezierCurve[{{0.25, 0.4330127018922193}, {0.375, 
                0.649519052838329}, {0.5, 0}, {0.125, 0.21650635094610965`}, {
                0.5, 0.8660254037844386}, {0.75, 0}, {0.25, 0}, {0, 0}, {1, 
                0}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {
                 Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[3, 4], 0}, {Rational[1, 4], 0}, {0, 0}, {1, 0}, {0, 
                 0}}], BezierCurve[{{0.25, 0.4330127018922193}, {0.375, 
                 0.649519052838329}, {0.5, 0}, {0.125, 
                 0.21650635094610965`}, {0.5, 0.8660254037844386}, {
                 0.75, 0}, {0.25, 0}, {0, 0}, {1, 0}, {0, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[10, 3], 0}, {
                5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {
                Rational[5, 3] 2^Rational[1, 2], Rational[5, 3] 
                 2^Rational[1, 2]}, {0, 0}, {Rational[5, 3], 0}, {
                Rational[5, 3] 2^Rational[-1, 2], Rational[5, 3] 
                 2^Rational[-1, 2]}, {0, 0}, {5, 0}}], 
              BezierCurve[{{3.3333333333333335`, 0}, {3.5355339059327373`, 
                3.5355339059327373`}, {2.3570226039551585`, 
                2.3570226039551585`}, {0, 0}, {1.6666666666666667`, 0}, {
                1.1785113019775793`, 1.1785113019775793`}, {0, 0}, {5, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[10, 3], 0}, {
                 5 2^Rational[-1, 2], 5 2^Rational[-1, 2]}, {
                 Rational[5, 3] 2^Rational[1, 2], Rational[5, 3] 
                  2^Rational[1, 2]}, {0, 0}, {Rational[5, 3], 0}, {
                 Rational[5, 3] 2^Rational[-1, 2], Rational[5, 3] 
                  2^Rational[-1, 2]}, {0, 0}, {5, 0}}], 
               BezierCurve[{{3.3333333333333335`, 0}, {3.5355339059327373`, 
                 3.5355339059327373`}, {2.3570226039551585`, 
                 2.3570226039551585`}, {0, 0}, {1.6666666666666667`, 0}, {
                 1.1785113019775793`, 1.1785113019775793`}, {0, 0}, {5, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 
         1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {4, 0}, {
                Rational[4, 3] 2^Rational[1, 2], Rational[4, 3] 
                 2^Rational[1, 2]}, {0, 0}, {Rational[8, 3], 0}, {
                Rational[4, 3], 0}, {
                Rational[2, 3] 2^Rational[1, 2], Rational[2, 3] 
                 2^Rational[1, 2]}, {
                2 2^Rational[1, 2], 2 2^Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {4, 0}, {1.8856180831641267`, 
                1.8856180831641267`}, {0, 0}, {2.6666666666666665`, 0}, {
                1.3333333333333333`, 0}, {0.9428090415820634, 
                0.9428090415820634}, {2.8284271247461903`, 
                2.8284271247461903`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {4, 0}, {
                 Rational[4, 3] 2^Rational[1, 2], Rational[4, 3] 
                  2^Rational[1, 2]}, {0, 0}, {Rational[8, 3], 0}, {
                 Rational[4, 3], 0}, {
                 Rational[2, 3] 2^Rational[1, 2], Rational[2, 3] 
                  2^Rational[1, 2]}, {
                 2 2^Rational[1, 2], 2 2^Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {4, 0}, {1.8856180831641267`, 
                 1.8856180831641267`}, {0, 0}, {2.6666666666666665`, 0}, {
                 1.3333333333333333`, 0}, {0.9428090415820634, 
                 0.9428090415820634}, {2.8284271247461903`, 
                 2.8284271247461903`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {3, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                2^Rational[1, 2], 2^Rational[1, 2]}}], 
              BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {3, 0}, {
                2.1213203435596424`, 2.1213203435596424`}, {0, 0}, {
                0.7071067811865475, 0.7071067811865475}, {1.4142135623730951`,
                 1.4142135623730951`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {3, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}, {0, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 2^Rational[1, 2], 2^Rational[1, 2]}}], 
               BezierCurve[{{2, 0}, {0, 0}, {1, 0}, {3, 0}, {
                 2.1213203435596424`, 2.1213203435596424`}, {0, 0}, {
                 0.7071067811865475, 0.7071067811865475}, {
                 1.4142135623730951`, 1.4142135623730951`}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 
         0}, {0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[2, 3] 2^Rational[1, 2], Rational[2, 3] 
                 2^Rational[1, 2]}, {Rational[2, 3], 0}, {
                Rational[1, 3] 2^Rational[1, 2], Rational[1, 3] 
                 2^Rational[1, 2]}, {2^Rational[1, 2], 2^Rational[1, 2]}, {0, 
                0}, {0, 0}, {Rational[4, 3], 0}, {2, 0}}], 
              BezierCurve[{{0.9428090415820634, 0.9428090415820634}, {
                0.6666666666666666, 0}, {0.4714045207910317, 
                0.4714045207910317}, {1.4142135623730951`, 
                1.4142135623730951`}, {0, 0}, {0, 0}, {
                1.3333333333333333`, 0}, {2, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[2, 3] 2^Rational[1, 2], Rational[2, 3] 
                  2^Rational[1, 2]}, {Rational[2, 3], 0}, {
                 Rational[1, 3] 2^Rational[1, 2], Rational[1, 3] 
                  2^Rational[1, 2]}, {2^Rational[1, 2], 2^Rational[1, 2]}, {0,
                  0}, {0, 0}, {Rational[4, 3], 0}, {2, 0}}], 
               BezierCurve[{{0.9428090415820634, 0.9428090415820634}, {
                 0.6666666666666666, 0}, {0.4714045207910317, 
                 0.4714045207910317}, {1.4142135623730951`, 
                 1.4142135623730951`}, {0, 0}, {0, 0}, {
                 1.3333333333333333`, 0}, {2, 0}}]]]}}, {{{1, 0}, {0, -1}}, {
            0, 0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 0}, {0, 0}, {
                Rational[1, 3] 2^Rational[1, 2], Rational[1, 3] 
                 2^Rational[1, 2]}, {2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                Rational[1, 3] 2^Rational[-1, 2], Rational[1, 3] 
                 2^Rational[-1, 2]}, {0, 0}, {Rational[1, 3], 0}, {
                Rational[2, 3], 0}}], 
              BezierCurve[{{1, 0}, {0, 0}, {0.4714045207910317, 
                0.4714045207910317}, {0.7071067811865475, 
                0.7071067811865475}, {0.2357022603955158, 
                0.2357022603955158}, {0, 0}, {0.3333333333333333, 0}, {
                0.6666666666666666, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 0}, {0, 0}, {
                 Rational[1, 3] 2^Rational[1, 2], Rational[1, 3] 
                  2^Rational[1, 2]}, {2^Rational[-1, 2], 2^Rational[-1, 2]}, {
                 Rational[1, 3] 2^Rational[-1, 2], Rational[1, 3] 
                  2^Rational[-1, 2]}, {0, 0}, {Rational[1, 3], 0}, {
                 Rational[2, 3], 0}}], 
               BezierCurve[{{1, 0}, {0, 0}, {0.4714045207910317, 
                 0.4714045207910317}, {0.7071067811865475, 
                 0.7071067811865475}, {0.2357022603955158, 
                 0.2357022603955158}, {0, 0}, {0.3333333333333333, 0}, {
                 0.6666666666666666, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{4, 0}, {2, 2 3^Rational[1, 2]}, {0, 0}, {
                3, 3 3^Rational[1, 2]}, {2, 0}, {0, 0}, {6, 0}, {
                1, 3^Rational[1, 2]}}], 
              BezierCurve[{{4, 0}, {2, 3.4641016151377544`}, {0, 0}, {
                3, 5.196152422706632}, {2, 0}, {0, 0}, {6, 0}, {
                1, 1.7320508075688772`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{4, 0}, {2, 2 3^Rational[1, 2]}, {0, 0}, {
                 3, 3 3^Rational[1, 2]}, {2, 0}, {0, 0}, {6, 0}, {
                 1, 3^Rational[1, 2]}}], 
               BezierCurve[{{4, 0}, {2, 3.4641016151377544`}, {0, 0}, {
                 3, 5.196152422706632}, {2, 0}, {0, 0}, {6, 0}, {
                 1, 1.7320508075688772`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]},
          NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[5, 3], 0}, {Rational[10, 3], 0}, {
                Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
                Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {5, 0}, {
                Rational[5, 3], 5 3^Rational[-1, 2]}}], 
              BezierCurve[{{0, 0}, {1.6666666666666667`, 0}, {
                3.3333333333333335`, 0}, {0.8333333333333334, 
                1.4433756729740645`}, {0, 0}, {2.5, 4.330127018922193}, {5, 
                0}, {1.6666666666666667`, 2.886751345948129}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[5, 3], 0}, {
                 Rational[10, 3], 0}, {
                 Rational[5, 6], Rational[5, 2] 3^Rational[-1, 2]}, {0, 0}, {
                 Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {5, 0}, {
                 Rational[5, 3], 5 3^Rational[-1, 2]}}], 
               BezierCurve[{{0, 0}, {1.6666666666666667`, 0}, {
                 3.3333333333333335`, 0}, {0.8333333333333334, 
                 1.4433756729740645`}, {0, 0}, {2.5, 4.330127018922193}, {5, 
                 0}, {1.6666666666666667`, 2.886751345948129}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[8, 3], 0}, {Rational[4, 3], 0}, {
                Rational[4, 3], 4 3^Rational[-1, 2]}, {0, 0}, {0, 0}, {
                2, 2 3^Rational[1, 2]}, {4, 0}, {
                Rational[2, 3], 2 3^Rational[-1, 2]}}], 
              BezierCurve[{{2.6666666666666665`, 0}, {
                1.3333333333333333`, 0}, {1.3333333333333333`, 
                2.3094010767585034`}, {0, 0}, {0, 0}, {
                2, 3.4641016151377544`}, {4, 0}, {0.6666666666666666, 
                1.1547005383792517`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[8, 3], 0}, {Rational[4, 3], 0}, {
                 Rational[4, 3], 4 3^Rational[-1, 2]}, {0, 0}, {0, 0}, {
                 2, 2 3^Rational[1, 2]}, {4, 0}, {
                 Rational[2, 3], 2 3^Rational[-1, 2]}}], 
               BezierCurve[{{2.6666666666666665`, 0}, {
                 1.3333333333333333`, 0}, {1.3333333333333333`, 
                 2.3094010767585034`}, {0, 0}, {0, 0}, {
                 2, 3.4641016151377544`}, {4, 0}, {0.6666666666666666, 
                 1.1547005383792517`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3, 0}, {0, 0}, {2, 0}, {1, 0}, {0, 0}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                1, 3^Rational[1, 2]}}], 
              BezierCurve[{{3, 0}, {0, 0}, {2, 0}, {1, 0}, {0, 0}, {1.5, 
                2.598076211353316}, {0.5, 0.8660254037844386}, {
                1, 1.7320508075688772`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3, 0}, {0, 0}, {2, 0}, {1, 0}, {0, 0}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 1, 3^Rational[1, 2]}}], 
               BezierCurve[{{3, 0}, {0, 0}, {2, 0}, {1, 0}, {0, 0}, {1.5, 
                 2.598076211353316}, {0.5, 0.8660254037844386}, {
                 1, 1.7320508075688772`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]},
          NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[4, 3], 0}, {Rational[2, 3], 0}, {
                2, 0}, {1, 3^Rational[1, 2]}, {0, 0}, {
                Rational[2, 3], 2 3^Rational[-1, 2]}, {
                Rational[1, 3], 3^Rational[-1, 2]}}], 
              BezierCurve[{{0, 0}, {1.3333333333333333`, 0}, {
                0.6666666666666666, 0}, {2, 0}, {1, 1.7320508075688772`}, {0, 
                0}, {0.6666666666666666, 1.1547005383792517`}, {
                0.3333333333333333, 0.5773502691896258}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[4, 3], 0}, {Rational[2, 3], 0}, {
                 2, 0}, {1, 3^Rational[1, 2]}, {0, 0}, {
                 Rational[2, 3], 2 3^Rational[-1, 2]}, {
                 Rational[1, 3], 3^Rational[-1, 2]}}], 
               BezierCurve[{{0, 0}, {1.3333333333333333`, 0}, {
                 0.6666666666666666, 0}, {2, 0}, {1, 1.7320508075688772`}, {0,
                  0}, {0.6666666666666666, 1.1547005383792517`}, {
                 0.3333333333333333, 0.5773502691896258}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}, {0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[1, 3], 3^Rational[-1, 2]}, {Rational[1, 3], 0}, {1, 
                0}, {0, 0}, {Rational[2, 3], 0}}], 
              BezierCurve[{{0.16666666666666666`, 0.2886751345948129}, {0, 
                0}, {0.5, 0.8660254037844386}, {0.3333333333333333, 
                0.5773502691896258}, {0.3333333333333333, 0}, {1, 0}, {0, 
                0}, {0.6666666666666666, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 6], Rational[1, 2] 3^Rational[-1, 2]}, {0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[1, 3], 3^Rational[-1, 2]}, {Rational[1, 3], 0}, {1, 
                 0}, {0, 0}, {Rational[2, 3], 0}}], 
               BezierCurve[{{0.16666666666666666`, 0.2886751345948129}, {0, 
                 0}, {0.5, 0.8660254037844386}, {0.3333333333333333, 
                 0.5773502691896258}, {0.3333333333333333, 0}, {1, 0}, {0, 
                 0}, {0.6666666666666666, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[5, 4] (1 + 5^Rational[1, 2]), 
                 5 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[5, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  5, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {5, 0}, {0, 0}, {Rational[5, 2], 0}, {0, 
                0}}], BezierCurve[{{4.045084971874737, 2.938926261462366}, {
                2.0225424859373686`, 1.469463130731183}, {5, 0}, {0, 0}, {
                2.5, 0}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[5, 4] (1 + 5^Rational[1, 2]), 
                  5 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[5, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   5, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {5, 0}, {0, 0}, {Rational[5, 2], 0}, {0, 
                 0}}], BezierCurve[{{4.045084971874737, 2.938926261462366}, {
                 2.0225424859373686`, 1.469463130731183}, {5, 0}, {0, 0}, {
                 2.5, 0}, {0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                1 + 5^Rational[1, 2], 
                 4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {4, 0}, {0, 0}, {2, 0}, {0, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{3.23606797749979, 2.3511410091698925`}, {4, 0}, {
                0, 0}, {2, 0}, {0, 0}, {1.618033988749895, 
                1.1755705045849463`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 1 + 5^Rational[1, 2], 
                  4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {4, 0}, {0, 0}, {2, 0}, {0, 0}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{3.23606797749979, 2.3511410091698925`}, {4, 0}, {
                 0, 0}, {2, 0}, {0, 0}, {1.618033988749895, 
                 1.1755705045849463`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {3, 0}, {Rational[3, 2], 0}}], 
              BezierCurve[{{1.2135254915624212`, 0.8816778784387097}, {0, 
                0}, {2.4270509831248424`, 1.7633557568774194`}, {0, 0}, {3, 
                0}, {1.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   3, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {3, 0}, {Rational[3, 2], 0}}], 
               BezierCurve[{{1.2135254915624212`, 0.8816778784387097}, {0, 
                 0}, {2.4270509831248424`, 1.7633557568774194`}, {0, 0}, {3, 
                 0}, {1.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {2, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {1, 0}, {0, 0}}], 
              BezierCurve[{{0, 0}, {0.8090169943749475, 0.5877852522924731}, {
                2, 0}, {1.618033988749895, 1.1755705045849463`}, {1, 0}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {2, 
                 0}, {Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {1, 0}, {0, 0}}], 
               BezierCurve[{{0, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {2, 0}, {1.618033988749895, 
                 1.1755705045849463`}, {1, 0}, {0, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 8] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {0, 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[1, 2], 0}, {1, 0}}], 
              BezierCurve[{{0.4045084971874737, 0.29389262614623657`}, {0, 
                0}, {0, 0}, {0.8090169943749475, 0.5877852522924731}, {
                0.5, 0}, {1, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 8] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 2] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {0, 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {1, 0}}], 
               BezierCurve[{{0.4045084971874737, 0.29389262614623657`}, {0, 
                 0}, {0, 0}, {0.8090169943749475, 0.5877852522924731}, {
                 0.5, 0}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[9, 2], 0}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}, {0, 
                0}, {Rational[9, 4], Rational[9, 4] 3^Rational[1, 2]}, {0, 
                0}, {Rational[3, 2], 0}, {3, 3 3^Rational[1, 2]}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {6, 0}}], 
              BezierCurve[{{4.5, 0}, {1.5, 2.598076211353316}, {3, 0}, {0, 
                0}, {2.25, 3.8971143170299736`}, {0, 0}, {1.5, 0}, {
                3, 5.196152422706632}, {0.75, 1.299038105676658}, {6, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[9, 2], 0}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {3, 0}, {0,
                  0}, {Rational[9, 4], Rational[9, 4] 3^Rational[1, 2]}, {0, 
                 0}, {Rational[3, 2], 0}, {3, 3 3^Rational[1, 2]}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {6, 0}}], 
               BezierCurve[{{4.5, 0}, {1.5, 2.598076211353316}, {3, 0}, {0, 
                 0}, {2.25, 3.8971143170299736`}, {0, 0}, {1.5, 0}, {
                 3, 5.196152422706632}, {0.75, 1.299038105676658}, {6, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
                Rational[15, 4], 0}, {0, 0}, {
                Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {
                Rational[5, 8], Rational[5, 8] 3^Rational[1, 2]}, {5, 0}, {
                Rational[5, 2], 0}, {0, 0}, {Rational[5, 4], 0}, {
                Rational[15, 8], Rational[15, 8] 3^Rational[1, 2]}}], 
              BezierCurve[{{2.5, 4.330127018922193}, {3.75, 0}, {0, 0}, {1.25,
                 2.1650635094610964`}, {0.625, 1.0825317547305482`}, {5, 0}, {
                2.5, 0}, {0, 0}, {1.25, 0}, {1.875, 
                3.2475952641916446`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[5, 2], Rational[5, 2] 3^Rational[1, 2]}, {
                 Rational[15, 4], 0}, {0, 0}, {
                 Rational[5, 4], Rational[5, 4] 3^Rational[1, 2]}, {
                 Rational[5, 8], Rational[5, 8] 3^Rational[1, 2]}, {5, 0}, {
                 Rational[5, 2], 0}, {0, 0}, {Rational[5, 4], 0}, {
                 Rational[15, 8], Rational[15, 8] 3^Rational[1, 2]}}], 
               BezierCurve[{{2.5, 4.330127018922193}, {3.75, 0}, {0, 0}, {
                 1.25, 2.1650635094610964`}, {0.625, 1.0825317547305482`}, {5,
                  0}, {2.5, 0}, {0, 0}, {1.25, 0}, {1.875, 
                 3.2475952641916446`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {0, 0}, {1, 3^Rational[1, 2]}, {3, 0}, {2, 
                0}, {Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                2, 2 3^Rational[1, 2]}, {4, 0}, {1, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0, 0}, {1, 1.7320508075688772`}, {3, 0}, {
                2, 0}, {1.5, 2.598076211353316}, {2, 3.4641016151377544`}, {4,
                 0}, {1, 0}, {0.5, 0.8660254037844386}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {0, 0}, {1, 3^Rational[1, 2]}, {3, 0}, {2, 
                 0}, {Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                 2, 2 3^Rational[1, 2]}, {4, 0}, {1, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0, 0}, {1, 1.7320508075688772`}, {3, 
                 0}, {2, 0}, {1.5, 2.598076211353316}, {
                 2, 3.4641016151377544`}, {4, 0}, {1, 0}, {0.5, 
                 0.8660254037844386}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {0, 0}, {
                Rational[3, 4], 0}, {Rational[3, 2], 0}, {3, 0}, {0, 0}, {
                Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                Rational[9, 4], 0}}], 
              BezierCurve[{{1.5, 2.598076211353316}, {0.75, 
                1.299038105676658}, {0, 0}, {0.75, 0}, {1.5, 0}, {3, 0}, {0, 
                0}, {1.125, 1.9485571585149868`}, {0.375, 
                0.649519052838329}, {2.25, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {0, 0}, {
                 Rational[3, 4], 0}, {Rational[3, 2], 0}, {3, 0}, {0, 0}, {
                 Rational[9, 8], Rational[9, 8] 3^Rational[1, 2]}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {
                 Rational[9, 4], 0}}], 
               BezierCurve[{{1.5, 2.598076211353316}, {0.75, 
                 1.299038105676658}, {0, 0}, {0.75, 0}, {1.5, 0}, {3, 0}, {0, 
                 0}, {1.125, 1.9485571585149868`}, {0.375, 
                 0.649519052838329}, {2.25, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2], 0}, {0, 0}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[1, 2], 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {1, 
                0}, {2, 0}, {1, 3^Rational[1, 2]}}], 
              BezierCurve[{{1.5, 0}, {0, 0}, {0.75, 1.299038105676658}, {
                0.5, 0}, {0.25, 0.4330127018922193}, {0.5, 
                0.8660254037844386}, {0, 0}, {1, 0}, {2, 0}, {
                1, 1.7320508075688772`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[3, 2], 0}, {0, 0}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {1,
                  0}, {2, 0}, {1, 3^Rational[1, 2]}}], 
               BezierCurve[{{1.5, 0}, {0, 0}, {0.75, 1.299038105676658}, {
                 0.5, 0}, {0.25, 0.4330127018922193}, {0.5, 
                 0.8660254037844386}, {0, 0}, {1, 0}, {2, 0}, {
                 1, 1.7320508075688772`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]},
          NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {1, 0}, {
                Rational[1, 4], 0}, {0, 0}, {
                Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                Rational[1, 2], 0}, {Rational[3, 4], 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0.5, 0.8660254037844386}, {0.375, 
                0.649519052838329}, {1, 0}, {0.25, 0}, {0, 0}, {0.125, 
                0.21650635094610965`}, {0.5, 0}, {0.75, 0}, {0.25, 
                0.4330127018922193}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
                 Rational[3, 8], Rational[3, 8] 3^Rational[1, 2]}, {1, 0}, {
                 Rational[1, 4], 0}, {0, 0}, {
                 Rational[1, 8], Rational[1, 8] 3^Rational[1, 2]}, {
                 Rational[1, 2], 0}, {Rational[3, 4], 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0.5, 0.8660254037844386}, {0.375, 
                 0.649519052838329}, {1, 0}, {0.25, 0}, {0, 0}, {0.125, 
                 0.21650635094610965`}, {0.5, 0}, {0.75, 0}, {0.25, 
                 0.4330127018922193}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                2, 0}, {4, 0}}], 
              BezierCurve[{{1.8019377358048383`, 0.8677674782351162}, {0, 
                0}, {3.6038754716096766`, 1.7355349564702325`}, {0, 0}, {2, 
                0}, {4, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 
                 0}, {4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {0,
                  0}, {2, 0}, {4, 0}}], 
               BezierCurve[{{1.8019377358048383`, 0.8677674782351162}, {0, 
                 0}, {3.6038754716096766`, 1.7355349564702325`}, {0, 0}, {2, 
                 0}, {4, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3, 0}, {Rational[3, 2], 0}, {0, 0}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 0}}],
               BezierCurve[{{3, 0}, {1.5, 0}, {0, 0}, {1.3514533018536288`, 
                0.6508256086763372}, {2.7029066037072575`, 
                1.3016512173526744`}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3, 0}, {Rational[3, 2], 0}, {0, 0}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 
                 0}}], BezierCurve[{{3, 0}, {1.5, 0}, {0, 0}, {
                 1.3514533018536288`, 0.6508256086763372}, {
                 2.7029066037072575`, 1.3016512173526744`}, {0, 0}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                0, 0}, {2, 0}, {1, 0}}], 
              BezierCurve[{{0.9009688679024191, 0.4338837391175581}, {
                1.8019377358048383`, 0.8677674782351162}, {0, 0}, {0, 0}, {2, 
                0}, {1, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {0, 
                 0}, {0, 0}, {2, 0}, {1, 0}}], 
               BezierCurve[{{0.9009688679024191, 0.4338837391175581}, {
                 1.8019377358048383`, 0.8677674782351162}, {0, 0}, {0, 0}, {2,
                  0}, {1, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[1, 2], 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{0, 0}, {1, 0}, {0.4504844339512096, 
                0.21694186955877906`}, {0, 0}, {0.5, 0}, {0.9009688679024191, 
                0.4338837391175581}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[1, 2], 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{0, 0}, {1, 0}, {0.4504844339512096, 
                 0.21694186955877906`}, {0, 0}, {0.5, 0}, {0.9009688679024191,
                  0.4338837391175581}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny]},
    {
     GraphicsBox[{
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {0, 0}, {4, 0}, {2, 0}, {
                1, 3^Rational[1, 2]}, {2, 2 3^Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0, 0}, {4, 0}, {2, 0}, {
                1, 1.7320508075688772`}, {2, 3.4641016151377544`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {0, 0}, {4, 0}, {2, 0}, {
                 1, 3^Rational[1, 2]}, {2, 2 3^Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0, 0}, {4, 0}, {2, 0}, {
                 1, 1.7320508075688772`}, {2, 3.4641016151377544`}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                Rational[3, 2], 0}, {0, 0}, {3, 0}}], 
              BezierCurve[{{0, 0}, {0.75, 1.299038105676658}, {1.5, 
                2.598076211353316}, {1.5, 0}, {0, 0}, {3, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[3, 4], Rational[3, 4] 3^Rational[1, 2]}, {
                 Rational[3, 2], Rational[3, 2] 3^Rational[1, 2]}, {
                 Rational[3, 2], 0}, {0, 0}, {3, 0}}], 
               BezierCurve[{{0, 0}, {0.75, 1.299038105676658}, {1.5, 
                 2.598076211353316}, {1.5, 0}, {0, 0}, {3, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{1, 3^Rational[1, 2]}, {2, 0}, {1, 0}, {0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}}], 
              BezierCurve[{{1, 1.7320508075688772`}, {2, 0}, {1, 0}, {0, 0}, {
                0.5, 0.8660254037844386}, {0, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{1, 3^Rational[1, 2]}, {2, 0}, {1, 0}, {0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}}], 
               BezierCurve[{{1, 1.7320508075688772`}, {2, 0}, {1, 0}, {0, 
                 0}, {0.5, 0.8660254037844386}, {0, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}, 
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2], 0}, {
                Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {0, 0}, {
                Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {1, 
                0}}], BezierCurve[{{0.5, 0}, {0.25, 0.4330127018922193}, {0, 
                0}, {0.5, 0.8660254037844386}, {0, 0}, {1, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 2], 0}, {
                 Rational[1, 4], Rational[1, 4] 3^Rational[1, 2]}, {0, 0}, {
                 Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {0, 0}, {1,
                  0}}], BezierCurve[{{0.5, 0}, {0.25, 0.4330127018922193}, {0,
                  0}, {0.5, 0.8660254037844386}, {0, 0}, {1, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}}, {{{1, 0}, {
           0, 1}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 0}, {
                3, 0}, {1, 0}, {4, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}, {
                4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 0}}],
               BezierCurve[{{1.8019377358048383`, 0.8677674782351162}, {2, 
                0}, {3, 0}, {1, 0}, {4, 0}, {0.9009688679024191, 
                0.4338837391175581}, {0, 0}, {3.6038754716096766`, 
                1.7355349564702325`}, {2.7029066037072575`, 
                1.3016512173526744`}, {0, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {2, 
                 0}, {3, 0}, {1, 0}, {4, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {0, 0}, {
                 4 Cos[Rational[1, 7] Pi], 4 Sin[Rational[1, 7] Pi]}, {
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 
                 0}}], BezierCurve[{{1.8019377358048383`, 
                 0.8677674782351162}, {2, 0}, {3, 0}, {1, 0}, {4, 0}, {
                 0.9009688679024191, 0.4338837391175581}, {0, 0}, {
                 3.6038754716096766`, 1.7355349564702325`}, {
                 2.7029066037072575`, 1.3016512173526744`}, {0, 0}}]]]}}, {{{
            1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 0}, {
                Rational[3, 2], 0}, {3, 0}, {Rational[9, 4], 0}, {
                Rational[9, 4] Cos[Rational[1, 7] Pi], Rational[9, 4] 
                 Sin[Rational[1, 7] Pi]}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}, {Rational[3, 4], 0}, {0, 0}, {
                Rational[3, 4] Cos[Rational[1, 7] Pi], Rational[3, 4] 
                 Sin[Rational[1, 7] Pi]}}], 
              BezierCurve[{{2.7029066037072575`, 1.3016512173526744`}, {0, 
                0}, {1.5, 0}, {3, 0}, {2.25, 0}, {2.0271799527804433`, 
                0.9762384130145058}, {1.3514533018536288`, 
                0.6508256086763372}, {0.75, 0}, {0, 0}, {0.6757266509268144, 
                0.3254128043381686}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 3 Cos[Rational[1, 7] Pi], 3 Sin[Rational[1, 7] Pi]}, {0, 
                 0}, {Rational[3, 2], 0}, {3, 0}, {Rational[9, 4], 0}, {
                 Rational[9, 4] Cos[Rational[1, 7] Pi], Rational[9, 4] 
                  Sin[Rational[1, 7] Pi]}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}, {Rational[3, 4], 0}, {0, 0}, {
                 Rational[3, 4] Cos[Rational[1, 7] Pi], Rational[3, 4] 
                  Sin[Rational[1, 7] Pi]}}], 
               BezierCurve[{{2.7029066037072575`, 1.3016512173526744`}, {0, 
                 0}, {1.5, 0}, {3, 0}, {2.25, 0}, {2.0271799527804433`, 
                 0.9762384130145058}, {1.3514533018536288`, 
                 0.6508256086763372}, {0.75, 0}, {0, 0}, {0.6757266509268144, 
                 0.3254128043381686}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {
                Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {2, 0}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                Rational[3, 2], 0}, {Rational[1, 2], 0}}], 
              BezierCurve[{{0, 0}, {1, 0}, {1.8019377358048383`, 
                0.8677674782351162}, {0.4504844339512096, 
                0.21694186955877906`}, {1.3514533018536288`, 
                0.6508256086763372}, {0, 0}, {2, 0}, {0.9009688679024191, 
                0.4338837391175581}, {1.5, 0}, {0.5, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 2 Cos[Rational[1, 7] Pi], 2 Sin[Rational[1, 7] Pi]}, {
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {
                 Rational[3, 2] Cos[Rational[1, 7] Pi], Rational[3, 2] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {2, 0}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {
                 Rational[3, 2], 0}, {Rational[1, 2], 0}}], 
               BezierCurve[{{0, 0}, {1, 0}, {1.8019377358048383`, 
                 0.8677674782351162}, {0.4504844339512096, 
                 0.21694186955877906`}, {1.3514533018536288`, 
                 0.6508256086763372}, {0, 0}, {2, 0}, {0.9009688679024191, 
                 0.4338837391175581}, {1.5, 0}, {0.5, 0}}]]]}}, {{{1, 0}, {
            0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[3, 4] Cos[Rational[1, 7] Pi], Rational[3, 4] 
                 Sin[Rational[1, 7] Pi]}, {
                Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {1, 0}, {
                Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                 Sin[Rational[1, 7] Pi]}, {Rational[3, 4], 0}, {
                Rational[1, 4] Cos[Rational[1, 7] Pi], Rational[1, 4] 
                 Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[1, 4], 0}, {0, 
                0}, {Rational[1, 2], 0}}], 
              BezierCurve[{{0.6757266509268144, 0.3254128043381686}, {
                0.9009688679024191, 0.4338837391175581}, {1, 0}, {
                0.4504844339512096, 0.21694186955877906`}, {0.75, 0}, {
                0.2252422169756048, 0.10847093477938953`}, {0, 0}, {
                0.25, 0}, {0, 0}, {0.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 4] Cos[Rational[1, 7] Pi], Rational[3, 4] 
                  Sin[Rational[1, 7] Pi]}, {
                 Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {1, 0}, {
                 Rational[1, 2] Cos[Rational[1, 7] Pi], Rational[1, 2] 
                  Sin[Rational[1, 7] Pi]}, {Rational[3, 4], 0}, {
                 Rational[1, 4] Cos[Rational[1, 7] Pi], Rational[1, 4] 
                  Sin[Rational[1, 7] Pi]}, {0, 0}, {Rational[1, 4], 0}, {0, 
                 0}, {Rational[1, 2], 0}}], 
               BezierCurve[{{0.6757266509268144, 0.3254128043381686}, {
                 0.9009688679024191, 0.4338837391175581}, {1, 0}, {
                 0.4504844339512096, 0.21694186955877906`}, {0.75, 0}, {
                 0.2252422169756048, 0.10847093477938953`}, {0, 0}, {
                 0.25, 0}, {0, 0}, {0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Sin[Rational[3, 14] Pi], -Cos[Rational[3, 14] Pi]}, {
            Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], -Cos[Rational[1, 14] Pi]}, {
            Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], -Sin[Rational[1, 7] Pi]}, {
            Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Cos[Rational[1, 7] Pi], Sin[Rational[1, 7] Pi]}, {-
             Sin[Rational[1, 7] Pi], -Cos[Rational[1, 7] Pi]}}, {{-
             Sin[Rational[1, 14] Pi], Cos[Rational[1, 14] Pi]}, {-
             Cos[Rational[1, 14] Pi], -Sin[Rational[1, 14] Pi]}}, {{
            Sin[Rational[3, 14] Pi], Cos[Rational[3, 14] Pi]}, {-
             Cos[Rational[3, 14] Pi], Sin[Rational[3, 14] Pi]}}}, {{{1, 0}, {
           0, 1}}, {{0.6234898018587335, -0.7818314824680298}, {
           0.7818314824680298, 
           0.6234898018587335}}, {{-0.2225209339563144, -0.9749279121818236}, \
{0.9749279121818236, -0.2225209339563144}}, {{-0.9009688679024191, \
-0.4338837391175581}, {
           0.4338837391175581, -0.9009688679024191}}, {{-0.9009688679024191, 
           0.4338837391175581}, {-0.4338837391175581, -0.9009688679024191}}, \
{{-0.2225209339563144, 
           0.9749279121818236}, {-0.9749279121818236, -0.2225209339563144}}, \
{{0.6234898018587335, 0.7818314824680298}, {-0.7818314824680298, 
           0.6234898018587335}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
        GeometricTransformationBox[{
          {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
           {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[5, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  10, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[5, 4] (1 + 5^Rational[1, 2]), 
                 5 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {5, 0}, {
                Rational[5, 12] (1 + 5^Rational[1, 2]), 
                 Rational[
                  5, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[5, 3], 0}, {
                Rational[10, 3], 0}, {0, 0}, {0, 0}}], 
              BezierCurve[{{2.696723314583158, 1.9592841743082439`}, {
                4.045084971874737, 2.938926261462366}, {5, 0}, {
                1.348361657291579, 0.9796420871541219}, {
                1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {0, 0}, {0,
                 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.29795960000000005`, 0.5657928, 0.7522386], 
            {FaceForm[RGBColor[0.29795960000000005`, 0.5657928, 0.7522386]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[5, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   10, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[5, 4] (1 + 5^Rational[1, 2]), 
                  5 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {5, 0}, {
                 Rational[5, 12] (1 + 5^Rational[1, 2]), 
                  Rational[
                   5, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[5, 3], 0}, {
                 Rational[10, 3], 0}, {0, 0}, {0, 0}}], 
               BezierCurve[{{2.696723314583158, 1.9592841743082439`}, {
                 4.045084971874737, 2.938926261462366}, {5, 0}, {
                 1.348361657291579, 0.9796420871541219}, {
                 1.6666666666666667`, 0}, {3.3333333333333335`, 0}, {0, 0}, {
                 0, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8083416, 0.7110806, 0.255976], 
        GeometricTransformationBox[{
          {RGBColor[0.8083416, 0.7110806, 0.255976], 
           {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {Rational[8, 3], 0}, {
                1 + 5^Rational[1, 2], 
                 4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {
                Rational[2, 3] (1 + 5^Rational[1, 2]), 
                 Rational[
                  8, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {
                Rational[1, 3] (1 + 5^Rational[1, 2]), 
                 Rational[
                  4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {4, 0}}], 
              BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                2.6666666666666665`, 0}, {3.23606797749979, 
                2.3511410091698925`}, {2.1573786516665265`, 
                1.567427339446595}, {0, 0}, {1.0786893258332633`, 
                0.7837136697232975}, {4, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8083416, 0.7110806, 0.255976], 
            {FaceForm[RGBColor[0.8083416, 0.7110806, 0.255976]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[4, 3], 0}, {0, 0}, {Rational[8, 3], 0}, {
                 1 + 5^Rational[1, 2], 
                  4 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {
                 Rational[2, 3] (1 + 5^Rational[1, 2]), 
                  Rational[
                   8, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {
                 Rational[1, 3] (1 + 5^Rational[1, 2]), 
                  Rational[
                   4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {4, 0}}], 
               BezierCurve[{{1.3333333333333333`, 0}, {0, 0}, {
                 2.6666666666666665`, 0}, {3.23606797749979, 
                 2.3511410091698925`}, {2.1573786516665265`, 
                 1.567427339446595}, {0, 0}, {1.0786893258332633`, 
                 0.7837136697232975}, {4, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
        GeometricTransformationBox[{
          {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
           {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {1, 0}, {
                3, 0}, {0, 0}, {
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {2, 0}, {
                Rational[3, 4] (1 + 5^Rational[1, 2]), 
                 3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{0.8090169943749475, 0.5877852522924731}, {1, 0}, {
                3, 0}, {0, 0}, {1.618033988749895, 1.1755705045849463`}, {0, 
                0}, {2, 0}, {2.4270509831248424`, 1.7633557568774194`}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.38822480000000004`, 0.674195, 0.6035436], 
            {FaceForm[RGBColor[0.38822480000000004`, 0.674195, 0.6035436]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {1, 
                 0}, {3, 0}, {0, 0}, {
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {2, 0}, {
                 Rational[3, 4] (1 + 5^Rational[1, 2]), 
                  3 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{0.8090169943749475, 0.5877852522924731}, {1, 
                 0}, {3, 0}, {0, 0}, {1.618033988749895, 
                 1.1755705045849463`}, {0, 0}, {2, 0}, {2.4270509831248424`, 
                 1.7633557568774194`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 2] (1 + 5^Rational[1, 2]), 
                 2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {2, 0}, {
                Rational[1, 3] (1 + 5^Rational[1, 2]), 
                 Rational[
                  4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {0, 0}, {0, 0}, {Rational[4, 3], 0}, {
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[2, 3], 0}}], 
              BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {2, 0}, {
                1.0786893258332633`, 0.7837136697232975}, {0, 0}, {0, 0}, {
                1.3333333333333333`, 0}, {0.5393446629166316, 
                0.39185683486164874`}, {0.6666666666666666, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 2] (1 + 5^Rational[1, 2]), 
                  2 (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {2, 0}, {
                 Rational[1, 3] (1 + 5^Rational[1, 2]), 
                  Rational[
                   4, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {0, 0}, {0, 0}, {Rational[4, 3], 0}, {
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[2, 3], 0}}], 
               BezierCurve[{{1.618033988749895, 1.1755705045849463`}, {2, 
                 0}, {1.0786893258332633`, 0.7837136697232975}, {0, 0}, {0, 
                 0}, {1.3333333333333333`, 0}, {0.5393446629166316, 
                 0.39185683486164874`}, {0.6666666666666666, 0}}]]]}}, {{{1, 
            0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}, 
       {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
        GeometricTransformationBox[{
          {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
           {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
            FilledCurveBox[NCache[
             BezierCurve[{{
                Rational[1, 6] (1 + 5^Rational[1, 2]), 
                 Rational[
                  2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}, {Rational[2, 3], 0}, {1, 0}, {0, 0}, {0, 
                0}, {Rational[1, 3], 0}, {
                Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                  Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                Rational[1, 12] (1 + 5^Rational[1, 2]), 
                 Rational[
                  1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                  Rational[1, 2]}}], 
              BezierCurve[{{0.5393446629166316, 0.39185683486164874`}, {
                0.6666666666666666, 0}, {1, 0}, {0, 0}, {0, 0}, {
                0.3333333333333333, 0}, {0.8090169943749475, 
                0.5877852522924731}, {0.2696723314583158, 
                0.19592841743082437`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8929546, 0.38966159999999994`, 0.1794008], 
            {FaceForm[RGBColor[0.8929546, 0.38966159999999994`, 0.1794008]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[1, 6] (1 + 5^Rational[1, 2]), 
                  Rational[
                   2, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}, {Rational[2, 3], 0}, {1, 0}, {0, 0}, {0, 
                 0}, {Rational[1, 3], 0}, {
                 Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
                   Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
                 Rational[1, 12] (1 + 5^Rational[1, 2]), 
                  Rational[
                   1, 3] (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
                   Rational[1, 2]}}], 
               BezierCurve[{{0.5393446629166316, 0.39185683486164874`}, {
                 0.6666666666666666, 0}, {1, 0}, {0, 0}, {0, 0}, {
                 0.3333333333333333, 0}, {0.8090169943749475, 
                 0.5877852522924731}, {0.2696723314583158, 
                 0.19592841743082437`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 - 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 - 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}}, {{
            Rational[1, 4] (-1 + 5^Rational[1, 2]), 
             Rational[1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2]}, {
            Rational[-1, 2] (Rational[1, 2] (5 + 5^Rational[1, 2]))^
              Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}}}, {{{1,
            0}, {0, 1}}, {{0.30901699437494745`, -0.9510565162951535}, {
           0.9510565162951535, 
           0.30901699437494745`}}, {{-0.8090169943749475, \
-0.5877852522924731}, {
           0.5877852522924731, -0.8090169943749475}}, {{-0.8090169943749475, 
           0.5877852522924731}, {-0.5877852522924731, -0.8090169943749475}}, \
{{0.30901699437494745`, 0.9510565162951535}, {-0.9510565162951535, 
           0.30901699437494745`}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
        GeometricTransformationBox[{
          {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
           {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                Rational[3, 2], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[9, 4], 0}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {0, 
                0}, {Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 
                0}, {Rational[3, 4], 0}}], 
              BezierCurve[{{1.9485571585149868`, 1.125}, {1.5, 0}, {
                0.649519052838329, 0.375}, {2.25, 0}, {2.598076211353316, 
                1.5}, {3, 0}, {0, 0}, {1.299038105676658, 0.75}, {0, 0}, {
                0.75, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.8935136, 0.6004149999999999, 0.2205464], 
            {FaceForm[RGBColor[0.8935136, 0.6004149999999999, 0.2205464]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {
                 Rational[3, 2], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[9, 4], 0}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {3, 0}, {0,
                  0}, {Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {0, 
                 0}, {Rational[3, 4], 0}}], 
               BezierCurve[{{1.9485571585149868`, 1.125}, {1.5, 0}, {
                 0.649519052838329, 0.375}, {2.25, 0}, {2.598076211353316, 
                 1.5}, {3, 0}, {0, 0}, {1.299038105676658, 0.75}, {0, 0}, {
                 0.75, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[1, 2], 0}, {2, 0}, {0, 0}, {
                Rational[3, 2], 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {1, 0}, {0, 
                0}, {3^Rational[1, 2], 1}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
              BezierCurve[{{0.5, 0}, {2, 0}, {0, 0}, {1.5, 0}, {
                1.299038105676658, 0.75}, {0.4330127018922193, 0.25}, {1, 
                0}, {0, 0}, {1.7320508075688772`, 1}, {0.8660254037844386, 
                0.5}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[1, 2], 0}, {2, 0}, {0, 0}, {
                 Rational[3, 2], 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {1, 0}, {0,
                  0}, {3^Rational[1, 2], 1}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
               BezierCurve[{{0.5, 0}, {2, 0}, {0, 0}, {1.5, 0}, {
                 1.299038105676658, 0.75}, {0.4330127018922193, 0.25}, {1, 
                 0}, {0, 0}, {1.7320508075688772`, 1}, {0.8660254037844386, 
                 0.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                1, 0}, {Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {0, 0}, {
                Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                Rational[3, 4], 0}, {Rational[1, 4], 0}, {0, 0}, {
                Rational[1, 2], 0}}], 
              BezierCurve[{{0.649519052838329, 0.375}, {1, 0}, {
                0.8660254037844386, 0.5}, {0.4330127018922193, 0.25}, {0, 
                0}, {0.21650635094610965`, 0.125}, {0.75, 0}, {0.25, 0}, {0, 
                0}, {0.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {1, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {0, 0}, {
                 Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {
                 Rational[3, 4], 0}, {Rational[1, 4], 0}, {0, 0}, {
                 Rational[1, 2], 0}}], 
               BezierCurve[{{0.649519052838329, 0.375}, {1, 0}, {
                 0.8660254037844386, 0.5}, {0.4330127018922193, 0.25}, {0, 
                 0}, {0.21650635094610965`, 0.125}, {0.75, 0}, {0.25, 0}, {0, 
                 0}, {0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
        GeometricTransformationBox[{
          {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
           {FaceForm[RGBColor[
            0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {3, 0}, {
                Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                 2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
              BezierCurve[{{0, 0}, {3, 0}, {1.0606601717798212`, 
                1.0606601717798212`}, {1.5, 0}, {0, 0}, {2.1213203435596424`, 
                2.1213203435596424`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.6660832000000002, 0.7430418, 0.32293539999999993`], 
            {FaceForm[RGBColor[
             0.6660832000000002, 0.7430418, 0.32293539999999993`]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {3, 0}, {
                 Rational[3, 2] 2^Rational[-1, 2], Rational[3, 2] 
                  2^Rational[-1, 2]}, {Rational[3, 2], 0}, {0, 0}, {
                 3 2^Rational[-1, 2], 3 2^Rational[-1, 2]}}], 
               BezierCurve[{{0, 0}, {3, 0}, {1.0606601717798212`, 
                 1.0606601717798212`}, {1.5, 0}, {0, 0}, {2.1213203435596424`,
                  2.1213203435596424`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.513417, 0.72992, 0.440682], GeometricTransformationBox[{
          {RGBColor[0.513417, 0.72992, 0.440682], 
           {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
            FilledCurveBox[NCache[
             BezierCurve[{{2^Rational[-1, 2], 2^Rational[-1, 2]}, {1, 0}, {0, 
                0}, {0, 0}, {2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}}], 
              BezierCurve[{{0.7071067811865475, 0.7071067811865475}, {1, 0}, {
                0, 0}, {0, 0}, {1.4142135623730951`, 1.4142135623730951`}, {2,
                 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.513417, 0.72992, 0.440682], 
            {FaceForm[RGBColor[0.513417, 0.72992, 0.440682]], 
             FilledCurveBox[NCache[
              BezierCurve[{{2^Rational[-1, 2], 2^Rational[-1, 2]}, {1, 0}, {0,
                  0}, {0, 0}, {2^Rational[1, 2], 2^Rational[1, 2]}, {2, 0}}], 
               BezierCurve[{{0.7071067811865475, 0.7071067811865475}, {1, 
                 0}, {0, 0}, {0, 0}, {1.4142135623730951`, 
                 1.4142135623730951`}, {2, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {1, 0}, {
                2^Rational[-1, 2], 2^Rational[-1, 2]}, {Rational[1, 2], 0}, {
                0, 0}, {
                Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                 2^Rational[-1, 2]}}], 
              BezierCurve[{{0, 0}, {1, 0}, {0.7071067811865475, 
                0.7071067811865475}, {0.5, 0}, {0, 0}, {0.35355339059327373`, 
                0.35355339059327373`}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {1, 0}, {
                 2^Rational[-1, 2], 2^Rational[-1, 2]}, {Rational[1, 2], 0}, {
                 0, 0}, {
                 Rational[1, 2] 2^Rational[-1, 2], Rational[1, 2] 
                  2^Rational[-1, 2]}}], 
               BezierCurve[{{0, 0}, {1, 0}, {0.7071067811865475, 
                 0.7071067811865475}, {0.5, 0}, {0, 0}, {0.35355339059327373`,
                  0.35355339059327373`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, {{{1, 0}, {0, 1}}, {{0, -1}, {1, 0}}, {{-1, 0}, {
         0, -1}}, {{0, 1}, {-1, 0}}}]}},
      ImageSize->Tiny], 
     GraphicsBox[{
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{6, 0}, {0, 0}, {3, 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[9, 4] 3^Rational[1, 2], Rational[9, 4]}, {
                Rational[3, 2], 0}, {Rational[9, 2], 0}, {0, 0}, {
                3 3^Rational[1, 2], 3}}], 
              BezierCurve[{{6, 0}, {0, 0}, {3, 0}, {1.299038105676658, 
                0.75}, {2.598076211353316, 1.5}, {3.8971143170299736`, 
                2.25}, {1.5, 0}, {4.5, 0}, {0, 0}, {
                5.196152422706632, 3}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{6, 0}, {0, 0}, {3, 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[9, 4] 3^Rational[1, 2], Rational[9, 4]}, {
                 Rational[3, 2], 0}, {Rational[9, 2], 0}, {0, 0}, {
                 3 3^Rational[1, 2], 3}}], 
               BezierCurve[{{6, 0}, {0, 0}, {3, 0}, {1.299038105676658, 
                 0.75}, {2.598076211353316, 1.5}, {3.8971143170299736`, 
                 2.25}, {1.5, 0}, {4.5, 0}, {0, 0}, {
                 5.196152422706632, 3}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[5, 2], 0}, {
                Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
                Rational[15, 4], 0}, {5, 0}, {
                Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {0, 0}, {
                0, 0}, {Rational[5, 4], 0}, {
                Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}}], 
              BezierCurve[{{2.5, 0}, {2.1650635094610964`, 1.25}, {
                4.330127018922193, 2.5}, {3.75, 0}, {5, 0}, {
                3.2475952641916446`, 1.875}, {0, 0}, {0, 0}, {1.25, 0}, {
                1.0825317547305482`, 0.625}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{Rational[5, 2], 0}, {
                 Rational[5, 4] 3^Rational[1, 2], Rational[5, 4]}, {
                 Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
                 Rational[15, 4], 0}, {5, 0}, {
                 Rational[15, 8] 3^Rational[1, 2], Rational[15, 8]}, {0, 0}, {
                 0, 0}, {Rational[5, 4], 0}, {
                 Rational[5, 8] 3^Rational[1, 2], Rational[5, 8]}}], 
               BezierCurve[{{2.5, 0}, {2.1650635094610964`, 1.25}, {
                 4.330127018922193, 2.5}, {3.75, 0}, {5, 0}, {
                 3.2475952641916446`, 1.875}, {0, 0}, {0, 0}, {1.25, 0}, {
                 1.0825317547305482`, 0.625}}]]]}}, {{{1, 0}, {0, -1}}, {0, 
            0}}]}, NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.471412, 0.108766, 0.527016], GeometricTransformationBox[{
          {RGBColor[0.471412, 0.108766, 0.527016], 
           {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
            FilledCurveBox[NCache[
             BezierCurve[{{3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {1, 0}, {4, 
                0}, {3, 0}, {
                Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                2 3^Rational[1, 2], 2}, {2, 0}}], 
              BezierCurve[{{1.7320508075688772`, 1}, {0, 0}, {0, 0}, {1, 0}, {
                4, 0}, {3, 0}, {2.598076211353316, 1.5}, {0.8660254037844386, 
                0.5}, {3.4641016151377544`, 2}, {2, 0}}]]]}}, 
          GeometricTransformationBox[
           {RGBColor[0.471412, 0.108766, 0.527016], 
            {FaceForm[RGBColor[0.471412, 0.108766, 0.527016]], 
             FilledCurveBox[NCache[
              BezierCurve[{{3^Rational[1, 2], 1}, {0, 0}, {0, 0}, {1, 0}, {4, 
                 0}, {3, 0}, {
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 2 3^Rational[1, 2], 2}, {2, 0}}], 
               BezierCurve[{{1.7320508075688772`, 1}, {0, 0}, {0, 0}, {1, 
                 0}, {4, 0}, {3, 0}, {2.598076211353316, 1.5}, {
                 0.8660254037844386, 0.5}, {3.4641016151377544`, 2}, {2, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.2484884, 0.3863264, 0.813373], 
        GeometricTransformationBox[{
          {RGBColor[0.2484884, 0.3863264, 0.813373], 
           {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
            FilledCurveBox[NCache[
             BezierCurve[{{Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                Rational[3, 4], 0}, {0, 0}, {Rational[3, 2], 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {3, 0}, {
                Rational[9, 4], 0}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {0, 0}}], 
              BezierCurve[{{2.598076211353316, 1.5}, {0.75, 0}, {0, 0}, {
                1.5, 0}, {1.299038105676658, 0.75}, {3, 0}, {2.25, 0}, {
                0.649519052838329, 0.375}, {1.9485571585149868`, 1.125}, {0, 
                0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2484884, 0.3863264, 0.813373], 
            {FaceForm[RGBColor[0.2484884, 0.3863264, 0.813373]], 
             FilledCurveBox[NCache[
              BezierCurve[{{
                 Rational[3, 2] 3^Rational[1, 2], Rational[3, 2]}, {
                 Rational[3, 4], 0}, {0, 0}, {Rational[3, 2], 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {3, 0}, {
                 Rational[9, 4], 0}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[9, 8] 3^Rational[1, 2], Rational[9, 8]}, {0, 0}}], 
               BezierCurve[{{2.598076211353316, 1.5}, {0.75, 0}, {0, 0}, {
                 1.5, 0}, {1.299038105676658, 0.75}, {3, 0}, {2.25, 0}, {
                 0.649519052838329, 0.375}, {1.9485571585149868`, 1.125}, {0, 
                 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.857359, 0.131106, 0.132128], GeometricTransformationBox[{
          {RGBColor[0.857359, 0.131106, 0.132128], 
           {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {Rational[1, 2], 0}, {2, 0}, {
                Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                Rational[3, 2], 0}, {1, 0}, {3^Rational[1, 2], 1}, {0, 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
              BezierCurve[{{0, 0}, {0.5, 0}, {2, 0}, {1.299038105676658, 
                0.75}, {0.4330127018922193, 0.25}, {1.5, 0}, {1, 0}, {
                1.7320508075688772`, 1}, {0, 0}, {0.8660254037844386, 
                0.5}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.857359, 0.131106, 0.132128], 
            {FaceForm[RGBColor[0.857359, 0.131106, 0.132128]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {Rational[1, 2], 0}, {2, 0}, {
                 Rational[3, 4] 3^Rational[1, 2], Rational[3, 4]}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                 Rational[3, 2], 0}, {1, 0}, {3^Rational[1, 2], 1}, {0, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}], 
               BezierCurve[{{0, 0}, {0.5, 0}, {2, 0}, {1.299038105676658, 
                 0.75}, {0.4330127018922193, 0.25}, {1.5, 0}, {1, 0}, {
                 1.7320508075688772`, 1}, {0, 0}, {0.8660254037844386, 
                 0.5}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}, 
       {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
        GeometricTransformationBox[{
          {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
           {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
            FilledCurveBox[NCache[
             BezierCurve[{{0, 0}, {
                Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {0, 0}, {
                Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                Rational[3, 4], 0}, {Rational[1, 4], 0}, {1, 0}, {
                Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                Rational[1, 2], 0}}], 
              BezierCurve[{{0, 0}, {0.21650635094610965`, 0.125}, {0, 0}, {
                0.4330127018922193, 0.25}, {0.75, 0}, {0.25, 0}, {1, 0}, {
                0.8660254037844386, 0.5}, {0.649519052838329, 0.375}, {
                0.5, 0}}]]]}}, GeometricTransformationBox[
           {RGBColor[0.2748608, 0.18226360000000003`, 0.7272788], 
            {FaceForm[RGBColor[0.2748608, 0.18226360000000003`, 0.7272788]], 
             FilledCurveBox[NCache[
              BezierCurve[{{0, 0}, {
                 Rational[1, 8] 3^Rational[1, 2], Rational[1, 8]}, {0, 0}, {
                 Rational[1, 4] 3^Rational[1, 2], Rational[1, 4]}, {
                 Rational[3, 4], 0}, {Rational[1, 4], 0}, {1, 0}, {
                 Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}, {
                 Rational[3, 8] 3^Rational[1, 2], Rational[3, 8]}, {
                 Rational[1, 2], 0}}], 
               BezierCurve[{{0, 0}, {0.21650635094610965`, 0.125}, {0, 0}, {
                 0.4330127018922193, 0.25}, {0.75, 0}, {0.25, 0}, {1, 0}, {
                 0.8660254037844386, 0.5}, {0.649519052838329, 0.375}, {
                 0.5, 0}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
         NCache[{{{1, 0}, {0, 
           1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
            Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
            Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
           0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
            Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
            Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0,
            1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
           0.5}}, {{-0.5, -0.8660254037844386}, {
           0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
           0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
           0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]}},
      ImageSize->Tiny]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.780356353263906*^9, 3.780356473763776*^9}, {
   3.78035659267653*^9, 3.780356643630032*^9}, 3.780391316050433*^9, 
   3.780396926528359*^9, 3.780397447081567*^9, 3.780399860157946*^9, 
   3.780400234680585*^9, 3.78040037397733*^9, 3.780400663213873*^9, 
   3.780401128797324*^9, 3.7804012912874403`*^9, 3.780401812444378*^9, 
   3.780402267140787*^9, 3.7804023958449583`*^9},
 CellLabel->"Out[1]=",
 CellID->907062844]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A table of \[OpenCurlyDoubleQuote]open\[CloseCurlyDoubleQuote] \
colorized mandalas", "Subsubsection",
 CellLabel->"In[2]:=",
 CellID->1537091669],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "36"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Magnify", "[", 
  RowBox[{
   RowBox[{"Multicolumn", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BlockRandom", "[", 
         RowBox[{
          RowBox[{"SeedRandom", "[", "24", "]"}], ";", 
          RowBox[{"RandomMandala", "[", 
           RowBox[{
            RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "#"}], ",", 
            
            RowBox[{"ColorFunction", "\[Rule]", 
             RowBox[{"ColorData", "[", "\"\<DeepSeaColors\>\"", "]"}]}]}], 
           "]"}]}], "]"}], "&"}], ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}], ",", "n"}], "]"}]}], "]"}], ",", 
     "6"}], "]"}], ",", "0.5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7795497947567472`*^9, 3.7795499471958437`*^9}, {
  3.779550710421224*^9, 3.779550718172097*^9}, {3.779550847471126*^9, 
  3.779550853329739*^9}, {3.77955501916181*^9, 3.77955503514565*^9}},
 CellLabel->"In[1]:=",
 CellID->786849859],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.9481760881837578`, 2.704758961634131}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.870440220459394, 
               6.761897404085328}, {Rational[10, 3], 0}, {0.9740880440918789, 
               1.3523794808170655`}, {2.9222641322756364`, 
               4.057138442451197}, {0., 0.}, {5.844528264551273, 
               8.114276884902393}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.8963521763675155`, 5.409517923268262}}], 
             BezierCurve[{{5, 0}, {1.9481760881837578`, 2.704758961634131}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               4.870440220459394, 6.761897404085328}, {
               3.3333333333333335`, 0}, {0.9740880440918789, 
               1.3523794808170655`}, {2.9222641322756364`, 
               4.057138442451197}, {0., 0.}, {5.844528264551273, 
               8.114276884902393}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.8963521763675155`, 5.409517923268262}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.9481760881837578`, 2.704758961634131}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.870440220459394, 
                6.761897404085328}, {Rational[10, 3], 0}, {0.9740880440918789,
                 1.3523794808170655`}, {2.9222641322756364`, 
                4.057138442451197}, {0., 0.}, {5.844528264551273, 
                8.114276884902393}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.8963521763675155`, 5.409517923268262}}], 
              BezierCurve[{{5, 0}, {1.9481760881837578`, 2.704758961634131}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                4.870440220459394, 6.761897404085328}, {
                3.3333333333333335`, 0}, {0.9740880440918789, 
                1.3523794808170655`}, {2.9222641322756364`, 
                4.057138442451197}, {0., 0.}, {5.844528264551273, 
                8.114276884902393}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                3.8963521763675155`, 5.409517923268262}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.31682978729722583`, -0.9484824120041419}, {
         0.9484824120041419, -0.31682978729722583`}}, {{-0.7992377717623893, 
         0.6010149617008639}, {-0.6010149617008639, -0.7992377717623893}}}]], 
      
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.667272416245239, 2.886401531516167}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.1681810406130975`,
                7.216003828790418}, {Rational[10, 3], 0}, {0.8336362081226195,
                1.4432007657580834`}, {2.5009086243678587`, 
               4.32960229727425}, {0., 0.}, {5.001817248735717, 
               8.6592045945485}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.334544832490478, 5.772803063032334}}], 
             BezierCurve[{{5, 0}, {1.667272416245239, 2.886401531516167}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               4.1681810406130975`, 7.216003828790418}, {
               3.3333333333333335`, 0}, {0.8336362081226195, 
               1.4432007657580834`}, {2.5009086243678587`, 
               4.32960229727425}, {0., 0.}, {5.001817248735717, 
               8.6592045945485}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.334544832490478, 5.772803063032334}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.667272416245239, 2.886401531516167}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                4.1681810406130975`, 7.216003828790418}, {
                Rational[10, 3], 0}, {0.8336362081226195, 
                1.4432007657580834`}, {2.5009086243678587`, 
                4.32960229727425}, {0., 0.}, {5.001817248735717, 
                8.6592045945485}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.334544832490478, 5.772803063032334}}], 
              BezierCurve[{{5, 0}, {1.667272416245239, 2.886401531516167}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                4.1681810406130975`, 7.216003828790418}, {
                3.3333333333333335`, 0}, {0.8336362081226195, 
                1.4432007657580834`}, {2.5009086243678587`, 
                4.32960229727425}, {0., 0.}, {5.001817248735717, 
                8.6592045945485}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                3.334544832490478, 5.772803063032334}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.49963648420499723`, -0.8662351780268852}, {
         0.8662351780268852, -0.49963648420499723`}}, {{-0.5007267673025391, 
         0.8656053976880856}, {-0.8656053976880856, -0.5007267673025391}}}]], 
      
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.09212553892968492, 3.332060022896951}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {0.2303138473242123, 
               8.330150057242378}, {Rational[10, 3], 0}, {0.04606276946484246,
                1.6660300114484754`}, {0.13818830839452736`, 
               4.9980900343454255`}, {0., 0.}, {0.27637661678905473`, 
               9.996180068690851}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               0.18425107785936984`, 6.664120045793902}}], 
             BezierCurve[{{5, 0}, {0.09212553892968492, 3.332060022896951}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               0.2303138473242123, 8.330150057242378}, {
               3.3333333333333335`, 0}, {0.04606276946484246, 
               1.6660300114484754`}, {0.13818830839452736`, 
               4.9980900343454255`}, {0., 0.}, {0.27637661678905473`, 
               9.996180068690851}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               0.18425107785936984`, 6.664120045793902}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.09212553892968492, 3.332060022896951}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {0.2303138473242123,
                 8.330150057242378}, {Rational[10, 3], 0}, {
                0.04606276946484246, 1.6660300114484754`}, {
                0.13818830839452736`, 4.9980900343454255`}, {0., 0.}, {
                0.27637661678905473`, 9.996180068690851}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {0.18425107785936984`, 
                6.664120045793902}}], 
              BezierCurve[{{5, 0}, {0.09212553892968492, 3.332060022896951}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                0.2303138473242123, 8.330150057242378}, {
                3.3333333333333335`, 0}, {0.04606276946484246, 
                1.6660300114484754`}, {0.13818830839452736`, 
                4.9980900343454255`}, {0., 0.}, {0.27637661678905473`, 
                9.996180068690851}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                0.18425107785936984`, 6.664120045793902}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.9984723193138447, -0.05525420856397917}, {
         0.05525420856397917, -0.9984723193138447}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.8502150651237559`, 2.7726909896164424`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.62553766280939, 
               6.931727474041106}, {Rational[10, 3], 0}, {0.9251075325618779, 
               1.3863454948082212`}, {2.775322597685634, 
               4.1590364844246634`}, {0., 0.}, {5.550645195371268, 
               8.318072968849327}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.7004301302475118`, 5.545381979232885}}], 
             BezierCurve[{{5, 0}, {1.8502150651237559`, 
               2.7726909896164424`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {4.62553766280939, 6.931727474041106}, {
               3.3333333333333335`, 0}, {0.9251075325618779, 
               1.3863454948082212`}, {2.775322597685634, 
               4.1590364844246634`}, {0., 0.}, {5.550645195371268, 
               8.318072968849327}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.7004301302475118`, 5.545381979232885}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.8502150651237559`, 
                2.7726909896164424`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {4.62553766280939, 6.931727474041106}, {
                Rational[10, 3], 0}, {0.9251075325618779, 
                1.3863454948082212`}, {2.775322597685634, 
                4.1590364844246634`}, {0., 0.}, {5.550645195371268, 
                8.318072968849327}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.7004301302475118`, 5.545381979232885}}], 
              BezierCurve[{{5, 0}, {1.8502150651237559`, 
                2.7726909896164424`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {4.62553766280939, 
                6.931727474041106}, {3.3333333333333335`, 0}, {
                0.9251075325618779, 1.3863454948082212`}, {2.775322597685634, 
                4.1590364844246634`}, {0., 0.}, {5.550645195371268, 
                8.318072968849327}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                3.7004301302475118`, 5.545381979232885}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.3838067583020373, -0.9234134351858226}, {
         0.9234134351858226, -0.3838067583020373}}, {{-0.7053847445633631, 
         0.708824634262438}, {-0.708824634262438, -0.7053847445633631}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.01595792650295302, 3.3332951348017232`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {
               0.039894816257382545`, 8.333237837004308}, {
               Rational[10, 3], 0}, {0.00797896325147651, 
               1.6666475674008616`}, {0.02393688975442953, 
               4.999942702202585}, {0., 0.}, {0.04787377950885906, 
               9.99988540440517}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               0.03191585300590604, 6.6665902696034465`}}], 
             BezierCurve[{{5, 0}, {0.01595792650295302, 
               3.3332951348017232`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {0.039894816257382545`, 
               8.333237837004308}, {3.3333333333333335`, 0}, {
               0.00797896325147651, 1.6666475674008616`}, {
               0.02393688975442953, 4.999942702202585}, {0., 0.}, {
               0.04787377950885906, 9.99988540440517}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {0.03191585300590604, 
               6.6665902696034465`}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.01595792650295302, 
                3.3332951348017232`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {0.039894816257382545`, 
                8.333237837004308}, {Rational[10, 3], 0}, {
                0.00797896325147651, 1.6666475674008616`}, {
                0.02393688975442953, 4.999942702202585}, {0., 0.}, {
                0.04787377950885906, 9.99988540440517}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {0.03191585300590604, 
                6.6665902696034465`}}], 
              BezierCurve[{{5, 0}, {0.01595792650295302, 
                3.3332951348017232`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {0.039894816257382545`, 
                8.333237837004308}, {3.3333333333333335`, 0}, {
                0.00797896325147651, 1.6666475674008616`}, {
                0.02393688975442953, 4.999942702202585}, {0., 0.}, {
                0.04787377950885906, 9.99988540440517}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {0.03191585300590604, 
                6.6665902696034465`}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9999541620247108, -0.009574646179287018}, {
         0.009574646179287018, -0.9999541620247108}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.3897794388217242`, 3.029789468352461}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.47444859705431, 
               7.574473670881152}, {Rational[10, 3], 0}, {0.6948897194108621, 
               1.5148947341762304`}, {2.084669158232586, 4.544684202528691}, {
               0., 0.}, {4.169338316465172, 9.089368405057382}, {10, 0}, {0, 
               0}, {Rational[25, 3], 0}, {2.7795588776434483`, 
               6.059578936704922}}], 
             BezierCurve[{{5, 0}, {1.3897794388217242`, 3.029789468352461}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               3.47444859705431, 7.574473670881152}, {
               3.3333333333333335`, 0}, {0.6948897194108621, 
               1.5148947341762304`}, {2.084669158232586, 4.544684202528691}, {
               0., 0.}, {4.169338316465172, 9.089368405057382}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {2.7795588776434483`, 
               6.059578936704922}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.3897794388217242`, 3.029789468352461}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.47444859705431, 
                7.574473670881152}, {Rational[10, 3], 0}, {0.6948897194108621,
                 1.5148947341762304`}, {2.084669158232586, 
                4.544684202528691}, {0., 0.}, {4.169338316465172, 
                9.089368405057382}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                2.7795588776434483`, 6.059578936704922}}], 
              BezierCurve[{{5, 0}, {1.3897794388217242`, 3.029789468352461}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                3.47444859705431, 7.574473670881152}, {
                3.3333333333333335`, 0}, {0.6948897194108621, 
                1.5148947341762304`}, {2.084669158232586, 
                4.544684202528691}, {0., 0.}, {4.169338316465172, 
                9.089368405057382}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                2.7795588776434483`, 6.059578936704922}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.6523323600571073, -0.7579330392734733}, {
         0.7579330392734733, -0.6523323600571073}}}]]},
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.7276443503403747, 3.2529440220404724`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.8191108758509367`,
                8.13236005510118}, {Rational[10, 3], 0}, {
               0.36382217517018733`, 1.6264720110202362`}, {1.091466525510562,
                4.879416033060709}, {0., 0.}, {2.182933051021124, 
               9.758832066121418}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.4552887006807493`, 6.505888044080945}}], 
             BezierCurve[{{5, 0}, {0.7276443503403747, 3.2529440220404724`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.8191108758509367`, 8.13236005510118}, {
               3.3333333333333335`, 0}, {0.36382217517018733`, 
               1.6264720110202362`}, {1.091466525510562, 4.879416033060709}, {
               0., 0.}, {2.182933051021124, 9.758832066121418}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {1.4552887006807493`, 
               6.505888044080945}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.7276443503403747, 3.2529440220404724`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.8191108758509367`, 8.13236005510118}, {
                Rational[10, 3], 0}, {0.36382217517018733`, 
                1.6264720110202362`}, {1.091466525510562, 
                4.879416033060709}, {0., 0.}, {2.182933051021124, 
                9.758832066121418}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.4552887006807493`, 6.505888044080945}}], 
              BezierCurve[{{5, 0}, {0.7276443503403747, 
                3.2529440220404724`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {1.8191108758509367`, 
                8.13236005510118}, {3.3333333333333335`, 0}, {
                0.36382217517018733`, 1.6264720110202362`}, {
                1.091466525510562, 4.879416033060709}, {0., 0.}, {
                2.182933051021124, 9.758832066121418}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {1.4552887006807493`, 
                6.505888044080945}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9046960658951921, -0.4260575411300241}, {
         0.4260575411300241, -0.9046960658951921}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.182512006448287, 2.519474638256989}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.456280016120718, 
               6.298686595642472}, {Rational[10, 3], 0}, {1.0912560032241434`,
                1.2597373191284944`}, {3.2737680096724304`, 
               3.779211957385483}, {0., 0.}, {6.547536019344861, 
               7.558423914770966}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               4.365024012896574, 5.038949276513978}}], 
             BezierCurve[{{5, 0}, {2.182512006448287, 2.519474638256989}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               5.456280016120718, 6.298686595642472}, {
               3.3333333333333335`, 0}, {1.0912560032241434`, 
               1.2597373191284944`}, {3.2737680096724304`, 
               3.779211957385483}, {0., 0.}, {6.547536019344861, 
               7.558423914770966}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               4.365024012896574, 5.038949276513978}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.182512006448287, 2.519474638256989}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.456280016120718, 
                6.298686595642472}, {Rational[10, 3], 0}, {
                1.0912560032241434`, 1.2597373191284944`}, {
                3.2737680096724304`, 3.779211957385483}, {0., 0.}, {
                6.547536019344861, 7.558423914770966}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {4.365024012896574, 5.038949276513978}}],
               BezierCurve[{{5, 0}, {2.182512006448287, 2.519474638256989}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                5.456280016120718, 6.298686595642472}, {
                3.3333333333333335`, 0}, {1.0912560032241434`, 
                1.2597373191284944`}, {3.2737680096724304`, 
                3.779211957385483}, {0., 0.}, {6.547536019344861, 
                7.558423914770966}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                4.365024012896574, 5.038949276513978}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.14259544150763337`, -0.9897810566288098}, {
         0.9897810566288098, -0.14259544150763337`}}, {{-0.9593330801224862, 
         0.28227653353175397`}, {-0.28227653353175397`, \
-0.9593330801224862}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.1966072647933952`, 3.111148046132614}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {2.991518161983488, 
               7.7778701153315355`}, {Rational[10, 3], 0}, {
               0.5983036323966976, 1.555574023066307}, {1.7949108971900927`, 
               4.66672206919892}, {0., 0.}, {3.5898217943801853`, 
               9.33344413839784}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               2.3932145295867904`, 6.222296092265228}}], 
             BezierCurve[{{5, 0}, {1.1966072647933952`, 3.111148046132614}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               2.991518161983488, 7.7778701153315355`}, {
               3.3333333333333335`, 0}, {0.5983036323966976, 
               1.555574023066307}, {1.7949108971900927`, 4.66672206919892}, {
               0., 0.}, {3.5898217943801853`, 9.33344413839784}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {2.3932145295867904`, 
               6.222296092265228}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.1966072647933952`, 3.111148046132614}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {2.991518161983488, 
                7.7778701153315355`}, {Rational[10, 3], 0}, {
                0.5983036323966976, 1.555574023066307}, {1.7949108971900927`, 
                4.66672206919892}, {0., 0.}, {3.5898217943801853`, 
                9.33344413839784}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                2.3932145295867904`, 6.222296092265228}}], 
              BezierCurve[{{5, 0}, {1.1966072647933952`, 3.111148046132614}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                2.991518161983488, 7.7778701153315355`}, {
                3.3333333333333335`, 0}, {0.5983036323966976, 
                1.555574023066307}, {1.7949108971900927`, 4.66672206919892}, {
                0., 0.}, {3.5898217943801853`, 9.33344413839784}, {10, 0}, {0,
                 0}, {8.333333333333334, 0}, {2.3932145295867904`, 
                6.222296092265228}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.7422635896918606, -0.6701080236930113}, {
         0.6701080236930113, -0.7422635896918606}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.566369774238491, 3.2848647445427877`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.4159244355962275`,
                8.21216186135697}, {Rational[10, 3], 0}, {0.2831848871192455, 
               1.6424323722713938`}, {0.8495546613577365, 
               4.927297116814181}, {0., 0.}, {1.699109322715473, 
               9.854594233628362}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.132739548476982, 6.569729489085575}}], 
             BezierCurve[{{5, 0}, {0.566369774238491, 3.2848647445427877`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.4159244355962275`, 8.21216186135697}, {
               3.3333333333333335`, 0}, {0.2831848871192455, 
               1.6424323722713938`}, {0.8495546613577365, 
               4.927297116814181}, {0., 0.}, {1.699109322715473, 
               9.854594233628362}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               1.132739548476982, 6.569729489085575}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.566369774238491, 3.2848647445427877`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.4159244355962275`, 8.21216186135697}, {
                Rational[10, 3], 0}, {0.2831848871192455, 
                1.6424323722713938`}, {0.8495546613577365, 
                4.927297116814181}, {0., 0.}, {1.699109322715473, 
                9.854594233628362}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.132739548476982, 6.569729489085575}}], 
              BezierCurve[{{5, 0}, {0.566369774238491, 3.2848647445427877`}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                1.4159244355962275`, 8.21216186135697}, {
                3.3333333333333335`, 0}, {0.2831848871192455, 
                1.6424323722713938`}, {0.8495546613577365, 
                4.927297116814181}, {0., 0.}, {1.699109322715473, 
                9.854594233628362}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                1.132739548476982, 6.569729489085575}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.9422605501892274, -0.33488065867872185`}, {
         0.33488065867872185`, -0.9422605501892274}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.11416277708616361`, 
               3.3313777887593425`}, {Rational[5, 3], 0}, {
               Rational[20, 3], 0}, {0.285406942715409, 8.328444471898356}, {
               Rational[10, 3], 0}, {0.057081388543081805`, 
               1.6656888943796713`}, {0.1712441656292454, 
               4.997066683139014}, {0., 0.}, {0.3424883312584908, 
               9.994133366278028}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               0.22832555417232722`, 6.662755577518685}}], 
             BezierCurve[{{5, 0}, {0.11416277708616361`, 
               3.3313777887593425`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {0.285406942715409, 
               8.328444471898356}, {3.3333333333333335`, 0}, {
               0.057081388543081805`, 1.6656888943796713`}, {
               0.1712441656292454, 4.997066683139014}, {0., 0.}, {
               0.3424883312584908, 9.994133366278028}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {0.22832555417232722`, 
               6.662755577518685}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.11416277708616361`, 
                3.3313777887593425`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {0.285406942715409, 8.328444471898356}, {
                Rational[10, 3], 0}, {0.057081388543081805`, 
                1.6656888943796713`}, {0.1712441656292454, 
                4.997066683139014}, {0., 0.}, {0.3424883312584908, 
                9.994133366278028}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                0.22832555417232722`, 6.662755577518685}}], 
              BezierCurve[{{5, 0}, {0.11416277708616361`, 
                3.3313777887593425`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {0.285406942715409, 
                8.328444471898356}, {3.3333333333333335`, 0}, {
                0.057081388543081805`, 1.6656888943796713`}, {
                0.1712441656292454, 4.997066683139014}, {0., 0.}, {
                0.3424883312584908, 9.994133366278028}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {0.22832555417232722`, 
                6.662755577518685}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9976540348590355, -0.06845748117982729}, {
         0.06845748117982729, -0.9976540348590355}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.033822644640272, 3.1689622671373203`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {2.5845566116006804`,
                7.922405667843302}, {Rational[10, 3], 0}, {0.516911322320136, 
               1.5844811335686602`}, {1.550733966960408, 4.75344340070598}, {
               0., 0.}, {3.101467933920816, 9.50688680141196}, {10, 0}, {0, 
               0}, {Rational[25, 3], 0}, {2.067645289280544, 
               6.337924534274641}}], 
             BezierCurve[{{5, 0}, {1.033822644640272, 3.1689622671373203`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               2.5845566116006804`, 7.922405667843302}, {
               3.3333333333333335`, 0}, {0.516911322320136, 
               1.5844811335686602`}, {1.550733966960408, 4.75344340070598}, {
               0., 0.}, {3.101467933920816, 9.50688680141196}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {2.067645289280544, 
               6.337924534274641}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.033822644640272, 3.1689622671373203`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                2.5845566116006804`, 7.922405667843302}, {
                Rational[10, 3], 0}, {0.516911322320136, 
                1.5844811335686602`}, {1.550733966960408, 4.75344340070598}, {
                0., 0.}, {3.101467933920816, 9.50688680141196}, {10, 0}, {0, 
                0}, {Rational[25, 3], 0}, {2.067645289280544, 
                6.337924534274641}}], 
              BezierCurve[{{5, 0}, {1.033822644640272, 3.1689622671373203`}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                2.5845566116006804`, 7.922405667843302}, {
                3.3333333333333335`, 0}, {0.516911322320136, 
                1.5844811335686602`}, {1.550733966960408, 4.75344340070598}, {
                0., 0.}, {3.101467933920816, 9.50688680141196}, {10, 0}, {0, 
                0}, {8.333333333333334, 0}, {2.067645289280544, 
                6.337924534274641}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.8076179330972189, -0.5897060913198846}, {
         0.5897060913198846, -0.8076179330972189}}}]]},
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.9649628389845794, 3.190604618327055}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {2.4124070974614487`,
                7.976511545817638}, {Rational[10, 3], 0}, {0.4824814194922897,
                1.5953023091635274`}, {1.447444258476869, 
               4.785906927490583}, {0., 0.}, {2.894888516953738, 
               9.571813854981166}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.9299256779691587`, 6.38120923665411}}], 
             BezierCurve[{{5, 0}, {0.9649628389845794, 3.190604618327055}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               2.4124070974614487`, 7.976511545817638}, {
               3.3333333333333335`, 0}, {0.4824814194922897, 
               1.5953023091635274`}, {1.447444258476869, 4.785906927490583}, {
               0., 0.}, {2.894888516953738, 9.571813854981166}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {1.9299256779691587`, 
               6.38120923665411}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.9649628389845794, 3.190604618327055}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                2.4124070974614487`, 7.976511545817638}, {
                Rational[10, 3], 0}, {0.4824814194922897, 
                1.5953023091635274`}, {1.447444258476869, 
                4.785906927490583}, {0., 0.}, {2.894888516953738, 
                9.571813854981166}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.9299256779691587`, 6.38120923665411}}], 
              BezierCurve[{{5, 0}, {0.9649628389845794, 3.190604618327055}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                2.4124070974614487`, 7.976511545817638}, {
                3.3333333333333335`, 0}, {0.4824814194922897, 
                1.5953023091635274`}, {1.447444258476869, 
                4.785906927490583}, {0., 0.}, {2.894888516953738, 
                9.571813854981166}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                1.9299256779691587`, 6.38120923665411}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.8323924094881877, -0.5541866803040734}, {
         0.5541866803040734, -0.8323924094881877}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.2143347798485853`, 2.4915522458628137`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.535836949621463, 
               6.228880614657035}, {Rational[10, 3], 0}, {1.1071673899242926`,
                1.2457761229314068`}, {3.3215021697728773`, 
               3.7373283687942207`}, {0., 0.}, {6.6430043395457545`, 
               7.474656737588441}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               4.428669559697171, 4.983104491725627}}], 
             BezierCurve[{{5, 0}, {2.2143347798485853`, 
               2.4915522458628137`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {5.535836949621463, 
               6.228880614657035}, {3.3333333333333335`, 0}, {
               1.1071673899242926`, 1.2457761229314068`}, {
               3.3215021697728773`, 3.7373283687942207`}, {0., 0.}, {
               6.6430043395457545`, 7.474656737588441}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {4.428669559697171, 
               4.983104491725627}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.2143347798485853`, 
                2.4915522458628137`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {5.535836949621463, 6.228880614657035}, {
                Rational[10, 3], 0}, {1.1071673899242926`, 
                1.2457761229314068`}, {3.3215021697728773`, 
                3.7373283687942207`}, {0., 0.}, {6.6430043395457545`, 
                7.474656737588441}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                4.428669559697171, 4.983104491725627}}], 
              BezierCurve[{{5, 0}, {2.2143347798485853`, 
                2.4915522458628137`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {5.535836949621463, 
                6.228880614657035}, {3.3333333333333335`, 0}, {
                1.1071673899242926`, 1.2457761229314068`}, {
                3.3215021697728773`, 3.7373283687942207`}, {0., 0.}, {
                6.6430043395457545`, 7.474656737588441}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {4.428669559697171, 
                4.983104491725627}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.11740986689552546`, -0.9930835428882985}, {
         0.9930835428882985, -0.11740986689552546`}}, {{-0.97242984631115, 
         0.23319561317330398`}, {-0.23319561317330398`, \
-0.97242984631115}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.4755488782064872`, 2.988957446859137}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.688872195516218, 
               7.4723936171478424`}, {Rational[10, 3], 0}, {
               0.7377744391032436, 1.4944787234295684`}, {2.2133233173097304`,
                4.483436170288705}, {0., 0.}, {4.426646634619461, 
               8.96687234057741}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               2.9510977564129743`, 5.977914893718274}}], 
             BezierCurve[{{5, 0}, {1.4755488782064872`, 2.988957446859137}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               3.688872195516218, 7.4723936171478424`}, {
               3.3333333333333335`, 0}, {0.7377744391032436, 
               1.4944787234295684`}, {2.2133233173097304`, 
               4.483436170288705}, {0., 0.}, {4.426646634619461, 
               8.96687234057741}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               2.9510977564129743`, 5.977914893718274}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.4755488782064872`, 2.988957446859137}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.688872195516218, 
                7.4723936171478424`}, {Rational[10, 3], 0}, {
                0.7377744391032436, 1.4944787234295684`}, {
                2.2133233173097304`, 4.483436170288705}, {0., 0.}, {
                4.426646634619461, 8.96687234057741}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {2.9510977564129743`, 
                5.977914893718274}}], 
              BezierCurve[{{5, 0}, {1.4755488782064872`, 2.988957446859137}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                3.688872195516218, 7.4723936171478424`}, {
                3.3333333333333335`, 0}, {0.7377744391032436, 
                1.4944787234295684`}, {2.2133233173097304`, 
                4.483436170288705}, {0., 0.}, {4.426646634619461, 
                8.96687234057741}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                2.9510977564129743`, 5.977914893718274}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.6080959914442439, -0.7938635053895865}, {
         0.7938635053895865, -0.6080959914442439}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.11564626051336763`, 
               3.3313266206633636`}, {Rational[5, 3], 0}, {
               Rational[20, 3], 0}, {0.2891156512834191, 8.32831655165841}, {
               Rational[10, 3], 0}, {0.05782313025668381, 
               1.6656633103316818`}, {0.17346939077005144`, 
               4.996989930995046}, {0., 0.}, {0.3469387815401029, 
               9.993979861990091}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               0.23129252102673525`, 6.662653241326727}}], 
             BezierCurve[{{5, 0}, {0.11564626051336763`, 
               3.3313266206633636`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {0.2891156512834191, 
               8.32831655165841}, {3.3333333333333335`, 0}, {
               0.05782313025668381, 1.6656633103316818`}, {
               0.17346939077005144`, 4.996989930995046}, {0., 0.}, {
               0.3469387815401029, 9.993979861990091}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {0.23129252102673525`, 
               6.662653241326727}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.11564626051336763`, 
                3.3313266206633636`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {0.2891156512834191, 8.32831655165841}, {
                Rational[10, 3], 0}, {0.05782313025668381, 
                1.6656633103316818`}, {0.17346939077005144`, 
                4.996989930995046}, {0., 0.}, {0.3469387815401029, 
                9.993979861990091}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                0.23129252102673525`, 6.662653241326727}}], 
              BezierCurve[{{5, 0}, {0.11564626051336763`, 
                3.3313266206633636`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {0.2891156512834191, 
                8.32831655165841}, {3.3333333333333335`, 0}, {
                0.05782313025668381, 1.6656633103316818`}, {
                0.17346939077005144`, 4.996989930995046}, {0., 0.}, {
                0.3469387815401029, 9.993979861990091}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {0.23129252102673525`, 
                6.662653241326727}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9975926696372693, -0.06934598392110335}, {
         0.06934598392110335, -0.9975926696372693}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.6915540933981682, 3.2608072692226613`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.7288852334954206`,
                8.152018173056653}, {Rational[10, 3], 0}, {0.3457770466990841,
                1.6304036346113306`}, {1.0373311400972522`, 
               4.891210903833992}, {0., 0.}, {2.0746622801945045`, 
               9.782421807667983}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.3831081867963364`, 6.521614538445323}}], 
             BezierCurve[{{5, 0}, {0.6915540933981682, 3.2608072692226613`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.7288852334954206`, 8.152018173056653}, {
               3.3333333333333335`, 0}, {0.3457770466990841, 
               1.6304036346113306`}, {1.0373311400972522`, 
               4.891210903833992}, {0., 0.}, {2.0746622801945045`, 
               9.782421807667983}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               1.3831081867963364`, 6.521614538445323}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.6915540933981682, 3.2608072692226613`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.7288852334954206`, 8.152018173056653}, {
                Rational[10, 3], 0}, {0.3457770466990841, 
                1.6304036346113306`}, {1.0373311400972522`, 
                4.891210903833992}, {0., 0.}, {2.0746622801945045`, 
                9.782421807667983}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.3831081867963364`, 6.521614538445323}}], 
              BezierCurve[{{5, 0}, {0.6915540933981682, 
                3.2608072692226613`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {1.7288852334954206`, 
                8.152018173056653}, {3.3333333333333335`, 0}, {
                0.3457770466990841, 1.6304036346113306`}, {
                1.0373311400972522`, 4.891210903833992}, {0., 0.}, {
                2.0746622801945045`, 9.782421807667983}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {1.3831081867963364`, 
                6.521614538445323}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9139155284627628, -0.40590443066641807`}, {
         0.40590443066641807`, -0.9139155284627628}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.44504499189722835`, 
               3.3034899827755355`}, {Rational[5, 3], 0}, {
               Rational[20, 3], 0}, {1.112612479743071, 8.258724956938838}, {
               Rational[10, 3], 0}, {0.22252249594861417`, 
               1.6517449913877678`}, {0.6675674878458425, 
               4.955234974163303}, {0., 0.}, {1.335134975691685, 
               9.910469948326606}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               0.8900899837944567, 6.606979965551071}}], 
             BezierCurve[{{5, 0}, {0.44504499189722835`, 
               3.3034899827755355`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {1.112612479743071, 
               8.258724956938838}, {3.3333333333333335`, 0}, {
               0.22252249594861417`, 1.6517449913877678`}, {
               0.6675674878458425, 4.955234974163303}, {0., 0.}, {
               1.335134975691685, 9.910469948326606}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {0.8900899837944567, 
               6.606979965551071}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.44504499189722835`, 
                3.3034899827755355`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {1.112612479743071, 8.258724956938838}, {
                Rational[10, 3], 0}, {0.22252249594861417`, 
                1.6517449913877678`}, {0.6675674878458425, 
                4.955234974163303}, {0., 0.}, {1.335134975691685, 
                9.910469948326606}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                0.8900899837944567, 6.606979965551071}}], 
              BezierCurve[{{5, 0}, {0.44504499189722835`, 
                3.3034899827755355`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {1.112612479743071, 
                8.258724956938838}, {3.3333333333333335`, 0}, {
                0.22252249594861417`, 1.6517449913877678`}, {
                0.6675674878458425, 4.955234974163303}, {0., 0.}, {
                1.335134975691685, 9.910469948326606}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {0.8900899837944567, 
                6.606979965551071}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9643482919336953, -0.26463630107104436`}, {
         0.26463630107104436`, -0.9643482919336953}}}]]},
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.998815899384556, 2.6675543314951655`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.99703974846139, 
               6.668885828737914}, {Rational[10, 3], 0}, {0.999407949692278, 
               1.3337771657475828`}, {2.9982238490768336`, 
               4.001331497242749}, {0., 0.}, {5.996447698153667, 
               8.002662994485497}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.997631798769112, 5.335108662990331}}], 
             BezierCurve[{{5, 0}, {1.998815899384556, 2.6675543314951655`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               4.99703974846139, 6.668885828737914}, {
               3.3333333333333335`, 0}, {0.999407949692278, 
               1.3337771657475828`}, {2.9982238490768336`, 
               4.001331497242749}, {0., 0.}, {5.996447698153667, 
               8.002662994485497}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.997631798769112, 5.335108662990331}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.998815899384556, 2.6675543314951655`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.99703974846139, 
                6.668885828737914}, {Rational[10, 3], 0}, {0.999407949692278, 
                1.3337771657475828`}, {2.9982238490768336`, 
                4.001331497242749}, {0., 0.}, {5.996447698153667, 
                8.002662994485497}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.997631798769112, 5.335108662990331}}], 
              BezierCurve[{{5, 0}, {1.998815899384556, 2.6675543314951655`}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                4.99703974846139, 6.668885828737914}, {
                3.3333333333333335`, 0}, {0.999407949692278, 
                1.3337771657475828`}, {2.9982238490768336`, 
                4.001331497242749}, {0., 0.}, {5.996447698153667, 
                8.002662994485497}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                3.997631798769112, 5.335108662990331}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.2808523000661517, -0.9597510018476418}, {
         0.9597510018476418, -0.2808523000661517}}, {{-0.8422439710951046, 
         0.5390965527194073}, {-0.5390965527194073, -0.8422439710951046}}}]], 
      
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.1507607311271646`, 3.1283958909969796`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {2.8769018278179113`,
                7.820989727492449}, {Rational[10, 3], 0}, {0.5753803655635823,
                1.5641979454984898`}, {1.7261410966907467`, 
               4.69259383649547}, {0., 0.}, {3.4522821933814933`, 
               9.38518767299094}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               2.301521462254329, 6.256791781993959}}], 
             BezierCurve[{{5, 0}, {1.1507607311271646`, 
               3.1283958909969796`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {2.8769018278179113`, 
               7.820989727492449}, {3.3333333333333335`, 0}, {
               0.5753803655635823, 1.5641979454984898`}, {1.7261410966907467`,
                4.69259383649547}, {0., 0.}, {3.4522821933814933`, 
               9.38518767299094}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               2.301521462254329, 6.256791781993959}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.1507607311271646`, 
                3.1283958909969796`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {2.8769018278179113`, 
                7.820989727492449}, {Rational[10, 3], 0}, {0.5753803655635823,
                 1.5641979454984898`}, {1.7261410966907467`, 
                4.69259383649547}, {0., 0.}, {3.4522821933814933`, 
                9.38518767299094}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                2.301521462254329, 6.256791781993959}}], 
              BezierCurve[{{5, 0}, {1.1507607311271646`, 
                3.1283958909969796`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {2.8769018278179113`, 
                7.820989727492449}, {3.3333333333333335`, 0}, {
                0.5753803655635823, 1.5641979454984898`}, {
                1.7261410966907467`, 4.69259383649547}, {0., 0.}, {
                3.4522821933814933`, 9.38518767299094}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {2.301521462254329, 
                6.256791781993959}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.7616349531452213, -0.6480063257002022}, {
         0.6480063257002022, -0.7616349531452213}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.2762683783746858`, 2.4351002814509695`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.690670945936714, 
               6.087750703627424}, {Rational[10, 3], 0}, {1.1381341891873429`,
                1.2175501407254847`}, {3.4144025675620284`, 
               3.6526504221764537`}, {0., 0.}, {6.828805135124057, 
               7.3053008443529075`}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               4.5525367567493715`, 4.870200562901939}}], 
             BezierCurve[{{5, 0}, {2.2762683783746858`, 
               2.4351002814509695`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {5.690670945936714, 
               6.087750703627424}, {3.3333333333333335`, 0}, {
               1.1381341891873429`, 1.2175501407254847`}, {
               3.4144025675620284`, 3.6526504221764537`}, {0., 0.}, {
               6.828805135124057, 7.3053008443529075`}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {4.5525367567493715`, 
               4.870200562901939}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.2762683783746858`, 
                2.4351002814509695`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {5.690670945936714, 6.087750703627424}, {
                Rational[10, 3], 0}, {1.1381341891873429`, 
                1.2175501407254847`}, {3.4144025675620284`, 
                3.6526504221764537`}, {0., 0.}, {6.828805135124057, 
                7.3053008443529075`}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                4.5525367567493715`, 4.870200562901939}}], 
              BezierCurve[{{5, 0}, {2.2762683783746858`, 
                2.4351002814509695`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {5.690670945936714, 
                6.087750703627424}, {3.3333333333333335`, 0}, {
                1.1381341891873429`, 1.2175501407254847`}, {
                3.4144025675620284`, 3.6526504221764537`}, {0., 0.}, {
                6.828805135124057, 7.3053008443529075`}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {4.5525367567493715`, 
                4.870200562901939}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.06734840853006628, -0.997729518390865}, {
         0.997729518390865, -0.06734840853006628}}, {{-0.9909283837369346, 
         0.1343909904141885}, {-0.1343909904141885, -0.9909283837369346}}}]], 
      
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.3462839620061699, 3.3152976531178044`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {0.8657099050154248, 
               8.288244132794512}, {Rational[10, 3], 0}, {
               0.17314198100308495`, 1.6576488265589022`}, {
               0.5194259430092548, 4.972946479676707}, {0., 0.}, {
               1.0388518860185096`, 9.945892959353413}, {10, 0}, {0, 0}, {
               Rational[25, 3], 0}, {0.6925679240123398, 6.630595306235609}}],
              BezierCurve[{{5, 0}, {0.3462839620061699, 
               3.3152976531178044`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {0.8657099050154248, 
               8.288244132794512}, {3.3333333333333335`, 0}, {
               0.17314198100308495`, 1.6576488265589022`}, {
               0.5194259430092548, 4.972946479676707}, {0., 0.}, {
               1.0388518860185096`, 9.945892959353413}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {0.6925679240123398, 
               6.630595306235609}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.3462839620061699, 3.3152976531178044`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {0.8657099050154248,
                 8.288244132794512}, {Rational[10, 3], 0}, {
                0.17314198100308495`, 1.6576488265589022`}, {
                0.5194259430092548, 4.972946479676707}, {0., 0.}, {
                1.0388518860185096`, 9.945892959353413}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {0.6925679240123398, 
                6.630595306235609}}], 
              BezierCurve[{{5, 0}, {0.3462839620061699, 
                3.3152976531178044`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {0.8657099050154248, 
                8.288244132794512}, {3.3333333333333335`, 0}, {
                0.17314198100308495`, 1.6576488265589022`}, {
                0.5194259430092548, 4.972946479676707}, {0., 0.}, {
                1.0388518860185096`, 9.945892959353413}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {0.6925679240123398, 
                6.630595306235609}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.9784157351783157, -0.20664619317925018`}, {
         0.20664619317925018`, -0.9784157351783157}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.8202226929507457`, 2.7924721053536503`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.550556732376864, 
               6.981180263384126}, {Rational[10, 3], 0}, {0.9101113464753728, 
               1.3962360526768252`}, {2.7303340394261184`, 
               4.188708158030475}, {0., 0.}, {5.460668078852237, 
               8.37741631606095}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.6404453859014914`, 5.584944210707301}}], 
             BezierCurve[{{5, 0}, {1.8202226929507457`, 
               2.7924721053536503`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {4.550556732376864, 
               6.981180263384126}, {3.3333333333333335`, 0}, {
               0.9101113464753728, 1.3962360526768252`}, {2.7303340394261184`,
                4.188708158030475}, {0., 0.}, {5.460668078852237, 
               8.37741631606095}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.6404453859014914`, 5.584944210707301}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.8202226929507457`, 
                2.7924721053536503`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {4.550556732376864, 6.981180263384126}, {
                Rational[10, 3], 0}, {0.9101113464753728, 
                1.3962360526768252`}, {2.7303340394261184`, 
                4.188708158030475}, {0., 0.}, {5.460668078852237, 
                8.37741631606095}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.6404453859014914`, 5.584944210707301}}], 
              BezierCurve[{{5, 0}, {1.8202226929507457`, 
                2.7924721053536503`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {4.550556732376864, 
                6.981180263384126}, {3.3333333333333335`, 0}, {
                0.9101113464753728, 1.3962360526768252`}, {
                2.7303340394261184`, 4.188708158030475}, {0., 0.}, {
                5.460668078852237, 8.37741631606095}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {3.6404453859014914`, 
                5.584944210707301}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.40362208265208466`, -0.9149257972073985}, {
         0.9149257972073985, -0.40362208265208466`}}, {{-0.6741784287911875, 
         0.738568511481938}, {-0.738568511481938, -0.6741784287911875}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.2785812733489865`, 2.432936187378211}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.6964531833724665`,
                6.082340468445527}, {Rational[10, 3], 0}, {
               1.1392906366744933`, 1.2164680936891055`}, {
               3.4178719100234796`, 3.649404281067316}, {0., 0.}, {
               6.835743820046959, 7.298808562134632}, {10, 0}, {0, 0}, {
               Rational[25, 3], 0}, {4.557162546697973, 4.865872374756422}}], 
             BezierCurve[{{5, 0}, {2.2785812733489865`, 2.432936187378211}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               5.6964531833724665`, 6.082340468445527}, {
               3.3333333333333335`, 0}, {1.1392906366744933`, 
               1.2164680936891055`}, {3.4178719100234796`, 
               3.649404281067316}, {0., 0.}, {6.835743820046959, 
               7.298808562134632}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               4.557162546697973, 4.865872374756422}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.2785812733489865`, 2.432936187378211}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                5.6964531833724665`, 6.082340468445527}, {
                Rational[10, 3], 0}, {1.1392906366744933`, 
                1.2164680936891055`}, {3.4178719100234796`, 
                3.649404281067316}, {0., 0.}, {6.835743820046959, 
                7.298808562134632}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                4.557162546697973, 4.865872374756422}}], 
              BezierCurve[{{5, 0}, {2.2785812733489865`, 2.432936187378211}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                5.6964531833724665`, 6.082340468445527}, {
                3.3333333333333335`, 0}, {1.1392906366744933`, 
                1.2164680936891055`}, {3.4178719100234796`, 
                3.649404281067316}, {0., 0.}, {6.835743820046959, 
                7.298808562134632}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                4.557162546697973, 4.865872374756422}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.0654521285337964, -0.9978557104463528}, {
         0.9978557104463528, -0.0654521285337964}}, {{-0.9914320377407908, 
         0.1306235604366348}, {-0.1306235604366348, \
-0.9914320377407908}}}]]},
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.7524143250725011, 3.247304081008861}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.8810358126812525`,
                8.118260202522153}, {Rational[10, 3], 0}, {
               0.37620716253625053`, 1.6236520405044306`}, {
               1.1286214876087515`, 4.8709561215132915`}, {0., 0.}, {
               2.257242975217503, 9.741912243026583}, {10, 0}, {0, 0}, {
               Rational[25, 3], 0}, {1.5048286501450021`, 
               6.494608162017722}}], 
             BezierCurve[{{5, 0}, {0.7524143250725011, 3.247304081008861}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.8810358126812525`, 8.118260202522153}, {
               3.3333333333333335`, 0}, {0.37620716253625053`, 
               1.6236520405044306`}, {1.1286214876087515`, 
               4.8709561215132915`}, {0., 0.}, {2.257242975217503, 
               9.741912243026583}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               1.5048286501450021`, 6.494608162017722}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.7524143250725011, 3.247304081008861}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.8810358126812525`, 8.118260202522153}, {
                Rational[10, 3], 0}, {0.37620716253625053`, 
                1.6236520405044306`}, {1.1286214876087515`, 
                4.8709561215132915`}, {0., 0.}, {2.257242975217503, 
                9.741912243026583}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.5048286501450021`, 6.494608162017722}}], 
              BezierCurve[{{5, 0}, {0.7524143250725011, 3.247304081008861}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                1.8810358126812525`, 8.118260202522153}, {
                3.3333333333333335`, 0}, {0.37620716253625053`, 
                1.6236520405044306`}, {1.1286214876087515`, 
                4.8709561215132915`}, {0., 0.}, {2.257242975217503, 
                9.741912243026583}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                1.5048286501450021`, 6.494608162017722}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.8980970830166247, -0.43979725951514287`}, {
         0.43979725951514287`, -0.8980970830166247}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.0392601913864667`, 2.6367648706203486`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.0981504784661675`,
                6.5919121765508715`}, {Rational[10, 3], 0}, {
               1.0196300956932334`, 1.3183824353101743`}, {
               3.0588902870797003`, 3.9551473059305224`}, {0., 0.}, {
               6.117780574159401, 7.910294611861045}, {10, 0}, {0, 0}, {
               Rational[25, 3], 0}, {4.0785203827729335`, 
               5.273529741240697}}], 
             BezierCurve[{{5, 0}, {2.0392601913864667`, 
               2.6367648706203486`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {5.0981504784661675`, 
               6.5919121765508715`}, {3.3333333333333335`, 0}, {
               1.0196300956932334`, 1.3183824353101743`}, {
               3.0588902870797003`, 3.9551473059305224`}, {0., 0.}, {
               6.117780574159401, 7.910294611861045}, {10, 0}, {0, 0}, {
               8.333333333333334, 0}, {4.0785203827729335`, 
               5.273529741240697}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.0392601913864667`, 
                2.6367648706203486`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {5.0981504784661675`, 
                6.5919121765508715`}, {Rational[10, 3], 0}, {
                1.0196300956932334`, 1.3183824353101743`}, {
                3.0588902870797003`, 3.9551473059305224`}, {0., 0.}, {
                6.117780574159401, 7.910294611861045}, {10, 0}, {0, 0}, {
                Rational[25, 3], 0}, {4.0785203827729335`, 
                5.273529741240697}}], 
              BezierCurve[{{5, 0}, {2.0392601913864667`, 
                2.6367648706203486`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {5.0981504784661675`, 
                6.5919121765508715`}, {3.3333333333333335`, 0}, {
                1.0196300956932334`, 1.3183824353101743`}, {
                3.0588902870797003`, 3.9551473059305224`}, {0., 0.}, {
                6.117780574159401, 7.910294611861045}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {4.0785203827729335`, 
                5.273529741240697}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.2514552169287578, -0.9678689342464254}, {
         0.9678689342464254, -0.2514552169287578}}, {{-0.8735405477586228, 
         0.486751385639081}, {-0.486751385639081, -0.8735405477586228}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.7828687626211592`, 2.8164676611636796`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.457171906552898, 
               7.0411691529092}, {Rational[10, 3], 0}, {0.8914343813105796, 
               1.4082338305818398`}, {2.6743031439317386`, 
               4.2247014917455195`}, {0., 0.}, {5.348606287863477, 
               8.449402983491039}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.5657375252423185`, 5.632935322327359}}], 
             BezierCurve[{{5, 0}, {1.7828687626211592`, 
               2.8164676611636796`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {4.457171906552898, 7.0411691529092}, {
               3.3333333333333335`, 0}, {0.8914343813105796, 
               1.4082338305818398`}, {2.6743031439317386`, 
               4.2247014917455195`}, {0., 0.}, {5.348606287863477, 
               8.449402983491039}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.5657375252423185`, 5.632935322327359}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.7828687626211592`, 
                2.8164676611636796`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {4.457171906552898, 7.0411691529092}, {
                Rational[10, 3], 0}, {0.8914343813105796, 
                1.4082338305818398`}, {2.6743031439317386`, 
                4.2247014917455195`}, {0., 0.}, {5.348606287863477, 
                8.449402983491039}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.5657375252423185`, 5.632935322327359}}], 
              BezierCurve[{{5, 0}, {1.7828687626211592`, 
                2.8164676611636796`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {4.457171906552898, 7.0411691529092}, {
                3.3333333333333335`, 0}, {0.8914343813105796, 
                1.4082338305818398`}, {2.6743031439317386`, 
                4.2247014917455195`}, {0., 0.}, {5.348606287863477, 
                8.449402983491039}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                3.5657375252423185`, 5.632935322327359}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.4278482155485456, -0.9038505985238519}, {
         0.9038505985238519, -0.4278482155485456}}, {{-0.6338918089038507, 
         0.7734217314018297}, {-0.7734217314018297, -0.6338918089038507}}}]], 
      
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.2495874977630896`, 3.0902495362907656`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.1239687444077244`,
                7.725623840726914}, {Rational[10, 3], 0}, {0.6247937488815448,
                1.5451247681453828`}, {1.8743812466446343`, 
               4.635374304436148}, {0., 0.}, {3.7487624932892687`, 
               9.270748608872296}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               2.4991749955261793`, 6.180499072581531}}], 
             BezierCurve[{{5, 0}, {1.2495874977630896`, 
               3.0902495362907656`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {3.1239687444077244`, 
               7.725623840726914}, {3.3333333333333335`, 0}, {
               0.6247937488815448, 1.5451247681453828`}, {1.8743812466446343`,
                4.635374304436148}, {0., 0.}, {3.7487624932892687`, 
               9.270748608872296}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               2.4991749955261793`, 6.180499072581531}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.2495874977630896`, 
                3.0902495362907656`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {3.1239687444077244`, 
                7.725623840726914}, {Rational[10, 3], 0}, {0.6247937488815448,
                 1.5451247681453828`}, {1.8743812466446343`, 
                4.635374304436148}, {0., 0.}, {3.7487624932892687`, 
                9.270748608872296}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                2.4991749955261793`, 6.180499072581531}}], 
              BezierCurve[{{5, 0}, {1.2495874977630896`, 
                3.0902495362907656`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {3.1239687444077244`, 
                7.725623840726914}, {3.3333333333333335`, 0}, {
                0.6247937488815448, 1.5451247681453828`}, {
                1.8743812466446343`, 4.635374304436148}, {0., 0.}, {
                3.7487624932892687`, 9.270748608872296}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {2.4991749955261793`, 
                6.180499072581531}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.7189355953781524, -0.6950766933930826}, {
         0.6950766933930826, -0.7189355953781524}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.7540099734167082, 3.2469339492972824`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.8850249335417706`,
                8.117334873243205}, {Rational[10, 3], 0}, {0.3770049867083541,
                1.6234669746486412`}, {1.1310149601250623`, 
               4.870400923945923}, {0., 0.}, {2.2620299202501246`, 
               9.740801847891847}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.5080199468334163`, 6.493867898594565}}], 
             BezierCurve[{{5, 0}, {0.7540099734167082, 3.2469339492972824`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.8850249335417706`, 8.117334873243205}, {
               3.3333333333333335`, 0}, {0.3770049867083541, 
               1.6234669746486412`}, {1.1310149601250623`, 
               4.870400923945923}, {0., 0.}, {2.2620299202501246`, 
               9.740801847891847}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               1.5080199468334163`, 6.493867898594565}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.7540099734167082, 3.2469339492972824`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.8850249335417706`, 8.117334873243205}, {
                Rational[10, 3], 0}, {0.3770049867083541, 
                1.6234669746486412`}, {1.1310149601250623`, 
                4.870400923945923}, {0., 0.}, {2.2620299202501246`, 
                9.740801847891847}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.5080199468334163`, 6.493867898594565}}], 
              BezierCurve[{{5, 0}, {0.7540099734167082, 
                3.2469339492972824`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {1.8850249335417706`, 
                8.117334873243205}, {3.3333333333333335`, 0}, {
                0.3770049867083541, 1.6234669746486412`}, {
                1.1310149601250623`, 4.870400923945923}, {0., 0.}, {
                2.2620299202501246`, 9.740801847891847}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {1.5080199468334163`, 
                6.493867898594565}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.8976644127978644, -0.44067970454318117`}, {
         0.44067970454318117`, -0.8976644127978644}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.6825121308806716`, 2.8775447938390974`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {4.2062803272016795`,
                7.193861984597744}, {Rational[10, 3], 0}, {0.8412560654403358,
                1.4387723969195487`}, {2.5237681963210075`, 
               4.316317190758646}, {0., 0.}, {5.047536392642015, 
               8.632634381517292}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.3650242617613433`, 5.755089587678195}}], 
             BezierCurve[{{5, 0}, {1.6825121308806716`, 
               2.8775447938390974`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {4.2062803272016795`, 
               7.193861984597744}, {3.3333333333333335`, 0}, {
               0.8412560654403358, 1.4387723969195487`}, {2.5237681963210075`,
                4.316317190758646}, {0., 0.}, {5.047536392642015, 
               8.632634381517292}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.3650242617613433`, 5.755089587678195}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.6825121308806716`, 
                2.8775447938390974`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {4.2062803272016795`, 
                7.193861984597744}, {Rational[10, 3], 0}, {0.8412560654403358,
                 1.4387723969195487`}, {2.5237681963210075`, 
                4.316317190758646}, {0., 0.}, {5.047536392642015, 
                8.632634381517292}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.3650242617613433`, 5.755089587678195}}], 
              BezierCurve[{{5, 0}, {1.6825121308806716`, 
                2.8775447938390974`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {4.2062803272016795`, 
                7.193861984597744}, {3.3333333333333335`, 0}, {
                0.8412560654403358, 1.4387723969195487`}, {
                2.5237681963210075`, 4.316317190758646}, {0., 0.}, {
                5.047536392642015, 8.632634381517292}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {3.3650242617613433`, 
                5.755089587678195}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.49044752729908875`, -0.8714707241016244}, {
         0.8714707241016244, -0.49044752729908875`}}, {{-0.5189224459324192, 
         0.8548213234983761}, {-0.8548213234983761, \
-0.5189224459324192}}}]]},
     {
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.5546505510526407`, 2.9485882681756084`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.8866263776316017`,
                7.371470670439021}, {Rational[10, 3], 0}, {0.7773252755263204,
                1.4742941340878042`}, {2.3319758265789607`, 
               4.422882402263412}, {0., 0.}, {4.6639516531579215`, 
               8.845764804526825}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               3.1093011021052814`, 5.897176536351217}}], 
             BezierCurve[{{5, 0}, {1.5546505510526407`, 
               2.9485882681756084`}, {1.6666666666666667`, 0}, {
               6.666666666666667, 0}, {3.8866263776316017`, 
               7.371470670439021}, {3.3333333333333335`, 0}, {
               0.7773252755263204, 1.4742941340878042`}, {2.3319758265789607`,
                4.422882402263412}, {0., 0.}, {4.6639516531579215`, 
               8.845764804526825}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               3.1093011021052814`, 5.897176536351217}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.5546505510526407`, 
                2.9485882681756084`}, {Rational[5, 3], 0}, {
                Rational[20, 3], 0}, {3.8866263776316017`, 
                7.371470670439021}, {Rational[10, 3], 0}, {0.7773252755263204,
                 1.4742941340878042`}, {2.3319758265789607`, 
                4.422882402263412}, {0., 0.}, {4.6639516531579215`, 
                8.845764804526825}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                3.1093011021052814`, 5.897176536351217}}], 
              BezierCurve[{{5, 0}, {1.5546505510526407`, 
                2.9485882681756084`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {3.8866263776316017`, 
                7.371470670439021}, {3.3333333333333335`, 0}, {
                0.7773252755263204, 1.4742941340878042`}, {
                2.3319758265789607`, 4.422882402263412}, {0., 0.}, {
                4.6639516531579215`, 8.845764804526825}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {3.1093011021052814`, 
                5.897176536351217}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.5649510995401098, -0.8251243876703809}, {
         0.8251243876703809, -0.5649510995401098}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {2.2873729678543904`, 2.424672352512832}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.718432419635976, 
               6.06168088128208}, {Rational[10, 3], 0}, {1.1436864839271952`, 
               1.212336176256416}, {3.431059451781585, 3.6370085287692477`}, {
               0., 0.}, {6.86211890356317, 7.2740170575384955`}, {10, 0}, {0, 
               0}, {Rational[25, 3], 0}, {4.574745935708781, 
               4.849344705025664}}], 
             BezierCurve[{{5, 0}, {2.2873729678543904`, 2.424672352512832}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               5.718432419635976, 6.06168088128208}, {
               3.3333333333333335`, 0}, {1.1436864839271952`, 
               1.212336176256416}, {3.431059451781585, 3.6370085287692477`}, {
               0., 0.}, {6.86211890356317, 7.2740170575384955`}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {4.574745935708781, 
               4.849344705025664}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {2.2873729678543904`, 2.424672352512832}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {5.718432419635976, 
                6.06168088128208}, {Rational[10, 3], 0}, {1.1436864839271952`,
                 1.212336176256416}, {3.431059451781585, 
                3.6370085287692477`}, {0., 0.}, {6.86211890356317, 
                7.2740170575384955`}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                4.574745935708781, 4.849344705025664}}], 
              BezierCurve[{{5, 0}, {2.2873729678543904`, 2.424672352512832}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                5.718432419635976, 6.06168088128208}, {
                3.3333333333333335`, 0}, {1.1436864839271952`, 
                1.212336176256416}, {3.431059451781585, 
                3.6370085287692477`}, {0., 0.}, {6.86211890356317, 
                7.2740170575384955`}, {10, 0}, {0, 0}, {
                8.333333333333334, 0}, {4.574745935708781, 
                4.849344705025664}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.058226483067220065`, -0.9983033991075172}, {
         0.9983033991075172, -0.058226483067220065`}}, {{-0.9932193533392455, 
         0.11625539192816417`}, {-0.11625539192816417`, \
-0.9932193533392455}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.7101640300663986, 3.256804900744127}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.7754100751659967`,
                8.142012251860319}, {Rational[10, 3], 0}, {0.3550820150331993,
                1.6284024503720635`}, {1.065246045099598, 
               4.885207351116191}, {0., 0.}, {2.130492090199196, 
               9.770414702232381}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.4203280601327972`, 6.513609801488254}}], 
             BezierCurve[{{5, 0}, {0.7101640300663986, 3.256804900744127}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.7754100751659967`, 8.142012251860319}, {
               3.3333333333333335`, 0}, {0.3550820150331993, 
               1.6284024503720635`}, {1.065246045099598, 4.885207351116191}, {
               0., 0.}, {2.130492090199196, 9.770414702232381}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {1.4203280601327972`, 
               6.513609801488254}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.7101640300663986, 3.256804900744127}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                1.7754100751659967`, 8.142012251860319}, {
                Rational[10, 3], 0}, {0.3550820150331993, 
                1.6284024503720635`}, {1.065246045099598, 
                4.885207351116191}, {0., 0.}, {2.130492090199196, 
                9.770414702232381}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.4203280601327972`, 6.513609801488254}}], 
              BezierCurve[{{5, 0}, {0.7101640300663986, 3.256804900744127}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                1.7754100751659967`, 8.142012251860319}, {
                3.3333333333333335`, 0}, {0.3550820150331993, 
                1.6284024503720635`}, {1.065246045099598, 
                4.885207351116191}, {0., 0.}, {2.130492090199196, 
                9.770414702232381}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                1.4203280601327972`, 6.513609801488254}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.9092200690719733, -0.41631582482144036`}, {
         0.41631582482144036`, -0.9092200690719733}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.5880605976955626`, 2.930729371531586}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.9701514942389067`,
                7.326823428828964}, {Rational[10, 3], 0}, {0.7940302988477813,
                1.465364685765793}, {2.382090896543344, 4.396094057297378}, {
               0., 0.}, {4.764181793086688, 8.792188114594756}, {10, 0}, {0, 
               0}, {Rational[25, 3], 0}, {3.1761211953911253`, 
               5.861458743063172}}], 
             BezierCurve[{{5, 0}, {1.5880605976955626`, 2.930729371531586}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               3.9701514942389067`, 7.326823428828964}, {
               3.3333333333333335`, 0}, {0.7940302988477813, 
               1.465364685765793}, {2.382090896543344, 4.396094057297378}, {
               0., 0.}, {4.764181793086688, 8.792188114594756}, {10, 0}, {0, 
               0}, {8.333333333333334, 0}, {3.1761211953911253`, 
               5.861458743063172}}]]]}}, GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.5880605976955626`, 2.930729371531586}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                3.9701514942389067`, 7.326823428828964}, {
                Rational[10, 3], 0}, {0.7940302988477813, 
                1.465364685765793}, {2.382090896543344, 4.396094057297378}, {
                0., 0.}, {4.764181793086688, 8.792188114594756}, {10, 0}, {0, 
                0}, {Rational[25, 3], 0}, {3.1761211953911253`, 
                5.861458743063172}}], 
              BezierCurve[{{5, 0}, {1.5880605976955626`, 2.930729371531586}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                3.9701514942389067`, 7.326823428828964}, {
                3.3333333333333335`, 0}, {0.7940302988477813, 
                1.465364685765793}, {2.382090896543344, 4.396094057297378}, {
                0., 0.}, {4.764181793086688, 8.792188114594756}, {10, 0}, {0, 
                0}, {8.333333333333334, 0}, {3.1761211953911253`, 
                5.861458743063172}}]]]}}, {{{1, 0}, {0, -1}}, {0, 0}}]}, {{{
          1., 0}, {0, 1.}}, {{-0.5460514368484263, -0.8377516507389103}, {
         0.8377516507389103, -0.5460514368484263}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {1.370175523259311, 3.0387053405310933`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {3.4254388081482774`,
                7.596763351327733}, {Rational[10, 3], 0}, {0.6850877616296555,
                1.5193526702655467`}, {2.0552632848889663`, 
               4.558058010796639}, {0., 0.}, {4.1105265697779325`, 
               9.116116021593278}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               2.740351046518622, 6.077410681062187}}], 
             BezierCurve[{{5, 0}, {1.370175523259311, 3.0387053405310933`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               3.4254388081482774`, 7.596763351327733}, {
               3.3333333333333335`, 0}, {0.6850877616296555, 
               1.5193526702655467`}, {2.0552632848889663`, 
               4.558058010796639}, {0., 0.}, {4.1105265697779325`, 
               9.116116021593278}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               2.740351046518622, 6.077410681062187}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {1.370175523259311, 3.0387053405310933`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {
                3.4254388081482774`, 7.596763351327733}, {
                Rational[10, 3], 0}, {0.6850877616296555, 
                1.5193526702655467`}, {2.0552632848889663`, 
                4.558058010796639}, {0., 0.}, {4.1105265697779325`, 
                9.116116021593278}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                2.740351046518622, 6.077410681062187}}], 
              BezierCurve[{{5, 0}, {1.370175523259311, 3.0387053405310933`}, {
                1.6666666666666667`, 0}, {6.666666666666667, 0}, {
                3.4254388081482774`, 7.596763351327733}, {
                3.3333333333333335`, 0}, {0.6850877616296555, 
                1.5193526702655467`}, {2.0552632848889663`, 
                4.558058010796639}, {0., 0.}, {4.1105265697779325`, 
                9.116116021593278}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                2.740351046518622, 6.077410681062187}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.6620714263829933, -0.7494407423987495}, {
         0.7494407423987495, -0.6620714263829933}}}]], 
      GraphicsBox[GeometricTransformationBox[{
         {GrayLevel[0.25], 
          {FaceForm[RGBColor[
           0.27823319999999996`, 0.04860976, 0.5418926000000001]], 
           FilledCurveBox[NCache[
            BezierCurve[{{5, 0}, {0.5203829564759728, 3.2924630126579153`}, {
               Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.300957391189932, 
               8.231157531644788}, {Rational[10, 3], 0}, {0.2601914782379864, 
               1.6462315063289576`}, {0.7805744347139592, 
               4.938694518986873}, {0., 0.}, {1.5611488694279183`, 
               9.877389037973746}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
               1.0407659129519455`, 6.584926025315831}}], 
             BezierCurve[{{5, 0}, {0.5203829564759728, 3.2924630126579153`}, {
               1.6666666666666667`, 0}, {6.666666666666667, 0}, {
               1.300957391189932, 8.231157531644788}, {
               3.3333333333333335`, 0}, {0.2601914782379864, 
               1.6462315063289576`}, {0.7805744347139592, 
               4.938694518986873}, {0., 0.}, {1.5611488694279183`, 
               9.877389037973746}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
               1.0407659129519455`, 6.584926025315831}}]]]}}, 
         GeometricTransformationBox[
          {GrayLevel[0.25], 
           {FaceForm[RGBColor[0.2635842, 0.22089488000000002`, 0.7407538]], 
            FilledCurveBox[NCache[
             BezierCurve[{{5, 0}, {0.5203829564759728, 3.2924630126579153`}, {
                Rational[5, 3], 0}, {Rational[20, 3], 0}, {1.300957391189932, 
                8.231157531644788}, {Rational[10, 3], 0}, {0.2601914782379864,
                 1.6462315063289576`}, {0.7805744347139592, 
                4.938694518986873}, {0., 0.}, {1.5611488694279183`, 
                9.877389037973746}, {10, 0}, {0, 0}, {Rational[25, 3], 0}, {
                1.0407659129519455`, 6.584926025315831}}], 
              BezierCurve[{{5, 0}, {0.5203829564759728, 
                3.2924630126579153`}, {1.6666666666666667`, 0}, {
                6.666666666666667, 0}, {1.300957391189932, 
                8.231157531644788}, {3.3333333333333335`, 0}, {
                0.2601914782379864, 1.6462315063289576`}, {0.7805744347139592,
                 4.938694518986873}, {0., 0.}, {1.5611488694279183`, 
                9.877389037973746}, {10, 0}, {0, 0}, {8.333333333333334, 0}, {
                1.0407659129519455`, 6.584926025315831}}]]]}}, {{{1, 0}, {
           0, -1}}, {0, 0}}]}, {{{1., 0}, {
          0, 1.}}, {{-0.9512562841496787, -0.30840149459064853`}, {
         0.30840149459064853`, -0.9512562841496787}}}]]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"],
  StripOnInput->False,
  Magnification->0.5 Inherited]], "Output",
 CellChangeTimes->{{3.779549811944995*^9, 3.7795499475882673`*^9}, 
   3.77954997929321*^9, 3.7795507186420794`*^9, 3.7795508536919327`*^9, 
   3.77955207934709*^9, 3.779554208437293*^9, 3.779554778040555*^9, 
   3.7795548242043867`*^9, 3.7795550471890697`*^9, 3.7803523284071836`*^9, 
   3.780396926665358*^9, 3.780397447295061*^9, 3.780399860278551*^9, 
   3.780400234814337*^9, 3.780400374159281*^9, 3.7804011289042664`*^9, 
   3.780401291533985*^9, 3.78040181268211*^9, 3.780402267250622*^9, 
   3.7804023959639874`*^9},
 CellLabel->"Out[2]=",
 CellID->18809055]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Colored mandala images by blending", "Subsubsection",
 CellChangeTimes->{{3.7792158636693687`*^9, 3.779215891490663*^9}},
 CellLabel->"In[3]:=",
 CellID->977199057],

Cell["Make a list of random mandalas:", "Text",
 CellChangeTimes->{{3.7792112351418953`*^9, 3.779211246425539*^9}},
 CellID->254630178],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "6567", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mandalas", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomMandala", "[", "]"}], ",", "36"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Magnify", "[", 
  RowBox[{"mandalas", ",", "0.3"}], "]"}]}], "Input",
 CellChangeTimes->{{3.779211179985547*^9, 3.779211189658453*^9}, {
  3.7792112480793667`*^9, 3.7792113274661694`*^9}, {3.779211358174468*^9, 
  3.779211375814724*^9}, {3.779211520673983*^9, 3.779211520784211*^9}, {
  3.779216163680296*^9, 3.779216164060556*^9}},
 CellLabel->"In[1]:=",
 CellID->1111221377],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[10, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {Rational[5, 3], 0}, {10, 0}, {
           Rational[25, 3], 0}, {5, 0}, {0, 0}}, {{7.216878364870323, 
           4.166666666666667}, {8.660254037844386, 5}, {0, 0}, {
           2.886751345948129, 1.6666666666666667`}, {1.4433756729740645`, 
           0.8333333333333334}, {3.3333333333333335`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {4.330127018922193, 2.5}, {
           6.666666666666667, 0}, {1.6666666666666667`, 0}, {10, 0}, {
           8.333333333333334, 0}, {5, 0}, {0, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[10, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {Rational[5, 3], 0}, {10, 0}, {
            Rational[25, 3], 0}, {5, 0}, {0, 0}}, {{7.216878364870323, 
            4.166666666666667}, {8.660254037844386, 5}, {0, 0}, {
            2.886751345948129, 1.6666666666666667`}, {1.4433756729740645`, 
            0.8333333333333334}, {3.3333333333333335`, 0}, {5.773502691896258,
             3.3333333333333335`}, {4.330127018922193, 2.5}, {
            6.666666666666667, 0}, {1.6666666666666667`, 0}, {10, 0}, {
            8.333333333333334, 0}, {5, 0}, {0, 0}}]]}, {{{1, 0}, {0, -1}}, {0,
          0}}]}, NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[25, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
            Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {0, 0}, {
            5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {
            Rational[10, 3], 0}}], 
          BezierCurve[{{8.333333333333334, 0}, {5.773502691896258, 
            3.3333333333333335`}, {0, 0}, {6.666666666666667, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {10, 0}, {
            7.216878364870323, 4.166666666666667}, {4.330127018922193, 2.5}, {
            2.886751345948129, 1.6666666666666667`}, {5, 0}, {0, 0}, {
            8.660254037844386, 5}, {1.6666666666666667`, 0}, {
            3.3333333333333335`, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[25, 3], 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
             Rational[20, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {5, 0}, {0, 0}, {
             5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {
             Rational[10, 3], 0}}], 
           BezierCurve[{{8.333333333333334, 0}, {5.773502691896258, 
             3.3333333333333335`}, {0, 0}, {6.666666666666667, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {10, 0}, {
             7.216878364870323, 4.166666666666667}, {4.330127018922193, 
             2.5}, {2.886751345948129, 1.6666666666666667`}, {5, 0}, {0, 0}, {
             8.660254037844386, 5}, {1.6666666666666667`, 0}, {
             3.3333333333333335`, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{5, 0}, {0, 0}, {Rational[10, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[5, 3], 0}, {10, 
           0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}}, {{5,
            0}, {0, 0}, {3.3333333333333335`, 0}, {7.216878364870323, 
           4.166666666666667}, {0, 0}, {2.886751345948129, 
           1.6666666666666667`}, {1.6666666666666667`, 0}, {10, 0}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           8.333333333333334, 0}, {5.773502691896258, 
           3.3333333333333335`}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{5, 0}, {0, 0}, {Rational[10, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[5, 3], 0}, {10, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}}, {{
            5, 0}, {0, 0}, {3.3333333333333335`, 0}, {7.216878364870323, 
            4.166666666666667}, {0, 0}, {2.886751345948129, 
            1.6666666666666667`}, {1.6666666666666667`, 0}, {10, 0}, {
            4.330127018922193, 2.5}, {6.666666666666667, 0}, {
            8.660254037844386, 5}, {1.4433756729740645`, 
            0.8333333333333334}, {8.333333333333334, 0}, {5.773502691896258, 
            3.3333333333333335`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {Rational[10, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 0}, {10, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {0, 0}, {
           Rational[25, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
           1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
           2.5}, {6.666666666666667, 0}, {3.3333333333333335`, 0}, {
           5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 0}, {10, 0}, {
           7.216878364870323, 4.166666666666667}, {8.660254037844386, 5}, {
           1.6666666666666667`, 0}, {0, 0}, {8.333333333333334, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {Rational[10, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {0, 0}, {10, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {0, 0}, {
            Rational[25, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
            1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
            2.5}, {6.666666666666667, 0}, {3.3333333333333335`, 0}, {
            5.773502691896258, 3.3333333333333335`}, {5, 0}, {0, 0}, {10, 
            0}, {7.216878364870323, 4.166666666666667}, {
            8.660254037844386, 5}, {1.6666666666666667`, 0}, {0, 0}, {
            8.333333333333334, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[20, 3], 0}, {10, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[5, 3], 0}, {Rational[25, 3], 0}, {0, 0}, {5, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {0, 
           0}, {5 3^Rational[1, 2], 5}, {
           5 3^Rational[-1, 2], Rational[5, 3]}}, {{6.666666666666667, 0}, {
           10, 0}, {4.330127018922193, 2.5}, {1.6666666666666667`, 0}, {
           8.333333333333334, 0}, {0, 0}, {5, 0}, {7.216878364870323, 
           4.166666666666667}, {1.4433756729740645`, 0.8333333333333334}, {
           5.773502691896258, 3.3333333333333335`}, {
           3.3333333333333335`, 0}, {0, 0}, {8.660254037844386, 5}, {
           2.886751345948129, 1.6666666666666667`}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[20, 3], 0}, {10, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 3], 0}, {Rational[25, 3], 0}, {0, 0}, {5, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {0, 
            0}, {5 3^Rational[1, 2], 5}, {
            5 3^Rational[-1, 2], Rational[5, 3]}}, {{6.666666666666667, 0}, {
            10, 0}, {4.330127018922193, 2.5}, {1.6666666666666667`, 0}, {
            8.333333333333334, 0}, {0, 0}, {5, 0}, {7.216878364870323, 
            4.166666666666667}, {1.4433756729740645`, 0.8333333333333334}, {
            5.773502691896258, 3.3333333333333335`}, {
            3.3333333333333335`, 0}, {0, 0}, {8.660254037844386, 5}, {
            2.886751345948129, 1.6666666666666667`}}]]}, {{{1, 0}, {0, -1}}, {
         0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {Rational[5, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {0, 
            0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[25, 3], 0}}], 
          BezierCurve[{{6.666666666666667, 0}, {4.330127018922193, 2.5}, {
            3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {5, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {10, 0}, {0, 0}, {
            2.886751345948129, 1.6666666666666667`}, {8.660254037844386, 5}, {
            0, 0}, {5.773502691896258, 3.3333333333333335`}, {
            7.216878364870323, 4.166666666666667}, {
            8.333333333333334, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[20, 3], 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}, {Rational[5, 3], 0}, {5, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {0, 
             0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             5 3^Rational[1, 2], 5}, {0, 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[25, 3], 0}}], 
           BezierCurve[{{6.666666666666667, 0}, {4.330127018922193, 2.5}, {
             3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {5, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {10, 0}, {0, 0}, {
             2.886751345948129, 1.6666666666666667`}, {
             8.660254037844386, 5}, {0, 0}, {5.773502691896258, 
             3.3333333333333335`}, {7.216878364870323, 4.166666666666667}, {
             8.333333333333334, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{5, 0}, {Rational[5, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {0, 
           0}, {10, 0}, {Rational[10, 3], 0}}, {{5, 0}, {
           1.6666666666666667`, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
           6.666666666666667, 0}, {8.660254037844386, 5}, {0, 0}, {
           7.216878364870323, 4.166666666666667}, {4.330127018922193, 2.5}, {
           8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
           0, 0}, {10, 0}, {3.3333333333333335`, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{5, 0}, {Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {0, 
            0}, {10, 0}, {Rational[10, 3], 0}}, {{5, 0}, {
            1.6666666666666667`, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            6.666666666666667, 0}, {8.660254037844386, 5}, {0, 0}, {
            7.216878364870323, 4.166666666666667}, {4.330127018922193, 2.5}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            0, 0}, {10, 0}, {3.3333333333333335`, 0}}]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{0, 0}, {Rational[25, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
           Rational[20, 3], 0}, {10, 0}, {Rational[5, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}}, {{0, 
           0}, {8.333333333333334, 0}, {2.886751345948129, 
           1.6666666666666667`}, {0, 0}, {6.666666666666667, 0}, {10, 0}, {
           1.6666666666666667`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {7.216878364870323, 4.166666666666667}, {
           8.660254037844386, 5}, {3.3333333333333335`, 0}, {
           1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
           2.5}, {5, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{0, 0}, {Rational[25, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
            Rational[20, 3], 0}, {10, 0}, {Rational[5, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}}, {{0, 
            0}, {8.333333333333334, 0}, {2.886751345948129, 
            1.6666666666666667`}, {0, 0}, {6.666666666666667, 0}, {10, 0}, {
            1.6666666666666667`, 0}, {5.773502691896258, 
            3.3333333333333335`}, {7.216878364870323, 4.166666666666667}, {
            8.660254037844386, 5}, {3.3333333333333335`, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {4.330127018922193, 
            2.5}, {5, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{5, 0}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {10, 
            0}}], BezierCurve[{{5, 0}, {0, 0}, {7.216878364870323, 
            4.166666666666667}, {1.4433756729740645`, 0.8333333333333334}, {0,
             0}, {5.773502691896258, 3.3333333333333335`}, {4.330127018922193,
             2.5}, {3.3333333333333335`, 0}, {6.666666666666667, 0}, {
            8.660254037844386, 5}, {1.6666666666666667`, 0}, {
            8.333333333333334, 0}, {2.886751345948129, 1.6666666666666667`}, {
            10, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{5, 0}, {0, 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}, {Rational[20, 3], 0}, {
             5 3^Rational[1, 2], 5}, {Rational[5, 3], 0}, {
             Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {10, 
             0}}], BezierCurve[{{5, 0}, {0, 0}, {7.216878364870323, 
             4.166666666666667}, {1.4433756729740645`, 0.8333333333333334}, {
             0, 0}, {5.773502691896258, 3.3333333333333335`}, {
             4.330127018922193, 2.5}, {3.3333333333333335`, 0}, {
             6.666666666666667, 0}, {8.660254037844386, 5}, {
             1.6666666666666667`, 0}, {8.333333333333334, 0}, {
             2.886751345948129, 1.6666666666666667`}, {10, 0}}]]]}, {{{1, 
         0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{10, 0}, {Rational[10, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
           Rational[5, 3], 0}, {5, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}}, {{10, 0}, {
           3.3333333333333335`, 0}, {7.216878364870323, 4.166666666666667}, {
           8.660254037844386, 5}, {1.4433756729740645`, 0.8333333333333334}, {
           4.330127018922193, 2.5}, {8.333333333333334, 0}, {
           6.666666666666667, 0}, {0, 0}, {1.6666666666666667`, 0}, {5, 0}, {
           2.886751345948129, 1.6666666666666667`}, {5.773502691896258, 
           3.3333333333333335`}, {0, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{10, 0}, {Rational[10, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {0, 0}, {
            Rational[5, 3], 0}, {5, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}}, {{10, 0}, {
            3.3333333333333335`, 0}, {7.216878364870323, 4.166666666666667}, {
            8.660254037844386, 5}, {1.4433756729740645`, 
            0.8333333333333334}, {4.330127018922193, 2.5}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {0, 0}, {
            1.6666666666666667`, 0}, {5, 0}, {2.886751345948129, 
            1.6666666666666667`}, {5.773502691896258, 3.3333333333333335`}, {
            0, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[20, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
           5 3^Rational[1, 2], 5}, {10, 0}, {Rational[10, 3], 0}, {
           Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {0, 
           0}}, {{1.4433756729740645`, 0.8333333333333334}, {
           6.666666666666667, 0}, {2.886751345948129, 1.6666666666666667`}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           0, 0}, {4.330127018922193, 2.5}, {5, 0}, {8.660254037844386, 5}, {
           10, 0}, {3.3333333333333335`, 0}, {8.333333333333334, 0}, {
           5.773502691896258, 3.3333333333333335`}, {0, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[20, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
            5 3^Rational[1, 2], 5}, {10, 0}, {Rational[10, 3], 0}, {
            Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {0, 
            0}}, {{1.4433756729740645`, 0.8333333333333334}, {
            6.666666666666667, 0}, {2.886751345948129, 1.6666666666666667`}, {
            1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
            0, 0}, {4.330127018922193, 2.5}, {5, 0}, {8.660254037844386, 5}, {
            10, 0}, {3.3333333333333335`, 0}, {8.333333333333334, 0}, {
            5.773502691896258, 3.3333333333333335`}, {0, 0}}]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[10, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {10, 
            0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[20, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 3], 0}}], 
          BezierCurve[{{8.660254037844386, 5}, {8.333333333333334, 0}, {5, 
            0}, {1.4433756729740645`, 0.8333333333333334}, {
            3.3333333333333335`, 0}, {0, 0}, {4.330127018922193, 2.5}, {0, 
            0}, {10, 0}, {5.773502691896258, 3.3333333333333335`}, {
            6.666666666666667, 0}, {2.886751345948129, 1.6666666666666667`}, {
            7.216878364870323, 4.166666666666667}, {
            1.6666666666666667`, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{5 3^Rational[1, 2], 5}, {Rational[25, 3], 0}, {5, 
             0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[10, 3], 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {10, 
             0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[20, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[5, 3], 0}}], 
           BezierCurve[{{8.660254037844386, 5}, {8.333333333333334, 0}, {5, 
             0}, {1.4433756729740645`, 0.8333333333333334}, {
             3.3333333333333335`, 0}, {0, 0}, {4.330127018922193, 2.5}, {0, 
             0}, {10, 0}, {5.773502691896258, 3.3333333333333335`}, {
             6.666666666666667, 0}, {2.886751345948129, 
             1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {
             1.6666666666666667`, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{0, 0}, {Rational[25, 3], 0}, {Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           Rational[10, 3], 0}, {10, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[20, 3], 0}, {5, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           5 3^Rational[1, 2], 5}}, {{0, 0}, {8.333333333333334, 0}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           0, 0}, {3.3333333333333335`, 0}, {10, 0}, {4.330127018922193, 
           2.5}, {2.886751345948129, 1.6666666666666667`}, {
           1.4433756729740645`, 0.8333333333333334}, {6.666666666666667, 0}, {
           5, 0}, {5.773502691896258, 3.3333333333333335`}, {
           8.660254037844386, 5}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{0, 0}, {Rational[25, 3], 0}, {Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
            Rational[10, 3], 0}, {10, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[20, 3], 0}, {5, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            5 3^Rational[1, 2], 5}}, {{0, 0}, {8.333333333333334, 0}, {
            1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
            0, 0}, {3.3333333333333335`, 0}, {10, 0}, {4.330127018922193, 
            2.5}, {2.886751345948129, 1.6666666666666667`}, {
            1.4433756729740645`, 0.8333333333333334}, {
            6.666666666666667, 0}, {5, 0}, {5.773502691896258, 
            3.3333333333333335`}, {8.660254037844386, 5}}]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
           Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[20, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {5, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {0, 
           0}}, {{1.6666666666666667`, 0}, {0, 0}, {2.886751345948129, 
           1.6666666666666667`}, {3.3333333333333335`, 0}, {
           8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
           4.330127018922193, 2.5}, {6.666666666666667, 0}, {
           7.216878364870323, 4.166666666666667}, {8.660254037844386, 5}, {5, 
           0}, {1.4433756729740645`, 0.8333333333333334}, {10, 0}, {0, 0}}]]},
        GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[5, 3], 0}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
            Rational[25, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {10, 0}, {0, 
            0}}, {{1.6666666666666667`, 0}, {0, 0}, {2.886751345948129, 
            1.6666666666666667`}, {3.3333333333333335`, 0}, {
            8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
            4.330127018922193, 2.5}, {6.666666666666667, 0}, {
            7.216878364870323, 4.166666666666667}, {8.660254037844386, 5}, {5,
             0}, {1.4433756729740645`, 0.8333333333333334}, {10, 0}, {0, 
            0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[10, 3], 0}, {10, 0}, {5, 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}}], 
          BezierCurve[{{0, 0}, {5.773502691896258, 3.3333333333333335`}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {2.886751345948129,
             1.6666666666666667`}, {4.330127018922193, 2.5}, {
            8.660254037844386, 5}, {7.216878364870323, 4.166666666666667}, {
            3.3333333333333335`, 0}, {10, 0}, {5, 0}, {0, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {
            1.6666666666666667`, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[25, 3], 0}, {Rational[20, 3], 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[1, 2], 5}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[10, 3], 0}, {10, 0}, {5, 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 3], 0}}], 
           BezierCurve[{{0, 0}, {5.773502691896258, 3.3333333333333335`}, {
             8.333333333333334, 0}, {6.666666666666667, 0}, {
             2.886751345948129, 1.6666666666666667`}, {4.330127018922193, 
             2.5}, {8.660254037844386, 5}, {7.216878364870323, 
             4.166666666666667}, {3.3333333333333335`, 0}, {10, 0}, {5, 0}, {
             0, 0}, {1.4433756729740645`, 0.8333333333333334}, {
             1.6666666666666667`, 0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {10, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {
            Rational[5, 3], 0}}], 
          BezierCurve[{{0, 0}, {3.3333333333333335`, 0}, {
            8.660254037844386, 5}, {7.216878364870323, 4.166666666666667}, {
            2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
            10, 0}, {4.330127018922193, 2.5}, {5, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {0, 0}, {5.773502691896258, 
            3.3333333333333335`}, {8.333333333333334, 0}, {
            1.6666666666666667`, 0}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {Rational[10, 3], 0}, {
             5 3^Rational[1, 2], 5}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {10, 
             0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {5, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {
             Rational[5, 3], 0}}], 
           BezierCurve[{{0, 0}, {3.3333333333333335`, 0}, {
             8.660254037844386, 5}, {7.216878364870323, 4.166666666666667}, {
             2.886751345948129, 1.6666666666666667`}, {
             6.666666666666667, 0}, {10, 0}, {4.330127018922193, 2.5}, {5, 
             0}, {1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
             5.773502691896258, 3.3333333333333335`}, {
             8.333333333333334, 0}, {1.6666666666666667`, 0}}]]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[10, 3], 0}, {0, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {
           5 3^Rational[1, 2], 5}, {5, 0}, {10, 0}, {Rational[5, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{
           7.216878364870323, 4.166666666666667}, {3.3333333333333335`, 0}, {
           0, 0}, {2.886751345948129, 1.6666666666666667`}, {
           8.333333333333334, 0}, {8.660254037844386, 5}, {5, 0}, {10, 0}, {
           1.6666666666666667`, 0}, {5.773502691896258, 
           3.3333333333333335`}, {6.666666666666667, 0}, {1.4433756729740645`,
            0.8333333333333334}, {0, 0}, {4.330127018922193, 2.5}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[10, 3], 0}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {
            5 3^Rational[1, 2], 5}, {5, 0}, {10, 0}, {Rational[5, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{
            7.216878364870323, 4.166666666666667}, {3.3333333333333335`, 0}, {
            0, 0}, {2.886751345948129, 1.6666666666666667`}, {
            8.333333333333334, 0}, {8.660254037844386, 5}, {5, 0}, {10, 0}, {
            1.6666666666666667`, 0}, {5.773502691896258, 
            3.3333333333333335`}, {6.666666666666667, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
            4.330127018922193, 2.5}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{5, 0}, {Rational[20, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}, {
            Rational[25, 3], 0}, {Rational[10, 3], 0}, {10, 0}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}], 
          BezierCurve[{{5, 0}, {6.666666666666667, 0}, {5.773502691896258, 
            3.3333333333333335`}, {1.6666666666666667`, 0}, {
            8.333333333333334, 0}, {3.3333333333333335`, 0}, {10, 0}, {
            8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {0, 0}, {7.216878364870323, 
            4.166666666666667}, {2.886751345948129, 1.6666666666666667`}, {
            4.330127018922193, 2.5}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{5, 0}, {Rational[20, 3], 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[5, 3], 0}, {
             Rational[25, 3], 0}, {Rational[10, 3], 0}, {10, 0}, {
             5 3^Rational[1, 2], 5}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}], 
           BezierCurve[{{5, 0}, {6.666666666666667, 0}, {5.773502691896258, 
             3.3333333333333335`}, {1.6666666666666667`, 0}, {
             8.333333333333334, 0}, {3.3333333333333335`, 0}, {10, 0}, {
             8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {0, 0}, {7.216878364870323, 
             4.166666666666667}, {2.886751345948129, 1.6666666666666667`}, {
             4.330127018922193, 2.5}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{5 3^Rational[1, 2], 5}, {Rational[20, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
           Rational[5, 3], 0}, {5, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {10, 
           0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
           Rational[25, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{
           8.660254037844386, 5}, {6.666666666666667, 0}, {7.216878364870323, 
           4.166666666666667}, {0, 0}, {1.6666666666666667`, 0}, {5, 0}, {
           1.4433756729740645`, 0.8333333333333334}, {0, 0}, {10, 0}, {
           5.773502691896258, 3.3333333333333335`}, {2.886751345948129, 
           1.6666666666666667`}, {3.3333333333333335`, 0}, {
           8.333333333333334, 0}, {4.330127018922193, 2.5}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{5 3^Rational[1, 2], 5}, {Rational[20, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {0, 0}, {
            Rational[5, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {10, 
            0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[10, 3], 0}, {
            Rational[25, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{
            8.660254037844386, 5}, {6.666666666666667, 0}, {7.216878364870323,
             4.166666666666667}, {0, 0}, {1.6666666666666667`, 0}, {5, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {10, 0}, {
            5.773502691896258, 3.3333333333333335`}, {2.886751345948129, 
            1.6666666666666667`}, {3.3333333333333335`, 0}, {
            8.333333333333334, 0}, {4.330127018922193, 2.5}}]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[10, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[20, 3], 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
            Rational[25, 3], 0}, {Rational[5, 3], 0}, {5, 0}, {0, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}], 
          BezierCurve[{{4.330127018922193, 2.5}, {3.3333333333333335`, 0}, {
            5.773502691896258, 3.3333333333333335`}, {6.666666666666667, 0}, {
            8.660254037844386, 5}, {0, 0}, {7.216878364870323, 
            4.166666666666667}, {10, 0}, {8.333333333333334, 0}, {
            1.6666666666666667`, 0}, {5, 0}, {0, 0}, {2.886751345948129, 
            1.6666666666666667`}, {1.4433756729740645`, 
            0.8333333333333334}}]]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[10, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[20, 3], 0}, {5 3^Rational[1, 2], 5}, {0, 0}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
             Rational[25, 3], 0}, {Rational[5, 3], 0}, {5, 0}, {0, 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}], 
           BezierCurve[{{4.330127018922193, 2.5}, {3.3333333333333335`, 0}, {
             5.773502691896258, 3.3333333333333335`}, {
             6.666666666666667, 0}, {8.660254037844386, 5}, {0, 0}, {
             7.216878364870323, 4.166666666666667}, {10, 0}, {
             8.333333333333334, 0}, {1.6666666666666667`, 0}, {5, 0}, {0, 
             0}, {2.886751345948129, 1.6666666666666667`}, {
             1.4433756729740645`, 0.8333333333333334}}]]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{10, 0}, {Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
           5 3^Rational[1, 2], 5}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
           0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
           Rational[5, 3], 0}}, {{10, 0}, {3.3333333333333335`, 0}, {
           4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {
           7.216878364870323, 4.166666666666667}, {5.773502691896258, 
           3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {
           2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
           1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
           1.6666666666666667`, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{10, 0}, {Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
            5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[25, 3], 0}, {5, 
            0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {
            Rational[5, 3], 0}}, {{10, 0}, {3.3333333333333335`, 0}, {
            4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {
            7.216878364870323, 4.166666666666667}, {5.773502691896258, 
            3.3333333333333335`}, {8.333333333333334, 0}, {5, 0}, {
            2.886751345948129, 1.6666666666666667`}, {6.666666666666667, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {0, 0}, {
            1.6666666666666667`, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{5, 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[20, 3], 0}, {Rational[25, 3], 0}, {Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {10, 0}}, {{5, 0}, {
           5.773502691896258, 3.3333333333333335`}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           6.666666666666667, 0}, {8.333333333333334, 0}, {
           3.3333333333333335`, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {2.886751345948129, 1.6666666666666667`}, {
           4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {0, 0}, {
           10, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{5, 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[20, 3], 0}, {Rational[25, 3], 0}, {Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {10, 0}}, {{5, 0}, {
            5.773502691896258, 3.3333333333333335`}, {
            1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
            6.666666666666667, 0}, {8.333333333333334, 0}, {
            3.3333333333333335`, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {2.886751345948129, 1.6666666666666667`}, {
            4.330127018922193, 2.5}, {0, 0}, {8.660254037844386, 5}, {0, 0}, {
            10, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{0, 0}, {Rational[10, 3], 0}, {Rational[25, 3], 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
           Rational[5, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[20, 3], 0}}, {{0, 0}, {3.3333333333333335`, 0}, {
           8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
           2.886751345948129, 1.6666666666666667`}, {0, 0}, {
           1.6666666666666667`, 0}, {5, 0}, {8.660254037844386, 5}, {
           7.216878364870323, 4.166666666666667}, {4.330127018922193, 2.5}, {
           10, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           6.666666666666667, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{0, 0}, {Rational[10, 3], 0}, {Rational[25, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
            Rational[5, 3], 0}, {5, 0}, {5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[20, 3], 0}}, {{0, 0}, {3.3333333333333335`, 0}, {
            8.333333333333334, 0}, {5.773502691896258, 3.3333333333333335`}, {
            2.886751345948129, 1.6666666666666667`}, {0, 0}, {
            1.6666666666666667`, 0}, {5, 0}, {8.660254037844386, 5}, {
            7.216878364870323, 4.166666666666667}, {4.330127018922193, 2.5}, {
            10, 0}, {1.4433756729740645`, 0.8333333333333334}, {
            6.666666666666667, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {0, 0}, {0, 0}, {Rational[10, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[25, 3], 0}, {5, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {5 3^Rational[1, 2], 5}, {
           Rational[20, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}, {{
           1.6666666666666667`, 0}, {0, 0}, {0, 0}, {
           3.3333333333333335`, 0}, {7.216878364870323, 4.166666666666667}, {
           8.333333333333334, 0}, {5, 0}, {4.330127018922193, 2.5}, {10, 0}, {
           2.886751345948129, 1.6666666666666667`}, {8.660254037844386, 5}, {
           6.666666666666667, 0}, {5.773502691896258, 3.3333333333333335`}, {
           1.4433756729740645`, 0.8333333333333334}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[5, 3], 0}, {0, 0}, {0, 0}, {Rational[10, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[25, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {10, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {5 3^Rational[1, 2], 5}, {
            Rational[20, 3], 0}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}}, {{
            1.6666666666666667`, 0}, {0, 0}, {0, 0}, {
            3.3333333333333335`, 0}, {7.216878364870323, 4.166666666666667}, {
            8.333333333333334, 0}, {5, 0}, {4.330127018922193, 2.5}, {10, 
            0}, {2.886751345948129, 1.6666666666666667`}, {
            8.660254037844386, 5}, {6.666666666666667, 0}, {5.773502691896258,
             3.3333333333333335`}, {1.4433756729740645`, 
            0.8333333333333334}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{Rational[5, 3], 0}, {5 3^Rational[1, 2], 5}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {0, 
           0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 3], 0}, {Rational[20, 3], 0}, {Rational[10, 3], 0}, {
           5, 0}}, {{1.6666666666666667`, 0}, {8.660254037844386, 5}, {
           4.330127018922193, 2.5}, {2.886751345948129, 
           1.6666666666666667`}, {0, 0}, {5.773502691896258, 
           3.3333333333333335`}, {7.216878364870323, 4.166666666666667}, {10, 
           0}, {0, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           8.333333333333334, 0}, {6.666666666666667, 0}, {
           3.3333333333333335`, 0}, {5, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{Rational[5, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {0, 
            0}, {Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {Rational[10, 3], 0}, {
            5, 0}}, {{1.6666666666666667`, 0}, {8.660254037844386, 5}, {
            4.330127018922193, 2.5}, {2.886751345948129, 
            1.6666666666666667`}, {0, 0}, {5.773502691896258, 
            3.3333333333333335`}, {7.216878364870323, 4.166666666666667}, {10,
             0}, {0, 0}, {1.4433756729740645`, 0.8333333333333334}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {
            3.3333333333333335`, 0}, {5, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 
         0}}]}, NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {Rational[25, 3], 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[5, 3], 0}, {0, 
            0}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {10, 
            0}, {5 3^Rational[1, 2], 5}}], 
          BezierCurve[{{0, 0}, {8.333333333333334, 0}, {5.773502691896258, 
            3.3333333333333335`}, {3.3333333333333335`, 0}, {
            2.886751345948129, 1.6666666666666667`}, {
            1.6666666666666667`, 0}, {0, 0}, {6.666666666666667, 0}, {
            4.330127018922193, 2.5}, {1.4433756729740645`, 
            0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {5, 
            0}, {10, 0}, {8.660254037844386, 5}}]]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {Rational[25, 3], 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[5, 3], 0}, {0, 
             0}, {Rational[20, 3], 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {10,
              0}, {5 3^Rational[1, 2], 5}}], 
           BezierCurve[{{0, 0}, {8.333333333333334, 0}, {5.773502691896258, 
             3.3333333333333335`}, {3.3333333333333335`, 0}, {
             2.886751345948129, 1.6666666666666667`}, {
             1.6666666666666667`, 0}, {0, 0}, {6.666666666666667, 0}, {
             4.330127018922193, 2.5}, {1.4433756729740645`, 
             0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {5, 
             0}, {10, 0}, {8.660254037844386, 5}}]]]}, {{{1, 0}, {0, -1}}, {0,
          0}}]}, NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{Rational[20, 3], 0}, {5, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {0, 
            0}, {5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[10, 3], 0}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}, {10, 0}}], 
          BezierCurve[{{6.666666666666667, 0}, {5, 0}, {5.773502691896258, 
            3.3333333333333335`}, {4.330127018922193, 2.5}, {
            2.886751345948129, 1.6666666666666667`}, {8.333333333333334, 0}, {
            0, 0}, {8.660254037844386, 5}, {7.216878364870323, 
            4.166666666666667}, {3.3333333333333335`, 0}, {0, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {
            1.6666666666666667`, 0}, {10, 0}}]]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{Rational[20, 3], 0}, {5, 0}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[25, 3], 0}, {0, 
             0}, {5 3^Rational[1, 2], 5}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[10, 3], 0}, {0, 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             Rational[5, 3], 0}, {10, 0}}], 
           BezierCurve[{{6.666666666666667, 0}, {5, 0}, {5.773502691896258, 
             3.3333333333333335`}, {4.330127018922193, 2.5}, {
             2.886751345948129, 1.6666666666666667`}, {
             8.333333333333334, 0}, {0, 0}, {8.660254037844386, 5}, {
             7.216878364870323, 4.166666666666667}, {
             3.3333333333333335`, 0}, {0, 0}, {1.4433756729740645`, 
             0.8333333333333334}, {1.6666666666666667`, 0}, {10, 0}}]]]}, {{{
         1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[25, 3], 0}, {0, 0}, {0, 0}, {5, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[5, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {5 3^Rational[1, 2], 5}, {
           Rational[10, 3], 0}, {10, 0}, {Rational[20, 3], 0}}, {{
           8.333333333333334, 0}, {0, 0}, {0, 0}, {5, 0}, {5.773502691896258, 
           3.3333333333333335`}, {4.330127018922193, 2.5}, {
           1.6666666666666667`, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {
           2.886751345948129, 1.6666666666666667`}, {8.660254037844386, 5}, {
           3.3333333333333335`, 0}, {10, 0}, {6.666666666666667, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[25, 3], 0}, {0, 0}, {0, 0}, {5, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {5 3^Rational[1, 2], 5}, {
            Rational[10, 3], 0}, {10, 0}, {Rational[20, 3], 0}}, {{
            8.333333333333334, 0}, {0, 0}, {0, 0}, {5, 0}, {5.773502691896258,
             3.3333333333333335`}, {4.330127018922193, 2.5}, {
            1.6666666666666667`, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {7.216878364870323, 4.166666666666667}, {
            2.886751345948129, 1.6666666666666667`}, {8.660254037844386, 5}, {
            3.3333333333333335`, 0}, {10, 0}, {6.666666666666667, 0}}]]}, {{{
         1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{0, 0}, {5, 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           Rational[5, 3], 0}, {10, 0}, {Rational[20, 3], 0}, {
           Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}}, {{0, 
           0}, {5, 0}, {4.330127018922193, 2.5}, {5.773502691896258, 
           3.3333333333333335`}, {0, 0}, {1.6666666666666667`, 0}, {10, 0}, {
           6.666666666666667, 0}, {3.3333333333333335`, 0}, {
           8.660254037844386, 5}, {7.216878364870323, 4.166666666666667}, {
           1.4433756729740645`, 0.8333333333333334}, {8.333333333333334, 0}, {
           2.886751345948129, 1.6666666666666667`}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{0, 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
            Rational[5, 3], 0}, {10, 0}, {Rational[20, 3], 0}, {
            Rational[10, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}}, {{0, 
            0}, {5, 0}, {4.330127018922193, 2.5}, {5.773502691896258, 
            3.3333333333333335`}, {0, 0}, {1.6666666666666667`, 0}, {10, 0}, {
            6.666666666666667, 0}, {3.3333333333333335`, 0}, {
            8.660254037844386, 5}, {7.216878364870323, 4.166666666666667}, {
            1.4433756729740645`, 0.8333333333333334}, {
            8.333333333333334, 0}, {2.886751345948129, 
            1.6666666666666667`}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           Rational[5, 3], 0}, {5, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
           Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {10, 
           0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
           Rational[20, 3], 0}}, {{5.773502691896258, 3.3333333333333335`}, {
           0, 0}, {7.216878364870323, 4.166666666666667}, {
           1.6666666666666667`, 0}, {5, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {8.660254037844386, 5}, {
           3.3333333333333335`, 0}, {8.333333333333334, 0}, {
           2.886751345948129, 1.6666666666666667`}, {10, 0}, {
           4.330127018922193, 2.5}, {0, 0}, {6.666666666666667, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[5, 3], 0}, {5, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            5 3^Rational[1, 2], 5}, {Rational[10, 3], 0}, {
            Rational[25, 3], 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {10, 
            0}, {Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {0, 0}, {
            Rational[20, 3], 0}}, {{5.773502691896258, 3.3333333333333335`}, {
            0, 0}, {7.216878364870323, 4.166666666666667}, {
            1.6666666666666667`, 0}, {5, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {8.660254037844386, 5}, {
            3.3333333333333335`, 0}, {8.333333333333334, 0}, {
            2.886751345948129, 1.6666666666666667`}, {10, 0}, {
            4.330127018922193, 2.5}, {0, 0}, {6.666666666666667, 0}}]]}, {{{1,
          0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        FilledCurveBox[NCache[
         BezierCurve[{{0, 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {5 3^Rational[1, 2], 5}, {
            0, 0}, {5, 0}, {Rational[10, 3], 0}, {Rational[5, 3], 0}, {10, 
            0}}], BezierCurve[{{0, 0}, {4.330127018922193, 2.5}, {
            2.886751345948129, 1.6666666666666667`}, {7.216878364870323, 
            4.166666666666667}, {8.333333333333334, 0}, {
            6.666666666666667, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {5.773502691896258, 3.3333333333333335`}, {
            8.660254037844386, 5}, {0, 0}, {5, 0}, {3.3333333333333335`, 0}, {
            1.6666666666666667`, 0}, {10, 0}}]]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         FilledCurveBox[NCache[
          BezierCurve[{{0, 0}, {
             Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
             5 3^Rational[-1, 2], Rational[5, 3]}, {
             Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
             Rational[25, 3], 0}, {Rational[20, 3], 0}, {
             Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
             10 3^Rational[-1, 2], Rational[10, 3]}, {
             5 3^Rational[1, 2], 5}, {0, 0}, {5, 0}, {Rational[10, 3], 0}, {
             Rational[5, 3], 0}, {10, 0}}], 
           BezierCurve[{{0, 0}, {4.330127018922193, 2.5}, {2.886751345948129, 
             1.6666666666666667`}, {7.216878364870323, 4.166666666666667}, {
             8.333333333333334, 0}, {6.666666666666667, 0}, {
             1.4433756729740645`, 0.8333333333333334}, {5.773502691896258, 
             3.3333333333333335`}, {8.660254037844386, 5}, {0, 0}, {5, 0}, {
             3.3333333333333335`, 0}, {1.6666666666666667`, 0}, {10, 
             0}}]]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {5, 
           0}, {Rational[25, 3], 0}, {Rational[20, 3], 0}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
           Rational[5, 3], 0}, {Rational[10, 3], 0}}, {{4.330127018922193, 
           2.5}, {7.216878364870323, 4.166666666666667}, {10, 0}, {5, 0}, {
           8.333333333333334, 0}, {6.666666666666667, 0}, {
           8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
           0.8333333333333334}, {2.886751345948129, 1.6666666666666667`}, {
           5.773502691896258, 3.3333333333333335`}, {0, 0}, {
           1.6666666666666667`, 0}, {3.3333333333333335`, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {5, 
            0}, {Rational[25, 3], 0}, {Rational[20, 3], 0}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {0, 0}, {
            Rational[5, 3], 0}, {Rational[10, 3], 0}}, {{4.330127018922193, 
            2.5}, {7.216878364870323, 4.166666666666667}, {10, 0}, {5, 0}, {
            8.333333333333334, 0}, {6.666666666666667, 0}, {
            8.660254037844386, 5}, {0, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {2.886751345948129, 1.6666666666666667`}, {
            5.773502691896258, 3.3333333333333335`}, {0, 0}, {
            1.6666666666666667`, 0}, {3.3333333333333335`, 0}}]]}, {{{1, 0}, {
         0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        BezierCurveBox[
         NCache[{{Rational[10, 3], 0}, {0, 0}, {Rational[20, 3], 0}, {
           5 3^Rational[1, 2], 5}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {10, 
           0}, {0, 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}}, {{3.3333333333333335`, 0}, {0, 0}, {
           6.666666666666667, 0}, {8.660254037844386, 5}, {5.773502691896258, 
           3.3333333333333335`}, {1.4433756729740645`, 0.8333333333333334}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           5, 0}, {10, 0}, {0, 0}, {2.886751345948129, 1.6666666666666667`}, {
           4.330127018922193, 2.5}, {8.333333333333334, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         BezierCurveBox[
          NCache[{{Rational[10, 3], 0}, {0, 0}, {Rational[20, 3], 0}, {
            5 3^Rational[1, 2], 5}, {10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {5, 0}, {10, 
            0}, {0, 0}, {5 3^Rational[-1, 2], Rational[5, 3]}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}}, {{3.3333333333333335`, 0}, {0, 0}, {
            6.666666666666667, 0}, {8.660254037844386, 5}, {5.773502691896258,
             3.3333333333333335`}, {1.4433756729740645`, 
            0.8333333333333334}, {1.6666666666666667`, 0}, {7.216878364870323,
             4.166666666666667}, {5, 0}, {10, 0}, {0, 0}, {2.886751345948129, 
            1.6666666666666667`}, {4.330127018922193, 2.5}, {
            8.333333333333334, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        PolygonBox[
         NCache[{{Rational[5, 3], 0}, {5 3^Rational[1, 2], 5}, {
           Rational[20, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
           Rational[25, 3], 0}, {0, 0}, {5, 0}}, {{1.6666666666666667`, 0}, {
           8.660254037844386, 5}, {6.666666666666667, 0}, {
           1.4433756729740645`, 0.8333333333333334}, {5.773502691896258, 
           3.3333333333333335`}, {3.3333333333333335`, 0}, {4.330127018922193,
            2.5}, {7.216878364870323, 4.166666666666667}, {10, 0}, {
           2.886751345948129, 1.6666666666666667`}, {0, 0}, {
           8.333333333333334, 0}, {0, 0}, {5, 0}}]]}, 
       GeometricTransformationBox[
        {GrayLevel[0.25], 
         PolygonBox[
          NCache[{{Rational[5, 3], 0}, {5 3^Rational[1, 2], 5}, {
            Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {Rational[10, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {0, 0}, {
            Rational[25, 3], 0}, {0, 0}, {5, 0}}, {{1.6666666666666667`, 0}, {
            8.660254037844386, 5}, {6.666666666666667, 0}, {
            1.4433756729740645`, 0.8333333333333334}, {5.773502691896258, 
            3.3333333333333335`}, {3.3333333333333335`, 0}, {
            4.330127018922193, 2.5}, {7.216878364870323, 4.166666666666667}, {
            10, 0}, {2.886751345948129, 1.6666666666666667`}, {0, 0}, {
            8.333333333333334, 0}, {0, 0}, {5, 0}}]]}, {{{1, 0}, {0, -1}}, {0,
          0}}]}, NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {0, 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
           Rational[10, 3], 0}, {Rational[20, 3], 0}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
           Rational[5, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
           Rational[25, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
           5.773502691896258, 3.3333333333333335`}, {5, 0}, {
           8.660254037844386, 5}, {0, 0}, {0, 0}, {7.216878364870323, 
           4.166666666666667}, {10, 0}, {3.3333333333333335`, 0}, {
           6.666666666666667, 0}, {1.4433756729740645`, 0.8333333333333334}, {
           1.6666666666666667`, 0}, {4.330127018922193, 2.5}, {
           8.333333333333334, 0}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{5 3^Rational[-1, 2], Rational[5, 3]}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {5, 0}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {0, 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {10, 0}, {
            Rational[10, 3], 0}, {Rational[20, 3], 0}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {
            Rational[5, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}, {
            Rational[25, 3], 0}}, {{2.886751345948129, 1.6666666666666667`}, {
            5.773502691896258, 3.3333333333333335`}, {5, 0}, {
            8.660254037844386, 5}, {0, 0}, {0, 0}, {7.216878364870323, 
            4.166666666666667}, {10, 0}, {3.3333333333333335`, 0}, {
            6.666666666666667, 0}, {1.4433756729740645`, 
            0.8333333333333334}, {1.6666666666666667`, 0}, {4.330127018922193,
             2.5}, {8.333333333333334, 0}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]], ",", 
    GraphicsBox[GeometricTransformationBox[{
       {GrayLevel[0.25], 
        LineBox[NCache[{{5, 0}, {Rational[10, 3], 0}, {
           5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
           Rational[5, 3], 0}, {
           Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
           5 3^Rational[1, 2], 5}, {0, 0}, {
           10 3^Rational[-1, 2], Rational[10, 3]}, {
           Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {10, 
           0}, {Rational[25, 3], 0}, {
           Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{5, 0}, {
           3.3333333333333335`, 0}, {2.886751345948129, 
           1.6666666666666667`}, {6.666666666666667, 0}, {
           1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
           8.660254037844386, 5}, {0, 0}, {5.773502691896258, 
           3.3333333333333335`}, {1.4433756729740645`, 0.8333333333333334}, {
           0, 0}, {10, 0}, {8.333333333333334, 0}, {4.330127018922193, 
           2.5}}]]}, GeometricTransformationBox[
        {GrayLevel[0.25], 
         LineBox[NCache[{{5, 0}, {Rational[10, 3], 0}, {
            5 3^Rational[-1, 2], Rational[5, 3]}, {Rational[20, 3], 0}, {
            Rational[5, 3], 0}, {
            Rational[25, 2] 3^Rational[-1, 2], Rational[25, 6]}, {
            5 3^Rational[1, 2], 5}, {0, 0}, {
            10 3^Rational[-1, 2], Rational[10, 3]}, {
            Rational[5, 2] 3^Rational[-1, 2], Rational[5, 6]}, {0, 0}, {10, 
            0}, {Rational[25, 3], 0}, {
            Rational[5, 2] 3^Rational[1, 2], Rational[5, 2]}}, {{5, 0}, {
            3.3333333333333335`, 0}, {2.886751345948129, 
            1.6666666666666667`}, {6.666666666666667, 0}, {
            1.6666666666666667`, 0}, {7.216878364870323, 4.166666666666667}, {
            8.660254037844386, 5}, {0, 0}, {5.773502691896258, 
            3.3333333333333335`}, {1.4433756729740645`, 0.8333333333333334}, {
            0, 0}, {10, 0}, {8.333333333333334, 0}, {4.330127018922193, 
            2.5}}]]}, {{{1, 0}, {0, -1}}, {0, 0}}]}, 
      NCache[{{{1, 0}, {0, 
        1}}, {{Rational[1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[1, 2]}}, {{
         Rational[-1, 2], Rational[-1, 2] 3^Rational[1, 2]}, {
         Rational[1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{-1, 0}, {
        0, -1}}, {{Rational[-1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[-1, 2]}}, {{
         Rational[1, 2], Rational[1, 2] 3^Rational[1, 2]}, {
         Rational[-1, 2] 3^Rational[1, 2], Rational[1, 2]}}}, {{{1, 0}, {0, 
        1}}, {{0.5, -0.8660254037844386}, {0.8660254037844386, 
        0.5}}, {{-0.5, -0.8660254037844386}, {
        0.8660254037844386, -0.5}}, {{-1, 0}, {0, -1}}, {{-0.5, 
        0.8660254037844386}, {-0.8660254037844386, -0.5}}, {{0.5, 
        0.8660254037844386}, {-0.8660254037844386, 0.5}}}]]]}], "}"}],
  StripOnInput->False,
  Magnification->0.3 Inherited]], "Output",
 CellChangeTimes->{3.779530190958009*^9, 3.779530697196406*^9, 
  3.7795497269763727`*^9, 3.779552079557674*^9, 3.7795542085525713`*^9, 
  3.7795548243273582`*^9, 3.780352328554265*^9, 3.780396926805394*^9, 
  3.780397447424879*^9, 3.780399860399414*^9, 3.780400234973325*^9, 
  3.780400374285965*^9, 3.7804011290887947`*^9, 3.780401291665847*^9, 
  3.78040181282085*^9, 3.7804022673702593`*^9, 3.780402396111068*^9},
 CellLabel->"Out[3]=",
 CellID->443691276]
}, Open  ]],

Cell["Make images of the generated mandala graphics:", "Text",
 CellChangeTimes->{{3.779211385950767*^9, 3.779211403397254*^9}},
 CellID->383653034],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"mandalaImages", "=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Image", "[", 
        RowBox[{"#", ",", 
         RowBox[{"ImageSize", "->", 
          RowBox[{"{", 
           RowBox[{"400", ",", "400"}], "}"}]}], ",", 
         RowBox[{"ColorSpace", "\[Rule]", "\"\<Grayscale\>\""}]}], "]"}], 
       "&"}], ",", "mandalas"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.695255061288024*^9, 3.695255138339426*^9}, {
  3.6952552323130207`*^9, 3.6952552330434237`*^9}, {3.695255633464018*^9, 
  3.6952556387127247`*^9}, {3.69525782616573*^9, 3.695257828380067*^9}, {
  3.695260206950284*^9, 3.695260207240836*^9}, {3.695260731402348*^9, 
  3.695260735314794*^9}, {3.695266124265998*^9, 3.695266124493054*^9}, {
  3.695312561589013*^9, 3.695312561813059*^9}, {3.69533483141045*^9, 
  3.695334918429578*^9}, {3.6956769454909563`*^9, 3.695676950237907*^9}, {
  3.6956775984310904`*^9, 3.695677599260593*^9}, {3.779211352032146*^9, 
  3.779211419366536*^9}},
 CellLabel->"In[4]:=",
 CellID->1300499642],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.59635`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.779530194899333*^9, 3.779530703889105*^9, 
  3.779549730385232*^9, 3.779552083801989*^9, 3.779554215062931*^9, 
  3.779554827717555*^9, 3.780352332205036*^9, 3.7803969308748083`*^9, 
  3.7803974515541077`*^9, 3.780399864739808*^9, 3.7804002393832693`*^9, 
  3.7804003793672733`*^9, 3.780401134083157*^9, 3.780401295735347*^9, 
  3.780401817510998*^9, 3.780402271777418*^9, 3.780402400723433*^9},
 CellLabel->"Out[4]=",
 CellID->1056053348]
}, Open  ]],

Cell["\<\
Pick mandala images at random and blend them using a set of coloring schemes:\
\
\>", "Text",
 CellChangeTimes->{{3.779211320719524*^9, 3.779211321486937*^9}, {
  3.7792115772362537`*^9, 3.7792116447724257`*^9}, {3.779216237546899*^9, 
  3.779216240764008*^9}},
 CellID->2015561393],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "3488", "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"directBlendingImages", "=", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RemoveBackground", "@", 
       RowBox[{"ImageAdjust", "[", 
        RowBox[{"Blend", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Colorize", "[", 
             RowBox[{"#", ",", 
              RowBox[{"ColorFunction", "\[Rule]", 
               RowBox[{"RandomChoice", "[", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<IslandColors\>\"", ",", "\"\<FruitPunchColors\>\"", 
                  ",", "\"\<AvocadoColors\>\"", ",", "\"\<Rainbow\>\""}], 
                 "}"}], "]"}]}]}], "]"}], "&"}], "/@", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{"mandalaImages", ",", "4"}], "]"}]}], ",", 
          RowBox[{"RandomReal", "[", 
           RowBox[{"1", ",", "4"}], "]"}]}], "]"}], "]"}]}], ",", "12"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.695264024194496*^9, 3.695264097308301*^9}, {
   3.695264180662285*^9, 3.6952641858101177`*^9}, {3.695264244332037*^9, 
   3.6952642463499327`*^9}, {3.69533613974179*^9, 3.695336143294724*^9}, 
   3.6953362037881927`*^9, {3.69533624775797*^9, 3.695336265516624*^9}, {
   3.695336306322751*^9, 3.69533632297754*^9}, {3.695336431446292*^9, 
   3.6953364415226*^9}, {3.695337232551158*^9, 3.6953372339791183`*^9}, {
   3.695337270496282*^9, 3.695337271744458*^9}, {3.695473044812257*^9, 
   3.695473047195119*^9}, 3.69547308608641*^9, {3.695478235341353*^9, 
   3.69547828211028*^9}, 3.6954783251075363`*^9, {3.6955646665142097`*^9, 
   3.695564670957326*^9}, 3.695565155247322*^9, {3.6956779331755953`*^9, 
   3.695677933726919*^9}, {3.695730673154972*^9, 3.695730673556817*^9}, {
   3.779211490275673*^9, 3.779211524407045*^9}, {3.77921156240168*^9, 
   3.779211573088718*^9}, {3.779216205137933*^9, 3.7792162052249002`*^9}},
 CellLabel->"In[5]:=",
 CellID->831011238],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.341696`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.779530200767651*^9, 3.779530709371916*^9, 
  3.779549736798868*^9, 3.7795520893123407`*^9, 3.779554220447257*^9, 
  3.779554833016489*^9, 3.780352338787773*^9, 3.78039693738914*^9, 
  3.7803974579638777`*^9, 3.7803998709909163`*^9, 3.780400245564281*^9, 
  3.780400385564506*^9, 3.7804011407285967`*^9, 3.7804013021799707`*^9, 
  3.7804018230305843`*^9, 3.780402277754352*^9, 3.780402406150922*^9},
 CellLabel->"Out[6]=",
 CellID->1661791912]
}, Open  ]],

Cell["Make a collage:", "Text",
 CellChangeTimes->{{3.779211652355493*^9, 3.779211655459539*^9}},
 CellID->359067595],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageCollage", "[", 
  RowBox[{"directBlendingImages", ",", 
   RowBox[{"Background", "\[Rule]", "White"}], ",", 
   RowBox[{"ImagePadding", "\[Rule]", "3"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.695478266449604*^9, 3.69547830274739*^9}, {
   3.695564538573145*^9, 3.695564548619269*^9}, {3.695564660072691*^9, 
   3.695564663021295*^9}, {3.695735828338561*^9, 3.69573583902561*^9}, 
   3.69574426669973*^9, {3.779211452936364*^9, 3.7792114545538816`*^9}, {
   3.77921154206061*^9, 3.779211549685691*^9}, {3.779554818829446*^9, 
   3.779554819839477*^9}, {3.779555470417592*^9, 3.779555472474556*^9}, {
   3.779555516352757*^9, 3.779555516780257*^9}},
 CellLabel->"In[7]:=",
 CellID->1719720625],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQtcVVXa/3lxHHgdRkdCjdMRRIhBxBMdgsxLZmpUjHdSvN8wL3lJxjSU
eCG1tMyEUjIUEG/TmIgj42BaWeqk5iVzrHEau1hq3hUlu5jPu3/rcA7nsve5
cWBzeb6fz/Nvsy9r77XW7zT/d/161hMydvqAJ729vLz+7Cv9PwPGzO6ekjIm
deAfpD+emPbnSROmjU9+bNrM8RPGp3Qc20g6+eFvvLySfuvlJf3DixiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRTIWLtMBMMwDMN4grzdxZS3q1jt
z2AYhmEYhmEYhmEYhmEYj7JsYw79ackSChsyj8I6zLEM6Ryu4R6GYRiGcYe8
/FwRDMMwDOMJ0qfMFsEwDMMwnuB8mr8IhmEYhnGGDVtW0PA3llLY9EUUpp9j
66koBe6VnsGzaINhGIZhHHH47FHKK9pAecUb6MCZQ2p/DsMwDFPHyc2fTeMS
8mnMnwpoxapUtT+HYRiGqQcUzbtPBMMwDMMo8XR+NkXPXUxhndKc91MchdQW
2kTbDMMwDCNH0bslYm8wRNE7JWp/DsMwDFOH+WxVGGU1n0BPzV4lIrtZsjjH
MAzDMFXh+aQUEQzDMAxjZMH6ZfTQC0soLCHTc36Ko5DehXfi3QzDMAwDij7e
SXl7SihvdwkVHdml9ucwDMMwdZTyGQH0csgLlNVqOmUuTZcijbIDZ9DLoS+I
awzDMAzjLov9holgGIZhGi65b+dQv6VLKWzkgprzUxyF9C34JnwbwzAM0/Ao
OrSL/nvxuMlf+fLScSo6sFPtz2IYhmHqIBP/lEXZgdNpXcgMKlg5VIok6Xg6
ZbWaJq4xDMMwjDuUJQfT+iY9RZQlt1H7cxiGYZgaZPSbSyksBTVUPLjnV3UF
vlH6VnwzwzAM0zAo2llCt2+VmfwVunWTit7nPcIYhmEY11iYnUyFwRMoq/l4
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
3yDzvp9/viy+qfzmeY/1U9Syn1Q3vZW28Xqh2WGjEqvUDvK+4vqY5bBIvy2G
YdzDvIZFrmYoTe2eRYWhtmvYC5ZOVvtTq4XTy7SKXsVK7SjKaTKCcrUjnMgt
qfA3ErJM3sm1x35HmzQP0dvCX+knAsc4h2umGvcJWfLfIPO+XO1w8U152tGK
340+1UegQZv8Ikmr0KxpjjQNr3YQw9QGzPf8upocbLYu3ZyutGlEZ+/wtVnD
/mfGvTbr3aacgtRBandJVeaGZZj8kfXwS4z5KU36GOrWxM83+Ss4FtfN8lvW
m3ksaKshAy0p6QwatNbl2eb/KzR7vol/Ze2gZLMcLUnrDMPI4ylvBRGpl69n
EdEnk67/6yx9u3UTHdt7WLrPdh8xudDFFHrs22pr6GMLRT5JNPJJ7NRGiY7J
sRmfts2XUFRMiQgcW1/HM/bfbcxlqf/jDC05ozloExr9pmQzXfv0rNCu/H0e
HDP2WJh6zvtflZrWgo25KwmD3NsfyTw0PXXk1UlPo8ckqb527lZMn0Qnzu/3
iO+w59Qheu/kftt8EpnaKHb9letllPdOMeXBXym77Pq3WOWy7PpyP+3+5pDr
7cgExgpjpvq8uRHQKLTasnvVfEUEahbhN4TfkvEcfmMMw7hO4apeFuvVBaGz
6ak+y6XjobZr92/2UftzPc60qUsUfYqCkFm0MnhWpddhpzaKuQ9l9E0OpLc1
+CsaM39FY/BXcM14n5xvYC+XBd+UZ51TYxboU30D2rPt61Ch1TwrPxCaZhim
ZpnbNsO0/rwxrZfVerWvyGE536S5zVp2SXpXxbXvuR1foPIB9dMvdoRF7krF
eBQ27UX5vhW12CdNNfkrOBb+ik+iuMc0hmZtNESgHWhISV/QnrUe4QdCq2fv
+K3FeWjapMu2DduvYhglPOmtGDyAAsV16y2lu+mLHTvp5IHjtGHr+xQZbL/e
vSlHI7qgXta9FzkkHVY5XQ8lSs4faPwsRejXi8Cx9fUoJ/wpY70XfEt9zGUR
2olW1qVFSJp8S9LmVwc/p5PbS4Vmle6F1j36reyxMPWY5LVLTOvAnfpWPXfF
PLxidPTbuDqaw4JIf4YuXK9ajZJffymjom3FdO2H85U5JE7uB2bjr1y5THnb
N1Je6QZxTL+6kMNi7rFUfEfZzfPi2245quXiIDBGGCvV58vN8O2oE1r1VHsB
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
P3RUotBa+8fjKLBbJN39iE6V7xN78kWFi98gwzCuc+E1raK/8ljQbkoO2URN
027SSM2bNLRVFo3RFFCM/jPKnJpKa8KRX5Bk8VzqvDS1uyQonxGg6Ess16Yo
rt07E+VT/IU38vr4sVb+Snc7/oplDRY8izbKpyp/p8McltAUWq6xs0eYNAa1
AWjC8tuSaJ2kncypc4WWxmkLhbZGBr5BTVN/lDS3hRIk7RWGzJLtFzTLMIz6
fJbRXnZNOmNApvKat18zerHZSMoY/iwtbDacLj3t2GP5T1oE5TdWrjEiF3Pb
pNPVp2pvbffD6R1kv7vbzL9Tovdq4ZnAP+nRaDO9mj7exl/BOVyr9GJWi2fl
2sS7aiuYI8yVK3MLLUATDvOfJG0JrSU9K/4J7SndC83KvQsaZ5j6Tm3yVhCo
PR4R+Kz9GiyzXzTkr+ytzCk4WvI5nSipXPNGfHPwE7FGjvhgRyGFjX1R1odA
DXfUO48InGXlsbifxxIds4w07VZIkSsd1/y6emT0ImrTchFFR3tbeCb36aMo
fFC87bhL53DN/F48izbQVk1/P8YMY4cxxFi6244hb6XSW8EcY64x57K+kaQR
aMWoG2jIXFNflH5CR7ceq/RWJA1Ci9Ck3b3BJE1D22r/viyCPRamFvLom8+Q
f4Q6uSuI0Ed0pHkoUhx76SPJ6z7Lte74xG7kHdmavINaUOe+NVwnw+iruFpb
pOAlulZ+hoq2FdOtavA7rvxYuQ+Yub+Cc7jm6fehvj3q3KNP6Fu1j58H4sH+
ceQd3IK8/xhIjyR2triGvBUvvUFn2od1FNJLHX8FvznkjcW/yfsjM4y7pGmn
26xhY237ieB3xLq3b9j31C7wsDg2RrJ2Hd378Gf0yuS5tC7E8vl5S6ao3SVR
/1xubR614Zf7jaJchdrwjmJS7CLhi1xs70O52n4y/spDMv7KQzb+Cp5FG2gL
bbrnsQwVde7RJ7nrtaEGPLRg4QlJWoFmort/RslB6yw0pQv8WNLaGXE8WNKe
nL8CrTIMUzu48nQb2TXpHJ+RdOlu5ToXGaPm0vzWEyi7SSK94jeSTqXe7XCt
/ON0nUtr8MYch9qaf5D9tO0+WBtjh9Ej3hsN+4L5GvyVDu0P05/7vGrjr+Ac
rokcliav0kDvNeJZtGGzj5b0rtoI5sbV3CQEtOBIL9DUK9L/1r/epL/QWsaY
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
C2yfd9bgK/7u1GtgF5uchfnoicm6Wee+oUHUqk8Iy22z/lJP+rNagt7R3cjV
y53NafnlWqlA91u3Kqji6i/03ieb6ddK4ffgi9d+oK1sromuTxerEYHdiLS2
++d2NXOfMz7bqK5lkIFT7f5BNw/mz9uVVHFTOP/ltxs/0OZTG6lRbDfGW7jP
eGa4Dnv/5OEYu84UycIFICtkNtSDMYvAW3p1MWfKT7I5K2UiNgXDlrApbAsb
G34PX8QkRDPf9OJ8hPvtWviTXXNf5kNVeIhefzf4Gj63RewAb7Nv5n7H4hzv
kMZ2zG534J3V1AjdTfrqF3Xft/+c3EdbD++irf8tYL+N+I3Eb6VC8mj3nFb0
Spf5lF0rkt6pN4wWNXqF3vUcz3Kbub4T6f2m42md7yha651KKzzi7lh+c7Vn
Ivvv1bMlalesZs/BtMwzhvHo1lksj7piZQT9b7WvTXsLnZmg0ut1ZZi7t6ZO
IcEzn1K8gZEsIUf0l3L9L8W5L2LYysC6a0zMA1lCkfXWUornOtHvQ4b8SB/U
60Ofhg1heAJmpke6Lafc5XGU5xlKW8Aeas6r/hfP8hg/RyUZPmbgK3XULFZv
4lOXrs93pyqOK3weNXu/GEM2yMjXQ6sDTw/oCp2hO2zwaVgyfejYi9ol/ihq
M9gSNoVtpeye7LGK+YbhX5yvQl0/4Xx3kfkQvjS3v5shS2FgiMEz423XHwzv
CN4VvDN4d/AOad4nvFt3BG/lfgvU9Wzm18LJ5xjK9h7G/caN5H7rxrHfPPz2
ves5gRa5vUKLnVPZbyN+I/FbqZA8qhzhTD9ludW0GPcdmYutqOsuugrW8fte
GXLl8GbVc+uFNRCvthL2l+LP9tDNYokX7xcmsm9D11Rq3axYiy2g3mPxlLGS
WETi1IXquSS1NtMGrxiTtSuMHbvTe7VjqPyVxpJ6n871Yiz1Pfa+VyuGnWV4
vlgNC2SDjJAVMkvpA1019TisnxhnC9hEdL1IPzANfsJmrjgKZ66AWX83zndi
uAt8DZ9L6Y1YMdQXMaWHT8nEWBQyj37KasR+KxWSRyx32D2D/EZJ92u6nxl9
pPwC15On71sU1C6X/O5QX6Ogl/Qxk/PF0nPu5eIrh86JYyc3j3SjawXBbD46
6iBsWr+ieoiea9eUVKoACgr2oubd21D78GDqEN6c2oY9zjCX7st96fr5CLr5
Syz9eXEinfgxkc5u2UNVO4upzEC3SyL4yskDxymo63pJW9oF5nK8VtrW3F6c
IcAVDPEVThbIBNkgI2SFzJAdOkAX6ATdoCN0hc7QHTaALWxZvwJfnflhEPMd
fCi2Bj63Fl9B7PHXIjbvyPvF+uzlsncL7xh71+6Bd97mPGaO+jeS+6yQPCo4
tYuy319F2WvepY3HilguGTl29EjCfzuOeoetR/bS1j0FtDVvM8s3Ywb4R1/v
o12nD9GB87bBYDDr49Pv70Dtyj86fECTPz9wbtedw1d8G9Lzg7vZ5KzBiTEU
l6TDV/oNDiNXPy9KGZZKbfuq56P34p7hu+C+Hck1uovk3Pr//VZCa78soKvX
df3CNHz+SinzK/7Vw1Ru83AHZrtq/KF6zc1bFTTsrTfV9UApxmfYZO3N0eXN
/75J1/6sYD204IvZX66j1CVvatfa1XJgrN3PfYc1WIs9ldxenKE5L3OPcNYJ
4xTejHYwJytk1uIo/6jjQ6OfQGfu+5+rbfNThT7GwvqBcbbM4WwK24rZHL6A
T9qEq+uZ+sSEM58Fcb5LTUklV39f6jsoTCtvPOfrwQm2wVciYsLI3qfhHYvz
w+d36WJFg0/9Y3ucBb8JbF6QDejgz+rfmI9PcL9pB3YxPHHrlo2sF9zWr3ZR
4bf72Pwn1CSd5n4Df7l2kjYcLWK/jehX9/G3u2wix4NAJ94LpRFR79LROf40
eswWWuczkt73HUfrmk5g/+34Ms8JtNh9DC1yfYlW1x5I7zom06JGo+gdj/G0
yluNwaxjGMwrtNb7BVrlmWBRnnMtd84qG9WuGOIqK5AH9jCeB0avIvQQKnwv
mK5bkRc8OVHFah5Ec97pkVbl0lk+3zmX5enRLwzz0YdW4yXa/lMStRAvGpnz
EeOdT62SjlLqmhzq7P4hOx/5f+AGYe65tGXh4Gp8gqeP5m/PUPrAswdVdH9U
fk2JEXykakh9es1xEmN8lqp/kY2vcGshG2TUYEFiekBH6Aqdme6cDWAL2AS2
ifH+SNR2sClsK4qHcb6IdN3I6obwN3zlMrOS8902dj7mvKR6vm9VTCCmxGKt
wDuCTk6wHA/AO4B3Ae8E3g2juCV7t+4MzrLKihqWVR5xDBcGPozfqNzq35h3
ud8u9htWbwj7TVvk8gItchvDfuuyue/XMVx5HMNc8Jt4bI4f9xu5nP1WKiSf
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
93IdhtEc+IRNmbZ1H0p85eo5uqXxO3LcqBGQ/x67bS65dG5Dnx7fYP4OOXDg
MLjug29204av9tFvDvLgv/1WSifPHab3j2yg9M8zKfmNKcZz+ivn2s+ti/99
Y08mxfaN1bwfeoS+ZXylQcdweuwZbQ6W2H6xPBe7gh1fwJoMr1/sFXvG3qED
a5zJWm4J2XBoHxUe3s32gD9D5/LvnwlbwCawjfwd+oop7WaeCzVEV/XPEnwE
vmJ0L8AB0asuqk9Hxgebd2vDfDa+T4YyfugZFECeDz7IXD6eDQPowRbBjKuA
/6ZldBvqHNOResZb6ro+O1ZsVxdOSRlxlksm3EOv358jQaxCzGJeqc82cCyz
voaxy92bJTtWjQoZW3NCOL+I3Cly28rcLHrmoMfQJf9a9KO3j8TN4udPpf5S
rvv6cE9auLgXc0Qbwju8y1C7UgZcxRnBmoy+pz+/nvZ7+r0TF5hz52Ej/kmF
M2xxlqJnn6aYegvLlV9P8pPqJSz1Ku/RA29cEf/+XfFdAeMwuK6Pd4F4ZgEl
eC0wND/y8/l+T1FBUHuu54iul2lzjceLJVT6hJtjfMVUbyJjIFfT69HQ8Fk2
+oceoW8ZX5H7R1lfh3sxh6VPmIHnA18Ra8WarfeBvWGP2Cv2jL0bsoPQZW+h
U/Rrgz3Qk83ct431v9ZkE0utyiAru5VF4DvwIRvOFeFr8DnzdQMXmrhORpkx
RWVd1xKu61LyxI+vEJ7424WzyLiH0X5/iEWISYhNbH8RqxCzELt+9PblWIaY
Zu4HxhLP/cugA/yNmFg1Kn5cS/Dld8Bz3GLNecg3PeIprfcrzFGAPjsrTH12
gMPkVo+zrWcQMqXLNCpMa0fXnvOt7C1VyLiW7F8mbAVyqUVdylHwsv/NYxx/
b+a01+ndJfN0aNZBiPgwITmd/7X5Xa61qCH+5T5j9nED7jn26GxaN7szXXvp
EYkLpKY7y+60MOYDx+djpY9T/Rq7qVHrr6nFC//k/lvjZqbS0tRhtC5pMK1t
3FfNb2/q5yXzhqA25cLE+vRO2iBLzY5Y7yt90ljkteM3XINr5XoWzIG5MKfy
GXgmno01YC1YE9aGNWKtWDPWjj1gL/K+sEfsFXvG3u31A+OeYNCh0OWSGn1t
uO4tNkmUbFJTG3ux5dWxfabMdQ8fMeNUwnfgQ2XxPfjstf+SXn6IJYgpiC1a
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
KHDQTAqPLOJ9suXxWY/Y2RQdrl9nSTPOG3YfBXcMpXZJwRTS/QHyyGpENbp2
o9qRC9jzpjq0nl7s/2eotZULPz5Op47bxt2vn8midXuCKDTZqrHEJIdSYIw/
hSd4WHMrEpvxmLo6Nu3aIYY8vJktPKew9U8nd7+XKWRpCv14rLWp2P7lg23p
1Ffd6NIh7V4hR06naGoN8SNn0nflFbSlXKhbFhjr77C+wnu0zws11Eq27Aum
CGYHUV/BZ3xndA3uqehfYlJfgc1xPtaEtWGN8jXDBrAFbKJpS2ZD2PLqwRhT
toePQpb24D6D7+BD+BI+VWuE8D0wIM4V2MB8Y5JlfVgYhoAlYMqmZhnDHjB4
eN8nCmwCq45gG1xwZZwAN8CRkK4PcM6AO+CQI5wDR8FVuT4KLoPT4DY4zrnu
vVy3HpiQt7KC7x3YQ3xaLL/n+5k4sMdWH3f3QN+DD05ae7F8dV5VF8wBfUV8
rx06Ct5dP/bTISpZWcz7MGz6ciePz/7yu6VHw+VKunrrP1s7DO/B95k+mud6
NGwn1GZCXgXqgNWJDqBWT9rvJ372skwjEOPEOtqKqOtsRF6GHW0FI6rLo+T9
qHZNKPR6d3okgurG6NeM4n1c2oRwjehOdYrcddZeKahxBi3khqwOFnKb3Duo
7DUwV6avKNfrHhdBF658a3PPm7LcDzzzTufN848iQww1JtgQtoRNtX73aR/G
MWH3ecyn8K0WVxQai4o3wJC9ewOLwGRkF0uNOk+hRl00w27GtNGaeWf/rgEM
y2uA/WzRRzcf3c25DY6D6zyf5doVvgcY3lNHX9GqE7bnlEVzqT7+lAfqAenF
oktkWgrPg+D9wG3jn0U+7Duf3jSixRSbvtfoyyCPvyL2uiMgneZ75dLC8MG0
yS9LMz7riNaiqCk2/nH6ZpJxHFlTg2lRj24lBFFVWgu6muxOlRnNiQaG0s0J
rWlHVJZDcxH1pC0vacTW2dgytyfNWjbIdJx+7JSlzMbaORdTvZ+l6y1daF2Z
bb6RPBZd6DXaVhtr1pvivNZpPpPntIwoo2VDzOW0LHotlf65LIBuxnjRDw29
lPb1r0VX+/vwgc+KWnLs3Jsx3vxa3MPMszAnzA1z1Jo71oS1qWP0hV4jNfEr
DtgQtoRNNc/xG8N9YdZv8DF8rYkBhg253mB2AIvAJLAJjF5PcueYvZXwMMNw
fccwzzgCroAzhrW+TOSqKPRR9FgJR4+VXM51fo7sd+wJCm2F7RnYO7CH8L1E
A7/qOmElmpqLRWNie1r18dc8rvXwoUm+BZpxUaHeT2deN0je3xo1ga7ENuT9
QMR32lG3Sd4PpHDUIMqbMdUa03VaRd1dX+ExXegt6I2hFfvFiHbdxXto5PnO
pBeemUzb5rSnS2Oa0sXGJuPNbm508ZkmPGZ9LdP3jrQVjNIRw6V4etKoDRp5
CRNo7awn6drQJnQp0IMuhXtSVV5T/l3eQ3OohNef0u6dPja/wBLzXkE1nr1J
abUXWDWWdoelvItZE0Yq1ij2YrmS5EvrHs6gp2qstd/bRGOk1lxJvWrPp1nQ
jVDTbNQIrkeUNu5n03vFSF/BubgG1+IefM7QIdi9+TMcmJOYV4M1YW1XknwU
PVfEAZuIeUCwlYQ11wWCLWsIOg1srFm/jfkEtcHgo/WznuA+g+/gQ/gS/oNv
1WsFBsS5AhuO4olrLNlWjQUYBVaBWWDXlJ7IuHBpbFPODXDk741ncM6AO3q8
SmUctGqdr/C/rblCUzln5f1uwGleB6yeE8cbOC+vB8b3hLpCzyV5/3r5wN6C
Pab6+M8esVPvfe8VaYSvpoioMsvfqC1UptPr2lIvrN7LFNqsiCIii3kcNjBt
KoWGz+a9s0ODivk5LuEx1CYilGIjzOUGyEdgjC9FJ7Wm8HhB3whJuJ+aZNSh
v2VE0n3t88m7hXFMuk3By9Ze9ns/pQsXOtGpExna+SNfJtOFbx+j9XuCee5B
RIInBUd5sufb6hUxScEUbulv3yTxfmrqqd8nPCxnJr27ZwldPGY/zn/1UDZ9
dyJNUxfA9dAUZs6bp7j/Y8On0759ZZS72Grf6ET7dbjU+gpyRmbv0M9HOfJl
JL+vqK/gM77TOx/34nkoDuor0bKcC6wJa8Ma5WuGDWALLZvCdtyGzJb27I3r
4Rv4SM9/TTxncx8L2p8z973NnBlGgBVgBtgBhoAlYErrucAgsAhMiviMyH/Z
EMvAOjAP7IMD4ALXdxg3wBFwxVF+gZPgJjjKa30xznLuMg6Dy+A0uA2Oc67r
1APDwF4h1viLiFrB95J7vp9ZBvbY6uPuH5vfqaDvK4/z2jyoC/aTqi6YFP/k
ZxvrK+J77jzWevUK/fbHTdr2T0sctvRV+vScoOWgJ8PlWzeF2mE//3trh0m9
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
slNfLbkXu+/D5uqryYeZnjrAhHztwAywk6ujrwBzCi2EYRLYVOMVGDZbA0wc
u05+aO1p9JWypxE4tqliHf2Lce6u1wMz0Feg52zeVUG//GK7Rq1RXSfsr3UU
zNaPbxb7ZNJCt8G8//ft6itcD8iw1gr7fpIXrfNOMIwXb/J7gve2V/fxQD+W
+S2G0ny/XJ7fcnfiz53ovSFhpmLeiI1fsJN/MHXecGndQxLt9KRo1pumT3iW
UvMW06zxw3lPekXsH+/2BwzTvPZyoiUvKKAez9O4HhQkzaF4ZCpf25KlWdQ8
dp9Ci8j2tu1fgtGj4WvU45XFtCWik449O3GfbPG2/V2Mya8JSuVD0so07xGn
eQ/uX/ZszKGHKm8k12+d0D/GW9k/BmvDGnleBVuzuP7rUm8aoacObKVlQ9hW
yNGyfgcfwBfwCXyjlVskH3Ifw/dG2LjggL4CTG7SstNt6IfITwFnwB3bnkZx
vKfOFsY5o/uBs+CuWBPMobwVDX1lTcBIvrcU+2Tpno+9qfqoPnD8a2wzmu+s
H4P9+4x8KZ7LY+bIY8G78TWEviz9JsynaNddil4RiFlznSUznSbFjqPnQ/Po
5TlDqGWDvXbjyi2bfEzPFkyhb14P5+//n3OrSz95OPFxaagvm5N+3xjtvhJK
DQYjYoA1vv28pV9Jh6FvK2qZ2fTAEPuL1/2AHhm6m8bPmEQbc5GvM4imDR1G
H01pSVdilTrApNhptLH3AIqu+Y6sx8gqmx4j459drMgTWdl8AIW2Vmos6GOS
btCLpbvLcmrZ+G1Tve3l+sq0ugPs6CvKHix4Bp6lV6NMq+cK1oI1ye+DNRv1
poHNYDvYUKFbMRt/NCWM2xy2hw/gC/gEvtHzm7zmFnyNOcD3Um4Nw8RaO9qJ
/ZFGl4b4C3ht4MSwW5tjGFgGpoFtu/hnHHl51hDOGXAHHAKXBB3IqvuBc+Ce
vIc952YNqw3BXb25gvPgfvXx5zx4HPRPEGvUGk3Cyigi6vbjo8GWvveeidp9
OMR6YSFxSRQcG0LtklS9JuKFHiqeYcUUmDebfDosINe+wfo1rsT6SUn+5Bf+
jtD7IXw1hUdqv3u/rnyJIs6t0Fk+eJ9+rFhP51auV+Y3lO+n62fSdOPserF5
Rf2rdvfRY5M8aGaZLx3aE0LHz8TSyoPDqH76YgpqaO3PkjN1Nn/mx+9V0KWD
Vo3lwsG+dPqrFLp8MIp/33H8Jt6D/Klpnvz3yaW+uvZGnkqYRs+awPY6OQxs
xCRZbD7Mna6e6UanjvXga206LIoP3tOefYffcA7OxTV698OzbPWx+ro5NBhT
VvrytWGNWCvWzG3CbABbwCZS7gr7HjaD7WBD0Z6wLWwMW8PmsP105gP4Aj4x
rJ9m0cj0/A5MHCtX5icBO8AQsKSlq2AAg1rY5Jhl2AWGgWVg2h7uwQ1wBFzx
bFks9G6JV54DjoFr4JxWPTBxgLPgrvn+S1r6ynK+h9zrfUx3sL23+nD80Oqp
Ym9cuPItvw51hbi88m/UVwRdRKhNtOwdtg9c+1ZbD9lh6c2y/FU6VWlcW4jH
ZmW1wypvirXDLDH+X87z2mPqa+R9M8QxuuJV+uVX2/X/zO6RWzxHN9YOvSAr
23F9BTkbvo/Zr4f1t4gQcmodQgNy7D8jJyeT4lMfpVoP1qHOXTvxPAzoEJls
fjmyHJvn3yuV+qNgjecuH6fNB3farP353asoZ6BQI03SV/Ac9h1+U5+PeyCP
BZ9vWfq74FnS/NgcMBfMCXPDHDFXzDnHRI012AC2gE3snYu6YHq5PEYjy6JH
6Z7DsABMqNcO7ABD6vOBNfW5wORN2T0cqQEmDnADHOFcYZzR0mt+ZBxbtqPi
31MPTEtfYf95/eZ52vz2Vvrxii2/jUZ1nbC/1jHGf7xujBPv9qM/Qolf/9vW
VzB4PxZLn++jBb52dJE4WuXRk7YFaNUT60RlHr2pMHYQFbmkaudTGMSk1TrL
Fp8E+mBEqDl9hQ9jfeW7ZUK9qCFPLaR3V7a2a5e8SeMVmkG75m9TwpA3aOyk
cfT6sKm0JFBb/6pcYK0Jdi6gKV12riHMLaiWotfNliBmy6J0alfA/jeu1yaL
XrGGeroW0wDvUgoL3sk1Db2cFbu5JzItRdJXZJqL+nzcw57PMBfMCXPDHDFX
zBlzxxqwFqwJaxOvwZqFvifO3BawiZTLwmylaf/AcbRuyFRua9gctpf7Ar6x
5z/4GL7GZ/j+TrAjH8AksGkGw0Y+e9VV6GO0xiNVU68Bx1a5p9rtXQTOcm2F
cdiRfita+gr6Ci2q0183bwgDe1L1UX3Ij4vPNKGZzsN1Y7Gxo96RxapX8Hg4
chQ61NpCpZ6ZtDomh1onHrbJFUipuZo6jX+T1vbsxftGzInKpfgJm+3GmDEW
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
3DNp3RH1nkk/XD5M+Xut+RX0bcp8IZP7T3VLT6HElCRKSE2hHr170ZKjm5g3
MLL+k2LszLHDWDcEWiElPs9HvYWfer2FzK3weX+meJ72yaSEN16l5PRUysjs
z9yDkVqW1vFtyDPIj1JNvMS4nYvp1q/SmX/hv3bRUaVGhw1v8tKG+Xb8Ct6T
MSPzMPL3offx4THpXB9zYC58B3NjDViLkZoViUPqT13FXrFn7B3vy3yWGsdi
tB5INx4ilqxjI2KLGBvCs9g/sNMDHFKqhKkU9G9D3ATWrHqFCVu2r4C+v6Q+
9obvPjbj+pMf9fkR235gys8+/WEffVVCnXln8xjPDDw7SlO/qbxPWNm65N/i
2/MrXVmfem6NwbQySF+f2qj9a0ld6Uy5gQvNTulvd66vqr9hoF8Y8waB6TQ7
MJNmNxDj+quf5xcGdqGigQ707eWeYDb9w65Nr0Uv9VSvT1mxpAPf837+k5p7
nzuyv6EzfqneYolVvcXwPJU+YCbOY2bsYLO+vNFaFpy1r/aI5/5dtp+paXSo
cVzMr/gn2q/JhudhbR2VHlaYG2vAWhzzKop6Jl9pz1p7ha8c1QNpGWKkFT/E
FjFGrNU+BzaAETsNFgO9ws4PAr/SVZ1b8U9nTM/2z2SMG/aTrb9Fbtl+HzmI
XMQakJulkeMrg4bzMwPPDn6GqNyDZ075VX6V9JrQZYLque3rv/fVPItf6Jpq
Og/uzJzLqlaZ1Cj6kMNz8MfiD9Gr8yfT5Lem0mOJ+6jbpDftzquXZndTPduW
7bKPB301Ppx/s2/WyfDuQMHhX1JShZWaZ+o9s2dTvl9Piq+4qsT8Cgw1Jcpe
WbBZY7LsuIbl0+IlfsXdg66G/4OKHn6I/86bmqTJT8AwVvwDq6S5FFos+Ffm
cYxorzjLr+QreA/lnLLmCtaktk+lYW9cuyL2ij1j7/gbvlDbp1XtCnzqPrtE
MZH5FcQWMUastXCQVGE5YwWYgWb98krJjCVgCtjSwx6waYvXlInzGMvA9Ktv
TaZH4x3nAXIFOSNr2HMuuWnXGSEXVXlQkbvlV9m66o2cft/PFR1ZRNNlVLfx
vfv9uVuPehQR5a2pQ9IiJtBybmygX5hsXmk1yWvg+1Qx42Vybe6cn2etXWCn
lfHJ+ddUz9Et1or7QxWfSaIXNwU4fW7PHEtHB/onLaXaDOiUTFwu8QiHdn7M
tRxXt31DRzcco/MF71LRtp+oaEcMPT3pKUqeGaLLXcBOH0/m9c/+NEa7diWi
EYU2CKGIGBN3NMqL9/1CQQc2rtsR73E9jrgH9+I7WuNhLsyJuR2tD3vAXrAn
7A17PLLhOO/51Nqt7APcB5/AN1zj01Kb25F6nTUqUYwQW8QYsT6vqFlSM2DG
FkfAljNYBHaBYa8X1zGmHWJI0Q/Mwt2p95/jnBO5hxy8V/mNZweeIff7OebI
8Cwuv9SvzYdLry+Y2UzaI6yNsnUTXbxxb7VYMP6G3eq8iJF+Ycqzavk8+usi
a58cu3CQVh2wzCFzK8rz9D4mnQ/Wi09+nmZ8lU9/GtQc/+X6ccqc8yoldXm+
xP2oYGp6IVbcCtdzSJxDkng/Yfo46tMnlWslZB4Cn+vNgbqOh5tKmidT9ubT
f36T+BVbjQ6mSxScydRd+Xb8Ct7j+01cjLJPGMZibR3EUcyBuTAn5tar0zHv
0cQbYW/YI/aKPTOXZNqjFsfijJ6NmoFzQywR018M9J9jfwmszBSYwXrQJw7a
LX1sdXFsOBZgEthUjnP43EEzjm05QTWz7Qdmaxu+LOT+Yvcyh9EHDs8KPDNs
NWhKw/aLZ9zGb8r7hJWF6+Kbvjr8Sgot9c+g+e7ptCJA++zZqE3z6UvXZkpn
0FciXGhmzEALPxKQQKu9NH6Xb6BfmGzQU5/bvB/leqTa8QToRXWlnwN+xVbD
fo4Pa23o7UvuHXV2gZ/mPYPHjjV0xq+mF7J6nr3WvNInM6KGqPAQ+n7awpon
4DZs6lJsNTq0+n75q/ArPvZ9xDCWWVvHbO147i0G+AJb3oj3qsMlwVeO9Gy0
DDHSih9i67AHnDBgBZhxCmMCk8CmLQcGDAPLUpwccVD6/Npq7y5WPciQe8hB
5g5FTiI37za/VwT042cFnhlcu6LBr+CZU36VX3dzoReS7dntjadr0ezx2hwL
+hnleXSS+hlVSqf8h3tScrYxXfLHh35Ir82fRH0Xv0ZLc/pZnVdPyxyte8Zt
xbUMrkOv9RlJg6a8xhrqKS6zKdEtV+IEbM7VG7Y4xOvGvxZNdefP8sEDWPXt
EtZ+UIEq33B24qMS3+D1D7rW7B/itQfdivWhea69dXmKcTnZVvOB53ii2jqn
tFdgs6qmsBnjVyw9wjBXio3mCtakt2bsCXvDHrFX7Bl7hw/U7ofP7HmrJSWK
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
0OZf0nutu1ppkuvyKz7W+iRGOSrZtgal05YHnjR0vu8Uv2LitzB2gZhDOafR
ddrpyzjgV7hORvgOPnTW74iVbfwQU8T2bnkIYAxYA+ZmuPRjDE55oB9jEtgE
RoFVYFYrXs7Ubcl+Qk5dG1LLnGfIOeTe3fMr3flZgGeC7WdKfgXPlPKr/LpX
19WX6nAfotyhmXTJw/p3/beifSirznRDZ/Wb50fSJa8K0nn707VoXMfJqufQ
+S4p9Fp6Nl3ICjLPc8HVi24N96TiLu50Y4wnnZtQn65l1aVTU+tR7oTeNNll
qPGeV3I9i1cqTRkzkpb2H0pPDN7Iehw41098oGR1E/iepBlieW9NTF9NTmFo
/dfp6qNedLlNZbo0yYtrPIa2nGOIv1hUO54WDn+RXy/06Mya6Eb5lbeqJhrj
V3D+L8bmOYYP4DmNrA17wF6wp8ttHuI9Yq9a98NHVr5kLZuSxmAlxxCxfGLw
BsoTsUWMEWtn8QFMAVvAGLAGzAF7xfGVGYvApBmfAqvALLCrhmlgHZgHn3bB
qyJtfitSV8PeXLcicov1epTcishB5CJyErlZfpXNa9baMvJ77obgV3LJp95f
29/Hq/4SCo1TnHlHe1O9p8OsdDPQ38hWlzui6TKqE/Ca+HeF4bnCIteQ2/Mv
kOvwDKobHaB99t6rOu082Mip8/UP9zZS1RZHnyr0nQp30DOscZSXuTcVuAR1
fqQ5fZAv5mjnQju3htChM3F0vuBd2rb7Myoq/JF2711MewpDqMVIdX7G1m6e
iafis0nUuKO2RvzjHU0aLJ0r0/v749jwmnubdWyi+T2MibExh5G1YM1YO/aA
vWBP2Bv2yPUpYs/Yu7LHmdLgM7lHG3yp5+twUy8wtb5siCFi6UzsgRVgRms+
YA2Yc4t7gTFoFK/AtoRxa00k5ILcX0+u/0LOIHfM3IrIKeTWX5nLeHbgGXK/
n2NGDc/mv/uF36Pvv1d9wWTT4Fdg0NP47OS+ezIvuJvzN0469R3uF3bNul8Y
zr7Xf/cxLX1/JR27IPlq8hcSx/F81xh66GEPqhDoRxWejKAK9QIpsF0EeQb4
sTZIcFQEPdulvb6WxpIZdM1K9/wG/feO6Rz+6i/cO8qWJ/r0ZCFljhxmiFtB
DUZYx2ZUp22EYX6lT59USpg+jpKc4BTS0lPo0C+7uL4BOvQf/dtxXDMXz7Dw
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
d3ID1OseJG1IW9KmNwovxCIxaY9Tid2NCpaJaWJbcisC68S8Mx3RZ+g77vga
fZM+WsavKPLfND76ehVqhAUhXqsO1c2WEvIrlHDW1QoJcMoVqf3r2Zvbnotp
0C4MTZ50o/eKyquYuYyh781zM/Z/BVcYC7/q2CeF/bNZt6nTpP4y9sz+4dpx
5VT0SElF+9holPMy92ap542EpPjiOL7QK+PnO0/uKOZ+7MSScyMJg98tOTdX
fj4t6x6xxwi5jc++L5S9Jti3/b2vtmLb8c14eeebiB+p9H1Ps+NZ4rKGIy5F
qbMVNC0Ve0677pvC2l9nLheJ/Yq19oq11q9ClzGJUtbmrZLvfSo+O3NZu7+J
vXDNoKnKHuISE+WerPeo1gCLH9Uf43e8iU/EmTYe2SrPyLPyzOevfid1QF1Q
J2ouCKz05ky31D1tIG1h5r24ZrmHvRWb1XoA7YQNacs0HY6DGCAWiAliw7rH
OkX2dRFYuvJzMWdnVIhdlfNxl2cJffIx1G9nWxesh/At+lj5Og+gfZxODTMz
J0GfDYvR/44hbuM24Fcoz/TsLO9U3q1l484bma86/nZ/aYNhmFFrsHht0o3l
LvUbiMkDRqN548NIqTPPHBNWJNkrD3188jBtfqrTGDn7ZVwIqWjDqxjJA1id
G+VWTHy4zwggzd/MsXhp5zL0q4GrQx7AbwN9MTNzGOZlZWB+oxTk+fy9OJZf
V5E11nyLgyixfsv3zGfd4BNjzjlpL/M3ZN/22tZ9253nb0xqPgArvZ6Qr8lL
8HljvEY3mSvydm0T1lRqa+FX1lRqL9/jZ/yOEZ6Ha+ap/VrI+bQcoM8XiLPw
TKtl3a+O8qx8nj3rqQPqgjqx5pBW23NZTnRbbAexlk9HzAtJw7wJGXhj7FBp
Q9qSNtXmVrwkFogJYsMdLBF7hvKurHgWYtxVP58p89OQLnyGvmPjS8K36GOT
B4yUPqe/N5P0Wfqu/Wf08bJRNm7l+C4zEMvHPG0bv7USIzksZ7If1oxnj8rK
RFfWtbprIZ66aznm5Aww3Itl8eh+GvkUixFfeTq6V56G4Pv3uqwX5oxjWR7d
F8tjn8PiRs9hbL1BeCljCMZXS5FcQanE/6uRS0jEpNEvFJ+BHJGZa+FZmiRv
xZwxKZh7fyzmWuWzFE4OlVzG+HFp+HRyBFKzsz3gRhQxVZgmxdPnuTb3wL1w
T9ybus+5lZS98wxNkreIMy21cCo8qzoHdUBdUCeloVva6OVqvaXNaDvakLak
TT3lVoilxgJTxJeUcosddEFMGu25QqwT89QHfYC+oLUv+o6R3BU9/6Tv0ofL
xu03xi+fdcvjhLcFvyLujVV589yK91J2XR+Es4WtXMbcz+8Lx8FtH+Ob9Ttx
Mn8fLhZs1Kyp9E3eZpw/FI5TB6Nx/VTSDYuZnzseJfuJDMxrj8iBTVBvUAP4
jPNGs4xWlnpUl092wvXTKRjzYSyCO4YjoF0TBLRtivrt4hAWGqxwA+G+aBZy
t0MeBvvJh73cAEe+ClfWO9bKNQ8lZPLOYGz/YhWKjiVg8fzt+PBojCO/ckrJ
7Ule5euUO/FqHSPF2Xc4h5Jnk+KwDtfmHrgX7ol7c2lnWQ+slZyTZ6cOQq14
p2Ke5W6pO+qQuqROqVvqmLqmzql72oBz0Sa0DW1Ub6CftBltRxvSljcKJ8Qg
sUhMEptamCWWiWli+4DA+HkX3AqFPkPfcdff6KP01TJ+ZQxeWTHrVv/no1TG
jMIVqNEixD0+4UZKKfArlFotQxDwhGMPiJ7J8ajW0k/24mZPbq1nWV/swUcN
9n8w71ep4aTEdd89st7t3AqKWi/sF/taTmbZd3Iz2k1MReuc4vXZC71HYjzi
n+mMHknxSBLvxZkSERXXWslneSwMlZoH2Oy3z3P98eYX6/GHdY4KVDHzAX85
rs/6cUd/tM1/uf7LD7J3PHu1sP/Isj35GPPJS+j4xlC5r1Qzx5XAWlxvTECK
+DtiWirOXj6meUb2Ldl/5iD+9aW5n8muzdh+ohDfXyySvMazc4fj2TlD5Wu+
t+34bvkdfpfP8Fm93idnrxyTa3MP3EuCuQacrAGWZEK02POYrROwdG++5G82
iPl4tp/t6qp9LXRAXTisofIsql6tdEtdU+fUvXX8v0rLAGkj9lp5tOtj0na0
IW0pbWqlQwptTwwUCixonfEXM4Yc6oEZFGLXgmszJ2eUr6DP6NXma9U1Qvpc
tRZ+SEhyzC2jr9JnS+r3twu/QiHfxLuVd2zZuPPGm2/FOcRk36ybgYUafbbn
eyVhYcexeDx5E9J9VtrEglV51nc1etRZg6Du+1zG7Gck98W5QLXGkrEeFvPn
x7gVE5e/3x80FdcClHpQv4X54dLkOti0uCm2Lg7Bt/N9cTW+Gi71q4HJjfsq
uRANemBa68GYnTYUq32suAyrWL8l3u9lzQvo52GsqNPTJv9DciVefzf3H0mU
PVt0+494kY8aLP99u9YzKPDtpp2jIp5j33vmt3A+fneDn5or096qv317+R4/
43dkv5i6ifJZvd4nG33j5Het9+Kwtuw/01PyN8p8ifKM1t/b5NdT+Y6TvBSn
urVe1zdF2mhG1AChW5P8Lm1IW9KmtC1tTFtfmlhH2l7WixNYICbcxRGxZ7Rn
EDFNbBPjrvyAvkKfoe9o+RR9jT5H35vvleKYuyJ8lT7r4MfCt8tG2bhVY2tO
C4ytlyVjxOuy2unGb43ksMwZb9KNa7+SORxdzL/h73jXKiwe089lL5ZVUYlo
eu823Zh/l0pzZX5BTMWlruuFMa5+fyKWpA/A2MyxGJ85Am+MfB5LQtNsc04q
90JGVDbG9BmNudVKXsNqThWT7Hmy+OEUPFV+uTb3YeYhHmn4KTLGZyA3tKt4
LhEv/mMctk4Lx/DEHFxMqYcWP671nF8ReqJ4+jzX5h64F+6Je2NvE+6Ve27Y
cKc4w2LlLBrP8+zUgewFI3RS4pwVYRvaKKNltrSZ9We0KW1LG9PWtDltv9AZ
t2KuBxZTYZmSs1LpLV1dEJPEpqueK7kC48Q6MU/s0wd0a9UJ33Erd8VO6Lvc
C32ZPl02bp/RZsIN6l9ys/iV0ui/kjoeOz9a4nasl3LqerrLWLLkBPa1wrWN
QTiy/XvdfhWnNryLb09E2jx38lgvXD7R6YbFz6+dfhbfHIrFjC0t0HJkFHwy
vVEvwxcDN7THyaMtLN8bmOdn4SRC2t2D4A5NXPYRaRbdFMEDa2DXgSY28Xqn
fNSecORMX4XdYl+fnBqFBbNnO+jk7HGFXxlX4KSvipCADvFSnH2Hc8i9Hbfl
V7gm195+agR2nR4g9+Ss3hXPZM2H8cw8O3XgSk/UpdSpeU/UtToPbUBb0Ca0
DW1EW9FmtN2NwgUxR+zZ64QY1cMvsU2ME+tGfIK+44nP0VfpsyXmV/yn39H8
Cu/uO32w/0Mz5nqEOs/1uKlSSvxKYrJJ9v3uaJXvwZ7b5e+thDqtg5z2r09I
jJf5AYb2qv7O3+p9wzW4NESrXpi1MHdkbcF6vHs4F2M/Yb5IOhKs8kWYO9I9
OVHRodjXg+1CUC5CSGAAGtpxaEPy3OvJ8r/nDsu6WHqfk/M4caEIH329G6s3
rcfLaychYm46IlPbo1dyPOIG9MfTzBGZnCq/y2fIXXDeD4p2YO0HSu2tD/+9
W/I4Wv1MRi2ZgFGLX3LkFcR3+Qyf5Ryci3NybpUfYY5Lr0mpcg9xg/ojMSUe
UWnt0ULscZzY66r3V2Hz0d2yD7y6Py2hDjivUb1Rx9S1te5Dno5AuaAAaZta
bYKkrWiz7imJ0oaSKxD7pG1pY9qaNqfttWujsR7YBWP1wJyIrF1mtU81L8sI
Z8FeMCbhO3qfpwifo+/RB5s8GYY+vZX36aP01cRk1zXEXMntxK/InBxxt/KO
5V1bNu68sTO3EWbUTbLhUWZWS8dSv8HFOSsBGcgYlIWOPp8isfabmnFgCvNZ
elSaK19vHOKkDpWXkmMxe2AifvQ33iN8/PQB7uWveGXI+kg848iRb2Hk2Bz8
e0VbXOpwj2XOA1m+WOIVY5NLwf3lN0jFG92HYubj/VHgn2QgZ0RfmM+h9JTX
+w45jx5Y55uCFdWexts1lD70ah2xGb49McfHJLkLflflZzjvGp8k5ZnqsVjn
kyJ5HK18mGJ+xfb9PJlv0lM+yzk4F+fcZMOPtJU5MNzDNL9ES36M5GjEXt+p
GiOfL/AzWfanJdSB3HMJdFngn4gZrQfgDdNQsX6qUo/NKmeItqRNLb1PhK1p
c9qeGCAWiAliwx0sEXuG+9kLTBPba+o6r322cVgX6SvPVJ6HlLrzdP0qsfYs
6Xv0QfpicS7ZYOmr9Fn1Pfoyz1g2ysbNHj/F1MXiMd3wSsWBNr/Bv9i/ngt+
xXkOy/OR053WZWLMO7qCEm9ue9c6LB/eV78Xy73xaNLtgMu4fzfmSlRW+mM0
M+22qRfGeP6c5wchafR0tO73ProMXyr3sPhBF7F28iLVumJUYiYyHs8pIR+Q
iNwqMZhbIQVhsftccxl3LUarSnmIyZyNhaZkXHy6NsYMGoFXctKR3W8EGnf5
4qbzK1yTa4/P7ouxg4fjYkwdLOyZjJgxs9Gq8jq5Z1dz8OzzhQ6oi5L0sqct
MtrmSNvQRk6/L2xMW9PmtD0xQCwQE8SGBScCM81Mn0kMyV4r5V2fh9gkRvV6
rhDbxDixTsxzD858g77jnF/Rz12h0HetfZm+TR+nr5eNWzv8Y0rnt+C3jF8p
Yf5K0IiJ+HLbcgNx3TU4s+8DnC/cibP79uHDD7dj2tovMW9bNBbvbI9N+9rg
aFG0jEtfPB4tayopeQxRuHoyFqe+iMW1/wzCudPtceDAPpzas1HM8wHOFX4i
+1pcFO8V/jITV0+l4fLJNJw9kYKTX/fCiSNdcObgE7h8qjgvotRzFE6nyRpU
V0/GYcG2QAS+3AZeE71R/9VwfHKg+HvPb/Cz4ibuQUhH59xBYPNaSi+R7lWx
dFuAZR7q48RX+j1r1hwYgLdz98i8kVXv7sfh1fk4d7S5peYUn+U8724PdMqd
hHXqjtBo5/wK5+Bclv2INbgW1+TaRcd6yb1wT7r1wMSzPJN6Pp41uFtVeXbq
wJmOqMNgK26FOlbnoe5pA9qCNqFtaCPaija7EVggxog1Yo7YIwaJRWKS2CRG
iVViltglhollYprYvi4wLrF+sovEvsxbYm+b44pv0EfoK/QZ+g59iL5En6Jv
0cfoa678kT5L3y0RvyLujjuZX/F/KudW/+ejRCN9wSRLv4P4nq57ldw0KSV+
hSJ7VHgr/RzYa5s9t5/qoV1fyyFWXN9bXy/PpiM9ZzTS5kxFv7VvYvjGNzF0
w5syhj5w3Zuyr/h3F8kPGOcu7GPlrO3kWC/sisxLOPFDERZuWIHt3+3An39e
wP7Tm/HillykvzAIz/SMR1KKSYmLmzmW1N4mlGsShHLtIlDOxxtPWutg6os4
dv6goX398dsVrH1vPa5dN3auc1ePYefJ3Vi0fRW6TkpFlZHxqPViKsasmYSt
3+7G2p0FSn2xwztw8D8HcfnaaZdzzli7FDPW5Lr8HufinJxb1vfaUSDX5Nrc
Q9VR8XJPuVtXYIfY47krx4A/DHAl4uzUAXVhRAfULXWs6jvWFCPrtklbBAVI
26jcCm1G28ULG9KWtCltSxvT1rQ5ba/kphSvX5J6YMX81A8Ss8QuMUwsE9PE
NjFOrBPzEvsaPiHrYfl5G/It+mD5gDooH+QtX9NH9XoLuc1p3Eb8ikUvaj8o
ceeWjTtvXJheFxkNxlrFbQfgjappWOTbV/baDm3H/vVLdOO/1hJXdQl6181F
8lsTdLkVm3j4MIN5AUL+kTzDaQz8+cAsjJkwGgWLw3Htn7VxoXklmccwMidb
/n3Vrwa+r/kArvn748eGFeXa+vtTeI8lAel4M20wZvqlYqNfF484gXWyLlZH
bLDuEe9EWEtL1vaq1UM+t8Y3CW8kTBZ/d5O8y9s1u8naWyu9kpzmnRjhV+zF
kgej1veqaV5TrP1G0mS5F9b4Yj5Lvqz75XpOCs/Os6xzwr843ZdfLGY0SJO2
WOqfovA4NrayFYkrYWPamjan7YkBYoGYIDb4N7FCzBA7zrBF7BnFqQVXVnyd
1pnoI/SVuKqLDPkWfTC0w2Hpk+y1Qh+1rh1GH6Yvl42ycTPHxUH18Er6KCys
kOBQ34jxWIeeK27ksFxpV8dl3wspgweiVYV/KT1I7nofq/6hzbH0GjfTDQ5g
EbpWfh0RNfMQO3IRXhozAo2bH0Rw+EEkjJyFxc8ONK+f6LqvuR03MqWaCS/2
H44xDw7B3IopbvMBKlczp1oXPJ+Z4xav0bXCUrT+dhV+PNgAo/plIXvyOLwb
koCGjQ7q5sKUJr/CNbgW1+Ta3AP30vob8f+jKrrmIKyFZ1f04IIT0ctXEbqn
DWiLGdW6u8XRKPXhlBpxxAIxQWwQI8RKl+GL0Exgh/xKvBv9bYhRLewS08Q2
MU6sE/NGfIM+5EnuitqLxZ4vpdDX6fP0/bJxa8YtjxGWiF8ZDx8/z2Os7SZM
xTe77PvYr8HZfZtx8cB+nC38Et/u2Y+ibdtxcuMaFK1ehLjRryAocAQC64xC
lZgcx5h90n1oNesh5BQ0wMFD4Th3vBVOFHW3iYefOR2Jwj2f2fZx+aoAZ4/r
x70Zoz5//AlcO5WEiyfT5L+yZ4h4r3Q4ll44deAJXDyhzPfurhbwn94c9aY+
hMQNnXDqa6UGVTZzRjoWcyxhLvIzIjsFK9+Nts3L4FlOfJ2gXWPraDg2LJiF
NYXrsOGz7Xh/UwOcL1LqU32bV4BdW9fgwG9J2HWoqVPuJDQ6Woqz73AOOZeY
k3PL+mxiLa7JtdccyJN74Z40uRVxhvNWNpB5PtHK3Dy709yVaKv9C51mm3Np
qGvq3GvKQ9IGtAXfp21k3Thhq9KwObFDDFljimdx2vtHYJRYtcYusUxMW/N1
xDyxTx+gL9An6Bv2+qcP0ZfoU/Qt+pj0NeFz9D36oPRF4ZP2vAt9t10J8u94
d/AOudX3WEnkTh3pk16Uvx2v0SxI1rC51TFIGylFfoU9tatHBqB8+XKy17ba
v96IeD0egkc7m3UzIF3+/nzxoVU4eGYrfvnth+L+JHZx6lVqfSVVxg5F33dm
YsKOpcj7d75buS3W9cJ++kV5ffnnH/D77xeUOP+2Auz4rtDy/V/FvlYULsVz
q6fKOLh97kGXnp1l33QZ23/YD4mp5lyDIf3x/tF8Q3tibgr7kLgbv+d+C08X
ImvFVMxekivnYL0uI31TrGV+/nrM37DKrWe4BtfimrOXLkXW25Ow9/RuwzyR
tXAO6sDId6lT6pY6ThFYlPkq1L2fNzonxBTjXc2BEjaj7WhD2lKdhzamrblf
2p4YIBaICU/qgRGDxCIxSWwSo9aYXaVV387cX4bYpw/QF+gT9A0+Eyl85aEo
4/W96IuNhE/SN+9rGSB9tTR8/nbjVyiyTpi4a2W+jrh7y8adN66l3of+3VX+
oifmhYxASvKrNv3rjYip7jqk+65Bw3Z7NWPKmv3MRz/mMmZ9oWFFjK9r27+7
X/R0THo9DQdyA3Ct732W752a7Y2sicOQ6TXE8t1BA6fKzy/7VsPZdt6Y2XWy
fjzfLm6f7/s0pvn1xRvdBmCpXyLWmfuhuMWxGO6dYit5Xk9KvmNezZ541Weg
uZdJHIz0TfGEX7GVtnItrvmq12DMqaXUETPKE9lwRmKOdb7un598zCLmEgnd
z/BNk7bQspGW0Ma0NW1O2xMDlt4kAhvEyPdveUvMyF48AkPEEjFFbNnkrwjs
qd9zJsSyA5a8tG1FH6GvmOqsM+xf9EX6JH2TPkpf5f7ou/ThslE2btb4KrsR
Xmz9snZfbrOM7z3KdQzXSQ7L/skhxvgVIazX1KLSBzL+HFHhA6wW/3vTOj69
MLOf0q/FVV7FI/vRYdA6jB8zAss79sWc+5OxcHgyOo5ZgNhhy4rrhUlepXj9
XGd1xJzE9sc+O1rG9ue7mX+h5m0s6/ic27kjDesfwOIKJnR7Zxb6rpiCZhU/
RJD3flmf6t1QsbesAWid8T46lX+3xPwK5+BcnJNzcw2uxTW5drzYw+IK3eWe
3D0Hz04dUBdu6c7McY3tN8ojjsvB7iq/Jl7HDluKjqMXYeGwZMypmSgxRCwR
U8SWS/5LYJRYtcYusUxME9vEuKxNZtAv6EOe5K6oQh925uO8A3gXlI2bNzJy
79zeK5TA0PGo5+vZ788T35ouY7Qn9+TJ3+Izjnt01z6c2JSnWfvoZN4SBHXL
QVDtF6SEhi/BfUnO+38wZt5y5hOYvCUWJ462sIlTn/lPJA7s2i/3cHiXbXza
JRdyKgHfHIrBroIATFnmjeS5AYiaFYXQiW3QcmwkWg4JQmhaLZk3Eiz+9xzr
VAWPqInglx9Em9kPwbTCFyPy/TBrSwB2HmiCU1+3MMfFU3B5V1NcPhljWStv
TyeEvRWI0Fm++PhAd/kenwuOKc65iOikz7EEtA2y0UnkzIdQdKS5JVfi3Ant
niy7tq5D3vYA7F17Fpu+SsDZnU1x5uvm+DZP6Vtz/sAeFG7fh3rJVfXrg7Vt
IkXvcz7LOTgX55RzizW4Ftfk2twD96K1R+5dzSnimXg22/WDdPVCnVm+K3RJ
nXKejw/ES11T59S9agfahLahjRQOpoW0HZ+jLWlT2pY2lramzWl7gQFigZgg
NogRYoWYIXaIIWKJmDKKP2KVmCV2iWFi2fpzYp2YJ/aLuThtoQ/Rl1S/oo/R
17R8kL5JH6Wv0mfpu9wDffn/Kr/CO/xOG+mvjJYxv9uuLpgq5nhzSedhL232
1GZv7fsa+yGkk3v9Zagf3+EmGYe+et02r0Ltr6EVu37hvTddzz92KEYWzMO6
ovX48SftPiSUP36/osTSL5zGpWv2uSxKTSz2Hvn4m90y9+K33y/g0k9KXJ65
I+x93mfKSw71ncJjH7PUprrvsSDL+y9vy8XvTupiUX64cgxrPzbGxVjL78x9
2bsZm7/ZgfMXLuAnF+uUJr+iCtfk2h8c3YG1hVvlntydY+3WAsnVOD2rWIe6
VPX6QOsgpUab0HmTp61wqHIrwka0FW3G52lD2pI2pW1pY/taaTJn5ZqCDWLk
Dyf6JMaINWLOnkvREmJYax5Lfx6r9+gb9BH6Cn3GHR8LeTJC+uY9wkfpq+3i
Ss713o78inWdMPmeuIPLxp053pw/DJMGjkXzRocRV+Md2a/eeOx3BtJ91yGx
rvLMxjS7/BAv297v1rIls5HTuPW1kQ/gH31mYPbcLvjuLW+bGl+SV5lSR8bF
h/mO1M1B+HKBP37MqIk3GqTK/Is8Z/F+cw0z6/j9Jv+emBI6ADNaD8Q631T3
+AX2MKnhfv7LurpPyH705CYmRw/W1d+N4VeK7ca1WQOMfWK4J3fn4NmN5rqo
kueXKnU9LeQ5WRfMmW0cnvVV+svQ1rQ5ba+HC2KG2CGGrDFFjBFrxByxRww6
wygxrKc/e7vRN2TtL+Er9Bl3fIw+Sd+kj04aOFr6bNkoGzdrFGQ/jn/WdB5z
VWV7drgxfkX2uneMAb88coThOLLsK2/qh2bVtso4dFiVLVht6q3Ep9slo1ml
D8390Ytj2dF3rUKTtgcQP3wu3hj+PBY/otQB47/sm87aT8wZYL949iVnzbBm
pn1YHNxbp8+5B3koVRKQEZmN4XHZMh/FLZ6g2tOYXcWExsHucxPzMwfgkYcP
YvzMcWjYY6/CuzQ/JPNKVPutjuuN4I76tcNc8St8lnOo88k8mfBDylo99sm1
uQfuxd3988w8O3XgXt5PF6nrjIhsqXt37ZWrgz1iIkJgo7iH/VKJHWKIWLLG
FrFGzBF7xKBFn8SmEGKVmJXYFRgmluX7AtvEuDs+QR9y7GlvzCcp9GEjvs47
gXdD2bjxI3RsKfWGv1X8SkgO6vm4GR8Ny8T4Fatw9sCXKNq5B6fy9ftJWMvi
2dMtMWD/0EWo3zgTQbHOY8ehHWsiMLwmwjrWQnBCVaSv9cWRI+HFcepzkTi4
cz+OXmtjKK795aFwjMlvgLDJDyKk631o1qkpQkLv0Y3h+0f5iruzCVp2aoKI
aD+lVpfWXp+6B8Fja+Hv870xeWsXfLirOI9FlRW74hAx1w/d85rg7PF4rNsV
qPA35jladgrW7OMupeODtusNqIFNe4Itc187lYbze1rYcBffnIzCiW1N8PGR
BOwsOIZPNgbJ9xWOpUDG2Blbr2d6DXWTamiey79tsBStz/gMn+UcMk9JzMm5
ucYnGwPlmlybe+BebPJrxF65Z3X/PAvPZFObTJxZSxfUUctOVnsSOqQuqVPq
ljqmrm1yl4QtaBPahjairaTNNM5FG9PWtDlt7x/pq1+bTGBHYkhgiZgitogx
I1gkZoldYlh9j9hOExgn1ol5Yp8+4MxH6EP0JfqU6l/0NSM+Sd+lD9OX6dP0
bXfuAt4dgSHjbvk9VhIJy3ztVv9nxK3B304zvqfWBXvmdqoLZok5p5aIX2Hv
bPbQZi9t9tSW77GfilcdPN0j2tg8s15C3ldLZc6AQ5z5r9/x15+Q/zrEn/+8
gvQRruPXNtI3HemLJmH+F6vMcfsr+JU5CYydX/4BP/96Qc6rXS/sOn4lx1K4
FZuKduDK9R9kToP9vj4/uwMjNy9F+qBBNmvfFxWk9FZ/2FtyLvL9BZNw+nKR
c45hRwFOX3L+HS1uReZ9/HEdV36/ggsXxT7/cp/f8Jhf+UtZk2tzD7JPi5sc
yxmhl7XbNTBhJdQddUhdsl99uUeU/vVVHw2ytbuwBW1C2zjwQMKmtCVtyj3+
qsWtCCyQVyE2iBFihZj51Vw7jFgipogtiTF3MCkw/JdWnTEn2KevrP8qV/qO
kTXoi7yDEsz9WloLXZV/oDruFb5LH/aYy5Bc4m1wj9mJTZ0wvleWx3JHjmmp
/bEyNwPNvf4l+6mwN0Qfr6XGY79eSxBXTfn+lPlptr/jdxET35/lZ4lVX+6k
xLbnzX1axrbzc5s5ci4Da2DJgifQv8VkQz002k5/B++EKbkXzEEhV8BeI7q5
IDr1ndb5pWJm6wGY5puOTf7G+4mw1hb7lnjCrVjzHDebX7HmdTzhWHhmnt3o
99mvfppvX6njNfYcmF19OUdpq/Sk4R7NeUa0OW1vBCP9IydLTBFb9ngjBolF
YpLYvBxdzPERu7pn0sA+fUPW0xO+YrT2nuJfS2WPI/omfXRl7lDhswNu9bVR
Nv7Lx7VuXpg9PAXTKvY1FGtV5ac4L8NxXIcclmrVMKpmlluxZMmxxD6Hxg/t
lvHoxvfvxOpuvREc84Xlt/8Rps/QV/x/29x/DERureKcEeYZvJCZjbC4vZp1
sthjvUvluTBVmoagh3ZicX/t+kyecCwyn6VaLEb2zEJGcKZDb3VdrqBSMhZW
i4Fp5Gy3+YmmPZW+LQ1Ne/HSO6+gu7mGVcOWh2SeiaXPeq3ulu+6w6/wGT5r
4VbEnJxb+XyRXJNrW+/FHeGZeXapAyO6EjqlbkeasqWuPbGRLrcisBBU91OJ
ja6V35JYsd8vMUVsEWPEmmVOgUFikZgkNtUcLGKW2CWGJZYFpoltd/2BPkRf
8iR3hUIfdsfneUfwruCdUTZuzPB/3L145O0mASFZCKjr+gwBjTMRGj4bga2X
YVau67itlkyePlXGfn0azRPzZeHe0FnOc1eY1xHTHKHRzW3f73wPklf5WnI4
dl5PsYlRa8knhcFoN9vbUnfKNo5fy1CveRnbD/0b/FsHyrpUkZ0CEdpBm5do
1qk5ApKaow1z+Dc2wIEvmprzTdrg9Z2x6LjMG7N2RePAoSgEZxTHz1t2CkBw
WFXHPvedNOp4xdxjqYelcCzdLX3vyXMUrd8pX+/eFIil2zdi1VcpOLerqZI3
cjQchdvPS26EHKFXo9cQ9JQGv9JOm1/hd/kMn5X1rcRc58z1v7jGmiNJck2u
zfe4F5V74R7lXs37lvXSYhy5jmYaOT3UjdSR+j2hO+pw9q4npE5f3x4rdcx5
qXPqnjagLWgTTQ5P2JC2pE39WwdIGxvBgsQMsWM/p8AYsUbMOc1hOadgV83d
IaaJbZu9CezTB1z5CX2JPkXfoo/R1zzxUfo2fZy+Tp93eYfUzZJ3yK2+x0ok
4g6/U0b6TCXuKeuChQehacxtVhdMFQ/5FZ6LPbPV/vUpdv3r28e1lv0hkpz1
0H42HVP3LpX5B6wpxb4dDj3WneSuFP2w2+Nz90lT+prHz34JuZ8vxcWfv4N9
Lw3remHW77MXCHuuL9tboNvzhXkHl65fwNtfrUf668UxcNYIK9fID+WeeAzl
vOrIGmLpwwdh23F9HqHwzEEZ+/eEW1Hfv3DpAi7+cvP4Fa7FNS3vecCxfCDO
vPe0fm006oy669ars6wBJnX6sDd6pVj1fBe6pw1oC/tcEFVoQ9qSNrXv8/Kr
Wg/MHpcCK8QMsUMMEUvElKd4JJa1cQTY18WTeVTCJvQZ+g59SK9PC4U+yP5G
7YRPWr9Pn63bJkj6MH1Z1tNyc9+3K79C4Z3Lu9dyLnEnl407Y+wcGow5fsMs
/THyuz6J8BGfIN1npewPkVjnLcP1i0wV30Ky+H7M9AVOf8Nv83v+pBhMm5+G
kRfGol+MbZ8V9uy+alJqPF1qWQn7ch/BP/pONxQvp8xrZELHfivl/gbNH2nF
X7SXPddXepEj0ekLQo5FY9+M3c+pk4Y3YvrjjeqJxXWrnPEMDVLMfI4H3IpZ
JoX2x9uWvvM3nl95R5yTa9rszV2ORZzZSG20Db4xmFEjVep0Xq0koeOODt9Z
7RRH7aUtaVPrPi/9546WticGiAWjuCHGiDVijtgjBolFmxp1AqvELLFLDOtz
LLb7pm/QR0wVZxmuv0cfZH+jZ4VP0jfpoyqO5zQYJn24bJSN0hw/DquPl5Mz
3YqvWuoGPTjWOLeikcNyZVA9t2PJqixrnY7GDfejyYOfIeK7DxE7ZRmW9+yH
hZWtvldRfC9lAJJHT5N9MzTj+HctsuQUqNKNNcaqTMNTVd5Cv8yJtnOWkGOZ
XzEZk6r1wpg+Y/HPe/vK/vUun6sWg/n9h7jFTTBPZXVMiuXv5LenofGgLcWf
P3JAfq7ackWjBIRV3uLIcejwK/wun7HkwYi5OKcl92TQR3JN9W/5efNDbp1h
fr8h8uwudSp0+M9qz0mdsiYYdVxq3Iqwfb/MVyQWmNvU7a7FNlhRsKPde4WY
I/aIQbmG1ZzEKjFL7BLDxDIx7ak/0Jc8yV1Rhb7syR3Au4N3SNko3XHLY4Ml
5lcyEVh7hO7nIWFTERS2RNYQCwobg/dzZ3kUt6VsXzYHXo3miDVz5Nx3x7dx
GTdm7kDLTn7an3eviozPAnB01zocZI2ls44x7JNHW8C03NdljSXJbUT7yfi6
kdi6bY6LH0Il3xJkw7eQm2gZE168xthaGLDeD9sLm+DiiRiM3xaF1Dw/7DyU
gKjXi+tiRUT7IqCFbe4G9aC3b8byvy1S6pNdPdlF9m7ffmic1PlZM6exd2c0
dm0swsGtkZYckjNftcL2IwWIm6nUhvqfXo51wPTyV/hdPhP/+nQ5B+dS5+Ua
u8VaXFPyKWIP0v5iT9zbVdm3PVLuWXJeTmxvUydN6IS6UT+nzqg76pC6pE6p
W+pY5qeodhU2CGhXfDaFTwmSNqPt3La3wAix4gpP5FmIPWLQgVsRWCVmiV1i
2DqPyQaTAvvObK8KfUnx5xzpY/Q1T/2UPk5fV3x+ibwD9O4H3h28Q271PVZS
uRNG/9UzLTG+cNYFCwu6/eqCqeIBv9I1wdy/PsB5//r67cJQ9zGdHhFD+2Pv
yc02cWPGt4+dt+2Xotd3hTLn4Cq3z9tb2MGUZEL8M53RvVe87NOh7idnay6+
+dE2nv8Hcxeu/ICr1217mf/xxwW8vSsfaz/frMsXWO/9yzM7MPrDeZb+GU+a
2qNcfT+UaxuBcg2VfhgTdy3VrBemxtN/c9HzQ49bkTyB2PuFCxfw503gV7gG
1/rVPifDDY5FnkWse/0XR/6KOqKu2FPk/zUOUHTo541oFYtCx9Q1dS6fMfcy
0Vtn3cHN0pa0qTV/cvX6BWl7+1pgxAixQsxwvdTURIklYqqHwFZvD3ydWNbU
hcbevxU+kndwq8179CV1P/ZCH6Qv6q0da4qWvlw+yFu+dmfftzO/IuuEibs3
3KqOGu/msnH7jh/7NMS46HGyp7pWXHjG/FS09DvoVo+IZ2qvljHg4NR9xXFx
q9/vrwtoi/ysOGQtGIDIf76Ppv6bLM/G1Z6LNzJs+6zkTBmCq+NqY/z0Aciu
O9BwfJyyKD4VEVFbLPOH+76HdWHWXEpb2ct9RZ2eunyBs5g+e95PqZ6GmR0G
YEXdnvo8TV32UumI1ZWfcNm/RY9bUeL0bTCl20CneUClxq84Wcsox8LPeeY8
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
FjVPh2dN+eAlpceKEK+cRKkTV/yczZ6kdxbzWrQJ56aN1Pes64HRprTtDfU1
NbeKPVp6xkvsWj4XmNY8i5oDJV7vOV0ofcTZub85f1j6WlJyCfO2zMKe97wL
yj9SR75W3+edwbvjVt9fRkWrThjv7rJx88a5Po2c9q93JXmRT2D19B5IFr7C
/JIOdVYiruoSPOtT3Jc7JHCz/HzjkNji53xTsKltuvk7jnHuuNpvyd/r87f7
NrHgKc+gYQfbXICIFpsxPzLRadx7wuiBiK6zxHCtpobt9rrgRhJl7oWN3rza
6PZXdyayx0jD/pjm11e8TrHJ6/CUW1F5h8kxg0udX5FzenBOW46lOE9H9qYR
Z6cO8p30ptETqXOrvCHahHO7yumgjY3igdghhpxhjBgkFm1wJLBKzNrYW2Ca
2CbGHddSfIG+kWdlc/qO9LHA4vmf9VF8jT5H3+Pn9EX6pCe+nO8bK++Cs2mN
bvW1VDZuwVieGYvxlYfc0BipKqeGN3DeY+XhmvjPsPpYndkB2XE5mFEx3fLs
qscTZZ0orZpdzaptRYfBebIGUq63fs+JH7Ma2MSmz1v19V48uqtcZ3b2QMSW
X2bFr3heI8xWFqFrldcRW3k2+mW9ckM4FsmzqD1GwrPE63jJLYwcP8QQRzFb
rcklpHH1nTafPVppNaK2rUV8+cWlxq9wLs7Jua3f59rqPmZb1SpzJjwjzyp7
0zTPMvem6VYqOtXiVgZkvoKnhC2N9bA3jhH1PMQgsUgdEJvSRwRWz9vzgwLT
ur2IhC/QJ+gb9BHHXJlF0qfoW6q+6XP0PfogfZE+6cxn6dM34+7gHcW7qmw4
Dv9et3/fAcY4Q8KmIyR8CXwazZM1fWTdr1DbvjGBYcsR1nyZ8veQidi1ZZnH
MVj2eHDVW3vnkVHFMfjtTRE/sZZjzkfI3xDq9Tftuk3h5RFYe5RNX4jAOqPg
1XAOgsVZ+dv6VuOmy/28vm8Wgp/T76PuqTDHwro3ijOJDKuJIP+HDMf4ZT/z
Tk0R1rEWQjrcg+CuzRE49UHUTw1EJPMbNGqL2UvdpPsUe4ZlInNLA5w7Zsux
vFv0LAq/UPJazp5IwZh87bwYZ/wKn+GznOPAFwlYUdTPhlvhmlxbraPHPbnk
VsTZeEaelWcO7txc6oC6kLW/NPJU9IQ6p+4N8SrClkZzg9wSgT1ikFgkJolN
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
+Jsaq1Ej8IpcE9dmz72rer75dzgtdb6idpS0AW1Bm9A2tJHFPeBUNUw1tWuY
YihCP63FfelTd2JqCR+rgWLn/xM+V1v4nov0QVPcCn3ZYn7FRMww5iyOdRHb
jHHGOmPeFtjBexKLiEnEJmKULbCOmEnsJIb+0Q/ftrZ7d7pp4EwEhayFZ7M0
q/KMmu92BwbrqavpORPJ65fh66NbTOZCKfe+OI8rR6/hwiHLZzcYk08/zLUo
L6ySa/s7ybnppq4ruNwV29K3IHb6PIvy236dZ2Py/ibomOJqUT49Y4u36bqV
/BdQktcWvxcY7ol2+Xwk7hXFo+SbTlr1F6c/b4m4bd4I6GdGny8DwnkmvuEt
4TvPDY16BiCoi6vh60e64Mo3f8enX8Xj+OcjTPIrvIbX8jf8rcE1iGc26h0g
1+D7UkuLZ6xoidAFdULdaOqKuqMOqUtDeqYNaAtz+muxJ5clvkDfoQ/Rlyzh
9+ir9Fn6rqk1MQYYC9bEEGPPlrFMbCBGECvMwRRiDzGIWFSujkVglqU1euW4
FoGdxFBiqc04FoHxlX0UFB9Q52VdgvxkDr6qc4R6c6Cqfj21zO/XM9iONSxz
Dm9Q8uC/38F9Obv7e2V2939u4MIPBcg+kIf//OeGOjfMeeYffVMA/PdX9bmz
1w7bbD2qvHrHyPZCT6Hwei4QLi384FKvLlw83WVNkk+HYPluO/PqMbFRiIqJ
QryJ2StqGVzKrWjk9QcMjsXrB5fj5r3v5HwQ1mn8/qv5HAtnbNwWvzXnWvYI
S9+fq/AsWzPxg4nf/fa7Uo/yq06OXh+/wmt47W8m1nDr/ndIz96mrCFvJ+7/
x7yeX9wj92oJt7L73GGp01vit9Rxf43+XoNLeS7axBzb0ca0df+BZTxbExXP
5t0QLnWFjwT4qXm253u1l/3hDPJsVgh9Xb1HEQOMBcaE2gb/uYPsj3Jl7DCG
GEu3bn8nY0vFUzLmbI4tg83nYTX7ET7ZPfiBrfHT7RNGjP+zH/fE/148leGH
2YtHYFjnt7RyuhuajceoUTMQ5n0IsfWWmZc3rfQaFiV3HFl7vawPUeeOvXIQ
5/lPi/kezgGfP2mk4Ty3WmKw1i8JPYadlM/q77FD1gHE1FyGPo6rlLy6Z47k
WJS8+io559uSmpDtBvL67EnF+SCs09juodtrzLBk1u5RyueYvpY9wtLcE5Ha
fiiWO8fKHmKm1rswemS59erlVwxcqyu7vLtjiWuCXMOKeuyL1sWstXOP3Ksl
3ArrUahT3X5fpmxhSGhr1mLo8mycc0KeLdIlEzHCZ+g7PYadEr40RPqUKb+j
b9JHLeUzGAuDNXqAxdZbLmOmIhyktWKodqW8LEMPgT2jR06XWKSpB2IVMYvY
RQz767DN8f2ExpgVm1LxnjmNUrBo1AgcTwnC3b7mva9uljjVxq2XveU76FND
ZqmfZc29rqY8rrcfmN6ZEhbkmCnpNeIwfdw0/NCmnpLTrlMD37tWww91HkJJ
bUX4mefK8t61cLOjJ6a1mYsWfU9p5eUtkYjqG/FkaAFeGr8Rc5MnYGO7RINz
yFdyznqDHngpZZmsd7A7x1JtHZ52zIRj+n20cBCY+NAG47UlrEfZ9R16Vdeu
YdHHr/AaXmuqtxef6e/wnlzDcw4b9dbH2JpbYT0RdbzGo4fQeZxBe9BWtBlt
RxvSltbOXKEPTWs7V/oUORWFx6uBq3V0/NBZ+KE4d7VOdeGHDvihrRv+MX6a
8OF4GJozZLifnrZkGOgXxtizJmYZ64x5xj4xgFhgbC6TxXytwCpiFrFL9ayK
CLGUmPpHPDJ3GqgPsUCUmSppaBy4Fk09LKy70COsdyn3HveA2Zix0Txepfhk
nuwBdOHoCZk/Ldp9CiV7PrNZPvZSTi5KzlueF6YUHYnEr6fDzLq2pCAER85N
xeWcHTi6eRVSFr6FNkNnw7+p8T5Evm4z4Nf7//DUeBcEJ5qet9F9ppsZ+fDn
8VOOP34v6Gcej5T/nJwLcu9KlBZ3cOVCayzc2wQBKW5W8xKh3bzReIAfGs+s
j8CuIQjo/Ije6wKn1UfBxRSc+Ua7R5hfxxba/Ap7iolreC1/o/e54hl8Fp/J
Z3MNVvMqYu/UAXWhqRvqSs65yTfNvykcSz9pE3P4OtrYJLcifIU+49v7EelD
RuNU+CB9kT5J36SP0lfps+asnTHAWLAmhhh7jEFbxTOxgRghuRaBGcQOYog5
PAsxidikW7dnbc2ephBLianEVlvMaiHWV+YxdpfSnyqo+zNweerB7Aumb369
uZKYNFyKrdc0aNYE3Lj/vbqv0W86vMK+C8eR96+ynPJ3twqR9an4G2X8yrLT
mZY/V7MvVNfSvlDNSvtCNWkIt9aBeLxzMNqEP4Ow6E4YGKefP0nkXI4+Zs7l
0MOtqCRhkLhP6ms4U3wYu744IGdn/PYf0xzLrXvfInuf+ZyDWo8/FiJ9U+ls
lqP75PwTQ9fKmpQ72t/r41d4jb5aF5X8/vsNZJwonbGyYQMu37a81xf3yj2b
uo66ow6pyzNXjyNqyWtISChvI0s4lsGltk40YOu4+BiE9+2Ktj3b44kuobIv
HPvDSZ/yU/rE8Tz7yPUQ18VZMYuEvq7ep4gBxgJjQnWOscKY0dKFiClVnz3G
GmPO1nFsDT5UBI8qQ2SfsBB/WaPEv4nxf7bjxxn1kLcuBFNmJuPVpil6c7hr
vYYgLVH8/6IOZzHI08JZElUwh0Xmiz0UjkP1d5LXJkS4bbWIXwkN/gBrByTq
6KM/1nsPxaYmY7HWZyLSPMdjiesIrKrZF0uch+LtpuPRoV8hkry3y2fGGugL
FSrWt3uwmTl/s/L5nWSvL/al0ssJ6OEcOMvFspqO5+V8k4XOiXI2C+fAGONz
1nuFYUHTRJP8Cq9Za5Tn6YB3xd74zEW12XPL9Lx6XeFezeGSqDvqUOmbZkSP
FnIstDVtrtdX3ZdjsOcG6TMdBhRieTPhUy7DFZ8S/y73HIc1wtc2NBknfE+c
99TuUUcfpa9awq8wFuif6nMiVmINrM+uYgU+cGZMy47nsDxhGtZ6D9GLWcQy
YhqxjRj312HZkT89CNOCrJutwlnP09rMQfqkGDkj4U67erbjU4SUeDjjyqQm
SBsXr7dPGc9bes+bAW4Y13Cu3jkrhmfaqyRW5p45B36FUz+sqNUbK2uHyznx
azi33EmRNbXDMFn8tyIn9SkUP1G7tG7A1WTdwK1QN7wWMR8BXT5XcvQm8umd
auxAy/BTGDB1KdLGj0GGb7zRvZQXgS/OEXh7eiKCHfZqze2wl0guxO0UHl50
V/a6ijYym+VJpxzUaFNkkl/hNc2c3jP+bPEsPpPP7lXdsnkwVonQ5VM19yJV
6Hal+G9Sugk/K+d3wpa0KW1LG9PW5sxcCej2ufQh+pIxX/ve0Vmpo3IS/z7u
LH11sutI6csZKl8W//Jv+viK2r2Ez8cI34/FyprxSNfgXwzOutczl4Wxxxi0
NG4Z6/r6cvE8MYJYYUvsIZYR04htxDhinVV8s8BWYuwf6YhettjqfJ1/0DwE
hFjf/8swt1I254B9bVZlpeHSUeO5zmsn9+H66TMoPFJ+PsP13G24lPURvs4+
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
6BOaPkKfoe/Qh+hLtop5+jh9XXIPwvcZA4wFxoRxHnOVFo/JPnq9nTJkXz3y
mKoZL+QtZUyVxq6+WK4KbInzzkX40AysDZkksc7W+En7EJuJ0cTqB/G49Uoj
vDl8nHp+CXsFvTnsVRyc/hTuDPK2a18crR45/RsiJ6W9fF9bmz+JljlP5j5l
DpR50lp68qS1NPOkvWS9yvrq2nMXUmsOQomHzn6cnFHiVFvmaCnfzvbDq4Fv
2j6/bVbueQA29x2GqVOT0WHY+3jS43iF8/1P7T+EW4+7yb0xF3xrfGOcm98c
uxa0x9sz4/GPUdMxruNiTKg/A287JNpsv+zt9Pb0RDxVKwecd8L5781afSFn
lbR79QM86XzEJnxGeVmLlxzfkbNZ6tU+ptSwrLqr5lceSf9RnuN3vCbaYRFU
M1psLdwj98o9c+/UgbSJ0z+VfmC2mmEvhLajDWlL2pS2pY1pa9pc8gDCB+gL
9IkK7034Jn2UvkqftcTHbSmMVcasKn6VWNaOccY8Y788rsRIXJG1LZKX1cEV
DV42wykMGY6auFLWD46YRewihlUGVhKTic3EaGI1MZvrIIYTy4nplX2oeoAF
h6yAV/NV1uXygqfKnOBz4xYjZulmzM3Mw969R1B08jP5znbJ6SOl/XK2l5tR
IPOMVZzzLCe5uTh7+iNcv/oySuT8kXD5rn3x/hdQfDRanuNc7l8LlPkRvxdE
4dfT4fgp/wXcO/mcWVzMj/nx4ne2mcFiqRwtDIFfqxnoPm4ubufloXj3KVzZ
uAO3936m9V5/0a7NuJSThzO7DuHT/bk4cmyV7MN09MII2TeK9Q5fX2mHom9a
o+h8S5w56o/9eU2waZs35q1viJnbGmLubm/M/NgPUz9+Dsl7kjAjcxnSlu3G
tvQ0ZByYgcIPA8rNhDFHLp+PwLXL8bh5JR4fne6KcbsCFL4l4TG9nAj7gDWK
9ofvnPrwDW+K4DENpPj2VM7xO16jl08R9+S9+Qw+i8/ks7kGS9fNvXLP3Dt1
QF1QJ9QNdURdSZ1taSh1SF1Sp9QtdUxdU+fUPW1AW9AmtA1tRFvRZrSdyo60
KW1LG9PWt/M+kLanD3x6ofL9j0LfZwyYxZmImGJsMcYYa4w5xh5jUManiEnG
poxREas8x9hlDDOWqxxPdISYp4uDxEZiJLFS1rkI7CSGEkuJqcRWybsQa63A
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
mYY2fp89MP3BBuv0B2Oe1vb9wTJs0x/spT9qf7A+2O7QodL6g7H3V6rzQKS2
Hyp7gs1sotEfjOec4yu5P1iHP25/sJds0R9sB3qLuBpUgf5gcR4rRSxmypiM
E7HJGCWvEls6l4UxzPvLmPZcL2O8SvuDCYwj1hHz7I2rxG7ailhOTK+q40JK
M6U/WJs5SJ8Ugy+Tm+LOs/af1azZH+zq+CZYOSEWk7wrpz/Y9D7TH7z+YKNG
YvDU+Xiq93G0rpH3P9YfrDOKTzXB7OVzZH+w12ZPrtT+YI0d9sIh7b7sCUZe
pXroNaU/mDjH76qiPxh1YU5/sMmuKX+s/mDCd+nD9GX69IPWH4yxb1l/MNV8
liiN+SxdlfksTnrms9RS5rMQy1YITCO2VWZ/MGI3MZxYTkwnthPjK+vw7ffX
fHsKZ18zB/2nmG8fZ2K+/VXj8+1HV8V8+wsVmG/frXS+/QDd+fZN0SUjAG3D
msrvKjzf/kLlz7cfbWq+/dW/5tszphnbD+58+0OVO9++n/3n2wfPT5Iz2v+a
b296vn1Q92fKz7cP8lPPt+/cu73MX47ITjU43774diGy8/6E8+0TYuUM97mb
Kne+PWfVpx8unW+/ORNF4tm68+2vaM63P/LXfPvKkIsiPjh/hbHw3S39PqCa
b99XxFSX3p0QHPYMGj0v4i9ExJ+niL16deHSwg9eIv4CRfx1EvHXJzZKPd++
n2q+fb+qnW9PTCO2EeP+mm+vHPeGPIZTGX54IzUJwzq/ZZdcoJxv32YKwgev
faDn2yfpmW8f6boV/dXz7beWzrdfavA5SV6cb7+63Hz78dMm2kSXD/R8+yZV
Md++EzKFf3F2/QKXRDnLfmG0xnz7aGW+/ULnxNL59v3tzvn8Wefb08fL5ttn
lNaWrJaz643FZrzHKiX+vHeo4489v1h7Rg5UNd+e8cf7Pnjz7d+T2EaMs8d8
ewqxmRhNrCZmP2iH7nz7aQ1SsGjUCBxPCcLdvp5KbrYy5gcMaogdKR0wrd2f
fL593DBMSE7Bcy/noYXbsQrnvVvsPW56vn1Xe8y3H4BlyYMQXCtXrqOy5ttH
cVa9wyI5u76u66dylv0ja39U11U4rrkrz9Wt82mVzbenTqibFU79bKZv9Xz7
rqbn29MnKuxXwjfpo/RV+qwlPm5LsXq+fXU9uFJbD67U1sYVyetW1+Z1iVnE
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
sX5fAU5fPWbIt5+Tc7zJpTwW1xmhTz4sOZYH2gQonAu5lyA/NHokCIHdwtCp
VwfE9Yt2Gw/WW0evKONsdL2/9+d6Q9+dhQ1f50lOyR5/wnoF9k8rC2fxxx8X
sHy/oeZk5Sp8f8l2vSu/WnIo5vwKP+N35Fmsn+NaXJNrrxDv4LvKstejP36F
9w9p9x6T/Mtn+dhwJE/qUG8fL702Uu0J56IQg6yL4Nwhzh+Ss4mC/ZS5RJxP
JOIJP2Nev0tsZ3nvoKGpEvM86w9XT2D9HqW+6MqN09JHzhv8Qk3oY/Q1+lx/
+qHwwbh4ZYbQIBfrfSR/mFJ2jsV8fj1jljv06y4x9gWjvRjr/z9dh5Y2xayF
KXI29vwG+nO4q3xG4KXRU+RsaPYQKnsO9Ob1BzIK+wSxH5jkVsS/ObOFc7nN
70muv0T2PZIzJjxz0cMjB8kj5oj/798P8z1GYZHXOKz0mYDVPqOx3CtV6EZf
H7Gs8H4Ii9hms6eA0M9cqGVxkkvwTpa1Gvb4k3cbJLhh9khHvOuZqNSc1B6A
fN9Y23s8O2JWx1Gmf5vzK5RZnUar8hJci2tybb5DjRdxRnhWntke/yJ15u0k
x+KkjWh7YsAaF8QKMaPPP+OxzCtF+Ohoic0lXhMwv+5ovFEzEQOHzxQYfk/O
S0mVs1HeNswmMuci1irzU4h/8R19RJlDf/N8s59hRktZ1zHOr39Jzq8foTu+
MRYyJjI2Mkb+L1/XBzXC/GeHO+zVZRTma2cPG40dU0OVmQTllJu8FuuJzent
8Hzki8iuEq9rb7zP2Zqbda88jqxqyWb53p6l+d6aSs53mfgzS3y2uFaM+D4W
i+7ri8XVk7C4Cn/7XzaOZfxTc7Hj1TBc6WSfuyrxro1XXnoJlZ4Euo7KxdS0
57AmZki55umzBCayGsYgdupsxDk5Lz6gwX5MfGkK1j2SYOJXOKtE1/PV58qa
k/sbHUZPFT6nZ/UMVB53A8bZKub8iuRexHc9qy+0fU6sxTW5Nt+hay9iz0Z+
hWfhmXg2Z3QRV3mF1CF1SZ2Wp82ICWKDGCFWiBlixx62iD1ikFgsK7+SJXwi
S/InfRWuslYPyV0a+RMtPpPP0BedrQVxJjYwljCmMLaUF0fMmMjYyBjJWKln
b4y9jMGMxbfrlfDmPOdydBY1Lcrvp92ZQzRxLIZ3BE6ajSXrM/HdbvV8plHO
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
mGH+GWMKYwtjjHo8S5exSX9N3jR5P2OgO2aq6JVbeaXOer40R2fWu/92Fs6U
5mxp9gxr/lgIBg4s7XXFmQrlVbtC+fHaMZv876ff78H7h0p5APIt136+gG9P
H0T2to345Xfb/Pk7RzbeunysxgwWcmvsD8UaCPaLYt8o9o+q9nAARmUMw5rC
Amw9WogNG9ZJbuW6g15dWvITa182rbOpezlzpRhZa9Yq3MXObfj9d311JVLI
k1y8gMu/qPMkWvwK5cqvP8lnuYbe93Fv3KPcq9gz927B25BzE+9kDYorOvr5
lwv4ROh4Q+46bD9WiLeLCjBq8UhUCw9A7QAfNHg4CM0eC5M8S4/4KJvaIy0b
30whxq3PRV/I/mgjjp4ulD5iXt9Czo28kvUz9Lly8wXysWbxgrEksNvtO79e
TcirWHDjIqZXXK5f7xYmYvKa+Yj45xYE+RtmbN+CuSvJXrnoU9eyv1Gvum/K
WpZetVa5he8J9/sXsganWuS7B0580eX1utVdjpwQ63oV2xqI1R598F61znj7
3misrp+A97yTZS6fOfxNng56dWlxB56PYX31LrCue9ns0wNzayXLPlzLG5BX
cTzPxVxmddDmSezxK3xm1iMjnDxHZ7lH2bdM7Jl7t9bl+updS/kRp3XUVeGv
hO5zhS3WNkiQ/InkUerEWtQekW+x1hVtG113qcv4ILYsuBWBPWLQHXxGr9qr
Fd+oa8n99Kn/nqyzupm+ax4vGEMYSxhTGFsqrtvz+mpqC0xp59qMFkeyrEpf
ufayib1xNM0PVx6p61TulM+Yr5dZNUnOn94xNRRXOtW3++zctCF2+h0lmPU6
csyzTHn6Rafzvvxd/stVRyBq4rrSfLyO+gVyCbF3rZCciql24b55knMx51/4
Gb/jPZKDqZaBgTOmYVn10h5O2Q2TsGzkCAycPButY/fgobs+KDOfwH5d9Wrs
QrXXbyCq2hKxX+fmnVR/9QIiq6t/p8WvUCKrL5fP9nbifdwb98i9cs+xbugZ
Rh1Sl9QpdUsdm3rPCd0PnD5d2oJckLSLgT+R9jPwJ70t+JNMhWurssLAy+io
YTLshdgixmSdl5P4JKb11q1Yz1mxFvqaXZ5R+Cp9lr5LHzb3afq4U5yliCF8
hjFFxhYRY8ojdnFtxsb/r1fT6Gk3LddnnpsMMXItXo65Fk//DAQG2+llJs4w
36xnWPGnuzR/j25T61K4C0c/d55nKd64Cxf36ssP/1IYheKt3fDc0oYI6X6P
TS67ToPXdOdp49Nm4mTuSrmHPceSkTBPnVsJCK2Nph39EdS1FcK7tUREN3+E
RXkjONIBbzC4Nkbk+uCTwkBTz6qrJ2Nk7p69qr7d0Rs5m6KRsrAeAkZ7o2k7
H5nHD45qhbBurcR7AtC6a0MEdVKfPa8lnGcS1jMGQfPaoHFfsUaUxrx5axlZ
G4cOt8Pxr8UeD/bH1qP9cbaoM0ZstO0lplq/IoT3ni18FFu+Scapov5yLa7J
tfVxQvXknrl3nsHZ2SzUFXVG3VGH1KXkRoRuqWPqmjqn7mkD2uLy8RhTLzba
ijZzxAnR9sQAsRAu3kNsECPEimqvMIEtYoxYI+aIPb04JaZt1hTYpw/QF+gT
uvgV4WP0Nad5FeHT9G1dMYD1bp+W3stYYi8uMhYxJjnkVLwUTiVEcioaHHF5
ijjDrbz+ZVbDcif0CTOX7n2j5Kxpzpx+ok9n+ZnW79HdJeeuWvIr7AvGGRvM
h1vnhb/4oRDvF++UPasuXT2Hn816H528+NUt1V1cvzgkOcgdpwwZgPSdb+Dc
pRO4cuM0vrlYjPfWr8OmQzuxoagAG/I3yvw/a3e2iHOyfudYyVdynrujnmGs
zTh7RdElaxmyPs5XuIp31uJHnbNZzIW8ij2OxB6/Qrlw6QIuaXAz9oR75Z7l
3sUZeBZ+zrPxjI6evyr0SgwdOHMQH32zBxsOCL1+sFHyTxv2bpOzWNYLnR8p
KcaFayfww6Vj0ia0jT3b0ba08a3EGDGunPOKxD7nFNEX3v/3ThT9YFv384vw
oQ3b8vD9BcuaH/pcue3TrEcYa7WM8+sZW26l7vQKY7V1zP5XRe1Kma/zg5tj
euR0mWPenBKNuVkp6DYvG80i992U/Cz7B8XWyEaSVZ1A2JTtCBt0Dv08c91W
TxNTfynSpoyR+e5xUyaUeb3NaRp8g1rNhufjMpe/qUo7Wd+ytn4/ybkw/y85
GK9EycmQm1Fmq9ivByFHwNoYyQWQq6irzFiZUzsFed7OzCwx40gitDkSu/yK
kFf4rBM1LEbhXrlnyQmJM+QYeA6ejWd0qFevx5Hv00f2EsvxThZ6jRd6fVzy
T6vr9pGzWKjzLU0TdOnVxFUJ25YVH8QYsUbMEXvuwDB9gX3K6Bv0EfPvWGvD
/nWpXu/eFN9ljGCsYMxg7GAMYSxhTKm4bv/r4rON8XLqc+WWrzTlLZtMxfxR
Q7EvPQjXYj3tzlm42NwD2VXitdcKfwnr0yJVf8PPmQsZVQfqmidROutePYd8
xcn8NX9PP7fqYMRNLa2bcGXmiir/ctcKWcfQs+pymb9nnr5Vgw+wYmwCso3z
y2s+qTK7PAmLawzEW0kj8I+0qWifuhUt63zmFFcRU+1NVF90DfWq75A1GE5z
E9XX4p5ZZzW/t8evUO599QdEVF/jAie0Su6Ze+cZnOGEqCPqijp7K2k4smok
Y3HVJCyq3h+L7osT+u2BrFpPIptyn6L/lc8mSJvQNpIjq7pUcmayZscNGDDv
+UaMEWvEnFM8hcC0Ol+iMatIY14RfUxtFhN9kr5JH9XyX/o2fVxznyI2MEYw
VjBmMHaUZ2xi7GMMZCz8/349+lL59P13hmsJDs2U/XK8fLTzt/z9d0joUrtr
hU+bja925eLbLZt15VUteZYdTvMsX510nCP+7tOWGJfdEv7t/FRz2MERlXXn
rFOmzzS9+5Mjo9HrFQ+lHiX0fvh1JCeh8BshXT3KXkchJLy7H/yHt0FI/3sR
0vMehIT/BY+28UFgC3+H9Q/BQVUVfiCypeQMwrv5IzjSdi5966710L57IhpP
ikDAmC5o90Qr/Xt8sR6OFrfD8eI4XN3fHpu+Ho5fivpK/kHW0+jkV3gvn/ml
qDc2HRku55xwTa7Nd+jdD/fOM/AsPBPPZstx1JG6oE6oG+qIunJYcyR0Tt3T
BtIWwia0DW3kDlsTM5IbExgilgJD7pfvJcaINSPuiEG9eCW21c5CX5iwoqX0
DUf+Qx9znlfRx61azK4XMYOxgzHEXoyRMcjOrBXGMNn7izHtVnAqZsLYfquv
1IwXTLk5zsCuHex32/cJMwrrbjhzmrOn6z8ahMTk8n3ff86X/r5eziDJ34jT
l4pVc+f5/96Jr378Cn/+Cfz6m3F292lcN8zuTp0x6ZbprW9SPPokavMrA5a8
hMLvCmQPJ+bHf7x6DO99mIfD54ttcuJnLx/D4bMHZb0F63g2FOTLGpcNO/Jl
j6ydJwpln6zzYg3OM+dzvPfz/xZi+Rcb0e/5AZjzxms4cFbfjBVrYT8w9vi6
YYfTccSv/GzoLfaHC++ncO88A8/CM/Fsxv5p5JouXj+BbwQW+DlxQU5qw8Z1
kpvL+aIA27/dI2fSnLpYbFMXRJ1T9z9Kbu+KtAltQxtp2Y+2pY1vmW++PEli
nFgn5ol9+gB94Wuhhw+OqPd9+0FgifySuQ7oc+W5V8aMBh2Dbvv59dai1heM
sbzict9VMKYllvmOwXtmc8E3RXbFqox4xGe+Kud8l+X3/GrCHkKcE855Ftbf
da27Epu6D8bENQudnwPuQJ6eNM0t+e535/XRzSMw9/x2zWhstuqHxd5h+d6x
sh8V6y3IvbDHmLHO4l1TnUWCXMPIP/Be8jE5PgPkPJM5noMlh+BKrYfsC9ZT
vS+YXn5Fzxr2hHvnGXgWnolnK+2fZqwL6mdVF9QRa2s+KbmqXNnTKxH5Pk8h
16ouiDqXuve2rpHRFtq2rPggxog1d2KXvkCf2BQzWPqI9fepnqvlvBjV3n9l
EPo+YwBjAWMCY0OpvrpgWdMxMoZUXHfedS26AZZNisesqsPLNZdplBnVR2PG
wOeQnx4h51qX1LOct/J8B321Nezjs2h8f5wa72ta44VnJzn4Tb4Gz2L2W/3x
HtOcylt/N9kPGVWTMWj6LLO6FefmqugR5utZBxEy6ENkB6aY7T8Ji6skY5E4
g+RVasZKnoV8yzLm/2soHMAyEQP5+Ypu/TF16rOIHLcOAUGHVbkH9tq6a+xP
uKvjefSoqr9HlyU/swJNtu+T/cFc5Vd6Vlkm14ir5Dy3Q+HeeQaeRb2n2XIE
Bh5G5Nj1eGHqP7AiKsFWdzWMuntS6LYnMu/rLbmWxZxpUi251A7CJrQNbRRr
p6+b61JqJ2KNmCP2nMEqsW1e06XJq9ip9aKPcS36HH2PPqi37yB923w/XIMx
gLGAMYGx4WbEIMY6xjzGvv+Va8aajFuaA7SUNASFLJDznrV+H94kaDn8g9Tn
TMv8Z9xyLFq/zen8aulv2fei+NMd+nqEbc3XzAuf3dUKadkN5RyMdiEeCPBr
pJpr9ousqitX3X7EDNN7c4tfQ/jCR2VdCusRnK0VccirRPnKHLvafiNCaiPA
18Pl2R5+4Q0R2LWlrNfo1L0HPFPawGtqWzzaM1G8W/85OBf+5DftcfybvlLf
+470x47iREX/x3sjMMZ2LS1+hffyGT6742gKCg8rf+fafAffpV9/98iz8Ew8
G8/Is/LMPLureqPOqXtVnQpb0WbuxAAxRWwRY8QaMWfEH7GoB7PEtupZhC/Q
J+gb9BH6imZvMOFjuurJhM8qfcBc8/tFG7bJ2KEVVxhzGHs06+tEzGLsKu95
Ks4IY/utvnZ+n2+Zs2sdgODHb/8+YebC2dP3PeSHSn+rj/Y9w8rtPXn8bTjz
vr//JPPin53Unr+x4aM8XPrpnMwpGz/7/fcruGqY0fJs/gIMuEU81oABCYiL
V6lvmDAGqw6vxYVLJwyzxg05780b8e2FYouz2BPO0Si5egLF57+SOmI+nfUc
knfZloe52bMQMjoOLUZ0x9Ii2z5Szgjn2bMuwt49jvgVuY5Y48I152tYLN5z
YKM8E882b/ksbPjUcOaCfFn3s+N4Ib4+d1DWt/yiUvOkzh9B6p42oC0kryVs
QxvRVrSZtR1p2wEDbg22BgpME9tytorA+u9mvBfPcll8Rl5J67zkoFgfZayB
yjOrsXO3cH59JY/6uFfEjtt5fr2aGPuCmfNBjOUVl/uvWUmjke+jPgs9p0VH
5MyMxbDFkxA6bgfCGuSWKWfLmeEDvbTXmLpggqxvyBsag9AJn7glT9whKU/O
GM8amoqIpu/fFH6F/Mm7NR7DFt94Zca6rhy/5ZwQ9rNa7fGUYU5IDDZVeRhz
6wzA/NBhyPEe4BqvYpBMr1jM9bHPzTjkV4RwjUVe+mt6VDHmrZyJZ+MZV9fu
ZZhr00tlrk0XXWtS59Q9bUBb3Ax+hdgixog1Ys4d2KUP5A2PkT4xbd5YzfsG
CZ+ib1nPaHFG6Nv0cfo6fZ6+r4ptnz4iZoy51WGr4nLTtX3qQ5jSKP2m5DiN
wjzxP2NexNrJj5vytc6uMbvqEMxK/Qe++vERrGg+0GHtir188j+i5+rOV3+R
3lz+Bn7sS+mWeXs359ZlTQT7gU2daeoHprfXGSVL8i+swehbWoNBDqFmNFYG
9kTmpGTET30ZLZ8swF2PnFVmxdco26z4+1sdxj1P2Z9R74hfodzT5wQeaPVl
mfbCufc8E8/W4slP0VvoMXNysjw7uafS2p+ehtqfBIU/0ahv0uTv2C9MrE1b
0WZu51jMzkTMEXvEoF68EtuO+EZ7NSz0LfoYfY0+56yfGvlQ+jp9nr5/M2MN
Yxtj3P/qdavzgFoSEPQygkOXyrxmE6/S+Q+NvV9GSOgS1WeC27yFgNA16LVg
Hr7d/Y5LudaTcj7LIXy3Jc9hXvfsN21scsI5G3wQEl/aBywipA4Cmqrn1v07
OeZXmjabht3bP5d72vT9Wwicpr+mwl28ilFaB1VFsOfdrnEr5AG6BSIsqiEa
9w6E/5x6aBwTp2s+/F96R6By1+Hy73FvNcKZb9rh5Df9pb6v7o3BuqJp+Kmw
m5wD/8HnLVXX0Jq/QuEzfPb6/i5YWzQdV/cr83X4Dr6L7+R93AP34mi/PBPP
Js/YWzkzz+5Iv5r1QELnrR3UuZQHz2ISgTlijxgkFolJR7gltlX5FeEL9AnT
Z8JX6DM2HKXwLUf+Rx/lnk7ama9it25FxAjGCsYMxg5VzlbEGsYcE8frpXAt
jE2MUbc6TmrJ7XKNyCmdt27sExZ3h/QJMwpnKXSM6yxnUlcP9UGf/u7f/9SP
s2XOl72wNhQWaPbB4u/vmQ/Hn7+pchL8bX9O8UbE9e6Op3T06nK7rjif46nu
pXVKT6civWAJTlwslr3MjHMxThjy+v8Vn+NP7tv2LE7VeZzZicaju+PumA7o
8/wA5B/dKbkqV9f77Q+l7uR3R7yHDn7ld0MdzC9/lIFjEWfJ/0+BPBvPyLMe
OFNQJp1JnYu90Qa0xcmLSg0RbcSeW7QZbUcb0pZyjs5TN3/2CjFMLPPdxPaf
KnqUviB8gnVf7I2mel7OrikqkDwL/02fc/deGRuM8+sfFTGjPGc2lYeo9QVj
DK+4yu86OubveKXFNJs6ABvxehSbJ/TA1KXD0OGlHAS02KE7f6vkgN/VzAEn
11+C8HHbsHl0DLLeTMD4rNEI6L0fnWa+i2ezxuGpjNfw8PQ8NIs5oD/nHbsN
i/zjS2didEiQn7mag85Ld8wlMP8s8/o+T5lqMcrCPzC3/notpRfY2qpdZS1H
WdZjvcmc3iMc1p3o4Vf0ruVQxJl4Np6RZ3Wp35mFdDTY4ikrW9jRc7rr/cGI
KWLLNH9FYM4ZnBHTxDYxTqwT88Q+fYC+QJ8Im/Axkhto1agslPzKIDvcpbXQ
d+nD9GX6NH3bnn4YG2aJGMFYUXH9/7u+TffH81HlM6PFkfwz+kVcG9hIzm+Y
PWw0nq83xannmwQVo1V0EUalTcPamKHO5ZKFjO00DyU1ajnMVX8ytbV839QZ
Eyw5Azfm01kDQp6jhXc+lg191mFtgatCLuGFGqmY2G8qGofuU51Fby19py3E
yzPGqted3LUCbffmOZx/oodfYa+vtgfyxJrqPb64B+5FTz0Nz8Yz8qzs+aWH
P9E9D94cR8JWtBltp8xYcQ8ezPuEUYg9YpBYdIRXYprYdtYf6EP0JfoUfcsZ
X6Tv0ofpy/Rp+vatiCmMZYxp/+tX06QZtzwX6Ej8DLUtQaEr4dV8CfwapKFx
i6UIDJ5pcZ9/yBqEGPOko2di9/a3XP5N+6m9m/Ht5wfs5nd3HXnOlA8+taMV
4mba1naEBd2tyUkEh1aGf93nLPPS9Z+DZ7NFCBRnDQ7JQPvp8+R+Fu7PQOAQ
fTNB3M2r6OGK1IT9r9gLi/2ngiLvQWDPNgiY1xBNBvnLOSCytsPB/hok3q/Y
MyQNadt95bz3U8cSTXpfe3Qoir5U6ljY52tynjrHoFm/IoTP8FmuUXQ4EeuO
pJbaVbyL7+S7uQfuhXtytG9lpoq/PCvPzLNTB9QFdULd6K5fseYkbgXPIrBH
DBKLxCSxSYwSq8SsBYYFpoltLa6IPmH9OX2HPmTUO33Lnu/RN+mjrvo3YwNj
hORQRMxg7DCPJYwtjDGMNYw5jD2MQTdzPr3LImL67XSljhpmytXdaX3CKCmp
w2SelDOpG0UGyRnVAY+FyJnVbnvPpDH476Vimx5G1sK6Dc7rtsdJXLpxWubA
E5LjZb1BXJ849Bd/v1l58d794+S7h65bgOJze3DpyjlTPzDuj/2seE5jzYQW
V6RHCk/no0ZaAip1CsO9/aOwcOsSfFsi1t+3DduO7nGZY7lw5QIu3HDMh+jh
VygXf74iZ7G4yq1s/c8eybsdv1CMhflL5FkrdQyTZ6cOXOJXDJwE/26sJaJt
lO+VfmGXLp+TNnz6nQXSpk/1vzmzV4jV/kb8xhvwO3iAxLY9roh94+gjWmeW
/KTA3gnOKZpkW5/jqjAWNH/Mcn69MuN+mNveUe46V+sLJmJ3xXVzrlVDo5Hr
m+oUJ7A5/nG8vjgZ0fOWotkTBxBb9w1bbsVzlexhlKzSw0jOfcmcic1vjkHu
tFGmfLHxe67HPPDmoaU5901du2JBVjIC++/XzB+HR27HkpB+FjPHpfj2wVPj
XPudf24b+/Pj2c+Ks0BMNROejzpRv2ItneWM9vkRwzCnVgpW131KzmpZXTce
OV7JLq75KGY1H4yVXtEO79PFrwhZ7vUkZjUb7PJ+eBbOUCEvtdojVp6VZ+bZ
rWfQ6xWpcwPnY6olEraxyx9EdHEJE8QSMWWNM2KPGNR6jtglhollky8JjBPr
5j5knEWUO2209BH6itqsJPYHo4+leq22+Y7r0Tfpo/RV+qwzXBVjAmNDxfX/
/7rytDdmPzMai6s4X1PiqvA37SXetW3mZX+V3gyZ45IwpdWLdme0PDNjukUd
SYugIvSdlIEVQ0dY1H5oydRq/8CPdWrJWRAlnBWjwrXkpT8i3zV7+rPoaTaX
JN6NfcE4756z0VsN3I4VwQOt9ukubiUBmTV7YmL8VEypMwJrusZJbsQRV9Gy
zwGTvsMq59t8X3vat/Bu9rnDdfTwKxTP5vtQe+q3Np/z3cZ9cE+O1iHfsyYy
Tp6VZ+bZ3cWxLLPiWGizVgMLpA1pS/dxLKU8E7FHDPL8xKTtPJNaBgzXlJgm
th1yKsJH6Cv0GfqOed0MfUvL7+iT9E36KH2VPmvB7wifvpn1KoxZjF2MYRWX
cvWYN+/W5wNd4FuCQxYgOHS5/NM466Bx0EqEtDGb0xI1DWs3LnI5B6v0DDug
WctyNPdjOYN7d76fRc2KTd1HfdZ+/EX1uxo+L8PTPxMBIZzbsAj+QZaztYcu
XYAR+UsQ2NO9fcDY/8mvk3P1FJ3a+CMoyP4zTdt5yzkerbs2Kq3niG2D8IxG
8J/jg4jolgjv5ofW3fTNWvnLI2mKHXMX4ex5S27lZGFvrCqcIf7eVv77p1OJ
eCyrkeo69vgVPsNnuUbJ522wqmg2vivsa8Gx8N3cA/fCPenZe2s5e8ZPnpln
pw6oi1IOppHUFXVmT6fUOXXvjK1oW9rYrRyLwCCxSExa8JoCs8RugOztlykx
reoHwgfoC5r7Fj60J99f+hR9S7tm5UCZfJoxgXY07p8xg7FDiS3pVrHlDuBT
rIQx/Xa6sr5cZ5nDax2Alo+XX68td4uRXzH+u2ffKFRu3giVH6yPJ/p0dss7
EjnTYskYOcfdXk7842/3YN/pQoucstp9qUtmmdaWv//vr/z+Pz4xvty5rf7z
JmHzf9bhBmdkXDpt6gdGYQ8r1hgoMz8M+8VvYKpfLy/w229X8OG3+Wg4NQGV
QgNQqVUAUra+gAvXT8i1Wafw269XXOZYrv+m1K78qTHT3hV+BWKtCxcv4Npv
TtawmHErPJOsweDMlGvH5Jl5duqgQXq81MlvTqwvdY7fTP+mTag/2sj4GW1H
G9KWtCltW66+JrAZL3yBWCVmLeqvBKbVdVvKNRaeOYiPvtlj99zkqFIXj1F8
zg17Zgwwzq/vaTa//k7jV9T6gjF2V1w37zo/qDmmd5ru1OwKizx1x65YnRGP
pDdfQtCQfYiq/zZ63bsST5vN4A7y3ya/5+/yTc95J2NLx1QbfsUoveq+KX/X
v3l4jMX7cuY8ZZNvDmu7DVkRCbbcipm8NGmEU3NemnXaZ/fc7GHF+fUWeiO/
4soMeN8BmOs/DHN9hyC/aaKcRcK1mevOadDFdY5F7OXV6FG67tXLr1Dkmi6c
08it5MgZQMpslTyvGHlmnp06oC6c5lc8O1rU1MhZOEJ/tJG952hjvXggdogh
exgjBolFaz6RmDV/LzFNbBPjarUp/HNrp1TkeJfanL4jfcy/dP1Ur7flvHv6
HH2P39MX6ZOu+LJpfv2givn1/4vXmrSYmzYfgT2E7P0WnzOyT070xZrJ0fK3
6QuqDjQ9u+6RBJl3VuM6WtcsQOSoHLw+8VlkN0rSzDH/mO6r5KQNYs6zrJjU
U74nc+oIxFR+y4zLcQ+3EifW6VljIXpUz8CgtNkqnJB7+ADOaRnbcRrGtklX
ZoqwN9qMZ3X128qcNsKk7xa1dll817baBrTdnqOrBkYvv8IZMRHbN+Chauss
Pue7jfvgnvTsnWfk/JTMGr3l2amDRZJncT/HQtvRhrRlbI0F0rbu4VlKORZi
kFikDohNG17FKALTmn3xhC/QJ+gb9BE1Toc+Rd8y6ps+R9+jD9IX7c6tF0Kf
vhmxgzGKsarisr2WrM+85fnAsgrnIzAf6tn8Y7SL+FD+tt7EU4RMxtjsjDLl
Y8/szcfR3XtV873Zu/0R8oj93k2mmRPi74Eh95rm0XPW+f1JgdpnC01DgzlL
ENDVfTnyEM5dj2zpVK7eKGEhLdG+TaBqnQrPY53PD4/3RacVrTAg1xchfZW+
WuHdWiE46C+6ayw8hyzB7o9WCjvk4vj3/U2cx5ldbbC28DUUm/EgJd93RuDY
Ok7zK3yGzxrX+baoL94pnC3fYfyM7+YeuBfuSc/eeUbOrw83cEnUAXVBnVA3
1nyXwrXY1rVQ59S9KzaTtu7qvp5yxCIxSWxq4ZaYJrZ5HmKdmOde7M0iMonw
JfqUKp9JHxS+WBZfZixgTDDxQiJWMGZ4tvhYxhB7853uFGFMv92u1KWl+f7S
PmHRtzynqCvnO2gYUlX6/ARHh8jZ1fU7BCApuWy52gYPB6HJ8O4O8+Mbdm+T
c99N9Qdm+XFzmb1nlc07OL+C88mZu+6dUA5zNGZMQu5/8uS88UsXTlv0A6Mc
OHNQzki5fN2yBsE6z68lV26cRvaX69B+XDwqNfFBpfYhqJYSJeeU83vOIPn0
+9Lcuksci4EHufKrvvt18ytCyK1wbejgbdS4FePnO08UouCYck6enTqgLqgT
6oY6uqJR52EhKrwWbUMb0VbGz2S/MGFL2pS2pY1pa3dih/OCiElis09CvMSq
9T3EtOY5DPVPnD+z4TP79Tz0saYjuqPeQ0Fl2nOy8Hn6vub8evIrg+4MfkWt
L1jq8lm36j8X//MXZ1dn+Yw15L6dz82apHkyNs8cK/seNeu2H9OzhiDHzzYX
z1kjrDWIqbtE+c1+ffW8Nn+LH/HPD5D3z9Lcf05IZ3Sdo/xuP7zZB1gWlWg3
722U5UkpCA/aoiuf3itjoR1uJVHOSCEPYs1nOMM75Pv2wdxaybJ+Y70Zf8IZ
JBTTeV3kWGZFjta9H2f4Fa4p13aZW1E+49yZXDMOgTqgLqgT6kb3+ip6p21o
I9pK6znaWA8WiBliRw/GiEViks8Ro8SqaU8Cw8SyWs2XlPpK/QpnzXP+DH3E
Ro/Cl6YtHSZ9iz6WL3xtffOy9ZDLadBZ+n7F/PqKi9dn01pjSrNp5ZojNeWJ
dQrnZJc80xib09thRtIk3B9/3mGOunOVHLRN3oGpac9hZRvL+pBZaSMsc9OU
B2phwdhUrKkah+xJQ9G1smWu3x15c+MM+xYNxX+3ho1UyYWXnVshjzK+8QSM
7zVVzmw3fp5V60m0jP9MF0fxTrChnqlarJUelqP91vVoWfN9Xevo5VdkzUzN
PLk2uRbjZ3w398C9cE+61unzuTJ7xtgbrWaM1AV1ssgd3JXafBNhS9qUtpU2
dgfHYnYm6oGYJDaJUWLVGr/EtPmeiHlinz5AX3D0PvoUfYs+Rl+jzznjo0Ze
sryEMYmxqeKyf9nLld5J0sR/KYLb5smePnL2dNPXlD5iISsRtyAXZ/Z/glN7
81yey3Km8JBFvnfd4gX4a6de6n2Qgv6CphGN4N8pEMHR/fFYz16Gflj32OSr
6zXPsD1P3+nI/CgXuYUBbsmLB0fWQXBUK5nvdyVPL2eveN2DsOB7lbN18Jd9
rtR6fAUPbYRe6ztjToEvAha2F+++X85MD+raSqmtCLfVg5o8saIRine9I222
b9cZi/kcOw73x9Ivp+H8bqWn1PHi3viuuC0Co9TXsjd/hc/wWa7Btbjmkq9f
xidf9rZ4J/fAvXBP3Jtjvd9jmmvPs1MH1AV1Qt1QR9SV9XPUqewhJnRMXUud
C907msGiJbS5tH2kOvfkrBCTxCYxao1bYtmWD7xHnok+QF+gT9A3gjVquuhT
9C0LfqXQ9TkrtBl9nzGAsYAxgbGBMYKxIrhtrowdtzp+uUVELL9dr9R/jDTl
7mSfsJZ3Rp8wmSMdpD5HoV9SHO4P90HlOrXQrodrNTltY4QuAnwwcEACXi9a
q50XJl+Qu07OeHfES+w7uU37PCkJYt/xckZLXL84JJa1d9iMSVh3ZKPMW/8u
hP3AmIs3nz/OWfScxX7NuveZsfbgT21+hb2cXvw0G72HJaCSTyNU6vIwKjX1
wdgtr+HnX5T1ZF1H/kZcun7CVmdOcCyXnOzj5Qy/QuHa7BXmKrdCIXfCXl7G
GT3UAXVBnUjdCB1RV9QZdaf5DvZlU6mBoo1oK9rM+BltKTmzy+ekjWlr2rys
PEvigHiJQWKxr8Bkih0cEtOOeCKJA+Ejv/yibUP6GH2tdqAf2jz5sEv7bt8z
TPp8zbY+2vPrB90Z/ApjMOtWQs11IWJ1xXXrr1f7j0G+T7xLeVrJO3g8hfWv
xSNwQGkvr2aP7JG55jlZKbInksyxV2PeuTO61l2JfvW1+RVzCRq6B6sy4pHT
VMmlh2Wvx/K4Abry3qY+Tm37oUPSvxy+y5zPscjb+yTLWeybvGx7Lpn3qbIn
ueLZzDqJWNBhCBZ4pCDX8zGz7zvK2gtr7sZZjmWtWHNWyDDdtnOKXxHySuhw
vK1z/rwat0LZ5BUte3mZ96ejLqgT6oY6ylXRsy2/ot6XjTairfJ81HVGGzvC
AbFCzDiDMWKS2JRnF1glZoldh1wOfUD4An1C6kT4SI7QMX2GvkMfoi+Zeo4J
H6OvSa7SDo9k12eFr9PnK66Ky/o6NckXU2O1+wWVRSaHvuhU7tZats+JwJqn
hmBK2hR0fOZfaOG9x34vrrtWoWWnIgxNexlreg3BnGpDcCWyfml+2qMWZg97
Fm9VjcWa8YPR8a4ciz5N7pi5wnnosh9Ywmcq/cDKzq1kVUnCK/cl4LmEdPln
lpw/YuAYqiRjRZMYRN213iE/8UTlNSY7rY9MsvjOu90BtFqpj1txll+htFr1
Ppq022fxGfdg3A/35mgNnnFF0xjD/HqDbqpa6aZKUpl0rcaxyH5hCZ8r/cKE
rcuKF/NZLMQiMUlsEqPEKjFrxC+xTEwT28Q4sU7M21ufPkPfoQ/Rl+hTZfFJ
+nR5xArGIMaiikvf1XTszFufF3SDNPaaAf/g6fAPmiHzqE28Z1jMhQhMmo4j
65fj+JZcFO/YJWc4nNx/CGcLD6Gk6AtcLNov/vwcJYU7cL7wY5zd/6Gc8UA5
IyUfZ4sOobjgY2zZ/DG8OixHneYfy9y50guqpfzdflhUIwR1ure0jiE6FCHd
2mjmq6v39y89R/BkxMybh09278CZUxE4eywC7RY6nlOiJUGR9yu9uAw1BK5K
WLt2COjWV85pV83Td70bYfMaYuGnPZCxyx/p2yMQPtTfwO3Utpjxwly/3X3H
3IOZW3xx9vsInNy7Tdjqc+zetcbEcxz9NAJbPqL9epg+u3wyBZs+1+ai7Nav
COGzXMP0js+j8YF4x9FP25k+4x64F+6Je+MeuVe7vFZUq9KeXUIH1IXExHBF
R9QVdUbdBarUKVHX1Dl1TxuUxYbEALFATLiKJ2KRmCQ2iVFilZg14pdY1nqW
PkBfMGFT+Ah9hT5D35F7E75En6JvfZT/sfS188Ln6HtnDL5IoW/SR+mr9FnF
d7+Qvkyfpm/Tx+nr9Hn6vnksYGxgjGCsYMxg7LjV8cstImL57Xp9cDTPlL/j
b70faHNn9AlLSSG/Yv+eLrEPo3LDv6F6qI+sz9G7dq++0Za1PE+nYvdx9Tyy
nENeWKCaV7aWX3+9gNTh9mdrk1MhtxLXV5nRQs7FKZ5l7vNy3rix5sa8H9jV
n87Jf5Mn+OS7PdiwKx8//Ww7V+ZPjTOwZmLn9/kYtn6BfNdfQwKUGg1fH3RK
jZa9sMzv//6CMnNFk5cS38m+UXY4lj/+UObQ//y7/h5bzvIrnHHPd/zhIrdi
FM5pL52Vogh1Evl0tMKzCF1VaRUgdUcdUpd/qJxLjmBR4ehoK9qMtuN+aEva
1LxfmNStsD0xQCzoxc0gI78nMEfsJejh9wSWf/1VnTOx5hmpmxMXilXvpW/R
x7imsWaDPqh375xfTx/n/PrOvRxwM4MMseM2iGH2pBX7goVa9gVjrK64bo/r
6JhmeCVoOjZ56p/bwD5Pm0b2Q9iYQw7zyA83P4BWaYcwaekoBMTuR6/6ixWO
RWevpoC2nyEpezquv1ofk1+a5FTuW4pXHwyc+KJ2b7Dw3apn3OSdLHPZlnyI
Mcevr3blXa9EzA8dhjkeqcj3ta1PyDfMXFHlKYwci7cDjoVz6GOdm0PvLL+i
9x1a3IpR1tbvpzorhbp5VeiIunrXUwd3oKF/2oo226ShM9paCwfECLHiLL7S
XpkosUmMEqt6cU0foC/QJ+gbrdK+Er7yhcPn6HP0vTzvGMd6MunlcenjFfPr
Ky5H1/WERlgwdojbZytcCrPfb8ieXOvlaZPffisiBbMn/wMx41ehRdhB9Ljr
Le3ccpN9iLywFiXPNkZJk9p4MSFN5q3XDUvFQ3d9YNOrqSxzV4wz7GNqZGLg
5LnqM2LKWFPBeg3OG1FqNGy5g0U1e+CVaUN1cRzsE/VWrThpowyznlxxlVbh
H3vmoh1rIcqJX2l3V658R2yl0pk3GcZeZWJP5rNw7Mkr04bLM9vW9iRJHVFX
rOcpey2LlQjb0sa0NW0eV9k+x2GfX1kO6550xCYxSqwSs8QuMUwsE9Naa9EX
6BP0DfoIfcV67/QpV/2RvuzO2MBYw5jD2FNxOXcNWHznzWBRE/+6Eyz+LWcp
hC6FZ7PM0txqZBp2r1lid3a2I2HuNniKmc5628+xs/cT+z5p3hN5N+4LzkDT
lBl4b9MSFO7dizOnFW6FcvRIGwS+6GyPp3tkXt5YP+F8zYNSo8IeT+2jWyEg
1EP8XWUPY+pgRK4PvjoSh5e3B2BuQQCey4821ZGwN5V1z6uwKDu6GFkbnxQG
ynNfPN4Newr+K3W+57jSB4wz0Jce+Qeyvx5tql2hXD8Vh1GHW6Jy5Eh49bfl
D7T4Fd7LZ/gs1zCux7WXFk+Q7zHOXece5F7Enrg37pF75Z61bW95dqkLY78u
oSPqijqj7qhD6pI6tV6HuqcNaAvZR8xQ2+KKbYkJYkNPDZGFCAwSi0ZcEqPE
KjHbdMAMiWFiWZPjEmd3NBOGvmT0K/oYfa0svkpfp88b/Z+xgDHBOLNJK3bc
qcJYfjtfM3Zkm3J4d0qfML05Us609o4MkjOumz0WImde27tf/oa+mQ8e6m6V
px0/Ev8+ZztDgvUE7IFlwa/YmQvP+fJ6z5gs9t7bbEaLWn8mk6xdgE++y8ef
hnn1/PPyjXMW/cCYh794/bTCE+zdpl5PYKqfKM2Nc365nNfzilIX4RsVhkot
/OScEa+uIbLP3OnLtrnzvMM7cfjsQU1d6OFYLly7IkUvV+IKv2J6z1WN9+jg
Vihfn/sK7x/aafM5dUMdUVdyNovQHXUo7SZ0St1azIhXsYGJCxI2o+24H9rS
OEfH2C+MNjfHADFBbGjinbNVEktnqyQP0N9Tj1jW0oV1nzz2T9t1otDmPvqU
eQ0dpV2PDqj9dx8MSLbP79CXAwzz6xt1VubXuzN23CoxckzmnPBLO7Nv4X8h
Ki6ta+3Qx+Ss6/cczGzfFPk4Or7yPpK839eVRx7olSulVdMtSq63bWe8O0/8
N2DxNAQP34OOddfafb5b/eVYMnwwpjYYgUnT0zAs+BXnORYh8ycMQ8f6tu+a
vHSE1Rk7Sp5gdd0+yPFUmW3h6bh2Jd83GXN9BmNus2HYbGfGyLueCXbnhujh
WBZ49RHiXA2S0/yKkPk+/bDAU7uPlyNuRdFLAt5toH1e6oo6o+6oQ3t8j5YN
aDNpO1n7Y4ll2tra/sQEseEKpoaFzJSYJDaJUWLVHpaJdWKe2KcP0Be4L/qG
0U/0+FSy8L2OL+UiL9IRJ6rMr6dvV1wVl7PXhvQueKHWeLfkUDkj25VcrnHu
xLPt5tmd453tnYRFY0cicfI8hPTYj45Vci1yzjF3vYX5z0zBqYm+ODC1BeZu
fwne1Q/Y5rjN+QIneRbjDPvABluRPXKE+l7L0gvsvjiMbTdNmTFyX6w691I1
Adk1otFh6Ie6eY71scq8mx7ppedvOu1DKdb3th74OV6ZMRaB0V/q5ld4L5/h
s9bfKe/Zavo39yBracSe9O6/w9B8eWbzGh5LvRlm07SbJnXoVo6F2BO2Dmzw
kVLLUtUFXsUO5ohRYpWYJXaJ4RgrLpFYJ+aJffoAfcGer9CXTHOIXPBJ+rI7
YgJjC2NMxVW261bnBcsqfkFpdnOkQSGvyfnbjb1fFn9OxgfZGS7nbHe8tQie
zReJdyozXv4S96jD3HTTCG+Ed9PgFXrfi7Gf++Ho7hwc3H0AZ86WcitGOXm0
LeLXeKvWOFhLeJQPmnbwczrvzvw36y0iupXWWci9dwq0qDsInOKB4Rt9JLdw
8Xg0Zha0x4BcH+w63BcRC0prbZhL92tbz/IdEdr59U6ZjWSfLp736skeOPll
N+w4PF3q/Ow3bQw9uqKwZ3MxDhZElM5i+bo9dhzJR68FCuf11/4tdfMrvJfP
8FmuwbWM6xZtb4Pd4l37dkXLf3MP0v5iT9wb98i9cs/cuz3bW/AbQifmPANr
Qqg76pC6pE6pW+qYujbZVdjAr1Pp2WgjaSuNuS0O7S0wEm6P6zJK1N0Se8Sg
NS6JVWKW2CWGiWVVTArs27O9UehLij9Pkz5GX3PVT+nj9HXF51fKGGCPm2UM
udVxrKxyJ1zGmgRKm9u9T5gLv0HnjOvKgY1Q+cH6iO7dWfM+n44haNhOYwbE
mGE2/ZByviiQdRr2cssWuX/yFE6eVzMHLvYzrSAb3/5ombc29gO7+jNz76V8
wO+/X8Caz/Ow4Ytt+F2DJzDf+6EzOzFp6xJTzU2U0JvsBdYxDHcJfDC/PXP3
KtX5NLLWYtM6u3yEI45FV12Jm/gVzToZndyK1C/PIt593brf2h9KTQl1RZ1R
d9RhpcaN0KV3B8WWQsfUNXUun7HD08n3CBvSlrRp6XdXpM1p+9+tbEKMTP04
W2KG7zPn7vo44u40RM5ZV9OFyt45v56+Yv6Z7Jc3Rt2PG7UPgneHEM13y/n1
D9rOr9cjemrfbpXIvmDBfrJXo/EzxuaK6/a9zg8KxPSu0y3nuJvn2LMGIMzn
IOLr5+j+nX6sx3qker0r+xsZ1zHPjXPGBHs3jc8ajfD0D2Wu2fhsj/pL8PrY
IRY57WlzRuPq9LqYMW+4zGs73cup3XbT+qHe/7KYmcF89HrPRFlnwTkVajpY
b6d2Jd8nFnNrJmJB5HCs9rTN71vWFDyG9dW7OJyBY5djcaF2xVV+xd679HAr
ylk6izN3lfUU9jgB6o46nH9vIvJ9YzX201GxhcZ7aMP1sham9B7amjY31YII
LDjbc46YI/aIQWLR/DtilZg1rk8sE9PENjFumk1k1eOMvsH59fQV3fUvDXIQ
5n1Q+qQqV8X59V0r5tdXXGW/vpgaVOZ+QPNHDXU+l1ujtCfSmlmP280Z28gD
CViZOhyj0qbjoYGfosXf92P8ouX4sV4tXOvXCM/VSUd2vQRkjB+Nbs+uQ6sH
dmjn8B3wLMYZ9pzHERK/T6MfmOs5/cVVkzC53mg8l5CG12uq8ypG4Zz3xR4x
CKv+kW5+YuJLU6SNmgUpnEnLah/hxfyZiK70TimvUnUrFqcPN9nTnItxxK8Y
ORMK1+Baxu+eEO94cctMtKyufMY98D7uSe/+edbFHj2QeV9vu7qh7qhD6lKt
7qcsHAttTtvLmSw1FkhM2OdWbPVnFGKRmCQ2iVFilZgldolhYpmYJraJcWLd
Gd+gL5XOcnFu7gqFvlyWWMBYwphScbnnavpI+i3PDZaNXxH7b+D4DH4t0hAc
mgn/Dm8hI9u1vO2r85TZDV7Nl8jfwcvf7TvIG4dFt0FwlFWPsO73IGmdN4oN
NQG7fkrGmfO23Iq5MO/+aGZD1TkjIV09dM+uDw6+W+FgJJ/ib8GnWNRNdGsD
v8Q24p2NkL7ZF0VftpL7OH/sUWTsikHXtxohc3cUig63s5gtH97NT7UnWetu
Kr3Bou/B1Hxf0xmvn+qNs4UKz3HmmzYo3rhLqR/Z4o9VOzZj3deJptqV80dD
UbijRM7ZCJ4yG57NZyPgCRWOQ2P+Cu/lM3yWa3AtrmmsYck5koLVn+bKd/Mz
7uWMgevhHuVeDfvmGXgWWx22stEDdSN1ZLxP6I46pC6pU+qWOua61Dl1TxvQ
Fq01es0pfIu/tCltSxvr6htGzHT1sF0zSuG8jPVEWkLMErv8O7FMTBPbFnsT
2KcPOPIT+hJ9ir5FH6OvueKj9G36OH2dPu8whojYIWPIbRDLXBYRw++UK3XB
CzKfd9v3CStDj5+Q6BA5+7puhwAkJVv+3v3Rnh1Q27eRzecW8nQqXtuncApy
rsQmlbkSdnqEFfP3+i6e29TD6c0XkP3FKly4ccKCP5G8hlk/MOucfO6XBXhr
X75pPooNtyL2femnC1j99UakLnzB9N7+yXGo5GuYsSL+jOXv6sePxKffa88s
33/6ID4stq3lcIZj0T0XxQ38CuXSL1ZzXpzgVozC+/f+17ZOwyjUGXUXJ3Ro
rtN+QscmWwvd0wa0hVqfMAptSFvSptZcmXW/MHP+5aLADLETl/mC873nrKRY
pZ5LwRFgzS/KupvcddJn6Dv0IWNPMDVJTk5A7Qd90KFnB4vPk8zm1wdHa/Mv
djmM25hfCX78YdRubdYXTMTkiuvOuDj7mjOwjfnyvJ6PI3TCJ3jaaz163bsS
CfU1ZnbbyELEV80Q97+J6HlLLXLj9vprcQbFrKzBGF8yFUM7vmZZh9IgEVfj
xf/P96qCS+HVsD/773hm8Dz9M1maxyNyiJLHHpk10SIn/3aDfrKm5D0NbkUr
p8+aiSUeiXg9ahjm1knBJu9oh3xFPueEeOmbo6HFsXDmit65KGXmVxoY5rwE
W8550cutmN+/WWNGirls8n5c6pI6pW5zVWqJ7HFdtCFtSZuac2XDFk+SticG
iAW9uCHGiDVijtgjBolF83uIVWKW2CWGNc9ntW/6Bn2kX5UM6TN6fCuh7hvo
VXMlnvZeL32TPmrESsX8+oqrPK4fxzXBi0lpLuVUn683xeXaFTlzYmRj5/gV
815iHVLRIvAAWjTeh4gzHyDu1eVydoX1fSsHDUffiRkIDC7S5FmsZ7MYZ9g/
UeNNDEybrdoPLNtFboX1GHNqxmPyoCn4Z80hyKqS7Pi5+6KxeORo3dyE5DTa
HMb66GTTv5PWzkPLkaX8TLO/F8nvjbZc27wvQqpv182v8F4+Y3yea3FNU33L
yAL5TlM9Db8Xe3LmDFnPjJZnd6hToUPqkjqlbrVqXhxJthrW2C9MYIBYkDwL
sWE9Y0WDVyHmiD1i0IYPEVglZoldYphYJqZd9Qf6ktGvXKlhoS+7EgMYOxhD
Ki73Xq3TZ9/6/GAZxD/IhRkKIWmYsXadMlNl116cyntHV+52ReY8U7+hpsHL
0aRFGgJi7OeNg7vWgX9oHSWP3fdepG7wxpEjoRY56oO7DuDo9Uft5rKNcuhw
KCbn+SLk1XoI6qnMWAkKvke7VoG1A11byjkX7FllPh/GQp64R9ZMPJbVCK8W
9MDW3V1w8XgXi3ev3d0L4Vk+iN/UEme/j0PObn+LugU5o0VrFntXqx5jw2tj
y95AM24lGSV721rMlf/2ZDsc/7QlPj7SF7vyj+GTzQEm7uW73Hw5c4PcSOP4
2WiQqM4T2Zu/wmf4LNfgWlzTyKF8stkfO/K/x9av+8o9cC/me+NeuWfj/nkW
nsmS96qnqgvqSOnTZbhX6JC6pE6pW+qYujbXfYmwBW1C29BGsr7lCfU+X8p8
Ex9pc9reuo7GXIgdiSGBJWKK2CLG9GCRmCV2zblBYjtFYJxYJ+aJffqAPR+h
D9GX6FNG/6Kv6fFJ+i59mL5Mn6ZvOxML5OwmEUNudRwrizCG30lX6ixlZsNt
3SesjDMU+iXF4f5wHzkL++HuCofUx3De7n10/hY+4wXkfJ2NDTtVOAY7/Z3Y
syl1whjn9jw4FanLZ8l6gbNXjpXm0K+fw6XLp3H9lwuq/cAsctuFBdjy7524
8tM5XPvZti/YF2d3YuK2VUgdadmrqUa4Hyo9HIJKf/fDQz0Nv6nX6AdmLtTL
6Uv277HHsVz57QouXBT7/PPm8St8F9955VfXuBUK7cM59PbuMfYLoy4jhE6p
W+r4nrZ+lnYXtqBNaBvrNa4Jm9KWtCn3aM3xWfcLk3N4Lp+TmFG4tytyr7Ke
SmBLYswZTAoM//mHil7sYJ+zY3K+ypa+o+cd3eOjLPpkmebXC9+lD7vq/7cr
v2LTF0zE4orrzrteTRyF9dlj0cbzfSQ3WII+1RZjkOcq3b+xH+S5Er1qrZZ/
58zu0vyy4x5bReneMo9NudztHnyX5Y3X34zFsL7zkZfd2vSdUa6PqI2VS7tg
WNtXdeXLO8x7F2+HGHLSnl0kR6DwHRr5enIranv2TsaCdsMx12cItvjq79O1
uk6srHfRe78NxyL2MytytNMcSVn4Fcnp8J0GbsBZboWy2buXnEOv937qlLql
jt+zruEx4UiLY+kobSr3aOBnaHPaXlf/L4ElYorYssYbMUgsEpPEJjFq/O5A
uo8dbsUW+/QN+gh9xVn/ok8mN1gqffRd4av02Yqr4irP63ovT2SOT8bcqoOd
yq9ei3Vi5oNZ7YqUmjXl7/idzSWviRmCFg33KHNYHtgl+07J3lbi322rfYi2
yTvwTNrLWPH0CCyrVTpzfk3XwXg2bRpCYvarzllnHyfjDPtAj081+4G5yq0s
rhkj54aMDUzDour6nlnEOew1oxE3frFT3ISsmei3X+FS4vfhhdUzxd8VHqBZ
+GG8E9zfZMM1Hr1N9+rlV4zr81njOlyTayvfL5fvbBa/x2IvzgjPzLMvqp6g
T1dCp9QtdUxdu41jMfYL89ih9AsjRlQ4FWKK2CLGiDXTugKDxCIxSWwSo8Qq
MUvsEsMSywLTxLaz/kAfoi9Z+JYTNSz0YWd8njGCsYIxo+Iqn2vCioxbnh8s
iwQEz5B9gFx5NuHNeTK3fnJvrpyVzRz70d375WxstVzuydyVCIidZsoBB4eu
xP2JDnofdb0b4Qu64NXtMTh+1LLP0pkfIlC0+4Dcw1e7P7eYveJIfjrVF98e
jsbufD/MeasRkhb7oV1GOwTPfBThUyIQPjoAwUkeCv8x4H4Eiv8dGjihjpyl
wTqY+LXeGLfJBxnb/bCjqCVOfaPs7afTybi8uxUun4w2vSt3bzeEvOmP4Axv
fFwUJz/jc+Y1G2EqtRqmvlgdLefPs5eYsXbn/LH2OH88xYK7MM2VL8hB7g4/
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
6jr0PWPAWDAmjA1jxFhZ8nX30ogxYo2YI/aIQWKRmCQ2D92ZJ7FKzBK7xDCx
TEwT27cFxiXWC7pI7HM95gJzgrnBHGGuMGeYO8wh5hJzirnF9Wx5FC1jzgaM
Kj63SuO7g++QB/0eK7aJd/fDfHGG0Z9yTtg95Fc6xbSDh1dNOYuodAMvqZkd
EdvOqe96+HgVzfKxNWpLZKYjeeFMDNg4X/69/4gt8zFs83y8KP79r3O78N21
Y7paKI7tJm5qzgO7KTmXM5fzsWzLGuwp2I/ff7+Kw+d24uWPspHy0hB06xmD
hMQ4hVuhH8V/qXfuFmiq7ft6SZ7FfJaZL+PklTyn9iW119/X1ni3s9+UXpfd
3+1H9q416DotCRXHxOCx8UkY++40fHxqv5wpRY2b3C/34F8X8nCj8JzDdeds
zMGcDdkO7+NaXJNrU5eez+Izx22chuovJ6GC2Av3xL3tEXu8zNlsvzn2AftI
uGdne1/oW/pY9fcLPSLgVsfEcdXzl7FJMcWKMWPsYkQMGUvGlLFljPeKWC/b
vAZnLuVLDFhq89jOCysO5ojVM9fyJHaJYWKZmCa2iXFinZjX01WR7xKRa87k
llm/vr6XMidM5FrHaOfy0pH92fiVGMu5YOKdW3I9fNfV2bWQWnecuZac4zsY
cyskY7l3PyxIGo9GbY/JuUROaduXz5azi3q/NdkBd6HUnFeOjHBYs1btxd5z
dHsQZI05dKqsme9aESJ7Da42c5dznEZnTkDhKzVwy9cD31ethtv+fvghsCyW
p2popljU7anhkeOXgLlJwzDLLwW5PpHF4AeUdd4t3xFbDDXeLbgInyjk+ir9
F++WfxYbfMQeekwX/47GFvZlVI3G+nIdpNYI+Y5cbwPdDxf5Fa7FNbk2dem5
B/nMGt3kHrgX7omf55q5Hsdn2uz5rNxzcXpf5L58OmOGfz8ZixyxP6mvYsCx
MLaMMWP9fdWqMvbEALFATBAbxAixQswQO4ZaLAJ7zuKUmFawpDNfzmTMEeZK
t3JLnZ4NxlxckJQhczOrUorI1aHmPTKHmcslV8l1P69rQ2rj9ZQxWFamh13t
dVrZQfihqhN1XM36byXcbFvTqRrykuFD0KbMZll/Zs/Auhf7WdWnVes1Mcv5
+VOlOA/sTTT0+RDRoxdjwtgxaBB8RNbIe6W/iZV9VN0M8iyucCPxmFMpFi8P
LF5t37IPgzZ07ESXOImuZVag9dfrcenoExgzYDwmZE1W+krq52nORbtbfsXW
+Aw+i8+cMHey3AP3wj11LbvCpbV4dsUPrvX92HJcjAVjssQFjkvG3F3RmScW
iAligxghVoiZBsROuSyJJWfPlDBptiZ2iWlimxgn1ol5p7RXRA7p5ZfDvBS5
yxy2zWvmOnOeuV9yPZir/ZTi//33gzbJr9S9B/tPmoS9/1jpBMdib2dvp+jW
3S2t8ODTKNwahOO7v9fXk9iyFqfOtLT6XsHJXrIu/UfU0mmF5/6Ob7+IwJyP
mqPF6FbwzvBC7VQfDN7SDgUnimaayb4Ms8bHI4o+ugMN9abszxjsgX1HGhZx
OWcTzDr2mnagCTJnr8O+c4Ow++xLWLpggZ1PLp5WZmRNZC+NAXfi3z5GmtE9
E009I1zT8hl8Jp+9+9xY7Ds7QO6Je9PbN88kz2Y6J89MTZamDvp7VK35EAuO
xbLPhzFgLBgTxoYxYqwYM8buj8IFMUfs2fqEGNXDL7FNjBPrzuQEc6c4Ocdc
Zc7ebd57+s1+qPkVvrsf9ot/fx4W+SebE3aP+JVeCTGybvtsTFHdNjQiTGpn
13g6yFDn3ulasWXvgcXnrvSo2HEYrJXfvIRbt61r6Kpd/fE7bNz2HtYey0bG
x/MRMyoFPXrHiX0o8aOueWzveDO3Uq110Wyqhp2te5VYQy+84zwH9O/Lx6Tm
uhH/curKMaltsu6DdZi4aRpaLB6IVsntEJ8Yg6ghAxEp9tlrShJ+N82zIl/B
dT/M34ONH+Zi485c+f38y8fk/DPbZ4xZKf7/jRWvavADV+V3pK6KWINrcU2u
rc7WYh9Lr2lJiEiOQ9TAgXJP3FvzRSmYuHGa3DO/zzPY6spb2paje3DsknOc
FI0+pq8tfd+w85PmGW1VnwoycyyMHWMouQLhK8Y2ZsxAjBOxZswZe2LA/jk3
cevOVYkdo1lhjozYtdynbQ+UkRlyksnW+vWhFvr1z3VTeNCeCcXXXVHtz8Sv
yLlgDZW5YHzXllwP37U3u76VZvcSz0RT3XZwEd8SmIqhQyagvfenUmNbr/5r
WSveOsyAizDNd1owOB4/+DlXs6ZNmj3IaW1yWppnKlLTJ2OfOOPoUYuQlv4a
vl7TBtfbF+lmUPNlpad9PXyzbxLmxo7ArDaDrWdTFcO211U01434l22+cXL+
1jsVIiR/ssU30TRPqw1m+cZjsXc3bHBvA7V3hnwF15VaI5U64+0qkfL72+v2
1NSF1+NXeC+/w+9yDa7FNbk2n6HcJ57r3g4LfeLkXvhv7o175Nwv7pnfl2cw
6O15txb5oLvzpZzRJmLC2DBGdnydiKWljg9jzZgz9qNHL5JYICaIDVewROw5
i1Nimth2NMNs68guVpykka59R5F7zEHmoi0PypxVP2MuM6dLrpLrfl8/RtRC
dnoMXi872KoWe+XF2sXqXVFteMvZhvXjuaOHI7zMOqXuXHoTVqdpcyury8Zg
VcUYNIx23CcRzR4D91myNh4a/TlWhPQx19U552lu2nDEjn5Lzn7qkpaDBWnD
sOKx+KI+Bl1OpAvGxGcgtU1msWZTmXtXysbLvg32sDTu7MRssNIr8HS5TeiU
vhjLevfGtc41MW5oGl7PTMGrQ15Cgy5fuNw7Ulx+RTU+k8/mHriXaxE15d46
jV4s98o9O1qDZ19SprfiCxf7f6ziUr6HjAlj45CrETFmrBlzxp4YIBaICXUG
mMSJwAyxQwxJLJVyfB5ikxiVWNXCsMA2MU6sE/PEvlFuMHeMcstRDwtz1zKX
mdvMceZ6yfVgr+lrFjzwOuFd8St32b9itvBMrNu82OVa777bQ4z5AnXm1cEm
yPvkn/j2vb0oyD2Ia9u2atao5XyqL5soc6As6vX3vE/hdCvkn0jE4M3t0HJw
Q9Qe4AvviV5omvo03v8sSKmxF3SSeh9jd0QiuGMT+Lelnklj1GkbhdBGwWjV
rCGeaeKDpiF/0dRxD32tLo5/1cTcF3GlQFtrxdKm7w3Gx1+sRf43PbBiyW7s
OBFhz1WZtOV7rzPWv/FsHSHN6B6uIXmms4l2z+Gzs5d8LPey+4sNcm8O41xQ
1GfEs9MH0he23JPwGX1HH9KX9Cl9Sx/T1/S51MMpULg1xoSxYYwYK8aMsWMM
Gcs/CifEILFITBKbWpgllolpYvuIwPiVg465FeYMc8fVfGOOMlfvRc6Tm32Y
+RW+u/8brqzDa/BoixCE/FnmhN0DfoVzeKo1D0K9jvZnona2nBnmUQFPvqB9
Zs46qtnSyVlHpv0mpxTVdVcf05iv5ISp88AUjXL73x8s2Im2U5LQOrPo+X36
xKN7fAxiur2A2IQYJIjPouLi0YLa6v6+Ulu9wt+CrPbbt/9AzP/iPfxm0pHh
3CdpMOlr0P5j//xN/9qFEz9Yc0c/3bmEoxfz8P+O7sHGzevw9sFcZHw8Gc/O
G4HuCXFyf9LvSfGImjsZSeLnsNlJuhom1wu/w5ELeZLDYJ/Ixn078cnp/Si4
li85mb8vSsPfF46QP/Mz/o738F5+h9/lGlprs58mbGa83AP3EpcUb/ZhnNhr
+NwRGCf2vkqcQV2PZ/vJhoM6eeWY1G+xewZ9Jn1q71f6mj6n7y3r/xVbBskY
uT3hhWZdnpSxYwy7JygxZWyTLLjPZ0TsiQFiQeuMPxdjXpilEbtmXAtMu8JX
cD4Yc0c7pxT9+so6+vWB4WGoGmaaoXU3nMafiF/hXDC+W+ccWvMgX/ElVzGv
+W9F2dWR59YageW+o+w+X+KZgGWdMtAy7iP83ftdzTowZx11r7kJQbEHHdbJ
s5JTcDmgLC77lMUPPs7VramD4UpNXJ0LVuhfAxcrVcAvIjevT6+JrSua4KMV
Ifh6iS9uxVTC9QEemN6gn5zjRG31OS0HYUG/Edba6p6qKbX89RZm1tfQqaWv
qdlTchi2/RyyT6RWvOQueI8ye8tWs+YZTO86VP737erddTVMzH0ntdh30k7p
O5EcTTfJyRTxK+3kZ1tM/TG8V+E99PtgpHaMuNdyL/bPTpRnsFyviJ8x8Uy+
cVK/RZdzc+Rbi+du8kmSMWKstvv1lPcyhowlY8rYMsaMNWP+S3NfiQFigZhw
FUfEnlPcisAyMU1sE+OO8oC5wvlgzB1NrRWRay16/FPk3jiZg7b7Yq4yZ20/
Z26XXCXXg7p2ZTbHuNrjFQ2PjPbF6l1RbeGkON368esZaehSepWsN3csvQ4r
xg7Q4VaKasScT9W44if6/R3ub0nOIKJMDvqOnVY0D0yn1p79WLzUN08bPx4T
MsbImvfKRsnW9Xtqq7eYgLF904utrW7NB8RJ3RHW83V7TqixXnoFAuvtxfCJ
LyG7cbTUgn/5xYn4aE5TpPXMxPXetdH88nqHdf8/gl+hNf9hPa4l1pZ72TWn
sdzbwnK9kd0kWu45sN5uhWfR0ItXe2HoA/p0QcXYu/Yr12GMGCvGzPJ3jClj
yxgz1ox5tiNOTWCHGIoos0r6idjS5YoEJolNFaerNXBMyxYYJ9aJeWKfOaCX
H8wdR/lllJvMXe6FucycLrn+XNeDrhP+KfgVWpMMTFg1z6V67+4vP3TMGxxs
gn2frJO16Iu5q3Frx2EUrN6M81sP49Z2+5r13uOnjTUw7tKOHX8GkSufFv+7
sRlqxwTBc7ov/Lo2RuzqAFw5k4CLBSlyBhVtwo5IhEU0Q8uIhmglrGmncDzT
zFdYgOQGAgJ9EeRbVf7c1IJHaDTzaZzKV3VDOuHMiViHNfe9W/0xPTcTR08m
IO/CGKS+N1a7F6ggRq7b/i0vQ+6kTrNWqN2kpeE9XEPyK9Sy0XgW93BU7OXY
N70wfetEuUdH55BnNfUc0Qf0RRGvUlb6ij6j7yRHJXxJn9K39DF9TZ/T92e+
iJBxYEwYG8aIsWLMGDvGkLFkTP8ovBCLxKQtTiV2typYJqaJbX5OrF9zwLEw
Z5g7ruQac5M5eq/y/WHnV/6brn98sw4eoUGI/jPMCbsH/Eqj5xz35HSIfhKl
PKvhr6G+dn9z79sm1DWt7r5Ff+fPmvSw3MUu1rX15oHdljObqFPfadpAOWdI
b45SsthD98QktH0hHG7Vq8Gtw5Nwq+eFXuqsMFOtPHlkGvYW7CniUTRM5QUs
eZabP53Dxq3vSV7jh1snsY+aIPt3ytlbW4/vwiend2LSnvmIGT0QvXqLZyZb
+z5qQhqi4pXP6s9Kwv7vHWuYsN+EPMynfNahXdj43jp0GRsvjVwOP+PveI8z
Oi7UfwmcqewnWvgqanwa+vYt2if3TH+xX4Rn4Zl4NjlfTJyVZ+bZ+ayNH7xX
NM9M5VUs/ablV2H0PWOgcnKMTTzntwV4KTETsWsT2U7GkjHVijUxQCwQE8QG
MWJ5zruZF0bsSqyofVk6e9Ay5gxzx/Iz5pbUr3+8msw5ve/KXg/xDrpbnvfP
wq9w5iLPw3dryfXwXRlT7DmUHN9RmFOD84bidOvMOb6DMG3wODSrfxSJNRdb
/529Sat71pIkw5ry9K6DcTXEpGXBWrR3WflfRzzL+uxWrvWveI8Ckv1kXf22
n6f9mr5lUJhaFbfSa+C39DrISh+BxZNTsTAkBZu8O5pr/uyPMPdIWNb6rczE
CdSy1jInXyJnfNVqh60+XaQOCXkSzt5a75mg9I5o9JuoNq3lYPN6m53WcFH6
Szi/S/IZ7m2wuUwraQqXEyd/p/bHOFqPz9ysck1iL3JPOvduMvXD8GzKfLHu
Js2YLvJZ71R4zprHUf3rwLf2cRDP8u6AhY36yZgxdowhY8mYMra28SYGiAVi
gthwBUvEniNexQrL1AISGCfWjXw7Y0myzBnmjlUvmMgt6tcz1yx7yewtDlk1
h2GlBifKHC+5Sq4HeX2XEYBVYyMNNO2Ne1do5yc8oVk7HjM+Q9FTKb0Mz5de
jYWZgzTr0avKRtvNN1qRbq9ZomrYx5abhYaVPkP2i4OdmA+lUdcu1wuro/pL
W9mkP8bVHoJXU4fhtUp9sKRs77vmAKRVisBC995S16PoDMsRV3q51EiPKZWD
hr0/wryMPlj0aCQWuSea93doeiOp7z5pYjI+nd4UfTMzis+vlJklrbjf57M/
nRaGSZOS5Z64N3Wf3DP3zjPwLDwTzxYnuZYivoU+oC+WVYy4J75lHwxjxZgx
doyhGk/GVivmjubDEUvElNS9p7nZa7AQk3b6Jjp4JtaJeWKfOcBc0NoXc8dR
fl0x6GFh7jKHS64/5+WX/HDWGO85v2Iyzt05vttW917bvv0sF9fO6WuJcKbU
vn1L7WrTl3PXyZr0qXU7cWr9Tlzb/i+c3feN1LWQvM3txHteJ9+0NwDPL30a
AS2rwz+8MWq95os6yf5o2a8lsndH4uLBp3H2dDJun0vBtTPhWPiRv1nLnloi
/m2CNOdbtQqtjkaNghAU4IOWoR5oMdoDV053MfWF9MD5I+0cz4ra3RgZm33w
7cVhOJEfi1mbs3DooyDt2ryJewrOrK6vbd/eAyHPx0jjz7oci1hD5RC0nsU9
zBB7yT/RC/kXhsg9cq+OzsMz8+xKr1AX6RP6hj6ir+gzLV/Sx1KzxqR5zxgw
FowJY8MYMVaMGWPHGDKWjCljyxjfa9wQi8QksUmMEqvELLFLDBPLtvgm5o3m
qTFnmDvO5Bhz8Y+YY/hQ8yvinf3fdu06vRM+E+If/Jywu+RXXugeXqR34OBe
amrXbh+CUhXcERAeKjW3+blHkC8iVf1xl/Zu4llGpuHn334t4jAM6tlF88Au
QZ0Hln9pP2Z+noOU2a/KddtGtZZn0tOO4TMT+yQpuh5twuAm7m3V6Ukk9i3i
fGStfM5k52eXWfRg/P7bbXz07X5sztulzN7atQ27Tu2Xax27uB8vvT8T3QbE
o7eORnlMQjyiXks3cxmNpiRho8GcMT3jXKxWaTHSrtzS7lExss1Hd6HBZJPP
xF6iJqcjOkEb7zwLz8SzfSnO+N3VY/LMPDt9wDlpO0/sl75Re1QcxVo1OYNL
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
78/742HlV/iu/m+/WMvm3+CrdVfqZ4/dsRgpf78Pdcti8CsxPV+QWhRRLs4i
0jKPpkFSP7xjzJMo5VkN7o19tftHHNnAFHx9eT/WfPUeRmyZj+TR6ehB7qPb
C4hPNOYo6nUMg0eAL3om2PTQpKTALchf6Wnw8pL9K7b6HFI3pKf4XvoIHD2/
p2gOmYlj4Zytf18+hg+O71F02w/sxGci1rZ6JpyDRX303C9y8H+RYejZO072
VLiiyyF7Q5LtMcPzz/h0Grb9e49DXoR7JU+hzt5yi3wSbp3DrGaGsX/E0Tof
5u/B9H3TZA+K3T77pSBqqAuYM/WXcC36Zovw0Y3CS9Jnls+kT+lb+pi+ps95
Hu5b5VZum87FWDFm3XrFIMFmj4xxC/YqiZirvUq2vSzECvlF/w7GfSNcmxjs
kRQvMUlsEqPEKjHrKs7J7fw1tEi/nrnDHLrbPJR9OSKno13MvfvGr4h3Id+J
fDeq8T5w7lDJXLCH8NLjVjiDiJory7373WVdtzv6NsrBneZeUt/i22GBmBKS
iS3ez2GBZzRu9NfoI3HSzDOYxM8v9tY+h2oLfMfh25kNcd3Hpk+GOivh/jgy
xR+3RteQ/Su2NfKD2fXkf5eN0NYnUXTb44t022tY6rZr38++jE3eHRVNdhc4
iOkBySIm2vPEdPkOG+NeJU9hmr1VxK8UzQyTaznajwGfw/4V7tWVs9EX1KWn
b/TmgtGnSj9Qd+lr+pzn2aRzP2NmGUPbXiXGnLG/2NHfLu7ECjFD7Bhhi9hT
58pd1pk75owxF5gTnLc2pVGmzJXbfrVk7vQNWXnXeViU09rzxUo4lpLrQV2v
VB9j2FcyrtFrODShEa48bj03jP+elJiOIJ/D5vpx70kzjLkVnblgK0vHYmXF
DlhVsT2WlO6NTePb4Me/+xSbW5lWpQemjE/GS+HaPQ1vjH3JRU5Fn0tY1X0I
ItIWoV25FYgun4WVkYOd4iDMvSGtJmB4cAYmuQ+z4Wy6oF7tvU5xImHxnyG7
emeznsy8il0lv8KfZd+I+F1TcY8za9Xz+RSLqljzK9wb95jacrxVj40joy/o
E/qGPlrZfYjuvdmmHhhn4yJjaMfrxMuYM/aKNkvxOBZijxgkFolLaaXjXNZi
oTEn1PxgrjBntHKJOcZcM+qTYa6WXA/H9fclWQ+8buiq3Vd+RbVmGegyezb2
2vAs+26nKP0YpxONe1aOsGdlg76Wy76Dsp7NvgFLfRermU1HGmJUrq/CqYRb
cwUh7SvAv/lj8E6tCs/RXqZZUXXlfalbfA3r6TN2qDoljyC4fUPnOYDohjhx
/GkUFlho0BxMwO95CYbcQ9yM6jj0SRCOX5iE/G964MS5Lhj01mO4vE+fsygs
iJJ7JT9grWdfFX4tvMx7kv8e1Ewaf1Y/5z38t+V3uZbkVwq0NXRo3BP3duJs
hNzr8Quvy73zDEZnlD44mGCx/xjpK/rMWf8yFsEmjoUxMoohY8xYM+aMPTFA
LPg1f1xiw4pbCle4FmJJ7eFRzVIfhVgkv2LEscheliPGvSzMDck/ilyx/C5z
iTl1v3voHlZ+he/q/4WLM25sZxxduJmPGQdy/lh9Fhf5Ffm37vV90bwYf+tu
V5s16Ueo2g/U6PbtECI1uv07hsp/G64xKV3WXDd/nYvLt05i4PosZR1xppiE
OMT0iDHWKhG/42wkjxB/a/2Jvknw6hAGt2B/uDVRNDm0ZkXRWPPvPitN/j29
Grcbheew+7v9WLY7F+veW4MtR/fIfo6f7PRYbkqdDmqi7/l2G+LfnoYmncPM
s5qoA6Knt25rqrZJssbv2P8x/dOZ2PiPXENO5PLNk3Y4dAsNgltjf6u5X7zn
orjXaC3yMFPFM7X6b8waMU72Pqm69PzZ66kQNI4IQ4Lw1Z6T26Tv6EM5h8vi
+fQ1fU7fMwaMxe4z+2Vs1HsYs+6z0iWXpfls8VyPVqESA8RCrXZhVnwXMUPs
1H4m1FA/iBgkFqMT4pFk4iJe3DgflwRmiV3JpdroANmvEYeAcHv9eqmBdA/0
i2jsX2EfS58k59f6w/kV8e7jO5DvQtv5cyVzwR6+S0tvxfy37tUHI6eu454Q
xxaHr6b746qPqq1SFreb+SNnQARujWtq7j+5G26FNtJntO7z5WyktxLEHh6x
WqOwdSD2TK2PvcKuN6un2XtwtVFZ7FjRWP78j4wQc92es7G2qT0g7u2ktryi
F/KsE30fCZIXUHs2nO5hEfdNj9DXNtGb12XNT0RJzRTLWVuW/Iq6Du/hvUZr
OZpHpuiwOH82871O9uGY9WyE7xkDxmKbjZ4NY8bYMYaMpVYPFGNPDBALxIRV
/AVm5i9IxGLvURJLWhgj9ixxWXyOpSxuZTSRuVEocuQHb3fTHsrJHNJ7vium
9qQt1OlJK9FjKbkexDVn+ABD7kO1SeWGYW1GBG4+VQNX6njglSilTyVy/ApZ
O46esMiwzqzH32S7x2B1+fZyhtQrVdNxZWhts6b3mMSpLnEr1OR4+cU0qX2u
p8mR/Vg8Xs0Y5dTcL13uoFI85ox+CQ3jdklN9NjysxBTagUa1DvoNPcwwf0l
zJ0Wg7S4TLwyfII9V1ApBsFRnwrfGuunhEYeRrZPZyyoGGveP/kVmvrvBeVj
5T2815BfEc8KjvpM03fcI/eaNT1a7t3Zc9In9A19RF81jPtI+o4+NOJaHM3z
YgwZS83+GbF/YoBYICZc4ViIORV/xOIrVcfIHhalr8r1OWE05gZzhLkieRKR
O8wh5hJzirll3COjcDjM1ZLr4bkedN3QVZP8it/sB/P8RmMRMu4NzFu3QGpF
7Mv7J/af7eW0zopdffrABpzX6RPYdGIBFu/yR9RKLwQP8dDVEQmLaIbg6LKo
PLkxQpu7Kb0MJv2OtbsDDOvy+/Mai+8+Iuv4IR2dq/0HN6ksZ291WaH0VZz5
pmhG2u9HuuDs7i66vMOEbC+8udoLu798HUdPJ+DQuUk4diAYqQ6046+c7iCf
FbemqA+FM7T8WvsXzdVq/pj83C+jJfzGtZQ/8zMzxyLuNc/dEsa1FD2TDobP
5t64x7wLk3D0ZC/s/XKqPAPPot+j00X6Qv03fcRn0Wf0HX3ojK8ZE8mxiBgx
VkaxZKxV/RxigFggJogNiREd/BBbxBixRszZ9VXtO2zH/Wn2shjosjBHmCvM
GeYOc4i59CBymO+Oh5Ff+V+61DlhtrXqX3+9ie3fbpM12ZT+97iW6SK/Urdt
KGq2vLt5RKp17h4uuRrbz9kXU7qBF0r5VkNEt3bK5/xb/6XTpI74h8IXrE3b
+mn5l+vQW5wnKi5eao4YzQNjPZr6Mfzb/0SLOn+7bq3hVr0m3NqEwa2Or5xn
ZXSGhDXTcEHs5fyNfDlXa+Mn27Bx23vYeWI/jl8+hCvXztnNCuO/b925KnXQ
v7ywH4M2Fc2J8gj2R3iM6cwpzsWmL/mK19Jl/V7r96zvZ348X9ajC2/bcjyK
3b5zCRs/zMXJK8escOfm6QW3x2vKn9XPT4l7eK/eWuQ2Nr7/HiZ8vFiX3yL/
xT1z707V8E08E7XcyQGov6Pv6EP68tbtq/hNw9eMwfFLh2RMGBvGiLFizBg7
xtDo+Ulij251fRVMVK2JNjFF+vbEDjFETsyI45DzwuLjJDZ7i38Tq7Z+I6aJ
bWKcWFf7WyJii/TrtXrGmEPMpXuRkzyHK5pKfwi/It5xfNfxnWeJO8s5eyVz
wR6+a/jIqbo12CU+ozBfR6vBVUsbthLf16xlXUf2L4OF/UZg4lOTcXZAPRTW
reFaHdqmhl3Yq5Iut0L9mJSE9bgeWMSt3GnhhU+mB2N+Zjf8MDhQrOeu+yzO
lbo6u5asfZ/PDJZztd72iMI7FSKwyZtzqjjvrJ1zHILKS1TvZppv9YxZg92Z
701r45ivsNObt+Ej1lTqbDejzZZfkRyQuIf3bjZY693yDrTnxV7lnp04m/SB
p/rsbni7arRLPlXmiMXJmDA2jBFjxZgxdoyheUaYDqaIhfmvdJc8CzFi7mMR
2CGGFP0SbY6j0GLGnS3354wV1q0mciFQ5gRzgzli+Xvm0MhBd9/DQuM5jDSV
hv8P9KmXXH+u6+iE+g41USzt1SppODE+AONaTFZ4k7R+CB+71kHfikbPSpkY
ZFd8VuFWysbi1e7jpZa3WtumHZ4W4hS3ssi9N1LbZ2LepK4YV6U/jPRO5o4e
jtWJA5ya+2VrKwL7oN/41xFcZwfiys1Cl3KLJG/QtcxyWT+PGb3Iad5h14zm
GJOYgawZXTGm6nh7jqBiDzydug5xBvxKw1ZHsOiJaCwR//fC8jy2/IrsY6kU
Ke/ld/TW47NapYr3bcU4u/1wj1kzojG693ix9785fU76hL7pWmYFYk0+o+/o
w34TJkufOlpDa44YY8hY6n8vXmKBmCA2iBFnOBZizhKDxCSxKbVYBFZXVAyX
2HVlThiNOcJc4c/MHeYQc8nZvGOOMldLrofn8msz/oHXDl2x4NCpD45fsTTh
t6pvjUXqzFx8vmaxfd+Kjs6KamcPbMaZQ8fw7YGjyN+7AZtzFyNj5TxlVlLC
JFRvsFi/Ji6safjjCH3KDRUntkKj5/+ClhFNin4/rrqmNrqtBU9ROInQ8MZO
z60K7ajotGzYG2CnP3PjQDNc2dYStw7azwjbvrkuYqZWx7cFrbA7fzM+P5OM
vcdHYcBbj+HYR8G6XMXFQ0+b9xs2+/GiM9r02nBv/Dxoeitp/Nl21pnSE2Ka
pSbWMvtCPEPv+dwbe1i41/0FKfj4q83yDDwLz2Q3G0ycnT6gL2z1R+gz6W/h
Q6fnsInYyD2LWDmKJ2PO2KtnJCaIDWKEWCFmjDBFzBF7xCCxSEwSm8QoOUCJ
WYNeFmLeNg+YG8NFjjBX/gzvGr47+A550Ptw9V3zv3TZzgnTshs/ncOGf7+n
9GoMugd1TRf4lXZRreHh62Xd63EX1jjiSe1aLvVnpr+MdtlD8LfMGLz2yUxx
bgf65f+5jaM/5CGqexziHWiW8O/zq7cIkab+rX4v8R23qiaNlerV0NnBnCT2
DfTa8DJW5+Xi7S1rsPHTbdhbcEj2gOA3C97CYlaYnAFWeElyAd/fOInMj61n
wHWJC5f+7dtHjU2SUzPCouLjETUhzbC2P3jjTGz5chfyL9vP9pL16s934tMC
a+yxR8XtsZpwq1HNrl9FncP1u0b9+5sfjmHz0V3ymUYcF/fMvRvj09oH9I1H
XS+8YMkn9E/Bq8KXZ8Uer984h+vCxz//Yj8TzLJPh7HauG8nVovYvf2vXPQU
seztYI5cl14vSGyo2iw9TTgjhmrY4EnPEsR3iNGjl/IkZo0w/ePtc5i8e6bM
gTbLhsic0NJmqtM2FI2eu/t+Mrk/9uTU8ULbqNZO3X/P+BXxLuM7je82vuOM
/MJ3ZMlcsIfrMtIqyfEdhjlV+mGxZ8Jd13Gn1UoG0pvgal2/olqxXxksHFxU
3+dspyX9u+NG63oWPS7Ocyu0U0t8NJ7fE/NrpWJGrXQUpir8zY02lbEpqw0y
BmVg/4wQ3PKvZvgs7mf+ogxcb+WPi5Uq4HKCP3Ll3C/jvg7j/hFFk8X68zYO
tUre9eyAaS0GOVz/Xc94qQ9v/7s2Uiee+7f9nRa/IvdqmsOlxR9t9+2p9I04
2M+UloMd97B4mnxg8Rn7cO7Oz1HyrIwZY8cYzl+S4RBjt/yrSmwQI8TKrTaK
NgsxRCwRU1q9H6cX+dj1VznTx3LVu5zEPnPAciYbc4S5YuZ4RA5hdBOZU3eb
l4sFRuZU6Y+3Ra7r3cN3RMlVct3PyxVu5ceeXkX15+F1MODUIqxpm+yAW7Gu
R1PDnrPAWKteUiZezmKSs5LKWduPXTw15nUVGfXk02qnYtm0DkhtMV7OwnJU
q48evRTZleLhaO6Xpa3uOQjt0taiXcXlCp9Sdqns9VA5A3X+U/YQ52aDjekz
FTvn18fLQ9KweXob7R6McvGIy3wdcaW1uZDgRkewpH4f2fezxDQXzIhfkVos
vFd8h9/V5leETXwdC8tr75t75Z4/mh8oz+DMWekTswaJmYsSviur/Ltd+eVo
I3xLHzu1nok7yX40XsbS0f1LBCaIDWKEWFliw7PYzQYTmLPFIbEp54WV6SUx
K3kW8i1W+WE8J2xNx2SZK8wZM75FLrnCsZRcD9cVNuE+z9q6S/uz8Ct/aTNG
6oi7P9UBQTVeQlDoWIQkTcQzmcsxdMUmjF05DzPWLsCb6xZgwTrlv5NWz8PI
FfOQvHQ5np64GiEZW+EXPUlTe6JOgwz9WnizR1A5owm8B1dFQHtrzfdWbz6u
q4luaa9vV2ZthXVyzK0ENfFAi07BVjOmCk60xJnj9r0qlw/0AvKseZdj/whC
aKoHCg42xrdbjiLvdCK+/eQ7FBxpjKgpxrO2zhyPKuKDBnno7rmpiYdo9dYz
0hQOyv4+fleeQaylrstnGO2Be+ReT31yWu79VO5xeRaeiWezvJdnpw/sz9FF
+sxytht9St868r+6Z8bMUVwZe2LAEhMB7RtLrBAzxI4erog5O6wTmwKjxCox
S+wSw8SyJbaJdWKe2GcOMBeCQsbI3GCOMFeYMw86bx9GfoXv6P+1S2tOmJ7d
+fkS9p3Zicl7cpDy1uTi6bU4ya/0iI+Bh2fNe/Z38jT2wbRKEOstn4bMXdlY
e/w9fHlhD376uagv4rb4eeOXO7FsQw6OXdThnv5zG9dv38TVwpvoM26I4TO1
+g3+r3EQ3P4WCrcnfNGgs36dunuvF9BU/L5aWBA6Tk5S9N5P7RHP1Y8X51b9
yF6Vq+dw/dYl3LpzCauOrUNKmv0+67YLReCz1prpjmaE9REWNXey1PcwjN/y
yfjs+/1SC952jzu+3o/cL/dY8UK0Yxf3mPkV/mz7vfeP7ZHftf2cGvP7Cvaj
R/arhnvqyZlmYu99DO6xnA2mGnXlNXk54VP6lj6mr+lz9gnZzg6ztGsidp+c
3iNjyZg+2iwITUSMqXOit6cQ8XtihZj5S0N/JU4CS8QUseWIpyFGiVViVo9j
Yb/Nsk1rsF5g3zIf+DNzhLnCnGHuPCVy6F71lNEi2Vf2eE3Excc4vLfY/Arf
VeKdxXcX32F3ftbuhdKKV8lcsIfrWrCoi25NdZlnEuZWSMJKn4H35O/kVy7t
gIs+dXDH39dcJ84Zad8PQe2MOQEZODqinqJ/osmrlMFlb+2+gLlvRVvXj2vF
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
t9zH7vbzb8AUsAWMAWvAHLAHDAKLwKQ5FhhWgVmRK1QKsA7MA/uXPZ14LKDm
yNYaEFuIMRnHwmIQsYiYRGw6jgf3CBjx8v3PJxoQ5EZ9H/vf/Obd97HXKTCx
lvn39+HRrSQ5/WbW/ENUTXLrJPA/TUJXU1DoDEPvqRO2hOrMiKCHus1m+qnr
5vNYNjUY5EEhQyvCrUTQ6dP9KTxc3gusQ7S1DlrSIca6z9a+okAZf3BqTzCF
96pJA8bVphuftqYTxbvpRnERfbLzJJXvOkSH9xbSOfTSiq5JF/e3Mt8HbuPO
8TR2Lo5uFrWmko8xwyWeSg4m0bmvXqD0OX4UGhpMXVr7qdehmGbFRC1n/+/+
SQwt2x/DPws1Nx6q9+BZeCaefe7Lcfxd/J3s3VgD1oI1YW3iOrFmrB06QJfy
Xfu5bjeLiwVdmc7QHTY4peh9BltZ80Ihxu3PfCXrGcZ8CZ/aiwPOsTAMAUvA
lHqMreRYBCaBTSMYBtaBeWAfMRASpYahZpb1s1gS678QY4i1/01Mr3xw+BW2
JzsOy1GlfcJU+BX+W/gd2nPP71VQ38B/j27g2t//sPQDs5Vr/uP367Tn+wO0
+M15wrzx+t7k1iaQInp3phQ78u8QzP/GfAn0kbpl6iOl7AGGHPztX4R8Np/X
scC6l5Qt6drncXJq9IjqzHsZx2D6PBg8xJI5NECv5gYzW0xzW3Av/h0yLJ0W
H8imTbt206aP91LJ7R9JLy8OTgHPMvMr7PPPenN32LMusWdu2reXv2PR/tf5
O6VrwJrUZqmY+SamE3QbrKG7UmAzJ79HqEvc43bbHb4S5+lwP0p4CTWfAwvA
hD3vQB8xzNSp3TaQqnkLs1mATUPz6/8UMM/7hRmMK9S7nbt2qkpiFnsB9gRl
zVlV8iuOvmAP1vHftyQ5ZBV+Bb2z0PdIb/6IPSLOXOG/q8+oR7kBY/i8EaPc
AGZwaM54V+SYNzQbTR9mPEbzpgynie6ZlO0zjtY0G6/Z38heme4zmq6HOdOi
pQOsvw9Kpn71l9iV509vvI5Cxp20qZfUHjZn2vua+ChuM4GXwucdzZJpXd1e
tMYDfbwSDHEfnF+pb4Bf8e3Cn4ln4x07mg0Q/OZjWoOviS+wsW5r3fT9HjL+
FLPhBrtsDh/BV1Y8IPMpfAsfVwZWchjm1jHsAYPAIjAJbBqdX2/GvUGOCjGF
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
IOffPy2ZEpITKT4lmQYOGUwrT22z6o+lJXwuSeY4nktPTOxd4Zx+4oBY8mjk
rVrbIeNY0tl+Oiyd4l//FyWlpZh5CL058aJ0iutMHk0b8R5a+Hva/hxeewE9
ir8+QF9ekvj7T/ksjZGbsq34lWe3vGnGjLKn2FeXT9D7p4W+Ubd+uc7fhXt4
b7Jmjficd5t2kfBG/Ziu0Bm647wWt8L5Efadh18jiu8fW3F/MF9yfoT5VnXO
jJow/XNPFVEKuz+BYSmhXyIls/Vxvym4Fciqw0X0zVX1Z287bZkdtPPcAd33
6vULQ2whxqo6jk+wvQJ7xm9//EaVya84+oI9WMdzj83Q4VcG0CKv0bSmWeX0
Bft6ZVMhn/yYM81PGiXL/+7wT1OfPWGwHxjuX+CbTgtajKStjdXz9uiTdHFc
qH6u2w/ibBHT+dJXvDmPoqbX2yuf4NdszntcU/dFk0YayvEP8cmjvq4r2efF
5nMTVozT5FdejX3exKcY75sG3gk8SqFaj67GqeZ+YXLORJGvBx/ml2C9JgUX
g2dt8k21eg/vTcbWsFPxLi2excIbCTpr6QpbWey5mBLc8phNVxmyPXyk5T/4
Fj6Gr7U4NmDEgiMJhvz0+ZWS8aGc+1PTHXNrgGlg2+ZsIh0eErG1Q3E/YhCx
iDUgNisjxrFXYM9Y5puiya9gz3EcjqOix/S+061yt5C5vw/XzPkuc0nhczqW
1e1DmLuytmO6rB+Yljwad4z+tWgmzX5zDv094TD1n7nYqrdS3pQkfU7Fx52O
TWvB54zn10ii/DrRtN6rBwWE/luYWa/Iq4sybOo8ymuaRnFOa/nfyRWtlXAD
7yC/N3vKeCv+YPXcnpxfuAy+odXfqORhYe7KijmJujzF/KnjKc5U/yDWdSRU
F+a95AWkWa41wJnMqyOI0d5gnLth75C+M8E0FwVrwtr01g7dOKfycC2u82U3
D/53/tw4q2thMxn3UGMVt21FfJJs4lfgW/gYvtbCAWbnBIQe4phZXacH5Tkn
cSwBU8CWHvaATSVek2cs4VgGpoHtR+OP2Vyv0C8sXYilOglCLYurtm8Qi2ox
ith1HA/ecb/zirYkvO1aCmq9vtKf6xTzDLWLaUVhGjn4gIhGFBZZj8KjvLT7
gUkkMLEWPdRnJjV+bin9bVBr3j8pOKGm4fkSgaHTqMusIjp76CSd37GV/fs5
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
f5OZ1GjcVgprXcw5E8CpEAKeFW8l9zX4sHFfWHhetff+MiIvFq/QzGef+HAf
JWdLcKRQoT/bA+1mUGRsC2X+fHR9Ktnmp5/H5/n5fjw/j7qH38pT6FZZV8V1
uObkt/3Yv8awgbJT8RTUTL+OADwaowpyqNW2LDlW0e3vFLnkMXr/SLAM77h+
Ot4QLsK57adbamJCOtTiYp6f/WZ0HutnYk1Ym4Ibhu0BewkNX62fz2c6gW6M
6BC6FnSu7BOGM8JZ4cwEfKwfP0u9+WALsAkF/sZsBzYEW4JNiWuFrcHmtOwR
tlrd/mJL4PPwfcQAxAIltvIqjx2IIYgliCmILf5+AjaI++7ZelksrRlVH+B/
+E2lH5Oe/Pr7eVp3cCcV5q2kgi3r6c3y/fTXn6RZi3G/CHjU7c2/d+jVlv7W
oqH+dVmT7FoHuEauXPmJ6I9bdOHat/TR6TLaenAPbXlnF+36bxn9t+IEO5dd
/DcpH0uXPh3IoWtbahvfVrGG3v17kJu3p6wnlz2CXlt9Ob9Jojq/CVvDtV9+
UtkP28tl4fv0Fa+Yrx8wMJHcHvWkIYOV+Aq+A0d8f2ldSO4rfA7M9ZcKTodn
W2NNkNTUZL7mvsmV7xfGe5Ux3UGH1r+1i+/Aue47Jcr5Vjg/CDujby6foN0n
y2nL7l0cV9n3QxmdY+eGs8UZq+1FT2BLemt1bOlH7Xraz6sD269u/9MUU80P
Ysi2zw9RwdZNPLYUfbSTbv1mm39FKohliGk1494N5DrlOfBxtNR1OOV5a9eN
zGb/b3q0KECe6/R1prM+vnTV0YHOurnQjz5+dMHH0dTbRz2Hen0me/aaOBoZ
taDac7/2CLjQw6P/Yzj/HeOxlkpbd+a582kFoynBY6XimqbPfWrBUbzX8zx9
vLuQk0/yKuU9weJd1vLfzHULcR/Q+iajaMrwWezfceb15Y9Ip9hxaynOu4Tf
n+7zul35elHQN0uBLfRbSteTXMw58Kx5xvtS5Xun0NTJ2ebzz5mbzEX8e8qU
bH6N0fnwbBG7w5qwNutrbPVB0xLoDLqDDqFL6NR8/k3GmnQ+mp+B5dyK+Rml
g4fF6y0BK3N7nZ+l9Nyaxn2qeB5sArYBG4GtwGYM4yvRJ5hNjjOst/tBuM8z
30cMUMVXEDNY7EAMOePbmMWU+jy2nPH2ZbFG3ncMsQgxSetZed7JPKa9bqUj
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
u4Z3Du8e3kG8i1V9HlRIIrV79nBmupbtC78rL7lxxvBb7uxVdPpqUYVqlfg9
P/YCdgKOdfzuHL8Fz/1yB23cnc/9FOg7wfwdzEriOV7iv+AGRw31ctlJ+vGn
S/LsJbtEwll+t4yzHL242+m1Z8ZX7vLkeWPO2CshJY5iE417YcD37t8plP/u
OzCG3LqEU9CjHfjfGTuWcF/PPhMspfj6Ga73S1gU98Vcv0R7z+ym7Pz1dBn8
LHby2WjhVMAShgwZzv/lz2a+wBjD1hP5lLpkJqUOHUT9ExMpQQNf6Rndjdyq
u7Pgb1W/iHuxB/bCntgbz8CzVHWwFRdQwVUkv1wpP8+++lz4TOozwTXMhfNp
Hues8l7gWeBJR0zw/JaRHThWj8XrsDfEMLiXMX6EWCc4aU5d/4S+VM2rdqXk
ON4di7jK7/o8qsAcMLXzI7doB+MvfH7syedeIeX5AWxr1+lCOiTOjxPi/Lhk
DyeMiZy7dpQyN+l69jYc2cp4jouLpWJr+TL9nC7/J2j2wql0DTXqPg1p7coU
m/nqjbATKzzxmP2k5IkHfoL/KnniHeLVrgScZVjfN3WYSvpdFn154Nlg+sAv
UrPu3XO2Y70rjJP46Or7qPd7Ti2jof5SvX8+RdVbZ4alDPVdyfV+U84P9FE0
99lLU1enUXbzbpQ3tp/mzLA2vu/T5mf7qdq0Je1+FWzFEheKOe5S0qoGPT1q
DufMkuoDWPA3PsN3tuxhSQfoqKY7bGqjmN1l3K8yl30C38BH8JVy9pdO3qSo
2iuN+1X0cYryWscx4X+LGHlk3BAxW6nreRExNI2TvYJc0uRg8XuUCsZZnoeP
XGasReR2ZeMqjpwfODdwPkjnx4JaxueHhMEYnx82csIoBGfdOysS6XJff3EG
VqeZ86fKfFQrlw105pF7S609Ga1pRa1H+LfcU+4Zpuesj6RptcbR60+PoOPp
//y5X7auyR2nmdX0bcFY5o0x7l2ZEpWhep3Mdc89JJGqvPXg/RifmEEL66jz
rkicLQZ+DyU2YKlXI4GyGiZTeNw+GXto6/4xrYkbJn+/OmWE/N2GPik29bCs
vC2Ocwpc7ZZ8VPaQO4ula5jvHbif2NOW3hXoKOm7JsVgB2yCbdJ3sBm2W/IN
+86E0x4+NvO1EueqE8exUvueY+sRKcdH4rQ3FeSK0k7kkr3YCgS561q6hTMN
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
mSaq1tV6bljliucD7yxvp65N1H+eVjvUNdNqYyfOYtrIlTY1aK2us0Rf2aCg
r2xw0FfwDt7FHJjLo9wVw/PCHuR13Wz+E/Ze2QCOKK0Vdc5WC9x6euQr1D78
c6rW/ScyNjnIOKg0Hpzl4ODwP5ZN6qsYky5rF6Yax943szHl9RpPV9JdayuX
nm9EC4OGaI65LwjKpi/zEvx9LJoxVZejuI/WL75vq/kFDeXnoiYyfQX3WG97
Sy0xvKM0F75RVQDfwYda/Q1ugCMuNRaBa+DcvumNVceAs0rfAMc5OO42+Ftj
0TdZ4rz3yqRXWb0m5BVc/PJj+mbLHrr2wWE6setjOvn5ATq9/zAd23OA4se4
zieQxNTjllCMcVqF7NGUtIT00YsovOlKMprmldt3jIlmrSq8/jxKSDLrJrGp
D1DjWnNYr3frOFyze6nmWmIYi3dYTavE8tMEsHecAc4CZ1IRZw8f6+Occ8zR
wCVwCtwCx8C1ax8cZNy7+OVuxkVwEtx0rt9VzB5VjWsrHFUEiPF2QLw3zlDh
ceZm0FfaJdP/3XMPNXgslvplZfg9Dq/JxHqCRWfZeapEpk/8++Ix2nx4l081
j1uClV6T6yul18vYM19+a8uRXfSv7+X60PvCXm3nkO2fHiueWn+BY+i7As6B
ewl+0FegrbS36JkcHBzu49q0Burx+6ixFLH8FA0aOotWtJ5Ey/TqPdhH9K58
2gpwY3Souv4QOZYWho3xSNuYphtJpU3NvVNe7zlKqq/oFPQVnVRfwTt4F3Ng
Lk/W8JZuDK1W0R9g2HtlBLiituYCgWMr20wSODebcQ8cVBsL7nJwcPgXr2a/
JK/L1eIV1Rj2/2rUpY+nP0hXuoW4jImXDYug14JGaq8H1mwG3cjU+/tI3MKc
EaMV97K+zQAy1drEetY/nH6ITuZEy/QV3MMzjMFYvKOcyzPa39t0C/AhfKnV
7+AIuOJSYxE4B+6Bg2pjwF3H+cFxDo67EX7VWMKnOY1RL180ny4fMusrx/fs
p9N7jtLZvZuFf2+k0/sP0okNKyl24HS34ufod17RvcejjTlkSnqb1cOKTVxT
LtoOerhb91hXP4f0KfeRrkEBGauNYXu2jsM17uEZxmCsvaaV7+uDYa+xlnpp
OAOcRYWeveBr7NkdjoBT4BY4Bq6Bc+AeOAgugpPgprM5wG2//a64tsJRhZA9
Z6o55htnYDpLRcaZA4RvBtwfRhn9Uv0ed3fbRPWwRhcXEt2W6xO3b5XRpveL
6dK1M77TPW6XUenlUrm+gnu3fZe/Unr9DG0q2UK/KdUcE/aKPbuql1aZrU//
7ox7AU0qVldETTD81lg9PuG3x8HB4T6KlndSz9EIe4UmRkyiFeGDncb5n203
z9/bcIoR/d9UWXsmLayVTUURntUJK52nYxrJhzlx0hphCvqK9Z7V8A7TV4Q5
PPn2yvDh9Na9Q0mpRhvTu4Q9V2aAM872t0w/mHFvbIMZqmPAXQ4ODv9ialt5
HHxDTkf1fJRaAXS5YaDLWPj1dD3NrPGC5hh7/vhB/j4Kj7AnL1F1T2vH9qVm
z+6hDX2GUEluS5m+gnt41uzZz4Sx6r1p8I2qCPhUq//BFXDGFa/APXBQ7Tm4
K8v/ETjOwXG3wh8aS2yC87//j42cQMdLills+/KR/XRhaxFd/PIjFt++8OVR
Og5tpbtzfcbRGhtXVri2ItEaEqZTtOltVpPKlOTbWlzo664Y5w+ZTo2b2PUV
dh2irElhDl+uCXvEXrFn7N1f5w6fw/duaSwCt8AxcM2cP/URnd/6NuMiOAlu
gqNO5xA4XuH75doKRxXDnz4299NAfTDUCauoOHP79LYU0KkVdeub4vdYu1c2
bjRduPEd3b6N0/xVpkXs//ZLev/Epz7NKym9Wip8z66v4Br3fPmNHV/to73C
2mXPhD1ir9gz9u738/fC0vqmUkBKK2qbXnG6In5j6G2Pa/z2ODg43IdaLsHq
yFH0YtpcWmkY7jQOPsJUufqtKGFHUSLl6zJpiV4hRm+YQEvCPetzj/g+NJJr
mbUk2ok1V8Wmr4hyWqyGd/CuM33LmRWETzCv3fGZsEfsFXuu7AB3nGpIEcPp
xYx5jIuK3KukOVMcHHcTXq4rz1+5kq2cS3A+JJQu1Qx0mj/AtJWuOsV5FePq
waPp65wYfx+Dx7ieFaG6t8KaXagwpBu7Xjq+r0xfwT08WxGSxsaqzYNvVFXA
t/CxFi6AM+COM26Be+Dg+ZDayjku2XJ/YF4OjrsZFa2xJCQ6r9vU4pmZdN4S
2z75wft0cu9hW+6AJ9qKuR9GxeZOqO99EelilpA+brlPa4Yp9Z1pVHcRmQz2
vBRc457jONaHxEfrwJ6wN+wRe/X3eZstx3W/HxWNxZpDdWr/UTq1o4Rdg5vg
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
GvbNpld+TiWWMuXhDrPkkZZr5YHbF0jnFgvk/rtiVME29uEYztG7njW5IEYR
q1brCWkxjdg2H4NV4f2YWyGya/j891V/Mf4uv+nT5f8df71O7aVe+9a694k7
WmYfSJZ//9v9OQZj2XcxX/Z+ke/Y+Rbzha3ONKy/4uh8YOYFz3T4ua7ILWlt
jrbX+/s7Wuo92lrqdSw/9vG78Zhx7Ir2O0NE1XMtqqnqi57iFSEjWxjmV0Jf
9I1Jd+tdNd2djvOxn+fwDpY1LYMrzq9o5WB8O5VD+bZFA+3fW2TRqDGqYNuw
r4E6x5F74ZnlPRd1rusQuxNK5rhDTE/3MuRbEOtE5FrTfELl/ZcjDGtW3Flf
/lmyJjj6oqe1Dzf1WUePG613VWucRbeOKJszud2wxsr6Bn1kxtvvyYy/TlTb
iQ36qWPm5+JaqhzEqCnHosUuYliNY9FiGrGNbcT6tIfC9K4qUY1WUY7FuH4F
1lkPXZil+vvLzAdWsiaI3n3ntaG0aBcrXVqulNa3hkiH+mNVwTb24Zje9asN
xXKtGzXvmhbTYQu3qBg3rh9U7n2YWyGq0PAxw2Wwr2EMS+/+r9jsX36p73NS
7+Wu0uPt7rr3h1dYgscb5m7SKb9gLD/f/EaNI/n112uOX1cyB5ha3z4z1eH5
wEy5jZJxMz85Mm7GxUXNQad9C93joYLSU4vpei91VTFu6zh+Jxo3a6p+R/C7
QkTVt3zVG5Lcyk8Cei2UJO8xMr1ZoPwUfo/e1fIYo1+Ntp3nMI4jaWZ7HIl5
iYoZVDJOxZBPOR30iCrGfAuO4ZyK7lM6bmaw7bErWl3JADGMWEZMB70VpWIc
sU5ErhXdYLhsD+kmVxphPfD68g+MYXnwLpnWLUL1U89r4CdFoXV3DsPqCH0r
rOwaLLe/JPENDXOATWs7ThVsx9/aRx0zPxfXUuUhVhGzKseixTBiWcW0FtuI
ccQ6Yp6IqsdejgXzKpnyKH57pMnre8r0Sz/QHnNWheveZ15bSofHDXOxdWw2
SzrW8zMUbduw5rqDc1axVFgQs4hd81hGbCPGTWOy7M1zx9wKkUPWn8lQ/ciP
9uwsXl1t/x1/vQ4Py/90dHwtcL2K/+Zl8t3P7p8PzF7Z8ekBOXHllNz85Rv5
4cYlufrjBbl07ayc/faMWqPlyNcfq7EmOz/LV+u1bC7Ik/QjebI6PlkVbGMf
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
h4iIqiYlY6X0jVksPqPniE9HD+jnZ3FPwbfWvjm+PWKAiIgcl56VIb/861ql
8yu4BtcSEVHddWlF8zK5kNXNBsnyhoPUv1bzez1xqym/gm3L46XX+pbZj2cQ
EREZLbl1iCQ26Cdrb3vRlFvBNvbhGBEROU/0xuXSY/5C8ekbrn8OgMW5Rfum
+Lb4xkREVHUYg3Lk648rnV/BNWrsCxER1WkhcydUOAYF5caku035FWxbHrc1
9gX3JiIiMjfjjQhJatBX1jcqza+obW0fjhERketMT4qRLmELxOfFEP3zAyyV
K9o3w7fDNyQiIufCGir//fePDudX/u8/P3LdFSIiMjGf6wvrr9haQ+WL1S1N
+RVsl82v9LNauwX3JCIispQyvaeaB8wyv4J9OEZERO4zOm6JtAmeKz5Pcu0W
jyvaN8G3Gc01VIiIXG7LqTwp+uaMw/kVnJuhXUNERASW84R94DVeklsFldm3
PfFxU34F2+bHcC6u4bxgRERUkcuTWqlcinF+sLW3v6i2sQ/HiIhIH4npK6XP
0sXiM2KO+HTwgPxCXStoc63t8Q3wLYiIyL3SD+c6nF9R5xIREZmZtdivNF/i
HSDRTfzL5EuiV/Qz5VewXeaYdi6uMf6MexEREdkT36BfaW6lpGAfERF5jqiU
5fJi5ELxeZNrt7isaG2LNkZbExGRvtL3ZcvffzhbYX4F5+BcIiIiS2OenF+a
M2k8RpK9S3Msk8JCTfkVbJfmYvzVucafcQ8iIqLyTO0yWxLN8ivYxj4iIvJc
k5NipFPIAvF5gWu3VLlobYc2nMw1VIiIPFJW4YEK8yvqHCIiIhuuRTWVaK9B
JXN+TZBlzUrnCBvTN9qUX8G2cT/OwbkqJ6Ndi3sQERGVZ+WkdyT+9h6lY1e0
bewjIqKaY+iqJdJ6wlzxeYJrt9gtWtugjdBWRETk+dK3Z8j1G3+3m1/BMZxD
RERkT0Lcn1WuJNZrgCxr5CsJLYarn4NaTTPlV7CNfTiGc3Cu+lm7loiIqCJn
QttK/G2vleZXtG3sIyKimil203J5Y8li8Rk6S/+cht5FawO0BdqEiIhqlgOX
PpY95/Pt5ldwDOcQERGV52/vGsanJHgHy+qWwaaxKlcef0Ar3qafcQznYBvX
EBEROSq+0Ruy/rYXVcE2ERHVHnNSYuT52QvF59Uw/fMdri7aO+Jd8c5ERFTz
pWdlyL/+dc0qv4J9OEZERFSRGyP+IFOajZfVzQbL8oaDJLaZYc6wa4HttfKI
YXxLs4HqGM7BubiGiIjIUZNahsr6Ri+qgm0iIqq9guJjpOP0BeLzTC2YS+yZ
EPUueCciIqp9sosPyLG/f2yVX8E+HCMiInLE6TgfwziVFhMkqWSMytdLOmul
k9pW+1oY1l3BuURERJUxb+w4U34F20REVHcMXLFYfALnik/HGpBvQR21uqLO
RERUN6TnZsn//edHU34F29hHRERUGZFLhktSy1ESfccIWenVTw7GvaCV59U2
9uEYziEiIqqsg2GdZH3DF1U5GNpJ7+oQEZFOlqcul9cXLhafdzxo7RatLqgT
6kZERHVP+sd5cu67M6b8Craxj4iIqLJGvxotS5oGyrpW4yVh9QCt9FPb2Idj
REREVfHzwOam/Aq2iYiIIGxtjDwbsVB8Xnbj2i3as/BMPJuIiAjSj+Wa8ivY
JiIiqoob4++S+d4REn1PoIQtDtHKdLWNfThGRERUVZGNBqpCRERkT0D8Enlk
ygLxedqJc4lp98I9cW8iIiJb0ndlyZq8DFmzJ0NtExERVVVRnI9E3zFK/jYp
TiuxaruIa64QEVE1zRoyVmYN89e7GkREVEOkZKyUfssXi8/oOeLTsTJrqExV
1+Ba3IOIiKgiJ66ckjXpKapgm4iIqDpi4yfJsFfiVcE2ERFRdWXO6qAKERFR
VSxNXS495i8Un77h1jkVbR+OLeUaKkREVEVr4mNVISIicoYQ/0mqEBEROcP3
k+5QhYiIyBmmJ8WoQkRE5Axr9mWoOcKIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIaouAt8ZJ
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
s/BMPBt1KG+NGPUOCYZ1XPBueMfaBrGImDS+N2IVMYu2+mF2uIrl8S8FqJ8R
4zgHMU9ErrPh8lOqT3rFyQA5uf0DyZ20TNYmHJP9uRclb3OoZKTGytFCs77r
Y8yxGH2Xf0HSNhv+f/DZYQFlSsaCnvbzJv63yW1vDFUF2/bOwz0s7wsZW4rU
s8kAMWmKTy1WEbOIXcQwYjl34jIV24hxnIOYJyL36bj1qkQ2rJv90TtOjXLb
s9ydX3Hnu3kSxHKb1K/1rgZRndb/ex8piNV/DAvWYwf35B9SpaBFuGT+IcUt
z3N3fgUF74Z3xLu643nm31BPiOWhP9fdsb5EethblKv6nNftv2Lqw0ef9Jhu
/qXzVe2JlpTIC2XnwDpwRe+qO83wwPkyIDRE5SGQk7CVr0haeFnSj38mX5yN
l18+jHI4H2JZvoj3l5Qf4k35FWxjX1Xvh7qgTqgb6mir7uqdtHcbFBYiwwPm
693cToMYLBOTWowiVo1tE9DdX8Uy8iz4GTGO8xDzROQ6xjXYt155VPVJn8y7
pPqkj/tpv4v5n6h9qZtXytGCsuuvZ1zuoHfV3e56/qeSl2PIa1jmPSzLkZUt
7eZN5r7TSBp0n62VSG3bfn4F96joOYA6oW51DWLQPCYRo4hVxCxiFzGMWD6Z
95XahxjHeYh5InKvyFvrS8OVp/WuhtsMS/OTHcVz3PpM5FbmP9NJ0k4PcNsz
dxTP0t51jNuep7cW6z5XsUxE+kOfdOh3d+vybOO6Hu7KO2D+rOOtZ8mH3ivc
+Ez351dQPvRepb1ruBxxYL17Z+ZZ9FqrZdL3TTwiV0hU1xSfXaf6nLHm941o
w7xWSSMmqH7p4mkhpf34h5fKptnFZddtj74qN07E6P0K1eIfMVQeGTVfUuM2
llkbHu+6bu9VOXV2Y5k+++qWSyl9ZcGHxab8Craxz1n3R11RZ9Td/Hvh3fCO
eFe8c02GmEPslckhae+KGDW2w/npISqGVw01zHWH2EaM49ziWjj+isjTGNex
3502W87mJEmhf7hkpRXJRzNWSmF2nOqbXr/tA9O64ab+7KLaPZbl+uFjUrj/
kiSuyq0wz2FZLs22nTNBGf90Q2nYeaM06rhO225kfx4x7R6VfS7qijqj7rUZ
Yq9MLGqxiRhFrCJmP5qxQnZs/lTFMmIasW2MXyJyv70Xr6k5lVbnTdK7Ki43
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
8FT5YXa4bnmLG1FzJCXygmxJjpbUFVlW+RXswzGcg3P1qifaKHDSVNVmaDtn
fQd8U3xbfGNLiIWKrkdMIbbs1VutD9TJen0gxDBi2fxeiHUicg/LPEhuWqSp
j/riwUuGMQLR2XJ0u2E8S9578+RcbopFjmW27Ljcrtx+cmNfuaXr+WclN/u8
2tY7P1DVsiNgqs38yKVpd4p/u/ol+ZWG8m6DAGn76l5VsB1Ykl/BOTjX5hxh
2r31fr/q5FvwbfGNLVWUk0NBTCG2zGNNxZ4Wg7j/0e0XVWxiG7FqPAcxbJm3
ISLPUj/6WI1b32L96XkyOnuS3tUw2frlCll9Ls6UX0n+PFbSLq7Su1omfjmT
VZvVJGp9oAVVH49JRPrJLGok0dlNJXRxcJXv4e6++/TW0SU5g7W65y/Mi6eN
XzGUtaqt0GY1JceCWIze2VR2FDp3fSAiqp5fDi+16tNGP7Rlf/W1iHCVXwnu
GWC3r1utM5J2vdz+8pTZn8n2U0flUnGcxMeWPydU1ceuHJF54UHy6vi58nXo
DN1yFqqf/0SMqtP2dXNk08Ij1uNXFh5Vx7CNc/Ws69/DwuTVCXNlrtZ2uyo5
F5ujBd8c3x4xgFgo71zEUnnr0szoPU7F5Hfh1vkzy7whCmKdiNzDag3xfaXz
MGGNiyPjwuXssHFqnEBGRIrqy8acUMZ1Lkr7tOfJ7i/blttffvbjp+S/P0yU
tPxrkhizQ/f+f2eVrdEv2MyN5AUY5gYz5FAayojfDZf2bxxQBdt+7RqajuNc
m2vca/fW+/2cVfDN8e0RA4iF8mIFsYSYMo8xtS6QFnu4F2JRjavSYhMxar42
EGLY8n5E5HkiG9WXrtnf6V0Nh+QWTtC7ClaiildJ7uUYU35lz1eLZXah5+RX
YNiavpJb5Dk5qfK8e+BHFZNEVDNFLx4voes6yYIL91bp+i8HnnJvbuXOtVLg
jTmvNnpA7qIm5FdK5lLT2iy9iXufi9ioiogLLVRMRke9V6Xrich1LPuhM04U
2ezPnjfA0J9dXs7iZsJciU8qzbFsjzguCVnX5XBxptzMjzHN84SxGgeKt0t2
xFGn9+FHz0+VtuHD5XjwVF3zFSg7z+wz5HySwmVL5CdW+RXs25UQrrZxrt71
LdDaDG23WGtDZ38XfGt8c+M4HcQCYgKxgRhBrJjyMMnXVSzZq+fV8DAVixF/
HWfzOGLY8vlE5D6W/dDrL3ct06d9PO+i6s/+aEa8XNt3Ts6NCLIaL2AsO9IW
ycHzbUz3Opn/R/nl/Ei5ej5S0nLHybnQlqZ5r7Kin5eiIe/p3ufvjHJypZfN
3Mjcd35ryp+82+U2GfG7odKhzxFVsP1ul9L8C861dQ/cW+/3c0bBt8Y3N86j
hlhATCA2ECOIFWPcIIYQS5bxZRxPdW7EOC0Wz6qYxM+IUfPzEMPMrxB5vtkn
/1Wj+rO3nRyqdxXKGH1wiRy4OMOUX9l7Yaq8m+cZ84MZZZwcpHcVHIZYnHD0
pt7VIKJqeK+ojUTO6iPrJ06p0vXu6q/feWuqYc322zwvt4LiifODGQvaDG2H
NnTXM6viw4nvqVh876xPla4nIteyzHGsjfra7lrioxoOlzEPjS63j/76qeWS
eviSXDuzstzxB6qP/USMJCyteJ4oR8u20ANy3/hFEjtevznBzItxjM6+uDDZ
Hl5slV/Bvn2xYaaxHXrXFyVOazu04bbQqq/DYjUWRfvGFY3PQawgZhA7iKHy
zh3z6Gg1N5jN41rsIoYtcztE5D7H8y3WSilsXWYt8XM5a+Xk6CmGfvLcryRx
faEhp6Dt+25/rlUfeFHOfrnx8yzJzZ8uxxd0sL2uSEkpXO4lR31n6973X928
waWZtt/Pv8tvTPmT17rdKSN+6ytP9D2myjBtG/tM41u0c23OMabdu6bnofCN
8a3LiwXECmIGsYMYsowrxJoxDlUMarFojEPEaOm5YSqGy+RX8plfIfJUY71a
SP2gJL2rUa5hG4ZKTrHnzZveZ+NE2VY0xJRfSTvdX/okj9W7WlZytbYbtn6I
3tUoV/3QbTKhcRO9q0FE1bRysZ+EJj8jCz5vJhGLKz/u0B199ftvXS/HsZ59
i1jdcxX2iqeOXzGW9PtiVRuiLT0xv4J5wSK+bCahCc+omCQiz5MQbZ3fuHnM
dl/4rkDDeuL5QZNN+37ZFCVfnI2XTcc+N/VrJyz9Vn5Ji3KoP/9m/FxJOXDF
Kf34d/T7RGYufEL3HAXKrznRpnrtiwmTXSV5LPP8CvbhmPE8XKN3vVEitDZE
Wzrjm+Db4hs78lzEDGLHmOdDTCG2EGPGc04ET1UxuM0/2HY8HYuxzu9EW6/7
Q0Suc7TIem6mtduXlJ37K/u8YZxA0Dy5nndACkvWuk+M2abWw7ie/6nk5VyQ
1Nlr1f4jvpFyaZ79vvQy+YOIuyVr4jjdcwBVLXkjw23nC4L+UJo70cpznb1l
2G/fkaf7f6zK4AbvaPtaljkH19icZ2xkuO7vWdWCb4tv7FAsaDGD2MF1iCXE
FGILMYZYw37EHmIQsYifEZvmsYrYtYxnxDgReaZjZw8Z1ro/nap3VWyacmCm
RB2fo3c1bJoe2lWWH+5myq9EHegkkcGP6F0tmxYfj1Rt6YlyTsSpGCy4cFrv
qhCRE/gljJbMoL4yrQrrsLijr35n20jZ0Xa+7jmK8oonj18xFrQh2tIT8ysR
86aoGPTb4FnjXomoVMIWG2umFOXa7QN/p2WwvPXXEEk4vFviE+yvaR8f9738
kjLf4T79M2dTrNYkr0wZ4JsrI2K6yudLQ3TPT6AcK94i2bOPSnZ0luxaNt9U
T/P8isqxaMdwDs49XrxZ93qjoA3Rlv20Nq3q98C3xDd19JmIFcSM3XjSYi1J
i7k+b82Qd7yC7N4HsWuVX9FinIjcx9aaKau/eLVMn/WVfdtK8wmZ5+X49q/k
2rFLcml3ulq73Fa/+sEh8+TSbMf61dU67isflaIhE3XPB1S2ZMzrZfN9YoaU
rq0S+EB9ebJtNxncYIA8906BKth+ot2z2rHSMS64xta98Ay937OyBd8S39TR
749YQczYuhdiDLGGmEPsIQaNxxCb5rGK2LW1lgsRea5ebbtK5C31ZEnOGL2r
UsbWokgZluF540GMgmZ1l9m72pjyK9geGdVL72rZhbZEm3oaxF7/Vh30rgYR
OUlclJ9EJP9Jomf0k8xJAZW61tX99OneMXKkteetZ29Z9sf+rxxZ8b+616P8
sla1ZXqrGI/Kr2ROHavFXl+JSPiTikUi8kyYj8mqLzvput3+6zFbs+XebvPl
/rsWyZu9N8uWkDz7feIpP8nNOMfGLqD8emCpxMfb72O3V6IDtstfRi2Sr6Of
kR9mOzZuxtUlbsu/ZG9Uimyfmyt7PxxpN7+CY+oc7Vxco3e9UdCGaMu/jFkk
i7W2rez3wDfEt3T0eYgRxIq9+yHG3nxrszxw+0oVe76bc+zey3z9H2NBjBOR
+6Rd7mTVH431LyznZ0rdbJgX7Oqxb+TJLTkSuChFPkqbLfu3hEvWNts5Foy7
sDd3lq1yLrqJHBwSqXtuoDLlyEpv23ODvXSLKW8y/oFb5Ol7h6qcSnffT1TB
9tP3DteONSgdw6JdY+teeIbe71mZgm+Ib+lwbmWm/TE6iC3EGGINMYfYQwzi
GGLSMk7N1/8xFsQ4EXmuAxe+VuMHwm65Vaac8Iz1L3JOe3afyI6iodInfbJV
fqV35gzJPeevd/XKlXPaM+o3XYs1xBxiL+fCd3pXh4icKCImQPZMfF1ePPaS
TErv7/B1ruyjz/zDerVuyJ5bP/SA3ERtyK8kq7bEevdoW0/IryDWns9/RcVe
xArP/fsMIhLJPm17nY1fsxZZ9V3vLcqVaaOy5MGWAdLkkbnyePON0un3iTJo
4BbZHrrP5n0Stl6XG8scz7HgXFvrk9srqdN2y0O+mZI5e6RcSXlD99wECsZi
bIveInvnp0jmwizZtWGk7CxZv908v4J9OIZzcC6uqcyYH1cWtCXaFG2LNnb0
e+DbVfZ7I0Zs3QsxhdhSbdZ8nYq5ti39JHhEpopFy3shZm3dJ+fMIb1/zYjq
lPivulv1R6NkpK4s02997eB+uXz4ohzMnCevrE6RPpuny5O+S+S9RVPkeHaC
pM5eZ7N/PNcvRC6FOp5jwbkZob665wgcLbbmQSuaeIf4P1A679f4Vr+VP/9u
isqp9BjyiSrY/vPvp6hjpvyKdg2utTVvlt7v6WjBt6vs90aM2LoXYgqxNV6L
McRany0hKvYQg4hFxKR5jCJmbcVy/Fcv6f1rRkTlyL9wVp5/fpAEed0nz68+
JF0ff1VWF93Qu1qy47Rnjacxd+DLmTL68FKr/MrYozFy6CvPnM8MPKFNEVud
OveW52MPyWhvHxV7hy58oXe1iMiJFqwYLiO395KdQb1lZ+xfZNL7sxy6zqV5
gBbIA6TonpNwqMz8Xzk+0/PzKyhoU1fnrRyBGNsZ10PFnN/212VBLOcGI/Jk
x4vTbPZJnzq70Sq3gv3vDc+UTg+lSJPH5stDXYKk0yMp8mKPNOl0V7L4Dc6U
nDDrPMva3d/KjYVzKtW//3VxnKTO/qzcvnw8q8nbRRLrP0GupbwsXy6t3DNc
VYq1tkO+BCU9JlWyN/nJ9vl5VvmV7VF56hjOMZ5fbNHuehW0Jdo03j9YmrxV
ZPO7lslzad8K36wyz0BMIDZsfVfEEmLqT39OUzHWqttkafLofHn8gVQJGJpp
GPtjkWNBzNqqG2KciNxnRfE7NvukYwqHlum7Pn/wkpqLCX3bTwxZIn02TpUZ
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
Hjht16zmuA9qzmTC2BiHkpJS5Jz9SvQtqTtpQNr40WLwmn1k1p/9Aq+WlGGJ
9O5u6Rt++3Mxc06Rcr8//r+vMToiA55H/47ydzMc4r7clAZdhjeWSByxvX9N
TBncZrbrdFn1CfCpNPPsyJn9uLP4bA+cVjPNfr3WXTHmjsaag/xrRKx+5+Rq
NGd4oDnTw5wnsn4JYnPkcXFHa7AfC/uyiL71AwpkOot9rkTZwD0473fSZb2v
2LkmsYf9EYHSv6EwRm9F3qTGDudtmKZWo8zzdJd8VndThdCL2KfkxN1p5p4x
bhuw7aZaNGXeKI3foVC6Fn1kbN8ZmCe+7cqa3Cv33NHz0Rf0CX1j9tES4TNX
9cToe2LANdVyioSucneBwLLJfaUT/UXOLXKFexBaTo7EoyQPwSlyK8hv11XH
e80008yxHTwj/W9t60dOY9T7T7f3ymDPFUvvetYJs63VlBtxDHdOyEJgmDzP
hDWhdI/swIyZb4paT2qxdlHra/cqGMeHIHjwItSGxOD7lRmIiViGUS8fcRij
ry1ZjTfWm5/vSv8AbWdLr7gW8XF8ElYfjMODPrVw1+fBN9kfa6JmoTZCj28L
B+LHtYvE+DYv1Kqv8Npy/x8FA8W7q6Vv+C3neMi3Vsz5SaLr2mndPehD+lLk
GEm+pY8d+X+0hE1M+DKBVX1oDILdFyF4bAhOSlja1hSzHeSA6MUytEJRLywy
/G30H5uF7Ih2XYY16aL1Zh0vL6wWuqfa9RVy09lZyG1yXDPNNLty9sk7n6Mm
yd9pjLome5o1nl3lFYrAGxaY+5HrCuCV2t8aA1+VGQr3bUuwLFNeJ2zVSgPm
P/0bzLnW4DDWzmeGp6+HcdxNqDPedlFn6WS9sGRpr+mzL7v2sDvnWcXaWwOk
vQ/vhYnP9MPTA7zgfa1ZV/C8NlmWn5Ke5CuGbf0wvsN3+Q2/5Ryci3Par8O1
L/f56EP6srP+J2bEjhgSS1d4kxPkhi1XlmXGYcj2xYJL1vsSx8g1oa/0XSA4
aN2rxE2n3JW4TY5rpplmV6/dXvRnHD6111rXaWZ5kjUOXvZOmsg7eP/ccVm8
PKh0JHQ5eiyqSRO1nlTj7cUD8ee/bcXEpk/x2JoS4Kc/i/WimpKQ34VeH1fa
GttSEf+OubduQNlCbJb23HgmGplnynHwr+31wSz6iuX34b9mIvHDcundWGw+
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
UCn6heT5b8XOizW/+G+ef6HT3i5qw9zXvWP+2tmnVvS1b77Yy36n0Ff6mbWC
G3bg9Cg9ym7oeE4M1+5U/ok4c6HdmbdePHOl8++pQfmbc4aS/SuEz+l7Z98Q
O2JILEUtr4FpMt4Se3KAXLD6M6OdJ+QOOSTnvE0NNYl7ogdND/8daKbZr91c
aSscH50tcRmvPnm2ArrfvK6Iy+tGVWJtaK1izsKYY+g/Jgvzwqucrh3N/irX
FWO6bwo+jk9UrPv1mXzV/iD1aadQkRMnenqwZlSov0m2t+2xjeLevb5tGOpT
Cv/4eGQHR+FIVQYK8pS93Ds7Gla24sxnqx3qIl+8MQ7nS6fL7hmu8xdDluci
vcN3Hc3DNbjWpe6XZ+bZ1xqjhC/oE/qGPrLta0Mfhl/secM+KzskH9PXCv9L
mBAbe7yIoYdfisCU2DrbE3NWmLvCHBb7ZxvDaqHTVSju63q9Lrjoiq/ktCuf
aBqLZpp1zVxpKxyN+UNc6yubH0P6OH+FvjLx5mARO09Kni6Lj08IMeewTJw8
FgERD8ieBSZFtsfpB/XCk27Tncbo+Y59bN+ss1yDkJE3oSzgJnyVpK6zMDen
bvNw7ImMxqmFy3EgKA2f53ROVxE5MNnKelMxwh+O9JUghDzYrq8ESNdeQbeJ
EWBzP+Sh6xFwg2ONgmso6rl1she92L90Zp6dPqAv6BP1vKV+wpf0KX0rfKzi
e2LiTBsjpra4GSTMbTlATpAb7kWLJa4Ey56RS6J2msQt+3nTxy0QXHR1XnLa
Fe81jUUzzXreon53B+aXDJXFwUduXoqsvQZFfHxDg1HkJRz59C9O4+s59fFY
6OeG+QsfQETFJMXzOdUPqMb1OdgLJOrsv0UvkG/xg2K/dW0ZeLZkGWYGDxd5
NmG706S9Bl8RX1V9tgUlHxe41FfKP90qxpUwnj1C8gF9QZ/QN/SRvbGvCn3K
Pivvf5bg0P/Exh4vYkhdhJgSW2fYM2eFHCk+EKd4lmnyh27TEuX9Xr2uiK80
0+zXYD0dUxb6Sv802PcMsTX2K4+ca675lD7piMhLeHlNrjWWzjpT6QmrZXXB
qu8uEDHzbaMK0DTjiEvNQOTJSPPw2twLJNfcC8SvWKYZ8BnvsT+JyOXQZyPf
sBn5M6pcawtORp1HDXJ1zR3yV6FHFHIntOsBZZV3S+NO6+/csSuldyI7NBfX
rOukFmSvMfHszEGhL+gTc++WYru+NpWir4p9z5uw1NXWfinOBjEklsSU2Fq1
IQlzYm/BjmNO0lbBkeSpzWYNjtzJNDjlvZmDPf+3oJlmv1briLbCcait3mW8
+kJdjtBX7L9lvS5fH/X6T25z49DvIWVfDdvBvIgHXzCJvI73o+JU1/7LWeW6
jPkf2mruvV4YVY+RYypFvsP9U1oxyK8RXqFJSI9ahl3GGHyRLO9FcqFgNd54
/9NL0itq1+/BT3vV+9JzfFX1BM4XzbXTV4LEkOkr0jt819E8/7duqVjrUvbK
s/LMsp46kk/oG/rIKzxJ+Iy+Yz4Se9Ez90VwQ/Kxmr5CTNSwIobEkpiq5bzY
jn6PrILbSzGqz5iX5PWysrcPdZt/7XHeT4eDnO6IbzSNRTPNOmcd0VZEzanc
CR2Iz/dD6jNKPWHetf4IceuFiaHy+k4JyR4wuN+Kx5dPh1esvE7YvKX34omZ
U2Tx+iceHeMkVu+hHuO/OMIHXQPjmJuwO+hWfJV9Lw7kDxa9SBz1XTm5MM5l
/w77YelBYzsW3OXrcM9e1y5HuFu7jvLCUw9Y9RVeW/cuvcN3Hc2z4B5fxbpd
2TvP7KgPC31Fn9F3uxfdKnwZPug6pz4nJo72TCxl2EpYE3NbDpATw5d7ImDI
HYIrts/IJXKK3LKfO2mcv+CiqzOT0x3hvqaxaKZZz9ryPjcp4t3stc6cCLX4
ua76PAIGKvuZy3pslI3Fojl3irFyt6/qO/NrHGssHOf/locph87DW78EVV+e
t+437d1VWF8f3SO+WnmKeSnrXeorTX/NETksPWH0DX0U8Nos8Xv3l5/Ca1EU
Jr71Mb74e4FTnxMT1ZwkCUMLnra139QGe67cX/6x6rPEvalCD7O/r+WvaKZZ
91hPx5LNY7tqbNvWjBGvIXf9knaNo3SGiJ/bxt/3lxQgzzPc+j17auwcuhmn
/Ytc5pLkT2oQvTm2TZb3ci+cusuaoyH0FL8sMdgvJM97B3Z2Qy8S28Ge7q78
tb9PFU7r9KjrU9Out1Tfg23SaH+nWvGOo8E1u/MM9Al9I3qqXPSX8N3FPBd7
LOhz+p4YOJuX3xFLYmpb+42Y15UUyN5lz5WdJTOsv8kdcsgZ90X+il2PF01j
0UyzK2Md1VY4ao6dchmv/jotBbe7H1N8uzpkj9A21OatTzmCfo/nYIQ+SfU5
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
Xnt9hT6kL23foa+FzyXfK+p2ORgbmqIEtsubNqJ30EbMdxsusPcpflhwwZHG
wp4u7N9iP19W0yjBvSWnvsefJC4KnkrctPJU4izvkcPkMjmtmWa/dus5DWWH
WUPp/xqq3TZgv/tqEccWMe0B5pg2+42z3wZrM+W6NWKn50ei9/p+j10yfaJa
ny2L+Sevj4F/4XLk6U2Y43EMO9dEifvNsR5ozjD3OP/E77RsP/m31aBJtwRB
7ruQNzUWzZMNIg+iaaoBL2fMxvi4JWhyW9ctcfVtHqdQ51Fjp1NUmXUKvVyn
cDVi4zYjLDrX+XrvPy6NEU7f4RyxcXkdXpd7dKQL8Ww846VzpEL4fEzsUryc
Ohv7p5oxaZkUKPJtgoZUS5iFCuxsvyO2Au9MD4G50N1yYjDH833BifkF8YIj
sjPZ+Z0cI9fIOXKP+SvkYp0KT8ldcphcNmsvPdenRTPNfk7WFW2FfTIKouqR
YNiDBb678IeXj6G/4Qzcfd/EHxesxoK0ROl//1djxtwGLAvcoxqbjmQdsOlv
Wn//57C8Jhfj5ME3+oscBHtthXWl3ni9BNXbCsS3ySveRv8XQxGcUuFwz+zd
8cbaFtRfjN+zxpQpvU088/XZBd2gHdi0sUCat9j6TdGW/8V/duZcssbAve8y
xkD/QCgCn9fj/ZX++HHjInx7sgDV6Wdc1lL7fO06/GPH8/gmNx4/rrfVV2aJ
YdVWpGd8h+/yG2dzck2uzT1wLycy9TBMD4J+YCjeCFbqFF0Z9B19aPEnfUsf
09f0Oe/tTWsTWBATYuNIU7GM0JQq9J8eioQV5n711UWFggvkhL3Gwtwncsi+
Fw65Zplv+otvItRfnp9i0QjJXXKYXCanyW1yvH/gGfzhpWOC+/wb4N/C3uTO
ay+axqLZL9Uuh7Yi8lcio13rK8Pae7ZP6btUqSs89pg8Vj7mHkyYly/i6S/M
ioTnbUsQGWTCC96RmCKtx38X+OXg6fszEdBXb81bCAn5k7V3h9ecOCwLbcYQ
j3rrOvOu1cP7mWuUGstjvf4/e+8CVlWZ/Y/3NFPZTN/51tT4s7GbkhpdvDKW
ZTWO5S2SIAJB5CYXPSIgICii3PEgoKAdFYlEiLscwSNCgOItM2O8lDJaWWNT
07fLNDV9fWz6f3vWf3/WZp+z9zlnH84h9Whz3udZT8d9efd611rvO/OsD2t9
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
81ueyXsQe3FO01TKXzWO1gp7tGXJamcfF67hGg6Py42tiBJPH6er56w/Tb9b
ga9ArPXiAn+GhK1Ignz62Be6+vCHCHp6bl//L7+l9JwGGMpi8g1YRaPHvMz4
BOpYgMPExf7Zak5fEvSZSo49SreEzbXABgIm3yDO8xNwhxlPynASYb7PVg6m
c8vvokL/WxjjQA8wjdt19OiYSST152Kc4bHfKHTxGX83c7lL+Ap+45oCExLe
MfGnzOU5MXeM8A18C9/Etz9bOYR1MdXR3P6T1ggbBUy27LUGm8K2Ui8vNYGP
Qvtqj4APwYfwJXzKvu3Dz+Dz+X34CmLBiLf1CWLGGvcKYkyu1xIhBj9dqc5v
jxhGLF/u/eLCWFzjWhxdpxKo7cxq2nRsDcXtSaP5FQG0fuX9NL8mhJK60+mV
48BQsqnj3Zgrog9y+hAFv0mVMidf1BrD9Q5q2AoEvaPyDqzn38/v+Sdpf3U9
za/2MN7Pbg2gEas15GNYT2HVY/vHWNriaEbsJNIawpT3mtwoSO94TUeSLJdv
LjXHZlPbN8QYB7AmawNc9VFvrHcYX1nw5gY6dD7L+pz/EnGVpn/8SHXHfFT1
S7KCefUnbCMzHAr8J7BpUVt8v+8HV48mX8MGGpG7kLRtQaaaE8Gn8O2ktq/6
sLNiiurQWZ+jD2PxyPKlYvNvVin5YYCtHFKx/aUe2FvYY6+eXENJ+9KFvRfG
17EXNV2ppDum5T2KveoarnE1DPztvU0M5fbXqGHYZiPvyQm3vrwvMBTmoFhL
DfdsIcOtNdQ9qNHh3LJVXGXcQTrP9SWWNRG6iC2c17eZ+/Zu5FqP0yn11Hmr
qFP5bwxUuvJxKpmebvrOU29zXrywzo/z7zUzW6jb3zougRz8Qc8wwSYiTlQy
pIlOPBNsvI+8NzAW5MkdxRDMvwWf2KzPma6n0ohNIsYRsZn/rfV6nXuDNfRh
Ud1ebYreVQqdzk4SxDq+gnfwrthvrIk6Vy4irXcb4yj4lojt6PibtnS0FleO
Yk+wJWwK20rXYPOSPgwMvjg4M4wKPZdbX6fgywbBp4ytVPuyr+W9yuCT8vRJ
HBs8nxAriJk2KxwyFjEWXqaC8zVy7CKGL8VeAC6JvcV7TNhr2HM9sj2IPYm9
2TBsE+/VTt6D1rEX+MQ1XONKjsrIJFqjSaKlmWk0Nzmd/3b+7oI0uidbRyPi
ailm5w7mXH9vxapLwrFhzCFr85nz4+NaP+Pf8xfWfqLKpQFcIcKsbuC9s1WK
nHR6TBLdcXcP873In2ssa2KedAW+oj1Cel0TDRm3gDxmPU+787tof0GtiLOs
7aDOnB7VHLqiFmJDJq0pTqXHHgyl5OUmXg7k+isO/ZO+2pwu1qc4iKeYy5tn
dhvnRv0KuGg8flvFNgE+UN39OdcAMb6yNYbOVwVbYDuhd8xmMcc48OxHFRpj
HRHm6sg8QAtDDORxRxXNfK6J6pebeHegy09ZC3PJCDaBbWAjOaa1bPkutmX+
2lS2rbzmSNUPgq/gM/gOPoQvn/B5joZM0LCP4Wv584gFxIT8GmMsQuwghuRx
jhiTP4feYOgRZh3fOcoxLNVrIbYR44j1S7VvoBvwzP3CnozbtYNGLanlvXp3
0Sreu9jDiZmplL8wiSoik/o/AFzDNZwwrgy2IsrHRer4yl9X3M25bXmu27x2
wv/GxfT4PXMscuSThf9/h7y7iD9EcJ5d6v/1XGQsTevL4SdrJH70uZyzf/62
RKt9wszFyz+Fpm2qtMAskK9Hb6uBYg9yLpLCeTcbbQGMAz260tGja9SvuJbE
5+mbeP1YX8wjSjv9wWeGBb6CawpMQ3gH72IOzMU1M8Lc6b5iPzB8U/o+dJFz
zgwcWwlhG5ljQbAlbNqf3eEb+ChUxp0DH+LeNN9E9q30HHwu8sQEciwgJsz1
Qexg/dZriEz4CmJRFV8p+t0V2y8ujMU1rsbRcSqO2s7kMlaS0J1O86vniRjK
tiDGVICtiPnbeGerSh3f/Mg1LPJcd3CzHL9wI9+6dErwvVXGwWIFDzHLs2sH
XU/XlfRY5Oz9WzfQiJxIRc5eTdBXivGA1hiL2gz/CvuxhihZHypb0tYbzVw0
qGf5wKxXVdenOio6s8VhfGX92TLh3Y2Kuf4uzI0+YNkf/pu6z8TYpVuUlb5t
qlIxzKLGBzaELQsMEf3bXfANcBUfwwYLLOy2V3rZt9ZwNTWMBbGDGJJz3iPG
5OtDbzD0CHP2kPZu6fE+/LOqb+8K/+W9e1zcu3jONVzDmUOBoRjzt5tJf3uN
zfztT84lA5sIPMO9qVT7MkVs4hoWW7lv1K0cCdpMupF7lPnl1GG0YvAB5Xel
/lFLPamtfDYd8e4Q9bCiX6l3LOm84qlb6k01M4QKh5rqcox4wO3q9pF6YGkn
rVP0wMJv9MXCvbbb9dTj221zjWKPrhautwDmkVi1gBJTlDUXBm/r2FnPB48L
MsnqPbwjnyMuZTOlVCzgb8Cu+GZ/ekH3ttubhLUYqHCi8I5nrKx32iK7eqfB
hiJeZeqRxbYWbC7iDrXU5hUu6BuuHkuCL/XlXuxb6HXErKYn5fYDdDZlmNLH
iBkhdrBWm/hKSDnjTGr3EcP4nlos/XQRsRSDsCcbhm3hPdpthn+6hmtciVEb
nURrBFm2KpXmpayiPwYW0ajoXTREc4YmzDnGefSshfto88Zc6t6cTo1lO7h/
0ptnDJcsL9wf1gL+j82ndxn5NdqzTyly194+O5iDRX6tev/nRmxF6gnmcX8t
lZv16zJUFVGjTllf0p53lLoL6gWb+NCQWbFUrQukPfk7RIylT7qLa6m9ZAft
XttF7doj1JHXw7n8zpyjff/toT3l+aTP+4CyMrvo4ck+tLQkiJp1BuMc+pN7
FRzzA5FvdRqL/lmQ11K66E/Tmsjjd1W0JMJAFQUf03cnN9H5qlA6XxllYedQ
/B2xIObXz1dE8Tt4F3MkRxrI485qempqE1Ukd1h8F7pAp5+EsQg2gW0kO8Fm
yYLtYMMMwZb6vPfYtpKdJZvDB/AF+0TwTXdxrcJn8GH95iD2aWKaj+DjRtHX
crxNiAXEhGJNwjo9hlVbcN4jxuTPgdsePdoUsSTEqsTPgxg+r8u9pJiKLcEe
xV7FnsXe3bxxNeVo9vFewd6+M+YMjVq4i/c89n6ycAbkR4u1Z67hGs4YVxJb
gZza9HvVvPXZlLss8BV5vQFjCxOvZ74O87y5+7PNFN3Hf871HTdH0LSQo2IN
CnpIJSyl5/zi+d+hC46b6l6EZ92nd5GXjEfdlkzIQB/LeIWO4C4ZCPe7ed3E
wdjfWNgEHPPHl/6ekmf/im2jeeR6evr3iyzs9PiCUAt8BdfMcQO8iznwO3n2
LdQjzI1vmH8XuvRXR9S/zFXwuvA8gu1gQ3tsDZ+MFHxjqrkJZN+JPcPi2afs
W2Atgq9DGV8Rn0UsICbMdULsiPw5JozFHP+BbRCLanGKGL6Se8aFsbiGM0bH
uxru1WX8G/g6kTt+/qt+/Dfw63u01Ir+Q6eu7v//UvXlj8z3oaiXaJPy4Ca+
FY/VAZSp91XNo286lKHoE3Xow4+5h1TdoVyLZ009p4r7zfVnNvtzr7Ci9hRT
DcXO+ymuzT68AXUc9uAXcnn7ryuZlwX8LOBpwXjlg3LaeX6zw/hKq/BO6fvl
PMeFH/9OTyTkUtCxr+gvfytwWC9763ZgG9hI+ndx+1K2YXZzQL/vog+YWi+3
V7qT2Kf7//qF8ZrUF05tvrQmL/LI8rPgvEeMydcGbntw3F/NQ6o9Q33LYmGP
o94FA/Uvzqg9c43/nIH+Q+bjcmIoaoK/9z/tf7Df3D16U4l8H+rYih4cJSEt
IoeFlK8ftJtKUx6nwpkrzfLwNXQ28AgFFBVwHn6F1wHSq+AS4CKv8V4g3I9k
/g/tuM0W+X3uZwWMZUiF3WuXONxR09LTV9ehzX2ZUrLyaUVgC1XOtM63Iknh
M4Ldir2pIeRl5mmR6n5gT2vfO/3h44JYx1dMPmgkXeBrpA9ZT4ZiLyqcfsA2
1jOzmTL8DZSSXkg5uTpew4kpEcKaEqlw9BZhjW3220OwndRvTYn9hLPNYXu9
d4TgC40qPzx8mDH9DfZpQHEu+7j7VuWziIXS1McVuqH3FmIHMSTxsVgT2Lk/
HiDJB5eqlsVR7MVir7swF9cY4KiPTqK1kUm0Ii2VQtPS6E9B+eQeuoOGxPTS
6DknKELYMzmaXZxHRm2CPD8M7mzkhvWVZcZ6gSuFrchl+9sfMoe3vrKUDmzO
5DqD3cK/oQ/qNRIjlPhKc84p+k6Xr+BbwXPIgcufA3+HIUfJh46cO/Lx2yuL
aLhHEI2YMIfat2s4Hy/P1/cnnQ0LqLmkhX9XrtpKbqMzKTHTh3Y3xFNH/m6x
nuJMy0/CIr5pzbRZv1GW0E6PPdXI+MCKhe2k/9c6Ol9tySMSfVMEiwW+Up1A
zf+7jjI07eQxspY8JjXS5oR2m9+ETj9lTbAJbAMbtQq2WirYDLarSNsq4i3g
xKlb4JAvGEsRfDjisTk0fHQg+xbXzfEVxAJiQn4N+BTqdOR8LN/qVnOMyZ8D
9oTnuAZKiE3EKGJVX7mJYxcxfKX3DfaqVE+FPcwY5Ya9Cr2x57H3c4UzADU4
Y4Qz4c64XnKPaKE/BeZT6PI0Sl2RSoURCYzHuoZrXI5xpbEVyMHS+1Xz1ieX
/t4CN9CMEPkyJGyFrz1iWU8BXnT0jJpy3yqKvDmUgm8S3vmvCAoNKRLz7wHx
NM0/3tjzy32q3vguONMTY96hab5Lmcejv7z/8Nhwysrxoz94TjFxpj85xGH8
4fF7/ExrHXO9YIPb1blpVt5FB+MHU9ysWyjS42Z6euIkihkuw6FS4i37g6XI
cKDh1/E7eDdu1m94LsypzjFyO+tkxG8EXR1dH2xirK8RbAWbwXb92Re8OfBF
YswJ7uVmxNAEn0m9xODPGQGir+Bj+Bo+h+8RA4gFxIRFvdAjoj4SxoLYQoyZ
4yuIRTXbIIav9L5xYSyucTmGyJ+dZeLPbjRxx0e1mTgcuq9hDgfUa3z34xdK
vAC8HRVKLvvgpgzStqer5tGLu6IteM4feTKAxdrzy5v7ONNrCoyc6WqyvMmT
Oe8L+r4v8dRrWm3jDajhcBTDkMsnX5TRjH0f0fjcV2n92Q/o0N/WOIyvHD6f
S0Wn/kLj19XTxNa/0Jf/qPlJOvXHPQObiM+JtiloX8m2A85h8z3BB+CvdytZ
Smk7Pa0+c6dXAk0dN01x7YGyLCreE6M6L76POFJw3m8byTEmXxewJ9TzXKsD
PC5XmjvJNf4zxpXGUNSkcuYp5gm33ROriXK8OjhX/pIumxK12RSXVUBxiytI
O3OPEVsBt/3pwPeZrwJ/1y99A/UiKd7ZzNVhie0c4O8fXOlJB9M96YTvPlVd
xdx+JOMsqKEQ+1Up+3Ahtw3cCj2dBmIP9MlCv6yGzU1UqY2lzrhFpM9aTBlr
VlJKdA2VTu9S2CYlN49WaDOo3LOZ18/9rfxFXnpr/PJnzz9O5wQxv45n+R3f
BjIIc2AuzLlCm0UrcrOVONf015nrBd8FRwt0BP+LvqyRSobV9sszoyawGWzX
+WslXw9sDFvD5g3e0YJEKjjuzQU+PJjlyT6Fb+Fj82cQC4neuVxPI/9+m3s+
xxCvvw9jQYwh1hBziL2X1ucKsZjNMWmLgwaC7yPGnb3PRHnN2ceOa1ylY/vC
ZCqOSKL0tGUUsWoVTQ/NpQdDm+jOmHfowcBTNHfeLspYuIvrN8x7ZKn1M2qp
KuFcs5yPwhnYCmTPaRNPRkf2Cdq+dRvniqHjUzP20oroXUr9sw9RZEWBgm9l
WaSBnplh6v1kzmcuye6CQ8b8fmXBHBryXCylav2ouS7VoZy+oSFJ0HOT8d/1
GVvJY1QBeWXE0KGtEXwPdTL7z20bMBZx+mxjv76ElMTuJo9x9TTq+WQKbOil
H1qU/DSRNy1gkV/DM6FNvTTKJ5k8Hqylwpjddn0LOg10PbAFbALbHKqIYFvB
ZrCdZMft5aVsW0d8Ad+l5/uxLyvy55jwrQLzuD/CMSHvPTZ9VhMt7cPvJIwl
srJIeEa5j1YKMfjktL0ck8BVEKOIVePcQgw7Y+9IGAsEe5n3tKCjWr89BdaY
IWIvWcLZESKcIQ8H9dKdcafowfAmmj4vlyJWpNGK5ctobXgSNS50YS+uMbDh
DGwFsmvDJNW8dU+iJb4i9gibYcRWJPH6ZYoib74idj/n2lG3ALwk+JdiXj4g
6s99mIqy3kEzv5S87jDVZMwYkkLzwzbTtBfihWetc97L5f7IBApOGUa+Mgxj
8mMjHcIfnp58l/HddL+bbWAdMpwl/S5qzLqVgt2jaMbtiaQZ22eTjKUW+Aqu
MR4lPDPjtgR+B+9+nq7e+0ou0EnSD7o6sjbYwlizItgItoLN+rMrbA8fwBfw
ibHuRPAVfCbWIyWKvuzzE3zMvcgEn8P3iAFcR0woaleEmJHHEGIKsWUeb0vc
buZYVLMLYtgZe8eFsbjGQEbryQjqOpNONe+uocw3c2m+3vS35/Nbk0j71mpq
OqWl7jOp1Hws0ImaXp6x/P0L9P2PH5nl8d0pqD1bwbcCPnSfOnV8JUn/DD2Y
rOSjb36ziOsd3vrwA+u1JdseoLg9On7PVo4eklD/DNdBgCvdv8aEm6j1zZL4
3X8KliHJd9+10/KgeTT+5Wa6cGG/3fjKN/8y0PhXOml5QIDV9wYiWJMaxiLv
gwYbZQq2gs1gO1u2Ld6jYR+g1xd8Yu2ZP3/Yy75sParkWhmRHkbLd85Un78+
Q4idNP4tYSzBHdmk7X5Ysa4ff/yA4s7+r7O3w2UZ3b3C2dGrpYKjqymqbanx
+vymhYzbAr/tOpPBeK5ruIb5cH6uV+xHJeevN5cVvrsppziJOpdGkl4bTYn6
uRSgSzfmubXFidSWFUkNZZ4UVx1JbV5/oc7bhXeHllOne74Js/CMphK31+j0
5GCqsVJLAT1SvLvFeofcl6nSUz0fjhw/ailKPFNIO3Ib96w6aIZVgYsG9QJ6
t5cHbJuSiW+wbRpm6pkDJTH1ZdKtEWyRsoilZE0yJaboqHPxItJN32PCPrwE
e0YUsvREW67j008eFWSiJd4QcZrfMUQUUKm3ySeYG99IXLqZCtekMCdLZ8Ii
Ki1aIuhUQjmCjxpmNov8JoLOA10vbMU96cx4fNi2go1h60rvRcoebVYEvgtI
38y+TPTvstonDTGAWGAsaGa08TqwFfDMI4baPE9zTDWUzeYYQ6xJuF6ALoNS
9AEck4hNxGiGd5uNfmFNqv3arrS4xn/uaNEk04ZIIVaXL6PIzDSaFZlLo+fV
0p0xJ2jUvF7yC9rNOMOWhHbmHrcnF25NdmefYZ7v1qoCRQ7WWdgK5OTZegs9
O7OP0faKcnpmjoaW5BVQR/YxI7YyxucIjUHNggxLqk7pIo+7qk255rxTFtz2
vH7wdfTl5VHz4O7vQ0MnRNH+2ijaLtjE3pw+ntXXpivz/NnbaOKYfJoVVE17
6qKoWxBwgvR8uEFZl1KUROerfOmrpkfo+9oRdLFuBP19Q5ISjyhZYNGjqj9J
1q6i4RO20d2TD9D+Q+uM9g3/VQSL9O9Dh9fR8D8eoOGjt1Ji3iq2qb3fgE7Q
Ta4rdMcasBas6XyVD69R/szbH+rYFrALBDaCrWAzuQ1hU4f8gFoVwXdDPaLI
/UVf9ql0D762WAM47vNMtSmo/alMMT2HmEJsjXnxqBFjQewt1RbQn/w1HJOd
fbEoF8Sws/aPHGPBnsbexjp5rw/0nBDsUJbUzrht4Lzd5B7SS3fGnqDRobU0
KzSbItPSKD1lGeO+wH9dwzWsDWdhK5Amrbdq3vqNhCGc21bUrzyE3P4wS8zF
bbYidx4TuZVz6mINSwbNv07sT/XckATyn5sh1jz4JdJz8031KctiDyvm+INv
N+fup70QS88xDrPYJhbgPi+VfBJvo5y8hTT3IZGn/tHxHvbjEI/9wrieNs0t
dmEekNd1Y+hcVAq99sJi8h++lHyfvp3S8yzrV/ja07fxM6+9sEh4Zzm/a+93
oJOkH3S1uy5n/Hh+BzaBbWAj2Mo2trKYbQ7bwwfwhXxO+MpY3zIffDoitgLf
wsdchyT4HL5HDOAeYkI+B2LGPI4QW4gxc3wFsahmF8Sws/aPC2NxDWuj+fg8
6j6TRnWn1lA2MBSDibcav3EN9zp6V1LTsRDnKeqEEXbyn0Q//EWBrQBT8mpO
UnDZJzVOJ490b9U8OvLyYb73WeTnrys8SMv/+1ab+f313Uk0PtGLlndvUM3v
c41FzWTyWBNCcTuzFdjJfDOMBX20LhW2IknYej/64f8+oPFFNfREx1lFHYo5
vnL+i80068DHND5nC/3w43mKKvK+pLpgbea9wubLsBXch41gK9hMtb6nYiTb
fGLsTPaBLR8l/XYwXZfzuvJ6hVufz91V3wO+g/oj6d+IKcQWsAY5xvLDDye5
b9p/0mg8FkRdvamM32LPAc+VBnBe4L01jL2kU+vxcCdq6hrOGOdCro6/pRe5
Piw57CEZ3q9T5ZoFnNfWrFxHpc+8ztcro9eRzrfeoieYNmIbrdBmC7/zmIte
f8MuroPAd1BLgX5V3b+upxKvJaR9JtuqPueCjlOnbjbn5dV6a0nSPaie+T9O
PxTMHOva0WVWn+kZmU0G93UDttG5kHes839M76bExduotCieOqMXcf1I+Zp4
SkkvoBWBBqqZ2cJ26gxfS4WeVYpeW5+eHyfIWBOmINzDM3gWdS/ASjJ8d1HK
yrXi/AmL+BuYPzHuVSqRYTlyga4DjgXBRrAVbGZ+Tzt6M9sYtobNrT0jF/gO
PuxcP5t9au0Z7ZQ8joWDQkwgNqR6G8bEhNhBDCGWEFOILfNeYajxqYleK+JZ
QmwiRhGriFnErnWcpfGqwVhwBrjGz3O0xiSTLjyBclKSKTozjWYvzKYxQdto
aEwPDQ85Q16BHbQschdtXtJOLT8BQ1ET9Ec6UJZpwfHtTGwF8llvmarOE57q
oBUFuVzPUr9xF4326aG45GX0bW2BxbPgZAcHPH5vL9lHrVX5Fs90bGgy5ebL
yqmldgENmRpLT8Rp6FBVBB2ojrArrw/+9I4Gyz5WrTlVNHFSAc16cQPVl20y
1rK899fV9HVRKv296VH6vnIEfdb0B/q4PJy+KlrF//2+fIQCk/i6Kolact5x
yL+7q1dTfdFhrscAj8qE4t10JmcVhf46lOWDnHR6TLebeVviwg38LN5x5BvQ
CbrJsSLoLl8L1oY1Yq1YM9bONSuCLWCTWS9tYBvBVub2g031Ovt6tcFX8NmT
S+LZh3pgZIJPjXNtaLLQHzGB2MBvfdpe8ri1ygJfQmwhxka/eIxqNxo49lYK
MThhshW8pk8Qw87cQ3KMBYI9jr1u3h/vkpwjwtkEnBd474tBHTQi/AwNjeuh
MSFVNDsym6Iz0igjOZlKQhOoWePCXv5ThzOxFcjO5YtV89b7Ygcr8BXkvZ+7
KdGCpwQyVdaPa65wjkp9o6QaluBfzuNaBomLw5jDj0mgGX5Ljc8+PVeJsaDm
AT3CwJ3O/On99Asb659BPim30coMT5r69BgRY3Gf2i8GMffGCFN/r1HX07nl
6r3BlDKYduU922fPeHo/KoU2z1pIXnXN5Jsw2ISvCL99hGubZ0XzM3iW7a99
luew51vQCbpJ/cWgc3/rwtrZP4ItYBPYBjay3Q9MaW/zuhP4yPTsUtGHfdiX
xLkj1izNk/la7AOH2JDmmSrrVybnlUGMyTEWxCBiUc0uiGFn7iEXxvKfOVBb
wjUmfbnKMIOYq0xJH0vP1y2ksD0ZlC1c33Q0zcmaXl3j+UMf0/cXjyiwlQXt
KaTtnmCRKweHx+K6p1Vz6cBIEpqmKmsq6iaR9pbrKejAv2zm7+OanqYx23K5
35T5HIr5qieQx8sxlPZGrqDjaBP+0Xy/RQ3HpZKCfWOpOHEk5XW7U9EBD7rw
4+dGHpUT53ON+MpbHy7jGgyJtwXP4n1t8sNUdMjjkusl1e6EybjigVmsejOX
bQRbqdYDCTZ+4JUstjlsb8s3i9/6X/ZhXONUC58Bm7GFhz2/eCKBx0d+HbGF
GJNjLKjvASblGqax6Wgq5Qk2WtCdRc/Xa4zXw3aaMOGuMysZP3aNn+dwdn63
dPpJq3Ur5dN3UUZxMnWmRlKc5jWL3ks10YWk825UYCvo46QXnjsb8hcyDGpm
HvrTTwVTufs66h7UQCXur5LBS8PfRZ+pg55hVnUqH/k6GTz3cW4+p25uvz2d
mPtjZgj3qjo9MZi/bflMLR0Zmcv9ygbSj61k8ts2ek81Umf6Iq4fqRTslhKi
515hNYqeYhmUoz1Gnfe8TN3uedy77NwHIwS5n393umup+54SytCepBW5ucZe
X/gv+oKlhDcKPmnjb6BuRQ0PY04SQdeBxALbRrCRtX5fsCnb1jucyr0Xq/Kt
SAKfragLZh82zDzAPrXqOyEGSoaKdTJ6z0XMfwPcBjGD2EEM4duIKcSWvFcY
Yyre4jXzHnaIWcQuYhixbK2OBbHv7P3nGtf20IUm0GZgKMnLSJOXRt6aTJow
p5zu1hyl+8LfI885XZz/1i3ZzfndS537VJP27F46sMGSn8HZ2Ark4ls6Vb09
nmjk/lctOb304JJ8ii15lM5nb+L3KhqU3O/gZV/Z10tse3k11xqYz7d/rYxD
Jb+FDpVH0FNLkjg/35y9gw5tiaCWhuR+c/vt+R3c48ravY68anpsahH96bl1
1JLXwTjAnuoF9Nk/nqSP6561qO34tiievq8YQd+tjTFe+/h9dcxJTTqqcklf
INZWgHcDfBt3jDtB0VM0LHeMOUGh81qMdT94Fu84+h3oJukJnaE71mBeo4O1
Ys1YO2wAW8AmsE27YCNrtjtUGcG27c/+8BF8tTtnB/tuUlws+xI+NT4n+Npc
d8QEYgO/0RfriSlKDAYxhdhCjCHWHkwoYC4WXdxu8nhMvV8bYtjZ+8gcY2F+
JWHPY+9fqXMGuDDwYeDEswO7yC3yPbo7tocmBJWT98JM0mSkUlZCMp+TJSEJ
/R+ornFNDmdjK5C9CzLV6zJifkdL3G5SYCvWaj2k3k5GXo7HKxX5etQvTL5P
y1wcnPMfpTXiL8jPz4hJZI4P6Vl3jzJTXyu3bGO9C3qJTZst1lPYwgf+4JNH
Pituo7jlk+gPs6cwFvH4cG/bvcHuiDKuJXn2TXbXlICLvnnFQjO7xtOnB7oo
uKSEvPJuZwkVfuOahKtI0rxikVU+ezWBbsZaD0Fnm3UrwpqxdtgAtoBNYBub
/cD66oWe76sXgu3hA6NvBd9I9SiMqQi+k/Ax+BS+xXPw9eT78mTP9tUYCbEh
zWXeY05ekyPHWJYMv4ljUc0miGFn7yMXxvLzHX//v4vMc6A9upqCDEvJf910
Wpz8AD3xagQ9b1hJSXtyqajLhaHYO1CLgf5XcmylaN8EscdUvTIvPqMqlbnS
1fLp4FMp6oq0uJ5y9CLn51P0023m8VEPkX1gPfOr6w6kqT6HGogZO1O4t1JB
91jWdVXHyMuCrUAaT/qQ7zaN4tr6Q0/Q+R/+TUEBIdR2740sUX4B9N7Ff5Pu
zacVz/pWx1HTuwGXRTesGWtnHEiwBWwC24RtG61qP92+ZYyLZO5bb+SbV8Wz
+vCx4EOW+FhBewjztai9W9yWRM9WLFNerxd7uyHG5BjLN/9qoYmGXmdvh2tm
FHUtoxThrPNty6Anti2kqNTRFFQ4lfybgb2IPQ3f+/4HZ6t5zYyA4jxnq2Ax
nJ3brRy2m7q9dlutWelMj6QVRSlUOb3FOg9LdKHY/8oMW+n2aqOGe1pMuMTQ
RuoJ/BPFTdpCNZ6xVDhOZ8Q7OF9/Q4tV3Wq8Thvz80e8T/e7FvSpQk1Fp2cY
84JYfW5QDR10z2UsYyAYC7jZrdkCeApwEKt2mqmnHO4ptp4qi1LJMDOFOr39
SB/iTQf3Dhbkd9QQ4kudgS+RYfpyqilO4XqVDP9dzFVvdU7hW/imtXvQ0fFY
eI1tAtuo4SawKWwr1q2o9wST5ITvO0Z8DL609gx8jxiQ8JzCcZupwXMxxU0s
o56gPxlxF/6+EFOILXOMpdRLb4GvGDFAIXYRw4hla7UsiH3sAWfvw6ttBKzP
drYK18x47MUNdOeDhzm3DVwA9RSO9F+6LDnPvFNXLbYC+X57kTq+MqGeOdfR
Eww1BWd0yXSxbCqdrwqmQ2eU9QSwubfPDv5tqFpHjRuVXO0deT0WeXpwqTdv
2MH9pUb5+DJ3B7AAe/hYxHy+weq9Tm01YwmjZm+gzrJw/s6eLRo69/FqC16S
85V+3FfLeK14AemPveewn/dUZiv4dF4r+oQqDr1HL85ZxoLfuGaMC+HZPVZ6
qPUn0A06SvqKPcH8LNaFtWLNvHbBBu6CLf44ax3bxqrNBFvCpvbwrcBH8NUo
fz/u7wYf4juWWFePQnfEBGIDv198cQdFzGtR3EdMIbYQY4g1xBx6hSEGwXGj
ZhPEsLP3kS2MRd4TzVkCPBm4sibUQHe6H6JJL5Y4+7h2jcswrgZsBdITkq3O
a6H5Hee2LbAV5O49xljUHgTcGC1iIgGHLPL2mtheivx1uPX+UmEJxv5SkMQF
jcyPbuRiCTlqwQfCuIyNfmGPv5BNXhm3UfTSMfQHv9mMM0z+/Tx1fpKJDxnX
URP1K7vxDvCvvK7Js7Rr63ra15JJuypzWQ4Kv3HN/Dm8ay//CgS6GfllBJ1V
1yOslbEVYe2wAWwBm9jsB+a31JLvRrC9NCd8At9I97i+Jcz0rLy/G3ytiem1
+A5iA/cRK+bxg5iSr0HCWBCDuxao2wQx7Ox95MJYfp4Df6f9yv/7Bf13xGqq
62l2tjo/izGm6Rj3ujLHVuT1EZJkt2XRguZs1Xz6E/VFtOmAdY4W9Je6PsNg
G1/pE2A04PWY366j4KqHrD4T1PQQYwkLOlJpcds48q8YxpLQNvKSYxjdH6ZQ
UHeB1XtVRz2p7vc3sNQcm231mbADRbT/w9RLrhfWKq1b0zaWNF1pzKUe1Khi
s23utKBLx7Yt7oq2yxfX5e9V7e+mO5BKk2oK1OtehFjJFGJGgdfIMDA5xvL5
l5U0puaQs7fDz2I0HdPTf8/P5bPS1VfMvoFc78FiT2eroRjOzuueDzlpkXPm
v/tPiaRElfy9USJEznU5tsIc4v5nLL5TOFS4PtOTSoL8qG2QCU+p9NZQzsT1
NvWD37rXe1L5zP57XqFGBhgA+lcxH8sAsQQ1EfuoWdqick0spQh2s2mvPjkd
dIYaBu2ml7x20bm3HqTzggR4NVPNr3cJ996za46U6Bqq1FrHcxzue9WHOaGm
Rg1zgi1hU9gWNu5vTvhK6u8GH6o9B98jBqR/tw1qppJAPyFWZlPhPZbfQWzx
OmUYC2KQOW5s2AuxjJiOs+Kj8z+hl9qlkqtp4IyE31zDvjEnNJWGjtpHg8f1
MHe2OU/2lZbW7Pe4v9H2EuX1qwVbgVxYu5raVfi4PR6upVHPidjKV9nZ/PxX
eTr6vHY2/d+5F4z1GhD83bzHaDEH3lmZTc35JxRz7S5psci/66vyqbluFS1J
3sb86MXLd3Cev7NhAXN5KOohrGEzVuaUsILmuniaHTubRj21iXth4dn2ing6
/48oEzZRlEbfV42gz9emmepZymKouuCvDvu6ZWsJbd5L1HOmiX44tIG+yxft
G/67BSxsb+Ea7uGZLV3E7zj6HegGHSV9oTvWgLUYMSNhjVgr1oy1j/rjJpod
8zzbRA2TwrPWMBJ5vZG+Opt9gzl0y1vYZ5rkcvYhfGn+Dnwu1x0xgdjg2BpX
z/l+Y/5fiCXEFGILMcaxJsQcYs/9+SPkMcqyHgaC2EUMO3sfqWIswt7HGYCz
wJlnEc7CP85q4bNxqPsBmjMv1dnH9TU1tpzxpb0fuNPOT//gbFVUx9WCrUB6
wxLp05UqvBZRt1PcIzdYYCuMedwcb5EfnzxYrE+Zr/mzRV7df24uTRlVZKqD
eLrWiI+Y86ND4mLfVnwvOaZZ1pNqMddMTPNJEH7Hq2IGT/usoudyfidiLLP+
SBq36+jp26Ot4hH+T95g7LvVu/Q2B/CVe+loWInCprvSN9O+HRmi1GeK0vdv
3JM/i3cxh73fg25SHzPobLUWR1gj1oo1Y+2wAWyh3g8snm05Db2+/EyYFWwu
nxc+MeFcgt0Tl8pqiRaT+5O1xmfha1/B5+bfQmww/iPEinn8IKbM14LYixFi
ELFo1SZC7CKGnb2PrgWMBWdil3A24ox0DftHVVUW3eefQJt+/yt6pOPvzlbn
mh9jXu2ixg+6LLAVyPIOZW1D3s555LHOsj5FkvkdOip6o9jqvRMfvsv86B3H
yu3K6y+om0hT9cU0oiieVhl8zOpcBGlyo6hWdwrSZyh7YQn3UtovLcbS/bd1
lPnuFqv3VnU8QE88NpsFv63OcWqLMEfxJdUJa2Q7vNrXM23jYgpoyhBs8hDb
RronSZrBi9zWJdFTjevYtvb4YOeb69hnb3141joO9kYRBbVtUH3foySatDvD
FNeWdyh9I2EsdR+8TuM3tjh7O1zz44H2j/lsvC8wiRpfXeZsda6pcXCNmDss
qX7J2ao4PadbMuWYRa4Z3BWdKyOp5Jl9/eb4DRGFzMEix1aOeHdQ962WtQ3g
FckYvY1OJAynnEklprz9Q+Wk945Q1RG1BZqsWvZZaYR9uAF6Sx3sw1gabrDe
k4p1stELS00MQ5qo01NZz1Po2cUc96hTsQcbMQjPlUx+i/tnaffeS4V77+Hf
uGawcw58C9/UenUorkM36Gjvenjt7rnMJa+GrcCGzG3D2IptvhVJykPeZ59p
tNts1ofA94gB6d+IDcTIinHbyGAljji2vDsUGAti0BBe0K/NENOIbcS4xT1h
Lzh7Pzp76IQzkTHoNS5sxZGxRZNEE3yOMC/0HaN6BDnGf6/tjHwm9wQru3rr
VuRSufZTC/1R9zP0pg6Ki0k2YityOV9cQNW1wrlRpWNeb/TE8vj1NubmRj65
Pdv0N/t7cg4reoMZ+0wVG5hvHb/veyKQ7psQyL+7CxqpuSGV+T1aindZxwMa
ltH2yhKL64a1u/g93O8uaCK/oBIjlzt6X+nrUumrf0yhz4tT6fvqEVy/Iq/7
+KrXklvGmnTkHOF+Vvt7u+i7k5vo+7pn6cu8Ugs7Rfw2lsX8Op7FO3gXc2Au
zGnPt6GjeQ0O1oI1ffnPqbxGrBVrxtp9BRvAFrAJbAMbmdsNtlTrzQYfiDZN
Zd+wvzwC6Z5JgX1YVxT70uJdwefwvWlPnBJjQ4gRj19t45hB7CCGEEuIKXM7
McYSm8yxaK0WDbHr7P3TL8aCOpYy5Z64koIz8A73Y3we4mx87KUjtGFhUv8H
qmtYjCO9I1mOvzWWDp57gF75aLazVeJxNWErkny8xnou/7X42+j5m5er1kho
xpjhK489IGIhsUct8uroN7UkvlfJkR5jMNVCBCTQjAA5t8pietTvoAmPeWwr
efmnWMwp9gtbqoodTPFZTlO1gyl5xR/pucdHkmbUdTTtv2IVegTfGMLXeR3P
3mA31sH9wTLupbORqxT23PbaUVV8Bffkz74vvPuZA/gKBDpyzzZBZ+guX8u0
/1rM17FWrBlrhw3U+4FZtyFsDZsbeVwEXyjqhQLiBZ+ZsC34Uq4HfG3NL4gN
xleEWJHHDmJJLc4Qg4hFa7ZA7Dp7/1ytGAvOPJx9OAOl89A1HB/NvVoK3plB
h//2IWWPvp82ud9JTV9cdLZa1+yIC5xHBW+8aoGtSOJfbeoRFlThTv4RD6n2
nkJvr8V7Nqrm22/zWUZTx02zK7cvSfEhLfcLK35Dy5zuy9tHGrnrw3aK9TUW
XO7bhvFzlwrLqPtwC4v5dejhX+dGT0yYzYLfkm5yafrrZqr6oOyS6YO1YY1Y
K9aMtS/uqyuCTSTd8Bxstv6NXLZh0RvqtSbWZOLjPuQ2Xb3OJWmPjlbtW2/1
Hnq4BUQ8IMSMrJam2s3qehB72jfLKS4g0Nnb4ZodOANxFmaOfYDPxgWGbOZn
cQ3HRkDWJjqY6kkHUzwpYLPz+kw6O597LkiJr2hWljAvuMRf35+0+ReIdQMy
XpZOX8vaFVFeo/LAAIqb+CqdnhxMhW5iLr9zUAOd9gi2mbdHb6mDWYK/VtpX
w8J5eMw3PYROj7M9ty0ud1W7hZxS2EG7JpX7edljM6OdvHZRyaQj1FZxE3VW
3Mi/cc2RORIFf2nXLFdcg272rgNrxtoN7mttPnN6dDDb0m5sRfARfHUw3VO1
L5hxbsH3nX31MIgJxEbcxG1UGeRHangPYsy4ZsSeEIMci3bYDLGNGEesK+wW
9J+LrwSUpfFZiDMRZ6NrOD7GhFRzjh95xRdf2kGDx/TQnfcfUvyt/OWWPTlH
uF/U9nLl39xfjdgKpKJJyaWCPDb3BHsihj5IW6X6XsuJXjJUFdH+rZlkyOtl
joy1se10QJfJNpDm2722y2reHjn/Q2URnLOvSNtBQ2bFUmDyOlN9y8Z65llB
fcSe/B1KPKC8lAwNSWYYQRE/b87RHh6xgSaOXE31GVt5nu3Vq0j4HyQ6X+Vr
0Ver47T1Wh5IxeZ/kOHkMeZTv7g1X2GLi+VTjXUXcon8rYbFAjcQnsU7ijmE
OTE3voFvqWI7p49a9jkT1oI1YW1YI9Y6cdRqXruiZkjXxDaCrRS4lGBL2FRR
IyTMA9uzTQVfSNdDUzawr8rTDOw70YdNVn0M38v3BfpllcS1k4dHPccMx44Q
Q4gltTg7J8QgYhG9wswxFsSus/ePXRiLcBbgTNhjJ4Z2KQRn3pDhh/kM9H1J
7N0HbAtnpGsMfPS8PZZrWY4eH0kn3x5DPW+OpKPvjKTXPp3sFH2uRmwF0qsb
Ypm3zvsdpc/MNnLSW5MpZvzkAZPFeooVsXut5vG9ArKN/ByQCT6m55i3HjUs
spw8uD/cx5can7dWFyPVXjAHiJ/1fmFTfRJp8pohlJXlR9FuN5HGXdnvDHiL
tAZdmP29wdhORffSuajlCnvu6/hQFV/BPUUuXngXczjyTego6SvHiriflrA2
rBFrxZqxdrV+YLZqgKQ6E8a2BB9IHDiSL+Er+XvwpRGLEXwMX1vDVxAb3B9s
8g2K2EEsqcUZYhCxiJi0qOcRYtfZ++dqwlhwtuGMw1mHMw9n3773HuCz0DUG
PoIyJhp/h717gRrdbqUwv0A68UW7E7W69gZ6gsV5+9D+s3GquXyJN96Yc98U
RwUG6zUs6w9l06xm6/UrkE174rgeovuv/3Qoz7/K4Esj1sTRs8LcC5omkqZV
xBDSZPU1ma1Z5JHlSwn1zxgxlrSOS4OxoHal+29FlthTk4g9GfGVV8W6GvPn
9v+tgNJObr4kuvCa+7AVrNVD+N+WVa2mHlzSmmGjsMZx9PzO9TQiP4ayW/0d
svn+v37GvnplX4rqM16G9YLPV1u9pzWEc02N/BpiSW1dHb0LKclzFvcKcw37
x4kvXqcFXj58Bs4/dcF4XX5GuobjY0VdiPj32lmeFB6+64p+29m5XN1DexSc
9pqEcurU2Fe3AkFPMOS0a6YbFJhB2+BG1W+eCJpGJbe3Uc2gNjo9KZgqf7NL
zJd7hVPhPbZz9/rAL9hXGVXldq+R+V0eCmaxhQ3o3V6mE27AWNR1N8cPjHaY
3kadCYuY094RbETf18NLwldYD5XeY2qCb+Lb5dNNeJj9+FMjrxlrt4l/9NnP
kRqfjPIK9pU+6HObz6H/V6dXGP9GLCAmEBslt75OpwOnqb6HGJNjUeBYQSzK
Oe/7rWMRYh0xL13DXsCecPa+vJIDZx7jloKvcBa6xsDHioxUWhJhym0aVu0j
98ntNGRCD416rJ2arwCvfXPVBtpdlX9NYCuQ+sOfWGIrycto4R0R9ElGuup7
37y7Scwdb+iiA5sz6Zm4UpoTKP425dSt165IAi6P1gKRU/3h8Dk0xEPZowq9
qJD7B/f69gqdMY/fWtTO70q9q9obYqi7Lop5Qax9J1Gjowl3r6NiXTrjBRt3
6ohOj1H01fpuwwLaWv5Po+612g+p8c2P6b2zVfTDrnU2bXhxy1T6Os/ymdDf
B7NY2E54Fu/YmhPfxLehA3SR9IKO0FXe54zOjOE1YW1YI9Yat1Bn1RawEWwF
m0k92NgPgk0l3Au2hs1he/OeYkMmLqAR88TaFfjuULUN3hazGhbExtygLvpj
TCn/RuzgOmJJzQ5/z8ykhbeGU1zSMguMBbHr7P1jL8aCMwFnw2U/f4QzbsRj
HXzmPTh5N5+B0r3kSAMtS3P1Bvup4/if3enI249wX5wjbz1Ex99y59wjYy1v
j6Sdn425InpcrdgK5EjpMAts5eB8La19NtomvjJZ+N8dRQ3CCLGeYsmCakt8
BbwpvomUaNb3K3r+RiWfR6QSI8FcvrctFHt4/XcUaeaXqnOH+Jhxh8gE9yas
GUZLshJFXR+5jrx+uVTEA8Y8YVxDT8KtDmEdJzcNp3NRSxX2/PTNv6riK7in
yMNHLuU5HPkmdJT0he5Yg9cvU3hNzAcvrBFrxZqt1qwwJhXfx0tviUnBxrA1
5oXtzf0JH03zM+E28KHcp/AxfPm8v6UvMBfXC40wq326I8IGvjKXioVYREya
YyyIXWfvH2djLDjDcJZJ5xrOOJx14pn3CJ+BrvHTRsK+LCpoX6m4NqZiH3OM
j9/U6iStrq0h8a2E+QdR08lA1bx3UruyR1iSIZuWt1rnYCneE0MPlGXZzNvf
8WovaQdd71Cun+shqh6i4PYNNCIjjAo6wrgWIg78I02m+hrExKTUWZTW5CVe
q3JT79nlgAR0r6HuD5cqr+lNuJMCXxEE9+TPdn+QQP4d2p+sB3jssSbGUYQ1
Yq0F7TK+m6Y+mwi20bbPoxFZEdy/K7haneteTeCjm14+bvOZRypyqbg73jom
1prFdUWK2LFRU1R3zJs0Pj4U1ZbiwljsHOM3tvKZh7NPPoraU2nxnnTnKPUz
G4ZykSeirezK1Nw7O4fLuXN/Uw1A3OIKakuPpMLp3XZjK+jL1BZUQA3TTfzr
4BVR+x64RTr9fUjvJnKt5HjoqKevJkI7JY9KvJbY1LfUvYM6K+awnyo97a/R
6BzUxPjAiWeCbfKGNNyzhU4My6bOX/fPLYIeVVJ+PyW9gHLWpDmEi5yQ2UmO
r0Bwz5G5MtaspJSsfCO+Za03m4VNhDVirViz6hoFW8FmzLkyyP5+Y/AN8+VU
+LHPbD1b4pXIvuc6GiEWEBO4DsynO8ibKm81qL57Wmanhul6MRZlnPf9CWId
MY/Yl651W+ENcoZcidG2WTzzcPa5xqUZg4N6LXKOZQntNMRd/Fvu2S/suGy5
TXB442/yO7NN3N5XM7YCaX/3sAW2gr5MC/87nL600htMkgslq0mfI9p6d/YZ
ytEm0ZMvLaAD5SZ8ZXexdbxDEuT4pdqIDm09DZkSS+M0oZZ9v4p2MycL11JU
Z9Pu/C7mY0d+H9iA2A+sURVP2F65jrKyfenhSc/RhhQRo1m7Yy/9+NYj9Fnx
MpF7ZX8aVb7+T3r7TAt9f3gDXSiyn9fj4sap9K1WWdPytXYdRQ6byYLf8nt4
Fu/YOz90gU7QDTpCV+gM3bEGrAVr2iisDWvEWrFmNbxJ7MG2zIhvwZawKWwL
G8PWsLn5ex4xUTTkj7GCrxqNNUbwoS0fIwaM+IoQG0/6L+BYQczgGmIIsaS2
do7FX4WLvcLMMBbErrP3j70YC84EnA04Iy7H2QOOFZxtXLM3Sjjzkiy/Mzi0
19nH889mHP3zSDop7L2jJx7gv+U++uZYYy5SLvs+cqct51685N+/mrEVSNum
8RbYCq7nT0WOfa5q3jv4xlBTXy1jPcViCg0pVKkzAf6RSKPHvGycwzfybSVO
ohF5QJQ9pY4Yn3/Is90qJiDWVSTa7hfmE0ujC8fSHyJDRIxl/HXk88t48nry
FlH/x37hEM4B2bvpIXo/Usn/8d1bx1Xxle/eekfx7PuRCbRX95DD34Wu0Bm6
Yw1YC/6NtWGNWKvtfmDqdS2wsZH3RrC94j44WjQJCh/Ah9Lz8C18rFYXg9hA
jChwOe5zFqoaZ4jB/KkRbC9zjAWx6+z9c6UxFpxROKsszzDxbOMz7vgD4pn3
Z1dPsEsxOk7F0cSKhRbXT/y9msJCoqnp/lsp5cz/OkGza2PE7cvmPDb6Mq2a
OoVK35yqmvfmHljbTDnyotbF9MdXl1rNqaft9GT8w1ZOfn61B2l/dT2N3/m5
wzl/yKYDadzrKu/AevKvcBP7l9WZMJbi9qU0NfFpymsOEq8J91dZ6dnliPhW
RFPjSR/jv4P0ypoec3wFEiTDWOqOe5HvK5E/DVvpMvVqy2z25zVircZv1rkZ
7xccKmYbbTqQPiAbP9vxNfsIvrL13IicaEtunD5BjBS1ybAXIYas9U6TRPfm
07T+sdEck/NbUyjhQLazt8lVO5J6/5fPOJx1J/5umXObWB1HXacSnKDZz3PE
BXbQQa34t9w5jXMv67ecnb+FnAs6zjnlFb67mffbUWwFfZnaAoGvmGpg0ONK
NZf+VB6t8F7OPOrGXLy3hnPs5b8xcC6/P531vh+yfzoNixxaa8MNbYwTlHsv
pjYbWIF+SAWduCebuWL6tV/IaWqY2UydSxdRyfQ9duMh5lzqBsZXblJcwzP2
zodvQwfoAp360xtrwxqxVtVnBBvpvJb08de0OWTrtt2L2UcNgq/6exY+h+8R
A3KO+24hRlb4LqeSKbmq7yLWjHboi0U55729GEvn0kjeA/g39oSz9yXkcg6c
bVyzJ5x1OPNc49INv7h0q7lFSGJEHxfByB5aFrnrkuY3kS/G3+Qbcs5cM9gK
BHzr5tgKri/8RSh9k6eOr0DktS/Nq4Q5Hg6n7pJ0atG+Q505PbS/SD3vzjwq
dWmMA0j/np6USUNmxNL2TJV+U/ld/A4wgENbRNlfG8X87OAJAVaA3/rNVdzb
Cnzsh7aKdRi4V5hQShPvzKUNSWIvrLJz++j8ham0+fCH1Hl274DsZw0r+Va7
mr7VaSj63pks+I1rCkxmsyUmY69AV+gM3bEGrEWXLK5tTcImXivX/Qhrhw2Y
gx42Aee9cA+2wm/YTrIj6lVgW9jYmu3hkyHPxtKzyatkPdlK+B1bPkYMIBYQ
E/tLMmnM6AjSpx1wqAYFsShhLXKMBbHr7P3Tn8gxFpwNOCMkbOlSybJIA59p
dzx4jJZGWOecqkjuIL+YdGcfzz+rgT45Ys+csfRGr/C7151/W8NZuLZFeGbb
p0/95O9e7dgKpLlwlgW2Asl5OtQmvsJ1ExI2Iaun8A2wxqW+mJ7zlPCSw8b3
ZwxZKjyfZsJhgI3EJ4r9wuTvhxw18bbEHlLBBsQ+Y6id4FoY8zmkWpYNUTR/
hNhjK3Li9RTtIeqeP/dmB3GOwbSrcLJgq3hlTn1voyq+gntK+8fzHJjLkW9D
V+gM3bEG/MaasLaB2gUC2xp9E3LUbI7Ffb4x4VfsuyFLZXjMYfHe7EVWcTDE
hrxeSMKIbMUYBLEo2UyOsSB2nb1/rgTGgrMIZ5LaeYWz7OiZh5hjRTrXcOa5
xqUbvqV+qvc++v5f9OrYe+iVscPo6//75xXU6uofAfUZNKk0noKrH2aujua7
bqCCfeNs5vbleEJUtQf5LhhNARUjLXLqqDEJ872v3/x96akLpL3lelq103dA
+f8k/TPkVppB46u0tLhxMsW13U9RhvuNnO5FrTE0I3YSFRgixHdq3ChzgBiL
tvthKljqLthoLOMDAU33W+hjDV+B4Fm8U7BvdN8cowekA3THGriuxBDOa8Ma
+TvCmrF22EBT9yh5VGvJbdNKWt48c0C2TdN7sW+K3r3Y//OBgr+rx1q550Ze
iybQgupJVvEmNUEsIiYRmxM3xVNQY4azt8tVNb4UzjKcaZDzwhmnNgJe9rqC
Wv3njODiPJGLANwsa9Zd8vmdnbuV5KD366R7pos6UyMpxd++3lZybAX/lnNe
nPDdZ/t706OpZEgznRiarcjjg2+j/FYD/9cWF70kut2FnB8unPmFQ+stvb3F
2OvKMKhZ9Tn97a8x/mC4tcb2fNNPUmJcBZWvibcbCzkX+BZ13q6sjzGvX4Hg
GTxr77ylRUsEXV5lnWzpDL54xlZut85rws8ItpHsBJs5YuOSmZ+zb0p35/f7
LHxt9P2kYAXuBR11gw0cM7bmQMxJNjDGooMYC2IfewB7AXvC2ftSkks9AtYU
Gs+14KK8Sz6/axBt1CSRxwuHVXOR+DvvZ2cbaPC4HhrqfoDKVbAYRwQ9kDor
c6mxrPGawlYgH/eWW2ArX+dk08JB4f2++9HZrQo7DB9XT5s3pHIOuba61Hbe
HfUPVfmkr01XXLt7XDiNmOVn8z3uX7UlgjnZUYcBDAE868AL8Ht3Q6ww92rG
EOTcIJVbjlH+4XoKXBJMe3TBdGHDAvrydCY1V6bSJ+9WDch+X+eVKHp9faMt
YDwF9SUSvsL1McI13JOeu1g2ld8dyDehK3SG7lgD1oI15R+q5zWa6lSaRLxJ
sAVsAtvARrAVfsN+ENgSNrVl81HP+7JvFP4TfAcf9udnxAJiokyXRsNH1yti
BjHU33pRv4KYxG85xoLYdfb+sUfkGAvOCJwVl4KLBWfX0FH7+CybNXsHn21q
zz724mEXr/1lGEdPyP7O+60xtO/cWOo5/gj/nbda3pLzlH8eSc2fOs5fcC1g
K5CdK6ItsBXk/bOeDO837/2om6dFrvx5P+u1EaibQG7/Ob8EBXd6Yqwyjz8j
JJammfWWYr71qXqxL5lbtoIPRLVf2AuxVntUQf5Q0misYZnx61iuodgXe4tD
GMdnK4dQU3q4wpZH4rPpYEueKr6Ce3hG/k5TeijP5ci3oSt0Zt2l2hVhTdZr
VhIEW8T34SLWa38gsClsy5wrgq1hc4X/0HttnhKbSYw14V7wKXzLOMxslRoj
ITYsMDkhhvqLs/SnwxU4loSxIHadvX8uF8aCMwdnj62zic8u4QzDWXb0zTF8
tvGZdcKFrVzq0XxKS2Fttv/GXfPu19Ts9l8UNH8xff4P53GEXi3DiK1se5hz
3mFV4yjut0O5n5UtPvjFrUpMwWN1IGXqrWMjqJsA5tFfbn7+ve50/aKyAWEA
nK/f9gDzq49P9KLiNxIYg2Bukvo+HGJnmIhDSDUU9da55/uTbT0zKWBjkIhx
NLpZX7MKvsLSKGI7vmURXMfi6Pe5fqhvTUVtcbwmrSHMuCasGfMXvxFPDyb7
UZxgE9hmoHa9PrGaFtzV/3ML6ibS1CjrfkbvMo9cJd/L4lZ1fAWxhxicf+cD
xpoZxKgLYxEHzq6gsBg+y3Cm2RoL2nNdvPaXeRTWzTH+nfelHM7O23JOf0gj
9/VqWLOA4tLt42U3x1b0MxvFmoGZ/fcGaxvUQqc9Iujgr2upR/j/u22yHlza
0Zvp4MwwKvWOpZxJ6jzrxhz+uIPUk+pD53VhdvXCkkvhsD4+lsnBpL9htzrG
IOEQg9Xn6gb+siaNVgQa7LLfaf+DpB9qietYw1cgeJbfsWNu6ABdum1gQliL
iBup2ww2gW1go8JhtvElS3vU0jnBJ/ANfNTf8/A16onge8SAdJ17lwkxglhB
zBgGqWM88h5hYiw2DghjwR7AXsCesMUfdCXlUg6pLg9nmmtc3jF6nonnXk30
aXtpuEcXDZlwlMY9ZVDwFDgqjWVN1FGVa+SauFawlW/zcimrKE2BrUA+6+O8
6O/972sLqEOWJ35sXj1FZKbR9qJ3uPeUoSHBgptegZNs3cT5ffm1jORaunO2
8L9DKSp9rerSeO7tZeX99qaqL+qi+hNHqefTUrrw+iZjDcmJlFRaeKcwx8Ik
/nfvh9vo/3a502cbU+mbjTH0pS6BPi9Joy+LVtPX2iKbdSbgqr9Q/ix9lV9A
X+ni6UKxiRtFjq+wCPfwDJ7ld4R3VX0jfBPfhg6si6ATdIOO0BU647ntC5Np
4f+L4DWJ763mtWLNWDts0F+PNtiSbVpZZLXPWn5KPftkRUqV4jp8Bx+qzQ3f
IwZ4biEmorPTaGJgrTFeEDuIoX7xld9GcEwabd6HsWStXcUx7Ox95AjGgjMC
ZwXOjIGeNzirxjy1i88uN48OPstsPQ9e+9GhLl77yzXkfwMOnoKjfx5L+86N
p563xwv/fsBmLlOSvefdact7tv+/wbWCrUD2RWWbYSvoWxVPKyarc2JI4n/j
YooZLuv19Mh1qvl79Ix6vq9n1IrY/aa8/OTXLPp8zUhcaoGNhIYUGfP/XvPf
Vv2OKZevjiug7mLI04to6pODeb4pdy2iv2bc7hDG8fnKu2hnfKbCbtteO2rC
Vqzx2wuCZxT4ljAH5nLk29AVOkN3rAFrkdcB2YszKTCs+W8b8SvY2tyWok+U
2Bl8J/kRPhXrXOLZ12rfkXhiWITYQQz1F2eIRcSk3G6IWcSus/fPpcJYcKbg
bLHnDMJZdVQ4s3B24QxT8Er1urCVyzWisvrncO7ojabxJXrmKXiq/sgV0Orq
HObYCiRFP52mjp5myoM3uVnFWRhbkOXKg5sylLwfMnFbl8TcH/3l5w/1tjN/
+qFTrQPGAiDgfAGukHBss7E+RKplyWz2o6eSn6Gi9mVGrMNRjKX7g3h61pBr
7L3lML4CEd6d1bqaeVgcxlb6MB2sAT3BsCapZgXPYM0pwtoZZ1LhQrFX9r/b
yD55+8zBfp/Nbg2gEWvirN4DDw7iTX7NWv0QYk3OnwMbIiaNcebCWPjMYl6p
9c18lvU3gnMnXwGtXAOjUyfyFOjLf1q90Pkg27UFV1LA452ozaCS4sUDxFZM
nBfGZ2zwqheO20QNnrEinuBeYMH7AX77NkH03pF26Z+y8j32SdTicw6vXftQ
ubE+w1a9DPfRGpZN+qHl1m04tJFO68rsst8J/wNUOcw6nqOGr0DwDt61C78R
dIFO1ubRD321375nXE/SZxfYyFG7RmnOs08S0/vvUcY6Cb6Gz+F7hR5CbLS5
i/UvNZ7xVOjxsuociDkjvsJcQHqTTRzEWLAXErVZVwXHvSQ4M37KwJnF/fQ2
uzhWrtRIXZXKvcDsyVXq4nbT4FE9NPjBY+Tn7zg3S3t2L/9tfmv2e9cethKb
RENTTiiwFcjHGemcs7dnnoqWb422CE+uJw9NOveEQm69tSGe6yU68tut4yvl
pdzHyvz68Glz6J5xSh4W5P2lGgxwrmNO9AlT9A8raKHX9p6itz7U0fcnltFX
m9Ms+nJJcmbFKlp4bxRtjUiiM3/PJ92Jd+iHqlH0ZdEqEx4iF+AmG8Q6FLl8
VZJG39eNsPqOBb4iE7zzVckqi/nwDTlGIxfoBh2hK3SuiEyihXdFCWtJU8Fo
VrMNYAvYBLaBjeQ2gw1hS9hUqv0xx1ju8Qglt6mWNUXwHXxozbfsc8H3iAHG
2ISYmCjERmiSqX4FsWNPjAELO78qXXENMTs0+QRlxSVfcxgLzgqcGTg7HD1v
cEYNdhfOq1FH+eyy5x30D0t28dpf1nH0PfPeOmPo+DuP0JH3xlLPW+o9w6zW
tpwZSVv/NkUx/7WErRwPy6SjW+62uA5ekMTHo/rNezMPy+O/MObL5z7yO3r0
hTzr+IqvKT+PHLz70/WmvlIavfLZANRKWNZAJGu2k/9/ibiPOe+6NbHVFyta
82eunQDf+pLJ4bQrYSl9mu4AvpJ+N70x/2WF3Xr2/bVffAXPyN/BHJ+n32s/
viLoCF2hM3THGrAWe9dtTWBLxssE28LGFs/Ms6wpgs+MGJngS4lvhXlwfK3X
MCE2ECNSvCB27IkxxCJi0jxOEbuIYWfvo4FiLDg7cIY4cubgjMJZhTMLZ5fi
PHrPha1czpG0L4MKutLsevbChb2U4OVFjaNup9K//3CZNbu6hjVsRcyRBwr/
/zTaIj+OWgLURchz4fLaDfBn+9ZZx1cm1RSQbt8y+2olFmykYDdr/aUcE6kv
1pjGDGONCOfua9wopXEmeaR7kbZdzPejZ5cjGEfN+6vp2Z3FNr/fL74iyPOG
9cJcWoe+LfUig+7gsk9pnMVrkjCwqmOzaExTtrFP2k+1o/+oiXT9/PV2Pbt+
31K2udX7QrwVtaeZ/i3EjnxdiK0AvWWftTs9E0jbqsTm/lMxFpxR4FjBmXXh
4r7+XxBGUdcySnDx2l/RER5hoIPpYm+dlOqIAc/j7HytJAFTergnUvn03QPC
ViA1+Ft/Gb6ihh9ADF4aKnF/tS/XX06d7sr+UeW3toh1Ex7BdHBQ/zUpqJX4
QhdJ59KDLPpt2SOF9zQYsQTwf6g91zmoUeSBH7bZ4h7WFODdQoaZTTbtd9b/
MNUM26X6DVv4CmMMwruYw9Y3oEOAt4HaPBdYvA/dsQasRe0bsIFkD9jGUXty
PzPBF/CJPTVF8DF8LfYHU9anAFvRDy3j34gZ2FltHsScEV8JKeCYVNjGAYwF
ewF7AnvD2ftTkoEOnFFceyecWeERLQOexzUGNgaHOJa7jAxpoTvcT9Dg4T2U
o7Gfm6W1qoC2b912TWIrd8w5Q/qMHvouX3n/g7RVtHBYlF1zgXNdssXafAO5
z/BVYiiV65jbwxpfurX6FUgjuD5mxJJnSib/G7n/PXWWuf9DVRG0sfZz6ny/
nr55P42+3xpjwiKK0/vV/aNV6bRw5AKaWWvg+Tb/Ty39UGcDY1HBPC4OAF/B
O5+vTXPoO9Bty/9Us67QGbqfE3zV3zphCyOuI9gItoLNYDv4xhzD4p5r+aJN
vJNX05BZsVSbYVmHpFa/Al9jXjm3DsT9OV8qzDfFC2LHLnzl/ih6b4XZOoWY
Reze4X/mmsRYcGbg7LD3nMlauIsG39/DZ9TCEPuwY0kGh/dSR2yys4/kn/14
45xlrcrxt8bS0Q886OSpMTa5WVSxluOC/H8baefKCDoetsrpuVx7sJVzJYPp
4/TfkTmHCHLZcY9F25X7fnS8hwJfuTc+xHoe32+pgnt+WUybcY4pc49Y4APM
9WGFqz65ryeV+/QWqxzqVmtZrPC6ox+W17N3ke+TN9HW2eK60W/q05X24iv3
Uu//z96XQEV1ZvnnmEnHmPwTM7aOnbUNbsSoMSEaojFxjHGPkaZFXEAUQQkC
goggKshisQkFKRUJEUFQQRAtEQIoqLghIxrRaIy2ksVJm7FjMjmxc7rP/b/f
fbyilldVrwpc6OE7557g473vu9/d+vT9ce9dYJjbv33yC6v4Ct7R/wZ7KMZX
VrX2xALP4B130O+XxvgG39VUdvIYVBDLUnaefYvs5GbiQGe6mTiCLg3enyF/
NmxDH1+B7SixscC3fAWbDDGy4SC2XdhwR8BYEBMQGxAjpHlQthBi0tmmwRyj
GmVwYMS0znV3F+bcjy3ws+mbkz//kwoG/YGS3naiO/+4epc4e3CWOWwFpKn2
py5eZvLpOX14FoZU78E1IS2/Y8wiSn6u+ZzyDEo5mqQoRw98B/USWy/80nZs
ALjP0TQat+o9Ovb1Ol39h0dpXwrc8Q73qwovixF5VDALZHWlWFsRXZvOPbfa
iq+gl9lqYS/subrSfC82iaSZN+DZKdZNuMMYvoukj2PX1/Jd4w8Le+aYr61R
SsWXf2JdqMq9FL2fVpdIbmUZsr9zWjuDwoun6P4t1dqAd9iUNCfHmLr4bKLM
mmCT5/+XMJY7/7hO6W++wjHqlBCrbFlji4Ko+kLoXeKsc1la87OWizMMVk0h
94hPFX93xdN8bce9pqquhZTtHUlhbtb7WpnDVkR8RUvl80V85cg08zPQax7f
SeeHeQvnFrecX8T9n4zfK5nuTeeHK5/5Eej8DZ0InUYhJZ/aJYdYJ43AlweT
pleJef67iv2qShzSdc8Ku+4XeEW/s510yfMLs/K7PqeRtL2LLfIhN9/e5B1h
D+xlFsMReAAv4Am86WQq8AzecQdze+PukhwgE3tkGVK0jXUR6Pydovd5Fo6g
a+jc+HfgV8KCqh4vYtuBDZnbC7bH+Ipgi7njZWzaBowFs1iy50eyj9xvP5UI
sUPpco/IpiMRIg48PyvMnhDXudphuS5dY/NslcrowzTyfS31er2Bnn/5IG0L
q7b4fknSaTqcHU0HYus7JLZS0dJD7U5hisE7F1ZG0mLHRYr2+61GzXug79H2
HRtpwJuuVBK91XBOx4adPGu9ZJPR/JX8OCa5+oehi+dRb2d/2q/SijPsd6ym
mqSdtE1zgvacr6Tmq9F064wzXc+ZZYJFoI+WUnlcT1pH/V7Poj/NEu6RsJ22
fFdMd/L70a2UCEW4x/dpwnuFA2zGV/ANf6vgDPACnsAbeHQVeO03LIt5V3pP
yMR4X8gOMoQsIVPIFjKGrCFzyL73SH8a4ushq6OS/BgT/UHHrGtB5/rPS2O2
0oDhrpS/XaProwfbUYSvvLKIzocb1ujAZqXeVx0RY0HMQOxADLEUYxCDEIsQ
k0ZP2MMxypaYhrn2rgFr7nc4/j+zav8i14tnIDWccqL6687U8F+v0dmTgxTn
P7+/ojLIgzdtfIbnbx/1SrzvuV1z2IrEb4OnYZ8l5LJ9hyvDVyY/GmIwT2NI
8lD5PL5bqMFsdNCgKRVi3cRTPuQ+O8awhkV4d/Ii5PRl5qQvPGV11r0JTiD1
rWrpF/aOSwTNXhlM/v0eosaMXnTWK5LvXrp2tiKso1n1Il3xCTeQm8FsezP4
ivGMe+yBvZScCd7wDXgFz+Add8BddP3AXILEfl4K5SLNtIdMTX+/hHWA2iP9
59AVdIbvoEMTPZvBdmAb+rYC21FiY7BFY3wFNivJ5UHFWOD7iAGIBfq4HWKF
YlwFMUiIRRyThNgkzVjRJ8SyznVvlscnbnZ9N6G2mecZTAiNo/Nfq9qZqwdj
WcJWQFsPr6EuQXmWc+l5DhRc3l+cbaL3HHNAlux4x+T91bUZjCUozesPLvmO
VN260Jytg9oFY0FvsoHpvhR9bjOl1DlxXh+z3xftcCanFG/yKwXG4sBYhRyu
EW2EASjBi5TgKwZ4RAt2JdczCwTewOMSgVenlPnMO+6A36UcHkaqC5tpYOp8
SqpUhoVYI8geOhi4o1nxN+E1GUzGz/0KRtHUJcOZf+kZbAc2BFuytGeX5cW0
oy5O9nf/6hgLYhBiEWKSS913du2xYOP0duaqc9m6svNc+e/Da1KUz2a533la
XW57WhCt9F7VJmyF61XGa0nbgq9cmnXM7HnqPtupaqLhnHL0qjLO+Us1FKrx
UYrv0lCxhs5HuFPhs7bNYZdINSRLxBa4bsNCDr/rTmroH0dax2RRhlOWk/q9
tfxz4Qt7DOasc65/SikdcTM/j0afrNWvGPAh7Im9DXqPCWeDB5b1mBjKnrKM
f9Y6rhd4jmHeze2HO3PdiiADyMIeGUL25yNmUkPVGuVyF3QsVztUI/AK29B/
VjXFl9QO28zuBdvjGh7vJMqduEfenm3AWFbOX8OzgO62HyolpQuxCDEpM9/V
jojWudpzbQhcTsNdbOu9I9H28Gp6fshBnhs9cpx8ThPzqQ9tiaZdKR0bW2F8
5ViGwXs8n2SYn+J9czQ3qUK9h3blqmmorzetDTStaShLqRBrGvKSDOsfcjJk
c/eopej9ph85zplHmmu76dy1JPrHsWWG+EDuTPq++HUT3ADzTZTy/t21BCqL
zaPho1No4oepdCAhn3b+lMr4x+2UIKvYxw31CvrZDL6y+MXxTHK/wzc31Mut
7s88CO+CJ/A2ySWVho9MYp6/u6b8njzzxRgbEmQHGeo/g4wha8h8yNx5rIOq
hJ2yOoLuUOui+7egW+gYujZ+N1awiVcWerONwFZgM0p5X+zkR2eWRxjiK4LN
SvbbUTEWxA7EELlZ94g5zuNasF4hFiEm2RPLnP9cR2r/ztqVe7k++1oeP2lE
TrMROc1R1HDyDdmcpllsRS4Xn9KTyjVv0Gf+kXTBy/jv8O8vtsLz0o3mWFxZ
GEILX1OGr4CkGesgd9VLZmtIjOsaQhYVtdYoBJjm9yf7BMv2msIc9Tdca2jE
ABW5uq9WjCUwVsMYRDD1XxRMa6Km09Ipj7IMLmf01uFMyIlbwzouZPShKz5h
OpntW7OJandHW8VX8A7ebcVXwngvq9iKwJOEK4BXPAPvuAPuosOOZpifYW+C
Uwmygwwhy8kymAxwFTmMC7rS9e4SdGjwnVGdkgEuo+rbOqtHsBml9rXwtcWC
TYYa2ChsVl8+DwLGAt+Gj8PX4fMW65+sYizAet8QY1Dja2JMknkPMaxz3btV
3KQiv5o4u749eXUVjV2VzjnNcZWX2pmz+7usYSugvfXp9NDaz5Tl4FFPkaeH
r+RFUFrFMhkcYR25aOXrGsxiIt260B+2XmoXrADklf8qTS1LJ6dPA6n43Fxd
PcqCYicavjGQ+1e554g4iv4sEK9S09oK9MBKrw2TP6sFJ5HwFUu1Gek1y7iP
l8n3wpn6M2+wB3iD/pw2LCGfEiddvcuOs7PIKSeYxmnTaFGBU7vJq9+OZtsx
rrIMETMy1n/5MhqXo9cfLq+PrhbHGj207iCV1ZvH5v5VMZZxB65yDEIsQkyy
ZwUfXkc7znXOtX9QVk2aOJsFeIu5dcWz6b7naCXiWoXRHvz3+VVTzNevWMNW
+B3k+b2T+ecrcxrNnpk9JYSSjebW1zjGU0nvHFP8YKIXNYz3tCm3f2nVbDpR
uspumaj6b23FGCzMHTnStYCOOMZRYf+P6bzTQirXm7uOPlWYtX5lzmlqmHWR
Mh0rFZ9vC77COhx0gM/AWThTvy9beddS5g08nhB4tdRrjefQtGBLkIG98qvZ
H8U6sAXjgo6ha+PnJb22Us2geEM+nVMpV7Ahc3tdkep6BFvMNsKebMVY4BPw
DfiIpZqme02IIeaWDutN65yx8iCtV+buNMARbKUE/330+wEN9NSAr8jbP4B2
5WwhbexFsb9PRjVV5cZ0eGwFdPNCpsG7J5etoMVvKsdXSq5U6/p9zYydz7Ug
8jM59lPNdh+e2wH8pLJwEZVoivUwlWKueygrDOYaiEl7g8h/wL/R2ahlstgD
embd2W7Um0utrO5Goj1XxT5YlfH5NPL9FHp3UipVqfKp6p/z6YfiwfTzej+L
+Md3Gcvo9i7b8ZXbuxz5W0t74+wfdg+iyn96M0/gDTyCV8anrtpme5CN/v6Q
3c0U+R5lF6KDWfbjigNYF9AJdAMd6WpVBN1Bh9Al65Rn7Zj2gQO5zlHTjJj5
un5isBmlfC8e6c82qf8MNqtvwx0VY0EMQSzBHRBbEGMQa54ccI169W+gRH9l
M1bM1eO9Mm/n/Q7D/yfX3htDzeY40ZPn0pfO1PSXd2V78ijBVkywltieVJvZ
n/s8STUT9xNbAe0LNZxtgVz2vNcWK85/vzPqeV3e3DdsMI1xCZfBV+Tncoxy
r5Odcy/iKKG0UvC72YnCfrONZ9RHkOOYIvJY1GgDvtKK9fSNeoPcg54jv43T
DXCwE54qES/JGGVRj0c3DjSoqSjff9kIRzGHr0Txu9J32AN7WToLvOBd8Kaf
twfvuAPuorQfmD5BdpAhZGnwO0HWsxPDWPbGNUcgaa49dGeKyYQY9GGTCDbh
GzpYZyewGaX2NU8GX9kXGmQip/uBscCH4cvwafi2LbHAHMaCWIOYc+mis8Ve
hYhdnavjrTu/XaD4d0bQDseeVP3jP+43O21eSrAV0KGzO+khdYNy3AL4Qcsc
lpjytS21IEb59ZogGrpVvgbBHG1s+pV7U31iDsewk9Lr4mjkR2MorSmVFpX1
5RoKj+Ih9O7OMJqwN5IW7B0i1lVYmF3fL3EJxZS5ycujpQZm5MhpTIyPlMpj
Cau1rtRvnZ95fvPFOiHwBN7AI3jFM/Cefi5JvEudmZkndhJ6xHFfsLN/t+k7
EXcKNXmOmptowTb434KtsM0o3PPRjxvZJi2986+EsVQKsQYxB7EHMahz/Wst
99A87heGnjw+eUGy79zv/CwIufYz73lQckstwHm3I3ZjK6DMaSVU4tuCr5jt
f7aNe1aVdDWczVLSR6OrBdEn8IZ8f42CGSwShRQl0ZmwP1Ogw2m7ZaPGrHpg
DUM8KNZZbf7drgUUO+cjyvT7M9+tPfRiK75imbYJvM0g1ZxFzKu592KHq/mu
uDPubu95YX0aWfZRO+IUfwPdcr1QH1P+UHNT4mDYo6xE14tN/j6wPdggbJZt
0lJ9ihWMBT4h2SF8RcksoHtBcguxRterMNT+WS2d6+6siKgIClU4594SjV+6
hf4wKon+MCyO1JHL+G/OD2dE0/6rynPE95MsYSug85e2G7xft3QF+b2rrMfW
zfXR9MvFCBFfycqm5A0+NPzNJNkcOwizzjFHvWKXH9Vle3M+vkRTxHPQkcfH
75CD33bqAv2q8aOAFx+igJe7mMUg7uQZ9vL6cYNyXOjHhCTuidXKWz6N+yCV
3hybQmXx2+ksTabmwjEWMZBvNMH0Y7GjPL7y/Hgmud/hG3xraW+cfe6fk2l/
/E7m6b2pYg2LxC94/9GGWh3IxqDnWJ783BhQwNAuLHvoALqATqAbEWsJYp1B
d9AhdInf8Rx7M3of7pxEiRu82Ubwb9gMbEcJ3/5j/OlQoCG+Aps1tuOOiLEg
hiCWIKYgtiDGINaMX5rd5ri1YuE+Co1ccb/D8P/ZVfTtG1ZnSjd9PZauXBht
MFPaVmzFhFb1pMbMZ6g0cRqd8Ey+L9gK10bEzzDEV3xCyWOw8vqVd3r46vLm
K1aNo74L5GpOWvpzGT33XbBBN7M+ZNF2w98vWEKbT/rSpjOeVF4USSs3htKE
kNaZK7PnqsjxzS20cEG6zdjCBNUz5OLXmxovqunGqla5NCf2pKNeIsZSnjnU
rO7KU0eQ/tyaWyevKsZX8G6rvIOEvd4wf47AA94DT+BNeg6ezwq84w64i633
h8wgO8hQ91yQLWQMWW/6fC7LHjrQ/w464p5ugs6gOxN8RdCx3Fwc2ARsQ4ev
9FBuX7BF/VohEGxWTl73AmOBr8Jn4btK5/UowVgQW65cHM2xpsEMnisRYlbn
uj8r7HAUpZ9c0+Z9dtz8BxUN6EGrx42h335raDtj92EpxVZAdU1l9PucL5Tn
1YsddBhC/N655KT2NXkHWIRFHMEMqR7tQh59hrQrdgCK3DuFHFKX0eiiVFq0
Y7iIi+wdRNHH48ivcgWlHx5hEQNwnTOE62FMfpfTh1ZXijUn746dziTWyQyU
rWHxyB9C7m79zZ4DHtJqncivOoIij8Ywj3gOnseWpFG/lCBarZWfedMWmjRk
DMve1u/6JQYKunY3ee70sT+p9nrpsCfYjNI9UcN07EKV1fc6OsaC2IIYg1iD
mNPWlX4ykgIPRLYDZ53rbiy/fD9dvnO+XxE/e5BqV1Rj4qlw+kK9vPR5u7EV
EV8Rc9XinJGzsmfm9iilhvcWmjwvf3InnehvmpNHjYiYe7ctr/2TaindSg9v
k3xyH99P551b6jnGxMu+c+Tx7cI7Cylz0CauZTliAcNQSu2Fr0j1NZmDNjOP
4NWcHXC9zigPvnNbzrylCWfZ2/INdIvzZWWHHmzdTfmGDWWbqSeB7enwlenW
7dYSxgKfkPaFr5izg/tBUg0LYouE5wbm2zaXsHPd22XrnHtztD8rml7/cDk9
Oy6BBjwXRKWXFtGvm8fSd9td6LsEzX3P09qLrTBdMMSJqgKWU+C4AOvYSso6
zsUjB78zpZpKNuXRnu3+NLx7DFXE55vNtaPegfGVzd6cr8fseuTvKxP2ifPt
G47xnti7ItKH/F7sQlkrZ8riADeLh9L1LR6tvcE0QcrxhjOpMvhPPk1zUzNG
VBKzm7658w41bzZfw/LNhiC6ZQe+gm+aN5jvP4YzcTZ4AC9T/qw2wFYk+vF0
quL7QjbS/pAZZCd3ds5KD5b5npU+Ov1CJ2IN0j7WFXQG3UGH0CV0ak7fqLeB
TcA2YCOwFUm/sCFrfC8VbBHz2fWfwWblbLmjYCyIGYgdiCG7LvpQv+eDObYM
/zCYyrJj2iVm9fK+2DnX/j6vbd+Ottqvp/G/nKnpxhRqahxFP/wlpW3Yipnc
8L6MkVTtF02XvILbLR9sCVsR6yNGGuErYeQxQHn9isfvPMnPUcybr4ufR31j
nU1z+uhb9YF87yqXBWK/qWnCfw1+tzKY9u3Op8++GkifNIXo8IktueE0OzGE
6yz8FmTSZK96m7CFsS4h5Br0NLmm9KZ//iWUmsOeoe9XPWdYY8Q904KoNtO0
tuTGqt5UvNYQk7pcvV0xvoJ39b8tEvbCnsbn4GzmQeBFvzYCvIJn8I474C64
ky0ygMwgO7FWJYRlKvH3SVMwyxyyhw70v5vWoisXY11J9AHmwJjqGTYB2+De
YIKtwGYU25dgi8b4CmzWkh+1K8Yi+CJ8Emda8iN7CbGk6cwoji2IMY0nLfcj
RKzqXPdvVQv+4VYq//fB9qx3S89yvx6POfPp1DX7+vXcj2ULtgI6dbHOppkb
wA2kmSGB5a+Qu/dA8tpqiIks2jucpnkMszlfX9ekpaSnHqaTV6+2O4YwZ6sj
LarWUL+VcymlWsSE3IsGUkq9ihaULiFN3aiWmSeG3/ntGEHvLhotv2dJa2+x
ceOnMxnPpjemkYvH0JKiUaZ4gXC2pm4k86KqX8e84XlK9ULqt8aLFlRoyCOv
febT6NN/Xb0gyvziIZu/HeszStD1CBPcAzYRWD5EN8vGXL80ORpY9A2dunxK
0bsdEWM5cy2KYwr3AittbLd93bXLqPpC58ziB30V5E3nfj0nEqdR4JAr9z0v
C9I+ouV54oWPtM6h107/wm5sBaSZXkQFfuvFvPSsU7Lnqt9bQ+rxcnM5ttGZ
Z2Nkc+xcVzHIw6b7TR3TwHUUo7y1Nn1nKqc9jDuAh+SJpniN2vFT3SwZrr/p
b7kHl6IzFcy3t0bMg8BLuWMS/5tnlsj0OsOdWL7CHXHXtpz57pxKlvm7E0/Y
9B1jO0Nk9CvYAmxCri7IvB3lse3BBmGLGlfrdmsJY4FPSPvCV+AzbZVTe1Hg
sMscUxBbCvM6Z3B1hIXZzluWVbY5V4kZCdq8VNqmWkF//FM0veumpimRarp+
ejn9mjuWbuePo+sb1tBtVcJ9z93ahK0IVNLwpcF3Zf7Lafkky/gKz/NIa83J
7zpzmGsakGvHLJOMZZkmefaqBC3tyk2hw/neVJflLf43z5sqElrndehjKxL5
v/lvFPD8Q7JYAOaH3NCbwXJTs0yxfKq+zTOLCcyel0HDX0mgzTH76ccfnbkX
mSwOssmfe3jZiq/gG3O4Dc7CmTgbPMzylJ9RwzIV7qD0vjf16mVuyMxe0dWu
CLKGzPWf6WMsIOgMuju03UenS+gWOjbmUbM8k2fGwDZgI7AV3d5p1uflrJgc
QHv8DPEV2Kw5e35QMRbEBo4RQqxAzEDsQAwZ7ZbBMQWxBTFGbh6LrZQbVkmu
fqvvd/jtXML65C9TFMybHkx3vg2m2Y3xtD68L50NQY60R7vnXMU+YgNpb/gS
OusVcdewFTGP398EX5nnoLy+gOfcv92dc+er4oNpjKqX2dy73HyQ2XPjaULv
UHr/mTCa5hbW+jyxBVP5ajA1nOlLm4+HG/bZQk1LZiiFqHbR0kX5irEFx7nh
5Or/NK0sfkbQ51C6lPwaNYf1pu/XYM68KKvmtT1183JOZBrOn/9+1TO0N6R1
tv3WzGpTbMUCvgLCN9L3e0MiDPAdEM6U5nmAF93ZAo/Nob2ZZ/COO+AuuJPS
+0NWkBlkBxnq8wUZQ9a1Xw7mfzOOJWErgm6gI+iKdWayNzA0+TNhE7ANnmsv
2IottgVbNMZXYLPWsMq2YCzwOfgefNDWvl/KqAfHDsQQxBLEFMQWa/EHMapz
/eutv/y3huLfdabyF39Hr23YQ9WXltxvliwuW7EV0Jmr58i5/Aeb8urSnHXQ
tNJllFTmbYATAFsAvmLPfBCH8b6k6mp7LYVS0tSuoOEBE2l1bTq554jz1jNP
q2hBgRd9cvx9cjfCRVQVc7n2RW6vML2ZKZMmTKepE1rxFfxO9n4frzCZSY8z
Pzn6HvOwUeCFZ8DnOFDM4XTGYzSHI++aPCDrwW+b1qBYI67nmTWIda2PS6nK
5tPUkmCdHGArtuz7buUtxnyUvt9RMJbKi35CDNFyLEFMuf7Xzfebpc51H9dP
m8KoMHgpFfi60JHHzc8YvxeUPX0JJU+MMHiGOR72YiuMr7htp1zfVP75jNth
2XNRd4AaFllMwBG1Cqb4ijQPpcbCXHY5urQpgn5KXNZmWdV0LaSC6X7MQ+a0
IEOehf/tUuvV1pT0V1ODQwx/Y+95ba1fgZzAA3iRnoFH8Kr/Hu6CO+FubeFX
Isj6kibCZl7NzXvhuhVH+T5jud330JkxpnVQINgebBC2CJtUar9yGAt8Qn9v
+Ax8p62yagshdmQv+TPHEsSUztVxVkaA/XPu5Qi9fC7+tzetS4mj3q/X0+9f
bCAnlxOU0XCTjv0aTHe+dqHm3X50K17dIbAVzsWW/83g212Ll9PKqebxFWNs
hes4rq6hUvUe7hM1c66a5nm3YgLalP2kbZmpgv/uSdvHuXnt+v087xw/70+o
lsVWGEOJDeB6Cr+lpv2seAaLXp8rYAjKct3rKKe4ySxuAfJdmEHD+66jdepM
+vl/nenn9QGm+EoWamgG24yv4JvmLB+T5zgDZyVkZPLZ4MESj7gD7mIrvgKZ
yWFGAcsGsayvxJrW1kgYC3QFnUF30CF+hk71dQydSzzOF2xhxhw12wZsBLZi
sLcVjGXVBwFUtNgQN4PNWrLpBwljQSxATEBsQIxArEDMQOzo/XoDJQixBDEF
saW94tTIP9dRWudc+wdmbf5yptUc5+WLKmoKe4Ye/TSdnowtI48xT9AKl+6k
8XqCagOeoCvh7Yu3NK/pSQ2Zz3FPpHrP+HbFVkBnNz5jhK+E07wXbMNX3npp
OufO560KJpeQp+l9F9MeUeZ6R4H8/cW6iJUBB1txAE2oWK9yfRod/FKQ/alX
6ZPaeFm8Ym+RmjySI0zmtMjRS2vGMCZRWv0i67O0NoTrR5pXPs8k1ZJA7vtC
QuiCV6jYC0qHcTxPB31SW2tXjjbbjK/gG+l77IU9pf1xFs7E2eABz4z5A8/M
u3AH3AV3soqtCLKBjCArOZ4gW8gYsobM8Qw6kL6HbqAj6Eq2JsZMDzjYAmwC
tgEbga3YhK+84Ms2aYB/bHzGql3birHAt+Bj8DVJ7u1FiAmIDYgRiBWIGU/G
l3EMQSxBTLEWdxCbOteDsXY0JZLq5Lp23/fQz//kvChogbaBjn3d/me0ddmD
rYBOXv2KptXctukb/bqNrWcTGZ/gGoWW3mGYudEvwd/szBJLtHqvK6V0f5im
HvjbXcMUgovH0Ms5MTQ4J45/Bu+Zp+NoQY47bT35gUE/q42HI2nkzhTTfXY4
6GQAcpk0nUn/Gd4x/g49yjYeXtP6TDhr6/EpfDZ4AC+Bxe/Qa3nraGDWWoG/
sXdNDh51P7Gso7V26EnrQv1ifVnXuh5gLMd19KlgE9bqeMyRa81PdOzqX2y7
xwOMsRy7LthVWaMufiCWtPdKq1dRQedc+w65CvwWCeRHYa625aLbi7jv1Shx
pr1cbtoebIVz0bMK+Fv8XD6llGqM+jpJczPMzSnR9k+lEoePTZ6Xdy0Wc/CO
OTbds/DxSvp2rTfNz7J/1r1Eml4iDxKpxkdRSO8aOj/a9D6YJXPGIUaQr31z
TNqCr+BMnA0eDH+3jc6P8Waewbv+XXC3tsrnz8L/bkHWBYLMbfkOOgUP0LHx
72ALWsdUM98K93HGHJ9yg+ewufKWmfawRc2sbTbZsD7GIocR8qx79FF7cl+b
ZWYPIWYgdiCGdK6OuV6Z07Y597o6j6TTdDgrmm7UbaRfs8fSjXPL6NnRx6jX
kAb6Q9eDFOu3j2dUb8/Lom11u2nX/6rp+vnddKcw5YHFVkBbsv7H4Pt832UU
5SLfZ+uWDLbC+frt/lSaUMt1DOuWbuQ57CUZ4qyVulzk4lN1tQ080367jy7/
jpkcJc0xdFMjXyMC8l7cm/xffIhuqPxlzm6d0664P1i5ZdxCouV+Ghr+XBzF
bV5BN/422RRfyZ5P3xcPk+XZ7/nxTHK/wzfN2fNMnuOMdVkr+MxQ4WwlPOIu
Su4s9QeDrCAzk5oa4f9PQsbzFvY2qwfoCLqS5qgwCbpknerVKEHn0D1sALYA
m4BtlCTVsq2Y7C3Y1C0zGMvaPwXRtoWG+Aps1ppd30+MBT4P30cMQCxATEBs
iBNiBGJFr1caOHYghnAsEWIKYgtiTFvjFM+19+yca/8gLkt5zuLdnmIePKQn
TZ3Sk0atvEZPutTR5DefpsAB3Siw38PkP+4RSpj9GO31e4IuhD7drrnayxm9
aZ96tK6HVVuwFdC11J6m+EovH5ty4G6/W0z+Lz1Eb3jO5Hz/EPco0zy7mdnn
Um2E42uZBjPTkz8J4xz/tv1qqj8+lI5cHEj1pwbS1ooUWXzg55MX6LPiOFqV
aTinxZhGJfYm16ieOn1++1Viiyx60Q3Uh3AtSwvesaon7V3lTU1e4XRB01tX
Q9K0oBXnaq4ttRlfwTfS99hLrJ3pyWfgLJwpzfYAL+Dphl59DXiW+MddcCez
uIogC8gEsoGMZOtpBJlCtixjQdaQOZ5DBzq5CbqBjvRrjPRpqlsw69j4OWwB
NgHbgI3AVmzCVwRbNMZXYLOKcA2LGIvYew2+BJ9qTx+Fz8P3EQMQCwL7deHY
MOHNHhwrEDMQOxpDxPcRUyzFnM71f2cVn3OnOREqzpEWDOpNRZ+mU/G1Tfeb
LV72YiugQ9dukM/R/7Xtu619dPnz6guhPPfBR9uXYqpbcQXMt0+vka/7sEbP
5n9Faf/+MPntlO/L1R6E2pXVtRlcy5JeGyZiKQ1raMmGSVTUMItxAzxLOZpG
PpUak+/9yvoaYCmuU6Yz6T/DOybfVW+g+MPp4r+FM3bUz+AzNQ0i5gKZvRYy
jcJqMmjO1oF37f4+O5xZxr/fasPsHT1KqwlifErCmaB72ABsAX2qdBjTVtv2
XSTYImzSVn4eNIxl7/VNtHXrBo4ViBmIHYghnatzYennSdW+7lQQGEQlvnMo
9gX5eo67Rdrp8ynWeb18fj6sxi5sBaSes9Xgb//VzscM9k4WzsyeEmKWr5Je
eVRjpl4BOe3yafNtvuvKvDD6KS7AbqyDMYBB2SKmMmQTxY5O0uES5WsHkjr4
A0GWapP6j5Jns+hMnxgqf9z2uhB78ZUq4SycWfJClsFz8AYewSt4lvjHXXAn
vptM7zClVCPIFjKOyrG9VqhK0Cl0K7uvYAuwCXPfwpaSRyUbPIPN6eYB+X7M
NmmrHUsYS1VYrey58B34kL3ysssGhRhR6OfJMQOxQ/93natjrRXRkbR8Ydvm
3B+IrafD2dGk3iBiET/Ea+jH/PF0+7sZlCH8f9p+T2n5b9Edn9pNu1YepIqY
z2nXlnw6vDma9uevo7Qtf6fS0xfpq0t59Fu1mn5OeDCwFVBpbJNh7tp7Ga1z
M8UpbiWkyGIrEm2pvsb1CzkpReQ0dCzV5M3neRv6szlqknaKefaWfLzUE+yb
XB+uqbiRtsLs/uhb5Tuhq8nz74pH0PU8V/5Z6Xz7k98pwy5AsYEbadgf1BSX
FkA3zxrWXlzPmWPQn0wpvnKj+A3h21mG2IWwd5w6gIb9h5rWCmcq5Q93UXJn
ab49ZAWZGfPkO/kJs33YmGdBN9ARdKXfKwy6hE6hW/0ZO9D9oTxvcho2jrYI
v4NtwEbM7S9iLKZY5LqZQZQ93xBfgc0qsW3GWP58UdDhXcRYBF+GT8O34ePw
dfg8fB8xALFgZ3g1DXhqD8eIAd33cMxA7EAMQSzBPogtiDGINW2JVSt991Fo
VMT9Drudy8xqOGma57x2ZqxBHvVoUHfye/MJ6jF8C7nFn6FnXtXSW68OJb+h
3WjpS4/q5nn7v/kwrXJ9jLYt7EYNwd2pvXqKNat6UnXmINoXEkpNXmE2Yyu8
R5QpvrKgh234Csh91CO0oF83mh30PL24coppDn5GKE11CzWLA6wMOESuTy8m
V/fV/O+CgpZ+YMUxVH9GkH9TX6o/PojqG/tTQdnHJhjBlYPbqbriCh3ZI9a4
bN0WTh4tc1p057gEcC1FYMEzrbnr6xEG8pDmm9xY1YpnlKpc6axXJF2GXGNf
1OX7t356RB5bsYKvMH/Ct5K8sSf2xhk4S4f3rHrRZD4MCDxL/OMuLqFP890M
alWEu0MGOAsygWwgI2M+IEvItP74YFHGgqwhc/5dgdh3DDqBbqAjc/pj3c4w
1S9sATYB24CN2GpXsEVjfAU2q7h2RA9jgY/AV+Az8J32wVN6sE/Dt+Hj8HXJ
75e+9AjHAsQExAbEiB5OWzhmIHYY4JxCbDHBVk52YisP6lpWu4ZKz625a/tr
LpdR0ttOnDOdumQFadbNoOhzm6ny4sK7dqal1RZsBVRz7W+0+vSvNn8n9cZK
PzyKPFa9zngF8uucUy9wIBdtBqXVqezO/6OuosuSzXcNX9DhBAf8eCYLcA/M
aEk/GkaB6veptNGbsQPMbFFJeIhEW/vosCSJ3Ke4MOk/wzvG+ALwmgXAa4S9
S0/Pp2XJ71D68TDGUgIPaOjl5TMEnvzv+r27hOayjO39Pr1uHU3TprOucVfo
3u1TB5qzZjhpDr9jsUeaJYo+/Xcqv/yTXTyJGEvgfcNYyi/Mp/imzfRJnCtN
/WgFxwjVOyMo/VLZXTuz9FznXPuOtPRnZOsTZqCU+LlQYeBSOpLyBKkfarjr
eVrUKpx5T36WeLljAiVP20ba8aW256SBp3jmUKavRvfvcteLhrl0zADpY37+
O2aGnHkhRj6XPn1JS48w2/GKnxLDqCTdPK5jHQPwomSH1hoVzOGoclpK1+e8
SFHDPuW558AIMPtcn7+SXlv5PuVP2tbXzB58BWfgrJLerTU+4IVn1wu8gceo
YdnMM3jXn7uDu+GO9sqnUBPCMrb1O/AHnZrrt4X7HLHQEw49z6TZNzo5CDbX
iq9oSOP5qV22DB+AL0jzawzttIB9qD3qfqwRYgJiA2KE1nc6xwy59xBjOlfH
Wb3mtG3OfVFWEedMS09faMUyME8hz4PufOtCuQlX+W/Te3erpV6ODeTktFOH
yxRt2E+HtkTTgZwY2pVxkOcrbI//ivIPfU+nLu6hX05r6JcNbZ/bYg+2ItGv
W1rP18wLpuQ5hn22rGEroLprW3neOXLtDm8mUc7KbBMsAD2lMBtdysXr9wRr
3hTA+fvvMpbJ7p+4ciL3rjoWadi7Cj26brXMQPk5Y5EiWeXWfa4YvwCtD86k
Ac+rabl6Of16sLXOBjNM5LAKa/gKY0J680+wZ0TGcj4DZ9nCG+6iyEYyxLMg
K8hMn59TkctYtmtXjpPnV9AJdAMdMb9681igS+h0V47alLfIbHJwShJn7Qi2
ARuxZENyGMv6ucFsk9K/Yau22HZ7YyzwVfgsfBc+DF+GT7NvCz4OX4fPSzgJ
YgHqVRAbECMQKxAzEDv05zUhtuzPS+BY05ZY1Wue4P+dc+0f6FV/yjDf+c/r
q03yqwcDnqClg56gtwa/Rv3djpBb1Bka2yuORjw3k2a/JfzO4THy/2OXVqwF
NKgLhUx5lDRe3dqtpxhyzsgblyZOo+ZE275FXt8AX/l/3jbnwUcMdea7rVk7
nUYkPi/TPyqUJlvAVzC/w3FKBa0IEGtYPitercMAdnzrTGdPvUrVXw3kORXA
AIp2Z5pgBUcPXqN9ZZfo6B6V7hn24ZqW0CB6dUY011Jsq3hep9Ofv5xtIo8b
q3pRM7CN8OeEn8VeVHtTx1KDZwwd3TxINw/k1snLduMr+Faad4M9sTfOEM/v
LZyNfmAv6vqV6RN41s07F+6CO+FuuKNYq9IqO8iCZSLIxpgHyBCyPHtykChb
QcaQtb7soAvoBLqx1H8M+MpkGXwFtgCbgG3ARmzGVwRb1MdXYKs2+YXgC/AJ
xlRswGXM4jW6Xl/d2Ifhywa+Lfg6fB6+jxgwtlcMxwTEBsQIxArEDON9EVv0
Yw1iT+d6cBfm3C/QBt/VMw59nUiVH8dQ9NjRVNr3SRp74Cq5frKQXCrWUd3X
qrt6tv5qK7YCKrr4E6Wcsx1f8drbl4LL+3N+3WndLFpd4srPOacuPFt2QEPh
NRl281X21U/06X88TGX1prUj7U2LdgznHmAO6lCK3DuFkmr8KDDxHSo7F0gj
9xr182q5uz6Own2wprowGT/Hu/rfcr8xYc+ys/58Bs4KL53Ic1mcC5LIb8eI
u37f4uMpLNuiS/bhGCDMr4GOoWsJR4ksnkZOcW78DLZhfHclpBFsseCi/Xzd
D4wF/QLdKlXkvmEOvVt9mWMCYkPlx2s5VtzN5VMeSjWdc+071LKUQ1U9u4fK
E58lbdogKsjqcVfztTVTvGRrFYCtYP4JZopfmdVgV05aMz+LNN6bdP++MqcV
L6pCj69h3lRjZe4M5obI1XxwDckoDwOcQylN9f2YbsV9ROoe5TZ/y3n+9zwM
8AhQ8vgoyl7jLNZ+DNtEBV3LKXf6R8xj7HC1bsa9tkcB4wT4r9LzbMVXMLNG
/wycDR64j5XAE3gDj4xlCDyDd/3vcTfc0R7ZaJ6sFGTrR9OXmOIQ1gi6ZFxK
xh65FkewBUvfYw4JbKpKr7cYbE5nj4ItwibtsWX4AHwBPiGHsYBn+FJb/dES
IRYgJlSpenOMsPRu5+pY608B0ZSz3L4595UxZ+jwpmgqi/mSmi9mm+Rbm9NS
6Me/zqD87GLOs05z2U2/79NAv/9DPc2atacFZzlGu9bXU1VuHP+NetHmPVQV
06A7Y39sA+UU36aq84fp+wuZNvcUawu2AvrtUOu8mLS5waT2bM1nW8NWMDOk
uXAMCcGBc+gVCZU05U9qWrrYsEakLKWC6nLE35ubZc95/FzzGEvASw9RQN8u
Bs9+TBG+yekn8CH2nbI2j+T2lgyqSNptE4YB2hyWRf3enEkzs9fRb2VBulqQ
b4qdbcZX8M31PBf+GXthz35vzqANYbZhKyDcBXeyeGdBJqKu/FlWkJmBXAd0
YdmaxVZkdKKPsUCn0C10rM9biJ+GJrmkir8XbAM2AluRm2VjgLGoWu0f2Aow
FunfsFVb7bstGAt8ET4J34SPwlelfeHD8GX4NHwbPg5fx+/g+4gBiAXThZiA
2IAYgViBmGESR4TYghiDWIOYY0+s2hZWSX/yW3O/w23nUrDwt/26nOfncbI5
13K/JyjQ4RFyHfUETXgsmiavbKQJwY3k8dRH9P7jYfT+Wz3JH73DXnrYKBfb
Qg4CjW1bT7Hm+J50ZIFK1/vo4CLlvY+O6PW7uuQTRgsetx1fmfpvoXyXwLUh
5LLyacX1DfoU6JNDb7kdoQkLAwznrh9drft7fqmuqL6pP5UWZRm8d6kylxoX
hVPx7iY6oTXtI7bipCf55j5DtUde0um06dRrZuUizZOX+neVb3SizxbFUaNX
CpWv+lj2DKX4Cr7FHo1eybxn+cbXWs583uBMOQLPEv+4C+6Eu8mdAVlAJpCN
/u8gO8iQZaknV8ha/z3oYsSMI6wbi/NdzNQnwRZgE7AN2IitdrVQsMVLC1vn
28NWrdmz1EMPPiD10INvwEds9SuDXl+Cj7KvyvgwfBs9wN5/qxf7PHx/Qkgj
TQ5v5JiA2IAYgVghdw5iiy7ONHZiK51LXOj147pzGS2q/yttffWPtHG4I538
+R/kUZtEXukzaMfVuzu/uj2wFVBm0y/0yYVflH+TI86wZ2yl5Rly2UkVq8R/
5zswpRxNIrcy+/EVzte/0JvC+r5w1/EGiVKOpvA8+fS6GIov9yS/hNEUc/Q0
JdV4GWILlf1NcBSPqS5Mxs/xrv63qhpPiqlr4L1V5fNpY10Un4m6lnt1z8AB
DizbtuwxpzyD5SXpG89gA7BL6R3YCGyFZ/Mo3BfYisYOvE+f7hXGgv6AwFTc
qlXs+4gBiAWLGv4qxIbQzn5gnctkKc2nzt/0NmnTBpA28SUaGrG03fO1yc8W
ytau6GMr+HfulCb78BXvzaSZv7m1BmBiCRW+IP69vdrxU9JO87PKI3LZhS9s
Nnle8sg+cb789AC77t6wNoKOrA2361vIrEBvzkfN40V03smbCh/5jI5M9GK+
0C+q5JH9lP2klvuYNYz31NU36GpLepnOcJcjLeMrjyp6V6qR0bbMusGZOBs8
gBfwBN7Ao3rKcuYZvOMOujx+V/vxlSNx4Sxbe76FLsEXdGv8O9gA7NLq/ad8
ROoWfAa2Bpszh/fZQrkTm8QzzGAsUg0LfKq9/FMi+L42sS9pU/pxTFD6Xefq
OAtz7kf+yb6/By/J3UileRn8szncAz1+rvzqQWV5CVQR00RVMYdp6MtFPJvl
+YcrSB2wX7ffHtXn/B7yqLu25HEutUK9mw6t18ubp2ynnLwztOtKNZ37LoVu
n0ygH1IS6LbKdEZFW7EV0K1zmbr9EmYG0eb5Yj4beW5L2MoPmJFeOIDntSNn
n30og/akaXluyfgPU3X32d+SXy/Z1NoTTG6WvX4+/xu9eey6GpnV4qz75JVT
DZ7f3jVA975+bl6OvmpWNntFjraszCfn18fSuIR6+q04gK7nf0Df7HpHHl95
bjyTLL4ifINvscf4pHreMys8z26+cCdLd2Y94lxBRpCVPi/qlR+wTA9HmmIe
eN8S3qWPsZRs2Mk63t+Cn4EmCjYAW4BNwDZgI7AV2AzbjgKMBbYIm9TdRbBV
e2zcGsYC32IfE3wNPgffgw/CF3WyFnwUvgqfhe8y7ir4MnxaOge+/uyjlez7
Ti9v51iAmID3ECOkfmByOA6+R6xBzLHnjqPdOufad6TF/amO96fqzWPN5mGL
fLqR/0tduB/QqKcDaNSAFPJLbKIhs4/RwsfnkdujYfTW0FfJ71Wj3mHmSK+n
WL2VnmKG2Irc7O44i7O79wW35q+bFoRxTtvWPDjI1+khesN1EtdTjPgwzghf
CaH3XS3jKyC3hf9FrmtjDHL8nxUn89/zo3ZFqrPgPPSX/WlfkWGvsCPVV8Xe
XbnH6Oz+TYb1Gt++QRllz5FrSA/GJIpbZtyXfzrJrGxRv4I6lm9b+oXVZ7xI
1zKeoctHfzaPrSjAV0DYA3s1ZLT0Imupmfl+lfn57eCV5wAJvOMOuAvuhLvp
7427QwaMLQgy0f8dZFZ/UbRpg7ogQcaQtf670AV0Yk1v0K3xfB3YAM9eEWwC
tmGPTcEWYZOSfcJWTexfsGnYNmwctm7OD6xjLD3Y1+R6fZkj+DJ8Gr4NH1/4
+HwaMvcY+/6ofikcCxATEBsQI6zpFbGmc3WMhTn3G0/fm3nP6AfktiOU3Gu+
4L9bD3SfRT//XEFJFzZTcNxYijy7iaov+7frmUtqY+jdomXkUTLE5vkWxhTf
+Hfaa60fU54DzykPLO9r0BcLdQqMS1REkuuO1hoP5NQ1tStoeEFSm3irbMym
4uceoZrvbt8z7CGmzJ36rfMjF206xZd50uhZi+nk9SxBBuLv3UtMa1cs4Svc
O0ya8S7sceyqhsa6LyRVuRfjT/1ihZ8r5t6z+x367gdRpmfz2rSP844U0hyO
FPET6fnOKLYF/rmlb5jUJw22w7Pu8xws7gtbjBFssk33FHwCvjF6ZzAFHo5p
V99DH8Doc5vYt+H7v/xcLfj8HPZ999pL5JYfTDHn7i62Kq1PGhM759p3kHXd
83Obc6vomVSo+XcqTx9MNape5NP7RLvlbbl2pb9hjt8YW5GowfWAzTnpTN+N
pPHMNnh2ZJbYI6xwSgAlD9toPV/+bJbZvDpqHc47edCRx22vYUHtyk+qpeQx
K9nmb0umLzSom8EcGdwHP2Pe+YmJnmLtynCxdgXPIeczY1A/4kfaR/a0zkZ5
NsvqeUrrV0qezdbNeMEZOAtnSjqOHZ7OPIE38FjV0ruMdaE3fwd3wx1tlYuH
q5plmtxrv132CF2am70CG1AiK9hU4RSxvxhszQDvE2xRv1+dUmpwrTE8xwzG
Ajm3Zw0LfL0msRf7vjbtKbt64SHmdK6OsV72LLYZf9gfc1H39+Rb8m9brRGo
+ylOnLuw/kTL35NX00vd9lGvoQ005Pc7qTTyoG5v/K36njw1719aGEGVCRUW
c+g7U6pp+/EGOtWsodtXIuiH3Aj6PmkdrQmIaBO2AsLsCOkesX8OotyFy8Sc
vNo8tsJ1I/n9dLNPQHt+C6JdWzZS/upsGt53HfOtTdkvYisZxVaxFSUYy+L3
u5rMCWnePlGHc9xMW2NRTzsv1NmNY4A2xO4k51Hj6L34evru4Adcj2ErvtJc
OFb4diqNVzWQ88hxvGdbeMKdLN0ZMpFwHcjKoHZFkOXiMV1txlZkMRZBx9A1
dI5/Dx+wjrYJtgCbgG1I38BmYDvGdTQGpBYxFtgiZtxLd/lSsFV77VzCWKIC
I9l34EPwJfgUfAs+ZknO8FH4KnwWvgsflvaGb7/Ss4h9HT4P38dzxALEBMQG
a7VViDFSvRxijy13w1x7xLjO1bHWrW9nWv1b9y0Lu4k5137daMRgJ1r4mC/1
/7Calqecof5jSmnBY3MFWkwjXphJ7m89SUsdupn2DjNHjmJPsQyvbtxfSOop
Zg1bMSaenx6+hGozB+pyzaVr5+p+3+AZaje+Muqtl5jX5avG0EsB8wzxlRlB
9L5LsHV8ZXYUrc+tNsEi9n07WMw/Hx9EDZ/31f2t/9ErA6m8OFVvDksRNfmE
ihiLpoz/Lf2u/kJ/mvdpb8756yi5F/lum0+XwyzVDEnYxzO0N3YCrcvMp/ob
zvRZsf31K/i2/sZI3gt76mM4ZusyBB7BK3jWvwPuhLvpywB3Z30LstCXAWQF
mel6UQmyrD86iH+GjI35hC6gE6v4iqDbqTMM9QsbgC3AJmAb9uIrsEnJPkvX
ztbZPWwYtgybVmr/+hgLfAi+lCH1+nJU6IstPcDcRz3JPcDg0/Dt/mNLBV9v
ZJ+H7yMGIBbgG8QGa/EDMaZzdS5z69DXSeSXMJ6++qma3CPW8dyFaZnFVHpu
LlV+vYFctyJfv4bfa+tSnVxHiyrCKKX2dV3+Orp6IIVX9OccNuZgIOftXtyX
3Ha21BZYwGCWnfyVaq79INYY4N2dIpayALPKy/vL1moY974KK5pETlEuuj3B
i6pmLvVLDW4zHvDEig2045lHbKqBaCt55A8RsY8oL0pyG0ETNs6ggnPrWI7h
FfLy8JrmwiT3O3yDb4ua4mjCBlfes1+sL2M4Xvmv3rN7QYaQ5RPB6W3eC73U
kmq9xLu1PHNaO4PCi6fwzwtkeqjp1/TAtmBjjLlIdprTh21xycn/tYidSHYK
G4et+2hF7A+8ROvhf/AR9M9Kql/XZr9D3z/0/0MfwLLrm2jvOU+a9Mke9nX4
PHwfMaA9fLxz/Wsue3OtqocaqUbVncrTgLN0o8JHqtuUu1X3Np27Yg5b4dz9
9C/swFc+JrWn4TzxE9Mrqaq7WO9R3tVyjyMQ5tCb6wvFGMYgD8p93L58fkHi
EroSZ3utRfLEcFK9J/J05PECOj/Km3J7lLbKsWsJyxbvIN8OQu1ITdedwrcR
dN7Zg2KdPtbdraSPxuJ5SvCVwj4bGVvBntgbZ+AsnMlnt/ABnsAbeNTJsfse
vgPuwrYmvJM8xfbaHsiyIE5+dopVXXQtF3UJ7Efm95AT7mZtn/KupWxbsDHY
muE8oK1skzbXrwi2b3KWDMYi1bDAt9rim/DtmsQnWny9O/u+vXt1ro6zQqMj
aYWNc+5L8jZSSW4W/4z+QEr6CR24fJD7BZXkaXQzGHBur+7HqFf/BnJ+13C+
Av62Pb9Qw/O/tYXBtD/Bco63tSZkNw1L05JnhjdtO1VHW7Lqaf/6SqqIb+1R
pJTqLu7X8b/mwyDa5htpEVu5nRJEd7L7ibUI+rjB/8yh0h2rxdz6H+IoKy2T
+0aVbMoXsZXTx+iHzSu45xhmT4B+SEiimxnL6ZcMmfw+zjCqc7ih8if/Fx+i
+Yv/0PosbQX9uqOfWFOjCTCvn/VJVnPoSmhbjh85TPAmx+1b6JvyybbXr5RP
pZd3bCGH9715r7bygzvhbubuDZkwFiLICLKS+PD1f55lCZnq8weZQ/Ym+Jag
o5sZK1hnkv6gS+gUumWMRdA1dJ6tzqTh/xFHNQnb2SZgGwZnFA/lM2BLljAW
2OKqD1vxFdiqLbYNX4BPwDfgI/AVzzRvel29j31Ima9Vs2/CR+Gr8Fn9M0a+
W8y+DR+XYgx8H7UoPLNeiAlKYgdiDMcdIeYg9thyT8y1D1ndOde+o61LR/9J
zcnW+wlhLoPYL0jsF+b6u3Ca99Rimhr6OYWoztAbgzNp3qOz+e/c338snMa+
1Zv8+1noHWaOHB4ivw8eoYVjI2nbhz50Yu5HinPMOvIKpmq/KM5ZSxjN0bkh
duMrY4V7gje/qFAalOhoNH8lgN7/IMBqnh4U+4kpbrHpc98WTGAgHbk4kOqP
v9raI+svjgZ1F5g3It2xOjyVbh8/RaVFmcI3fck1tIchviLQhOCPyH9AF1oz
4zE6EvCkWd2iZ9e+EB+681/XaEtlMuMR1cUqm/EVfINvsQf2wp6W+oGBJ/AG
HsGrMf+4E+6GO+KuuLN0//L9l/UwnWSWla4P1clXWZaQKf4NGRvzCl0o0dn7
HwawjvWfwQZgC7AJ2Ia9+ApsUsJGYKuwWdiurfYOH4GvwGfgO+Z6fZkj9tEB
3dhn4bvwYfgyfBq+PTXkc34Gn+d+YEIMwHeICdbiBmILYkzn6lhrWc0aqr64
5p6dV3xuFrnuCKbV5zbRL3dOU+SE96jIsSelfPU3UtW8QnXX1pDX4VTySZlG
eV9l2XWGHLZiC6GOAPnn1XoUf+3v9PM/vrdrP/355RMCnGlJwWgRb0Geu2Yk
971qax4/sHgs7X3hdzS0uvne4RAtlFanoiWTnqa808U0OmsupTWoTObaK8FX
8E268O3orDmU17iT9+T+aff4PiPrvmdZQqZt3Wt4wESKrxurswG/glE0dclw
wox7yQbssSnYYszVvxvYKGzWnNytUVsxFvT5Q78/9P2ru76WfTnt6k/s2/Bx
+Dp8Hr0CEQPu1aq+uKpzrn0HWm3JuUr07nvbSJvyIs9hSM55we590C8KMzh0
/7aArYBquhfw3/HbkpfO9k0nzaw8k+ex3tfoyHhfxbyi31WNzFzzWGc1Ywb4
rz0yqOpaQrdUEaRaY1svLPSAqmqpU1A7bJO9C+pHzo8RZ4lIeId62lIq71rM
WMIR4fsqQQe5D9fwjJmS/ubvYA1fwbfAH3IfruU9sTfOwFk4U8JzeGaNwBN4
M94Dd1D3b5HLNC+b+1xFrZnPsqzSw21sIdT5mNMldA8bULoX7gIbM+lXJ9gi
bNLW2hXYvuxZMhgLfAq+Za9fJueIvg0fh6/bu48+da6OsSoDllOvucrn3Et/
Ry7lUn88t1HxzIaKcw2kzUvhWdfa+NYzx01qycP++wla7GmI9exJq6WSvHWc
m95f6K+rAZAj5KyHzSyipZGz6FaCjy4f/Y+aYLp+LZrKLmgpe/cF2qPeT/sT
6qiqBecxR3vONOl4D526gvYsm2k+571enOt+Z3s/U9wgx59ydsdQWVIlDfd1
pbVJM3T3yD93gn5eb753F/62/+b6GAOcpXlDEN3ZYlpDsXhpH+5p1RzfmpvH
/PUfUiL5e3NnfH9hY5uxDLGOQZDrpnnU78/z6KXtWfSzxgZ8ReNHDjuyqZ+L
B++BvdqDJ9zN3L0hE8gGMtLpKl7stbY48EXT2iFB5pC9Aa4i6MZS/cVtQbfQ
MXiBzmMF3TsJNgBbgE3ANoxlARuCLVmyNa1giyGTV+jOga1asmXYOmwetg8f
gC/AJ+Ab0p7wmaXhs+j1WcXsS+ZkinvAF4GrwDfho/pnwYfhy/Bp+Lb0HD7P
vi/EAMQCpXEDMUbCXG2dw9LL+yLt7+wN1uEW5lig99C1VOsYC89qaPk7d/QG
euepAFrwmCeNGZBCIYmNtGBlE017LkKc3y08d380hN4a7ER+rynsHQYMY9BD
NFn4ziAf/ce5tHTUfNJM8aaD7ovpwoIlivLOqF/hHG9KT9qSOoLG9gomj995
2pwLxzd+jg/R1Df7kmt8H9M8/BRxjr21XP0n2xLp+yOVRvNCMltrLk6+Sge/
7E+NJ1vrMD77ehAdLI7nd384UmNyx71XvqCCyr6m2IRAs1cGG8r37Udoy4Ju
JjUtmI3ySfUd4RwVHdydSDv2b+C+XAeL4xTjK3gX3+zY/zEd3JPIPGNP7G1c
qwIewIs+b+BV7g64G+5ofG/IQjw3nmUkyQuygwwhS+nZ3iLDfmrQAXRhHV9Z
0qJbQ4INwBZgE/ba09heQWyTsE3jWitLBNuHD8AX4BPwDf294TvwISW+xj3A
BN+Ej7oJ38FnsQd8GL4compk38Zz+Dr3A2upS0MssBYvEFMQWxBjOlfHWtUX
QmlB2bJ7fi56A7nmB9Leprm09+YvlPfKsxT/znD6+bdmzvcWnZtB6RezuL9Q
8OkNVPNVkKJ924qtmKPwy7/QnX/+xe7vpdqYcVtXUFrFMv4ZczeQD5/j7kAe
eYPajg003uY6gfADU+4pHpFeG0ov58Tw7PkJxZ+SW2kU+VTHcY7dWA4Lprkw
mcrIkfwOrCPXklU0qTSX6z6wJ/qn3cu7hB2YyDKc1PC3Nu8FnUK3McLdpDk8
aeXLaFxOy50Em7DXnv75z68o8NL/tquN24qxoJ8f+vrBR9HnD77M2A98WPDl
gkG9qVTwbTx3LQi6Z/3A9BdiQc2Fzr8H6wirPfKk+jQh+z9JmzaQtIl9aFSY
bTNIsrtrOc8uzVy3hq1IVDDtvG0zK3zVpHErMHmuTltPUVNSFfNbMyieSnqb
zirJfXIf97sqmG59jos5CluziP6qiiCtzMwPs/x0LeReVuivVTMRuIT8HBXU
1YC/zB57GOvQ6LAOjThzflQy/z7KOZ2O9I8nraN8rzJL+Aq+wbfYg/uRCXvy
3sIZOEvTgumAB+4NZqbWB9gK7lLVcjdbelGVP7KHZbhyjbfdekAvM/CHWhvj
32GmDGxA6V6wLU36elN8xW27YJOpNtkwbN7ieUYYC2QP34KP2XJ/+DB8GT79
Xva7dsvRHHWujrGm+ymfc78rZ4tu7kpZ7Gn6dVOC4jyplAfelXGQ86RFWa25
17KoWhryothH6I+P7qfNwRW63+1fX0EHEnYLZ2dQXa43VRYu4tkVSrAVObqT
708/Xo6kw1e2UO6RJtqpPkj7U2qpUriP/l23Hbwp5ndVKRTq8iFVBFvBV3Lm
cO2Bfn+nWykrqHnHONI2RzBGND0ygv40S5xxn38e2Ioy+aEm4qZe3QTn+/NM
MRb0tfJ3/rfWGpbi13W9ym6pUuV1ck3bLlgGaFduKlXmzCeHWUE0NG03/WxU
fyOHr+CdYerd9JJbMFXkzOM92osf3E3uzpAF60yQzY3iN1r5G23aZ01O1jc1
y1gniuxe0DF0DX7+NEdD01eKtgCbgG3ARqR9ub+cYEOwJUu2VrVsJtvkjy3z
WGCrBjioYMuwadg2bBy2DpuH7Vva1xLGAp+D78EH4YvwSfimdGaW4LPPC74L
Hx7aZ6dBbz74Os9WEnxfH7dUQogxZS2+idiDGKQkVqEXGWJb5+qYC3nbRq/V
dEnBzHiuN5Dys9wv7A3uGYS/d3ecVE0rkytpql8Tefw/n5ac72yxd9hznuT+
1hMWe4fJYity9PRsWug0j9ZN9Ka9rj501kseb9kXFK7j+2hwb+59hJz45Le7
01svTSe33ymvPZjw9tPM41pVEI1xCTfqIRVEk2cEWc3X7yiIoPqD1+jInnjD
2Sp6tRcNZ/rSieN6/wY+cGOoDuvYmlNncMfqzME0NVPsV2WMTfhHhcjn1gd0
4TkcUk3L3upQqtWWCPtHC7wl0sGiOCrdk0Nbvh1jirHI4Ct4B+/iG3yLPbBX
rbaU95ZqVXj2xwAzvaoEXo35x51wN9xR/86QgXQuZKMvK+6zdqa1zxpkayBr
QfbQAXRhTV9cm/ShoV6h+zWCDYBn2IRS+4GtweZge7BB2CJsUjcrKEi+Fxhs
GzYOW4fNw/atnWUZY+nCPog+fiOem9vSA0zcEz4L312ZUsm+zPVo3A/sDV0/
MBBigLU4gVjCMUW4Q+fqXLYsqV9YzdcplHl8DE3be5LnMyz4KJi++DqRc7Xp
R52p+lsNueYtIZfSSH7X3Lpb2ApozukfiH77wu7vpfkbMeVraUlpDP+8pEzs
DfVyui9F7m0HTCTfgbGBsYtX6Gap3wtCjQnmuM/ZOpACGzbQgszFlH6ultwr
UccwxAhfcWXSf4Z35gjvpp2tJq+cZbSofoOwl2PrbPh7ha8IMhseFMcybA/5
he+dSC+nevMdoWvWuaD7aMEGGH8pNd8bzBr99ttZtsn2tnMlGAv8Fn38XHN8
qfz6Jtp4fBR/e/5rFfsufHja3lOkOTpKeDelsx9Y51K02jtfyrn1R/ZRQVF3
qtIMoZpNPciv10lF3wGPiB0l5oOVYisSnXc7ojw37bueNK47TZ5XRXxE2jl/
VXzPEgcNaR3XmzxHP6bzQzwYR2iTLNeEU0GE8noa5mn6QprvVNjSV2u72feS
+2znmSLSzHZp3j3PQnfYxvPlUQtTPsWbChw2UxXPmjGsW5DHV7ax7vANvsUe
2At7cv+vlnn2zKtwNngAL+b4xB1wF9zJ1tkrLLs1tvcTM7ArQYfQ5REZO4Tu
YQOK/UKwLdiYCb7iKtqkUvuFrSs60whjgW8pxfzgs/Bd+HBB0VNUbgPOZwt1
ro6xMOd+9J+tzyk5ECvOTJDmK+SW/82mPCnXDKxfRzuPfcNzFKpyY6giL86g
rxBwlee7inOwkaMF7sIYS0Idz9SuSSqiXdmZVJfvTQd2LKLSjN02YStyhFkZ
d86soLPXUqjozLGWnmLVtDn372IOPWMRBU76gA4tn2Vxn5/X+9GtYkfOjyMf
fydH/O8PxYPph/8ZyTUZG8IyafibSbTz7DGLvavM0c2kBF2PMu4VJux/Q71c
x0NWpAvXX1REttS6ZC2iH3YPEjEB9WrZ+pjc7NPthmdAP5g1sjNvNb09IZWG
pOXRraRWnRjjKz+m+NAQdR69/X6q8M0a/hZ7tBc/uJtcfQlkwXiCIBvICD8f
WL2IZaeJ/KAVnxJkCxnreoIJsocObNUb92ATdD7cOYltALYAm4Bu9G0FtgMb
gi1ZsrXDgi0GTviAbRM2CluFzcJ2YcOwZdi0tZk+SjAW+Bh8DT4H32P9pGxn
n+S6kqjDNKRPEfvs849WGGCj8G34OHwdPg/fRwywVX6INYzDCrEHMQixyFq8
+k+3w51z7TvgunX0iFEuN5KaNpqfQc61ICt70PIPW2tRpH5hmIGNfCxytC4B
TbRcVUIj3E/xs9aeSPNpwqORNObNZ7gfkX7vMMXYihw9JtAgT1o5dr5BTzH0
XZL4rg3oxTltg1zzSw+R+6hHaMRQZ5r2b2EWz3jrhRn8zVvjR9KghdFGM9BD
TGZ0mNCMj6i6eDVdO9pM3x6/ZpDz/+TKNB0egLnsn/Gs+8EGuAHPeS+OoVsn
Lxvo7Iq6F/k7PUwLkP+OCqV5wa21LCvjg83k2FvpjTXzaFP1aKre3doP7KhW
RQeLYmjv7nza/OVMESsxi69E8zv7hHfxDb7V9QsT9sTeOMMaH+BVN3dFuAPu
wncS7oY76t8ZMoAsIBN9GWGWvSi71toVyFZf1pA9dABdQCeWdAadQrcGvcEE
3cMG2BYEm7BkM7Ap2BZsDLZmUDsi2CJsUtcrraWPndTrC7YMm2bbtsMnjDEW
9jXHbjTmrWcEH4zQ9QCTMFD4KnwWvitio7PZp/X7gfEMIsH3EQMsxQjEEMQS
A50JsaZzday141wiZTben/nP+v3CUuqcGFfRz9ECd+Hcb40jHboaQT5H0zlf
+6lR77C7ia2AptY1051f6+z+XqpfUO31Iie1L/+8qAVfGa2No7QD/u2CEXzz
6zeMD3z3t/33bBZL4AENRdeKs0ow24P19LEnJX31N3KtWGugkwXTXZmkfyfV
DCPX8ihKuXqLvzl0bZVuVknM4XTe+55gK4KsvrlZwrL7y50f2mXPtAN+NHpv
HN9zUQu+4vSxP9sAfoZN2GtPv/xyiCYdbr4rtm4OYym4upn79qF/H/r4SfVJ
wFHgq/rYKHwZ8+3h2/eyH5j++vRsIuV1zrXvEOtu5Ev1yefZY1Sl6ck52mzO
0Zqfa1L4SDnXCaBOwVZsBaQec5pKJhYpxFeSSTO92OBZ8sRqEV+ZWEzqUaeU
5cu7b6cT/ePkfzd9Ps/tKGlDXjpk9MdcfxH7gvLeVui1lZw+jJJHJVl9Nxaz
4yd6GvQ44/5bwjP08tL0KqHY0SpBL54UNT1CrNXQ04mW8ZVH9fbcxu/gXXyD
b7EH9sKe+r29+EzhWayzKT5lTLgL7oS7KZbDs1qWXeB463IwR4z/CDqELmXf
EXTPNqDEPgWbgm1VrfqIkqcYzl/JFGyxULBJZfhKEdu64nvoYSxcAyT4GHzN
3PtVgo9mt2Cj8F34sL3yU0qdq2MsR89ingVtsXZFXUdVuXG6f5+8KF8bYBVj
SVtH26r/h3Oku7LzOV+KvY17DP2+5wn6/UundT2GuL4kTcrj76SSzVvpUJ43
DV3mR56qOfRDgm15ZEv0j+pgunF1DZ25spNu12XQ/A/n0LEoyzUFrTiLP91K
WU63U1rrTX4+Mpi2Z+ynKlU+/dElj24k2Y6tSMQ1Cy11Id+gV1ie4fyQAMcu
FNDnoRb8Iphz95jn8aPGzxRfOZbZbliGRGWYyZHjTQcS8mn8h6k0NCWVvld5
m+ArNxME3aWl0rgPUvld9JvCt+3ND+5oIkNBFjwvJ6cfy4jlJsgsYECXVmxF
kCljKy09wSBzqV7EHoLOoXvYwHZ1BduEdBZsBTYD21FiY7DF+R/MYduEjcJW
YbPtZf/wJc/YOTRsuT/7GHwNPse+J/igVOsF34SPwleNe/vBp9m3BR+Hr8Pn
4fv2yA6xRtfrTIhBxvHCpI+hEMscO+fad8h15WizzJz4MGrIfM5y35/wHhQ4
Sb/fl2G/MORsRw1S0/Koeloeu4eG8N/Ct+Z+8c7sR4NpxCBn8n2tGwUOftR+
bMUcvTCX/N4Koq0Lu1F9cHf6zL+n1R5lvk7ivHLM1DDu++T+O1/dXIuxn2QZ
YSehNNUt1DK+siiA8/vIM58IiKbmgyW6nH9B2ceGNRgnhf+e6m/wDLTt29HU
UKamIyHxOjzsRNCTBndA36qQ2BDyDR1Ma+ODzN51wYAnGMNwD3iGXKKeo6lz
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
V1q/wYfG18DXNa6Z8lgQGAFWrOEJmIsPqmBeL8e7gVLmqSg2qkhgNJPSspZQ
UVY0aZbPo3+lr5T4xBHBVOcdxjyjanQy5XioBPZLRQzsFHsEHyZf04MYKi+T
YkojYgoxlsMxV0JK8e+FYfI6dqQ418O99kYsJJdAwzn3FYX4nbq6hW85c75d
cqf82/tzRbJ5f9Q24Hfy2zauIo/gpXRL2TIb/Dt1JG2d0/Jb+xDXaF2/LHt4
FtzHZD8XCiR+5RcbqS7Vdn7FmFv5NjuT7uRG0/2t/ak47xQtVKhp9AerTPXM
raetJ07Roa+L6NvLKrqzLt8u+6FW4l7zDA7UaPxY1JciXaUaDXzW2uAfN3Lb
hccw5le0HAr6f+Hzm64t/Ap/p8e94Jr24lcg0FmrP9sFtT39H+PP6KvGx/LD
7a4pgo/gK/gMvoMPjZ/tLXwNn8P3wACwAEy0lmPZnyphEp+BUeM9Act28SrN
/dBCfh+tiyPElPY+PIdFxBxiDzGIWERMyvFYiOH2ej/g3aO1Ad5JeDfp2wVz
7XcqnHPtH8V158SVVuVGuVfY4nl0I9l83rg+4lcU0Ve+DkHqF/YWDfcYavJb
+9iMRJqm7EljirtRbMIYGhMz10K/KKl3mK/ns/TO7+ZY7B3m2U3KLef5P+kQ
fgW55dOzlrEtbuS0fF9Rv5gu/nUwNTb2ps21L9HCihfJf2038ovtSn5pz9PJ
i5i3Pow+OphBByozqDRru4ltvz76nfzsdtSv/NWwRiNqZxb5/zqYdZz2RDDN
eMc03y7Pr3TlmhVwHr4RYo+hXchrYhyN84+jCZNjrM9hMcOvGM9dwb1wT9wb
z8Cz8Ew8W24eixy/Ap2gG8/REbpCZwPb/FW+tgcCWxrbFzaH7eED+AI+gW/g
I/gKPoPv4EP4Ej7V1S4JX/P8FuF7SxyjPQJMcv1KN3P1WM09wATGgXVzPcD0
+8Fx7IgYQiwhpoxrwhB7iEHZfmAQEbuIYbM1XCL28Q5o7fsD7x7nevQWeIvQ
mviO3obsQg+iqCwfOrRdTeojQwx/a//zP3S/tXff2mgx15x7eBDzAsjh+5XM
4xnkq48OsXgN55oPDmpzXhziX9KLcmsTya8sWZqnvkmqdYivGuW4+onSlh5U
qF/R1mhoBfM/MHPd3vtO2dSPso8EUdnVNRTQkE0fzenGNSqV19bzHHtrc1jM
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
A/MxJsWHUcHUP1Px+DCen9EgM6MlbZiSmkYHUo0dtR2aKB+qiomlxme2S5yU
e4u9zNlbrg7DnKA/Fvak6i7fD00rBRWvCOlt8RzcA/dqNNO/Sk64rkTsGXuX
Ow5doTN0b3ymlG1Ro/Cx+f6wNfaE3nSmum/nOfGlo8OpyP9DmhAXTgXjW+bE
N3ko2NdcLyT+xvfg20KT6ik+bBul+e0V2NgvMFNtFVfAHjBlPBOI+9EJzNqL
c4XLCY4RxApipqFTdbO9Knm/mE2kf35Vv9UcfzznxoK9O0Kc6+Ff/adrdHPu
D6tbZttvKr/T7jlUbZ74zDemPay6x2jo0/ip9G1uIt0t78855Nu5S2RzwifS
gink8VDOHQf9Jpy+yQ02n2vOC6d/5qro+62j6V6xF11fkyztJTOdNiWcJPfn
rfMrctwK5Ft1S44bc9R/2uVKmuxaGjZmFaVFrW0zb1C1ch8Vn/gb1X29jW5d
KOQ5I/zc5lnuWmFOwdeF7l5Zwvvdl2+97sIR/ApzJyXZpClfoONX8BnfGZzT
jvwKdIXO0H26/wtsC33bwFbMbwjbwYawJWwK27b12fDxu8LX8Dl8Dwzoniuw
YYwXWzkWYBLYBEZxHTAL7ALDwLK5OUTMQYpYCOoSLvEqIkYQK3LnIbaYe9zR
n2Pus4Sp1H2+af8+xGpbZtbYI3gHQX+eca9e1vz5MPUP1HT0a9O5WrmMZ6u3
RZDDvpFhPn/80WxTjsXv3Sf1fqc/h955w7W575HhecO93qJMZSj5NueOfSOe
p6SUsRbnoOv3DvND7zCXYH5GRN/HaeMsC/Mk7BT8jv/irDjWX/vdTeZXpNx7
5fbJdOfSh7qcfcSWF037dMVHt+zZVex57JO0MvAp2r38WVqnCqWbP8fTyc+M
ZrmDUzj6KiVdeou5i0WRR/T6SM0UugbThMcSSSHup/i/T9Oo6Gjyj3SxOPfk
deUA+TkrDuJXcG88w9IesEfsFXvG3qEDdIFO2r5v0BX3g+6wgcQ16fFPwlaw
GWwHG8KWsClsq8OesLnxs+EbXd2L8Bl8Bx/Clzf1+BX4Gj63VLdlrwCTwCbH
gUsoz5q31gNM4lXmcCz4RrtIsRHflWMFMWNS3yXuhxjDM3Rc1bum9TCIVbN4
z5D0d9R7A+8g53IuR67Zmhjad07Bn9EvDLnkQ19ly+aOr36zmkr+0J1zx7On
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
1b1O8Z1PW91LU9AVqgrOodh4NaVlLWllXrycNN7GOXqpFuB455Z+ZxfcZwib
S7UQyOtb21vxM3t5DkaxlXoUtukz2yhltJLrN+qGBTGHYNGW3aSZI/b4jeeg
eMygqk5m7n32HSFDZI/hGlxrz9wX9g/mvnSzzH8wX+IZzLqnjE43i4/W2ha+
gs/Yd4P0/CZ8K1dzpWmeUd8aAQaBRWAS2LS2t4ROZ6nqwOuMeWAfMSDrO2GT
MyOCSeW6weL9ynutoxrXln5niFGel9NBfcLwjjLuZ+hcD+/Km7+Q3gw4SftK
0jmXuaX+vx94LlUrt9csoz8tDacLS81zJ9palrvWalmEHEsU/3++s9QjaWZv
X/o2M9hsnjv/kIbefPtjqlDvo8NFy9geO5XnLXIrnONemWr2+d9UDqaVx2rJ
Y2g2qRcWtHsNxX7VdtqfdkyqexgXQ936Sz7dn3acDuU6mF/ZlmwyW0UrHs8s
Y5E7hmuqy5Y6VnehG3SErt1c06nPmJhmvY+xTdrb7vAt6lfga/jcHB6AFbN8
QjPHAswBe8AgsAhMApvmeD1geuYrvhLGBdaBeXPPv22lZkVfLqbMoD8tDuWY
7Kj3Ad5FPENI2MMjsIlynHPtH9n13adH2iVfqpWzsxLpolqeY7mR0JX8Ilws
5Hxt6xemrWXhfL12NosCufuuFBb3Ks1fHksT3n7F4BrPNzyp0s9wr1+ExNLJ
WSranTuUbmT0pFut6B12MDSVaiITm/s9daMb8ab3aIrposuXJ2XE6OahvBUS
aJYHUPQR5z8RbGAXn5DzNMY3nsZNjqRRk2No3KxI5hwSIg+ZtaXbxH30yqw4
8o02w69Ev0hvTl7V7vwKnoFnyXIrYm/Yo9v4WrN6QEee5TKrWXdhA9gCNtE/
DzaD7czZFTbXznuBL7R8HHxkglfhS/gUn+Fj+NpefHA/OoEtYAxY+yIkzgCD
wCSwqb9HYBcYBpaBaV+Bc2AcWAfmzdWsWOoHJieIxRtmuBXEMGK5Pd8VeBc5
16O5HrY597NLplPlqakWz+F+YVujKNVCvzDI3e+rdbUc78emUsGJkWbP/V6c
66G5aPAdek2hJ1lMuhf3UdpzcZbFHDfP99hsmINfXNuPZu9ZQHlHQ2hxtTf1
TZ7l0Bz/bD1+BdyK34YwKjvtQ29s+IRK3Lq3ma8A1xRzak278yt4Bp7V1v1u
GNSL3lijYRvAFvocy2wH8yvw5eJd3uxb1K/A1wbnbDadj2MsqCNBjREwtuD0
Gqo34piASWDT3PXA9HtLchnjwPpdC+fa2w9s9qYpjgrrNq+H7T3lXKbLIN/d
T0UaV/tmcDhKlKNTdH3BdDnsPuK/723Ii6MWAT2yLJ2j6PIZ1R14k6hiEEWd
HUx1zXO9ZfPsL1eL/yYV/yojKT6wqtV58S8CZLgc15baBsxzv/CalJsHz4C6
AFty+6jfODMSvIQNnEHXamqc5EOlQeFcp5Dj/heL56PXldJ1s12+U/vMJ+XI
5bLHvrj4jhB5fgXX4Fq7cCL2ZtyPy1igI3QtDQ6jBr9JVORSZfW+sCVsCtta
tSl4GOEr+Ix99xr6m0mcmVyNEtsh4FSrcQQMAouMye7mcQtMK84PZowD68C8
RT3Gz+f+aNb0rQMPI2JR/zvEKmLWHt85SuTeU871cK9uwQdob3N/sKZLlR2W
T72auJR6R2yke5fMcyaytSzm5rI0S9acyRTUKZSCHw+nyA986Vv1QpNnb2os
JA/PCh0fUbFuN+34YjPdrpxAtzIKZPfLPI1M7Yo+D3Ti3mTyC1BTULBpL632
kL2q3VL9Q+Jx6uaRS8MiVFINi8p0XnlbpGrbMqoqWWE3v1JVkinbN6xtOmtY
x/ci1KxzdeLJZp13PxCbw7fwMXxtibe4a6GGBRgD1oA5YE/LF709rII2Hio0
5fXUC2j+n3wZ08B2Zph8zZeuZkU3Z8V8zYqBiBjsHbmRY7Kj3gd4F/EMoU2p
1C3kQEe/Jp2rDety41ftmjOFnJ+1mE4XyHMVFcnTafYbM63mfq31C+Maj/ho
mhnzCvdM8s3vShM+knomIX8+LbonLc+Iprc+eJ/P9Rr+Cu2aHC273yshMUJS
qDI5iC7n97Krd9gu1QjW9+uk5/mam7Gm5+xW/Mokx78waYSZHHmLvPPyhzp7
hGAWyS8DyWv6ZzSO+YV5NC5S6g/mN2Up+f8mVNaOruNrpfoRxRxhGzl+pQeN
8ktpd34Fz+DeVsb8itgT9oZzXM3wK9ANOkJXSed5bAPYAjaBbbTnwmYW+8QJ
m8P2xtwWfGTi31jJp/AtfAxf28aruDCGgKXK5Jl0WWALGJPDHjAJbDIufEcz
ZoFdyTY9GNO+KqkXHrAOzMvpZa0fmAmHKWIQsSi3f8Qu9G3v9wTeRc7lXA96
LUW/sLIYi/3CIGd+uK/rmTTv/L/luZh79eTV8KV8DvvTYVR9bR1NWRNA/vVK
OnY93WB+CefVK/rI5uAx8wN54byT6RSw2ZVm+f1f8t8kf25rJLw5f6/PreBv
zDaHvmXf/mzRNtYE9TsfXSlqd37lo6tF/Kw27fXfxDpDd/xtzLGEO3K+vfBh
wOQ+NKPEjVYL38LHZue7CGws1pvLgr5zR64l88wY9EUr+3K92d5oYw7+g+7d
OyR7LP7yf3S4/uzufas8jt/2OLP9wJzLudqyTPKoMr8LfxBS2rmG6wb0f2ff
oNuL9evR+wq/w0efLGvnvpiUQz9oPIiqX6fnDoXLnqPpUkopfrupISqaSr2r
Wzd7ZepxKu5lypUgL1zV5y/NOrbUPiC3X+ATTcqRtulcNGkei7XzNJ01dGZQ
OFXFxFKBYjL3DqsaL80ikTs/p9c2Om5nDUvRsxq6MGIG80XGx/518U0hpvNX
mFsS1+Bau/Ai9sZ7lDkGnaAbdFQrPmSdz7iHCxtYrtuxx54Q+Ai+gs/wN3yo
5brgWzmOElgAJlqDJWAQWAQmNV1LZff06wNzGdPA9stJ2VZ1UHEftGCb+sYx
PnsZ1rYhVhGziF27/Ndm2WKyF60418O7ZqZmU1LqAs5l/ngsv8PyqdvDFlB/
/7/RNtVBun9qofUcMGoCcqValu8rXel2ruXf5Ae/9wEFP66gmU8HUOGcRQbP
rqrPpndHVBr0BLu7Mpf+sTGCfij0om+2fUDfGvEst1SWnwf54V+DKS6xgIaO
Mu2l1W4ci7I5Nz8nk1zeXEV7U45TXVqTY/mVralC0u3nV8Q1uNaRe4FutcuO
s67uYVLNDmzwoOz97qhVFCt8DF9bwwMwY8CTCEwBW8AYsAbM6fcKAyaBTQMu
ULGIMQwsB3tOtPg8xARi464NNStaQewhBl0//BttFTHZUe8DvItgg+VpCyhw
WXZHvyadqw1r86b2rV/RysVZsXS8wHQWCWY5nJ01j2a6Wv99vS39wt4ZPVTg
crJUBxHxIo3Z0o380rrqcvmoU1iRMZN6Z8VRjb98jrtFpN5hnygy6Ki6X3Pv
MHP9ziS5nN9Nura5L9qN+G4m16yfbbr3tyZP5PoJv9d7mOcC3u1qwK3Mfmo6
/+01/TiNmxxNY8A3RERyj6y3/Brk+RXvPTqOo2fsVFN+I75Hc5+t9uVX8Aw8
y/j52JP2HOxVTofBkw+xjqwrdAYnIWwg4WO6AccCm5ntuSZsDZvD9sbH4CPD
upNudCOum6yPzdeqNPcAE9gBhrQ9wCxhDpgENoFRbV0T1/kIDAPLwDS+A8aB
9db3A9MTEXuIQcSisQ6IWcTug3hH4F3kXI/ueljmGlSfS6HUT9PtusaWfmFa
GbrrtC4ffffnWwbH7t8/Rf4n/2XxenAqx75aQf77lMy1bL6yhubVDLGch9/e
h+ovxtOMmiX8t0ekN0VVDndYnn9BTT8TbkW33+v/w7qqPx3eas4CtRXGfbba
g1/BM/Cs1u5z9ZGhrGvql4Yzd/Q5FtjKUXafV+FJQ+eM4M+zapOoQfgYvrZ0
jaJmMJVeXcP7QT809OnKPvi6Rb2ASWBT/7sff76hw/HQ6iartrGlH5jcUp5Y
QZXnltt1TXush3FOlHO1LHP5y46Yc1/nE8RzPPS/q+peSHWumTbfA/2gpDkS
tuV7B1+eSP9b9grRgTfpqbCjhs92KSGl93KqKtpkdy78uN9+qvH7OzV0kc+D
497amTLIEWtrII57S7xBo7fl2gytIJ9v3E9N1p/PbOM5LMXzJlF51HyucVB7
x9MFz2Aq6mqmFsLbPIdhVrzRs8s053357CtCept8z+d628fj8J7MXIM6HehU
MD5e2LWKdS1V+LDu8nPbW0Tb78qWeiC2qfCR/l7gQy1fxbNKXMz4TGAC2ABG
7OZZBBaV41NM7v3roBNEh95kLHteHmfT/hEj0twi27mtGhGL5S8b8peI2Tob
5uA4UqzNiXKuh3NVKLLphfi1tE35Jd3N7JhcKiQpcQktCtFwX6fiNUfop2ML
bMoH4/f417dOlGpZiieLvxWGx9Xh9J06km6ro+lqdjjN/G1A8wzwUDq3WPp9
/p4d6fTHUZWy81a+z1gl7hvEOfAb2ybT7Yx8aba4mdnh+nJjYxDl7Uglj+fT
qSHzweT79WexdPt9NvX2XSj1WcqvdCC/soJrWOznV8zzMq0R6MT90P60kHV9
UDNXtAKfwrfwMXxtFa8CM8AOMHRj24eMKWALGNPiTX8eCzAJbOL7iwnJFPZk
KGMXGAaWgWlgGxg3jAkFxwLHxLYJttWsCEHMIfYQg4tCdlNCwpIOex/gXYR3
UveEtbR1jpNfeZTXg8ib6nMsBwsG6HK3mJWtPdYUOJdm9rGVY2nuF+Ym3y8M
EpYSS1MiX+QZ6j7Rz/NsFt/Y53U563FZL9HJvRo6eeAaHYzNsrp3qXfYKtqd
O4xuKC33DmsKTKWata9L/MriHrqZHVpZ7v+Uaf+vlDjeV1jcQLNzNDAfI+Sp
MANuRdfbKUSaeT8uBP2yYikh0gy/MnqnAc/RM2G8Ab8xKq1nyxyXduVXYvlZ
BtyK2Iv+OdirfG+wBtYRuuI86G6Ij2aORdgKNjM3dwW2xnNhe+Pj8JG+z+Bv
+JJ7gwnfwseWeoABI8AKMGPcA0xOgEFgEZgENiUu8HnGLLDrE/k8/w1MA9vy
nNFjHBO29gNjETGH2NPuAzGp63UnYvVBcStaca5Hd2GONTiWjl4TKpJoz/lk
u6+ztV8Y1zicC6QFY72lGR2D+tCZ69JskZ9/vkrhF/9jNVe9rF6qg8g4GED+
e/LJK9STfDX5pKydbjavvvrwcIpfAR6mD/VRxVF2baCDaih6Uc1X8tyKjl/o
/zwNrDxlVS9zEn50NR25ntLu/ArqOfCs1u5zYPU51lXWBs0cS81XaraZI2wP
f/dZtYB9Gp85hPIOm+fMUvf4U0CNhJUJu1ZT9pEgxhCwZNX+ApPAJj6fuBpP
ee+8ztiNHzOSsWzpWnv7gRkvxOLY7R3Pu0btT6T6S0kdvQ3nMrPM5i+7bXqg
c+6VrxVyntq49qHOVUlV3S1zB8aS47Gaaxes5dO1UtD5IDVc96Qv1nWhr696
0J/d/qWzQZHCj9I81tMF/0arue/GSZ/QF4EXSD3S+myXxs7bdXU5yMlj/gp/
Hj+L1C5VNvcIg3DdCM8+sXw+Zt2jhqM0WEHHgybyd6pe28S1waQaliHsZcgF
5fTZYrUHl7GkDVlpUv/R0GUb1TV2EfIb/mywd3EurrHnGdgT9mb4/RbKGZYp
6dKrWY/g8awranegu6V7wnawoa11NNreYPBVXbON4MOaZn4Fvm20YZ4MsALM
ADvW8AUMAovApJb7nOJ6i/71pQdjt/H6O6Tu3GibDREbIkZyPFR22b6q+waO
ScN7beHY5Ri2415tEWv8r3M9vGviYi/Kq7/aYbnUOxnpNDYsnXYkHNDNzthU
eJJ+2hdjU15YqmVZSnd2uLLgM3LPyGXLPa82cpGUp356BgX3iqTqlYnkPa7S
4ryV7zJUdGPrh3Sv8H36x8ej6U6u9b0hr13770hy/UMBFScWPbCaCu0slpCo
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
prDfvU+fJUy1KWd+JzeabpS9Tz8W96V/lo+g73MX0Pu5x+jDBRNpZ57mwfMB
K7dRXdpJem7QUnpp7CLam3ugbfyKuoJqdyjs5ldqyyOoas32Nj0be3953ELW
BTpBtwdtT/gQvoRP4Vv4GL6Gz+F7WzByKiGAMQVsKd4cR99lhjLm5LAIjAKr
wCywCwwDy8A0sA2MA+ty134vU/OFGEIs2RJzk6fXUs6cBzuDJS9iIfWfo+F3
Et5NzvXorg7jVmYtpq+TnzfI6f7/7L0LWJR12j/+XvX21m5tr63lWmlunsrX
zbJM1821XC0kUZIlTUNRBNGRUxwVUFAODidhYEdFIhECBYRFR8QARYXKivWw
qWuZpnZat16rt+2y7b97ff7P5zvOMIfnmXlmGLD2x/e67svhme/zPd2f+3vV
fc99f0x+3ROLk+36b/ZRjiHYyjM/C8eM3/ZD5LCbEOr1E2yZE4NzIXGy69i2
aR8uHai38X+vxYG6TDMXxusqfeay+QkXR+G1ujwcrDaO274rH4+VxWBq+qBr
Pv7+LsdWhETdgSl+q0Qcgjwko7wbZc+C/CQhERsRE/Unq+fxmgbZmMYz/qnm
2INf3B14ZK7KWmEuxFc4Jsc27ZNzyvXjGi3XzD1wL0qcKzwDwckivcuz4RnJ
nZ3zGEt/6bt7MDVzMB57JVrorH3XWlG7i7qkTt3FA7Fk4vwhxogJy++JRWJS
DqvEMLFMTBPbxDixrtYuaEO2Y9LWbOOcQlLuEjZ6ve6Hvvbjb6+cyEbFu73L
Jx29Ow2rGj3DvaLU3rmQgqfzq7AqYAEuf1mp6HMPbxxu5fteUjkON8RUinpN
q267HYdOVBu/2zEMAfXDjfGY6mGCm9yZH73ixHokHC7C3PmjsaTqMeS9XiDy
IIbp4kStqYUVo2XjMpveK8DMEnVc9s7klbH349GNBlV9Xz5bisaLm3stvsK5
OKeavo+W7BV76e558ExnFgeLM5aLkzAvhRz15KonZz2565m/4h8wRuiSOnUa
QyE2JIwQK8QMscPnbccqEPvfdwls3RBRhqU7Jlq9RywqrZsYJpaJaWK7J9sa
yTYjd/esfdq2Pl77H3Zz1a9pGJUvOKU96Svl79tLg1NxKuCsMXfCNiYSvAn6
oC0e8QVTEgIa0JK4AuVee8zPyr0MxhhOcC6KffagOO8l5GYn2P2+n35sy7W3
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
s8r3lOBfF3GUdVnCv87PlvkrfBaZoRWf2ZfvCIzcWiWNlWGMrUhjcw7OxTkd
xRbEmqW1m/7mnrg3jqm7f7vYszgH6Qx4Fq6eH8+cZ2/JZWPGtaQr6oy6ow6p
S2fj5d54FPWVxlpgOkN/GFRw6xB7avK5iGUjtnXSv+GICd8mME/si5phki14
yq50AdtE3Ebpe9o4bd0U13GUA+YwtkK+HA/UJ+Qd2NeuX7vybrGdL7V2yy48
lrBecEz3tD/V/6UUvJrQrNrPSz9rfef7+K6jSLz/RVYOrpREI3vPJYx7ohbj
xlajJHaf6vGaT3VYreeLTD0ub5+Fq2VT8b4+R1VuAjnvyVMe1G8GNA8becqV
+u5t0+C3z+SjJcuAjrJg7KqJR8fWYOnuWY/9Wd3gJXFRduUdwIDJEXggcplb
OSyMN3D9rsZXOsqDpXfdiOlIaxwRqRFr5tp765yoE+qGOhK6kvZM3VGH1KVi
nCRnqeCsJyaW3zlVYEQNlog5Yu/y9pkCi5bYJFbV4po2QFugTWTvuSBshLbC
cWg7tCHLuKozeTWhFf4RPV8fTCfdOWPj14s7yC7PTLqr+tqPo3395pHr+rv0
hpQg1f5dU4xl96pwnLXgiriU1B/xs26DZtLtOBA2wKp2khpxVi9s2yuHcHJf
iXJughOecqv4Sms2avduRbshG7kvJziMrVjnoUSI2mGDE56Fbwprhw20ixeM
zHzUYU0u37mrMHXBkWuxiRel/8c4htGPbMWLty4S39nmvTyifdBh3sczmXdh
qp9MHEIhvsK+fMdhnTNpTts8FK6Na+RauWaunXvgXmzXbSs8E9s5WIfMTzrD
IQnTxZnazucoxkKdUXfUoeDSccSxwjpwImfFiBGlvsQWMWZvH/L1wNQI+9MW
aBO0DdqI6TvaDm3IldgKhbZ6Pe8K3lV97cfdyC1d1Qs89+NSZntknHcurMYT
ze/h4aoOXPyba5zstvXC1ihwsJil1rp205UvG5A35A4U3nkjHsyuhP7NJxXn
qjsRh8yzX2LH+S1OYyuWz/k34yv0s2veKhJxl+7EFnIOjhWxCtaVkl3nu/OM
Z+LG2G7HVyThnLb5RCYRdd6kNXPt3dl729lwkQfCGmCFZ0rs5nMWYxG6k3Qo
dKkwR2HHE3iwsF5ggtggRiy/J4YcYYwYVKoHpkZoA7QF2sSfLqzziI1NTHzW
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
0CZps+M3RXryKkDryWgsMUR7dMy+5tnmaf+kiAs44bm3rQ0WGbrdod9c+M5D
c1E8W76+l9mXe42/ntzcSnkTJuFv+ZtSVljxUTiShHVZ1+orKfuUjwd4Ln+l
5ZZalN5XhvSgYHRO9MHx8J+hpVC6gwt/hvIb1dW0Sh/3BxyfxlyLOtXzdk4L
QcKAdpyauBA1PvZ5RpbCWEZ9mT2HvElSZ7+GlpQQG+6OWqEn+ufTNaVo0U9H
U4sxvsLPfEZ/vJFXveusOQbH4piKa5LWItbkCEc+xr0l9G/H8SnqanxReIY8
S56pmv7kVDFs/m+hs+Pht+HIxFlCl6X3lwndegonxJzyfmsFZhPWqatvR76h
lpQVIibjqF+VV4OwMdpasa8Tm5RsVuSROYrZSLbPO8DymaMaYfX9X8WRkZ7j
te+Lr1y/duK9atX+zJUhexCfkIgPyzTXYiyu1wq7WpIl5izb+L/Ym3oYTyzQ
4Ys0+d/Lk3ubHNzLhyxFS0S8/O/e9cq1lWx/r//Z6VLsTe+02tOZ9yqtxvtK
m4Nvder93pZyJW8lLteNNdYM22z0n7O+04lmDTR7EvHLiGrcN2QrfOfqkBtd
jBatkUs+OHIb7n44GAOmR2DYDGNeR31lhtMYRE/UDGspqsXvV1Vi4LMR2Bj/
PvbplOtxVa4pRVioHndkZuC+6BSEpC2CLvoFvJEwH1/lLIXmbi8h/MxnBS/N
EX3Yl+/wXY6hND7n3hJ/RqzFN6FSrM0Te3RWC8w2dkRd8PMwv2VCR9TVgjAj
Dwt1uEHSJXV639Bt+GVYNUJ3rcTx5mXm+nLEAjFBbBAj7mCLmCQ2LbFK7Fpi
mdj+VMK4s3yurrwY+fyT/ZHxwuaSZkbg49QU2T7McaHt0oZpy7Rp2rbrsRW9
uEt4p6xclYj4EOe8MibhnH3th9m+eKt3a4OdWJyIOu1sXMoz+oN3509V7Gvi
rw8bH4qQW4NU+Ygt5TdDZ1vFWF7yuRmXkjwRY5GvF/bNW3+286UfqMtAVeMf
sPlYOF5+JxEvH9ahaYcO26rSMFMTh2f8okUuyYzF4ZgRQd+9Ok56NTLFbxX8
oxzX4PJbNwiDY3wxxYL73W/eGqzOfUNww4/OdI03xUqW9jeKm+9zbq6Ba+Ga
TPEN8tQPjpkt6p7Ni3JQu0zaO8/AU+dJ3VBHM0x8OdSdpEPqkjqlbqlj6po6
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
5BjUHPpvEQMrlamtZuSlj5CPnRVo0Hbip2g7+lPxWa5PbkGUWIddXE6ai3Ny
7pjTD0GJG4dr5x4sx+Aec51wqTDnh2fWohBbKe1/EPUXnxJnTx1QF2p0Rt1S
x9Q1dU7dEwOiBln/XQIbzGcReRoSZoidJhe43IlNYrQ7GKeN0FZoM7QdpX60
Odqe+VwDthlzWYI3d8VeJD0ZgnIU7VvYvtY+tsa7wnY+3imunIWr0td6r3Wc
2euyP5MyIPi0FR/Kx3k6Y4xldyLeObML5Rs+cTpGffIBPBts9K2SS5uc2nL8
9Y7E0sdvKVfqRuFS6SJzjET4lzfb+Kl1y/Dp6YpreTB5wj8tYinSe/T/f1Pz
AL6X5J+fP4434A/9R9uh21qH9OQKPDt/O8aNysf4oevx+xd00MUWY39WpUOf
vWHDHuGHp3++Mcc67sE8CMYBRA4E8x/Kdajfvlb45RcFF2PAkFr0f9iA8VPy
VMUHBHd7mV7ka9RXpom/XYlJ7MusxG0vvI+U+EUIvXsUUjONsZNv9MtEDMR8
/tp8UbOKvvsv/jhadXzli7qHxDt8l2N01WfLMdd7S82cKOZOiV2E2wI+EGty
ZQ/cM/dO/vqdZUWqz+CJZ/LEWfPMXwwqFjES6kLoRNINdSRiNrZ5R5JOqVvq
WOjawRzEij6+GP7zdRj/wHqMG54H77nbkZpUITBGrBFzxB4xSCwSk8QmMUqs
ErM8M2LYli9I8L1ImDfFZvjeFdsYo0VsS6290Tbjn40Qttoh2Sxt99mQDOxM
OuDU3nkn8G7gHcG7gneGaVzyvQwIUs9rbym8w/raD6tdePOSR32dJxYnoyH3
WVzKVucXbsicI94jl/aO58Kx8D71/PXuyIybY6B5qCvGsnnxTx3npqQY/cN7
iiZiT0yM2J9pn7tXLcfB4pHm3++zztOl1UPQWTQIOwxfo31XF/fGlrIETF9s
m/sQrYprxbI21TNz3KsZNnOduzGO/pjxyj3X8kZ6N77COTm3K/kqlsI9uxVb
cbFGmzEHySbHSNI1dW7SP7FATBAbxMjl1YPM+VvEELFkiS1ijZgj9ohBRxgl
hs2xFQnbxHhP2Y+wTclGaau0WVGjS7JhVXle0p3Au8G0T08J77C+9u/RyFXe
ejLWY+P96a+NuGFFqZG/vnGB63EVC1nT7DlftKilVDsMS3YPR2zTSKTtH4Om
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
yswfP3vKXQgN7GSz399tjBCN9Ku7+uGbnEVO4ytyjXIt7+G91uOFPtcJs1/4
U7PvX5mDUeuFc7OOsVjEjZS1ubIHrPXGPePeBQTnubzfxngYz0orRnUtOzG5
OSEfQ3IOY+4T8Zh/TyhWPheDOgXD35xLNF23vyxWsE7ME/vkALlATpAbWpwh
l1rCxSnxyzE3ROX2FIXj5Do5T+7TBtAWaNcMO4KeMw/hTFOtQdoW2hjaGnds
E21Ze/t1tHcOu6e98s6sFfI+/eUMD3JVmt7Z/3jZ/Vg96TYs6HMLnvxz0DX1
+069ORTD7gzHk48+jKCnOkDXr7kmmKmmkvKd712heLJnAMaP6IRDC2+36wO/
3BRXsecDN/Ya3W2I8LoBj00NMtW6CkzuBq/J6WquhOQ1xLlVg8phTauwSIzV
RYluiKNrB6zp27IclmX3IiDZzZiHB/EVPoPPalHuirJWxzkrC2XPZO881LQx
7yODFsqZGvNheNYBypkHRalrJxaICWLDftyxOXZ32UHsjhglVolZYtcerol5
Yp8cIBeuJdee/PNzwmly++OltrlcrnbaFtoY2hp3bNOZI+0aLP8pzRMt6uM/
/FvyEr745SrCtjvOE+B78jM8ed++WI2vsD5TQm1fySOYXNHLJl4zufBBZO2f
j3mVqfBODoB3WjCiX01FRs0s5bn9pbaT8dqcg+FS34lxlcjXNyK+crjL85lV
8rD4zweXxKP8vUkyt7cupWNO47oWxwga//WzqaZVwsV/XZPYirEP3H4Yj26s
uubxlUc3GjDwlYN2fm+dGEvuJ//XtG+v/s+/W3wO895cj7c+WS2fy88EwmdX
ouBlXqm3yziJrfBD9Ot6wRjvzX1d1/x7CfNVlHPZPx3xBgWvmdMwdNFwzKlY
iZz9EZhW2N8mHkLME/vkgLE+nXVM0ZVODjqrSUYtoi9++Zdwu/Ffv7hlE+a8
Eoyqdl3730y71v7KGpPOfdN3GvEV+tGb319v1q/Xzy6Q+kLm1x4NqIG+/+tO
n5vn9QrODQ5FZceW1kraAUPnUvHtch2qBsY60cXgb/W3lovfOa+XpR6G6KiM
DoFhopqfwhye7NFLxE+e7Z9sVzO9NTt1Qph70fOoTjRKTud3wONnxzXnBvlX
IiN3AYrWzEOBf3PspT75ReT522qlFAzfh5rCUZiRbKs1b+of3Ib6s7do/sY8
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
YlMLs5dXZCKk5DD+NnadgvEZ6Bkci/C5G7CzCQPCBYUT5AY5Qq6QM+QOOUQu
kVOe8vGAwuX7Zn8g3CbHlypcf6TbXuE+bYA9+9B9ynmxIY7Gpg2iLXJmr9rb
r6M59lnGYF/sQlXL3UMfqfGd/LMJ3bBo3G1Y0Ks59jDnid+32KdLLe/He42D
31NdEO5tGUt5LNAfwYtjsHJVFJYm+2NmXE+MXHU3eib7YZDU6rKKTwTG4Ol1
3khOmYDVm6Jw+N1slO+eaaat4qS+UcKdiBvXwWIOj4fNtI0fNNULGzZmscva
Ka526oaMnNSszWKtI+IXuBCBMZ7HLKTHdkPgBjdqhLkZXwnc0FWe0ZI5co1c
q/XejKK2iuyN+xorzvc+Rs7UWA/Mek7Egjk2iBVixnlcUtVoIRaJSWKTGCVW
iVnreRDbxDixTswT++QAuUBOmM+BnCF3yCFyqcV1wp74vWlscp2cJ/cd5Xq5
0mmDaIustZGse3v7z2nUpKY2tb1WcWaKaGA/ukxvUe8pviFZNOPd8WHzPXyL
+kalqgYFNbuTrPzA5rEV6lZk1KZgSH6smR86CfNKBpv8yNQNN94be3AwUo+s
x18WTcJDhenQH05UxvOwrpJV33UmBEHFEXh5flfsPz+r1fz77PvPh2Kxv5/E
Dtb7/BXHP0hotdiK6dwu/q9b8RJ34ythkyaLf975te7FWOrOhyP1mSGyN/yX
f7fm3r96NkTONKgwHOXvzW4VrBBzxN7A7emCxRWH1yP+4JDms6hp5kNYibfE
VsaUJCFw/sPw2RQtsRfGYMxjLOZzJmfIHckRKzXDtzJmgoMaY1q94fwS0Ysx
/n316ht4NGWzcJ82wF5LOJLSrmv/G2zX2mdp1Ing54LR72r43auQXT4RCcnp
Fvr1ookd3FwzqqbJ3+qoF3SpdOhvttcbOpajrMdmKz90Po66qDmf7ZuFsmFL
0DBuLionzoXhpmqkDc0QX3jZxHDxj1PHnJrlp4fPwLlHZsi/9L1TX0NiJoPz
kNG/ANk9dkKvrEPfpUL89Xn3lSP7vjJkDNisjJkpvvUtE6PET8/xz3nPwNHR
s+Q7+vbpoz9qlqvAPTeMVmMMKcNOouat26TeVc0bt2HpsDNqXCS6ULROmEOS
vSYBcZHbbWIrxppgumXrUbZmnkWuh3mf/G1vG10UY2ccIy6juRaUfvhBk749
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
Tc3LIYfIJV5LbpnHWsk9cpBcJCetn0nuksPkMjm9IbrWhu/UvKct8PbeLZ+N
309SbAZth7v2hjaKtoo2yyJeo9i09ta27VDdRxa+yRMh6di3YQgup7VCXKVJ
v17ndzsW9LzJ1q/8Z1XzxJGvdvLNYXi6cxie9HkIwU/dBF0f2zHYgx7uhjnL
4ppjKotV7Q3Wh/ILdM2XTl1z6meMfDYKY4MXwivjMdUvvupuHD7aEyf/3lf6
x6eH4YdLq1CxN8S01vJ5tyCi3w2ac1uWMk7T1z45hroc3czqhbW+z1/1+9tq
jDyQ8FwL4yvq/EcVMcbiQhzExfgKx+KYsjctnB/XKOs306ZpDY0Ve7EsUz0w
nqmd+RMLWhghdoghI56ILWKMWDPijhgkFjkOscl1EauMGxG7rsyTXCAnyA1y
xBhrIXfIIa25kXPkHjlILpKTDuMrCqe1xolWbABtAW0CbUNL7QttFG0VbZa5
DaNNa2//OY3a1BVmOvenL6WL1vXAilP44LMNNr7YmjPhUhPIkb/WqJ0yx9Bb
rQ2mUeuLmhT8ne/hZzU8InXK6G/XvTQG3mtUnYpVVdNgoQNeqOpJmOe7NHy0
EJMP58IncQwSGjYguuLpVvePm/quXmj4JBdJZzbj4KfrTfXCWtvnz/7yZ/82
xRVKv/q5xbEVY//s5/+L4v73ofTUhFaLr3CsVx7pgUvK2O6t036Mpe675vXn
XHJ3XNe6sR7YwU/1WP6eeqY842uFn8hyXyxWMEqsBjXkKNhtzlEipiUXxYor
K6qCsXh/KrxzQhGf/TQyjq9Gw/kE2S/eIxwr0Zgzx6lQOWau4WKvk9M179nm
Bf3jk3ViCwZWvad8zjLZiYqzGYK/9vbba9fab8mu6ty/BANrWo2uMOnXV4Zm
o2B0tclnH52eob7bHlApv/FzQ8ABFPVwrKNSRm0IqVvkyA+7Q+InjKMYfcqt
oQPO2AZ93ke9XsSlKQ+gdPA80cnQyiW5Xt3QsUpyJPICFkgs4OSw2SjKX4e4
aVUWevb9zweaNEb6Hw2XHJJowyRMPjNC1S6xo2VPzZL6ZXMRF2Jbv4v97qNR
Mm72sKM2v5VSVyWkeQ7G+IopRqL8Vmql0yKxGWUszvPuozrt2IoyF87JXEvG
OsbCNQ0/PknWyLX2fCPSpE0z8HxA8xyVPeI8uGfcO+4h95J7avAontGybp4z
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
UV0xcpeypoTOntXniuqG8Vvuhb2aWI7jK53Vex3EmxzFoQKVOXPugRFd7D9f
o3OPuFfcM+6dM2zYqwemHe+5VzMviFggJoz4IFaIGa0xiDFijZgj9jzGrfAg
TuFAnMc8IPfIQXKRnCQ35ziKjyrcJsft8Z+2gTaCtoI2g7ZDbIhiS2hTaFta
Ypto22jjTBo2iu2jDWxvv/5GjWqjfj21q5fXUTulN3QN6VjekOrY91uZKvW9
rL+n/kNW7TL4FSYiaN4AicFk1CYjepd7WvOTK3tjxqsPI+fNLPRJn49eeQux
vjEV07a79g7+te6M9dR8sMyhL99YLyywckmr1wubUzEf+9+ZLZ/1f38aj2YX
S2yCevVffbvL7fFyPvm/WO43zK7WjqP4Cu9ZPMZfxnD3uawptukxtd7Zoymb
8cqJ0fI91zZn99xW3bNd76j1wHTHN1jUA9PqPFvGNNoaZ+zEvL5xJXq9lIg+
aXMVTqzDrFcfEY64M46u1Fc0WqjVEhzaH0OEmymI3T3c5lpym/lljsZbodiI
MKXTZtB20J4wF4qdn9vbb6+1ht+Svle+f07fq3ktIb7vnudTLPrV9nyr1FPX
hxQgw/dd5AUsknfx8wLisKXjQfGx1vfPQsO00SjQPY+yHvmiF+HpPOmHLrjd
gGz/ZNEwl1jJ6BBTbIW5ABJTsaPzze9rAlT9c+qPm/+W17dQ6iY13Or5/Frd
Rz/urJpX4n8ACcvWoj7hRRSsiUHCNNb3Klf3X9n72RnZqF8yF/qcOBRcuUPq
aZ3e1QFpy5IkV6Ss6VpTTGz4Qbleq+bT8G8HyL3mNcSK/Pc11QirwunaDtL5
md/xN4taUcq9HMN6XKklxzkqz7aMGZXLHLMXpuB0paqxwjXkKWvh9Vwb16he
Xy5r5x5wL7gnRU21ybhXbX1exk4MEUvElMV5KpgjVlkLzBFGiWFi2RhjMWKc
uCX2CzoZLOKGbs+v427RaNkS+bxws8ErU+HmZoWzDcJdlcOLhNPkNjluj/+0
DbQRNV7N8SKxIbQnXpb2pCW9vbV+M9d8tu5FNd977Lv8Ji0VubPjET0hBqtr
NqD8+EcoWvupaez8+FpMjV7u8D306QnLUaBcx+sLF9Vh5vRqeD+yG96dijFi
TAVS5u+Td+T3bDiEI1tXYE/BTqlFVJ96CjtKtoluN/3Ge4pyJKZgz098oCxG
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
g40hC3F8QRx6Bp1HdcoZHNlsuye28T34qhzHNYv2ZlSjbOdS6SNRs2seynLK
7Z7L+kd16r8TGDf+f28udBiLtt3PIhZXd4yz1FuY37KJuS9x1tesVd+vC8d3
Z+Kwbd0R1OaocWS5P6bvNycPq/RTTb4gMf21cTJex2ug6RvfNOS0fFYyULSR
pnH9VTN8EdqtsWcKzwkf1hXh3jcj9I4xYvzM7/jbOmMvl27WvVx4b57DZ/GZ
3zjQd5quPef0dVpjzgLnzLm7e/3pA/QF+gR9gz5ia+3pU/Qt+pi5nvLxjjHi
izb7BTkw+jx9n/3tD6yyjxNiiFgipogtYszRfIhRe3lnxDYxTqz3DDkvdcE2
hi5EvxfOtJhHjJzFXBbP/oq3um2VGmHMdaFmU6CvllqFzHfZvLAx14Wc1xrO
JOeSe8nB5GJysiVHfyDc/XM9Xvn7aJyqbxLDU3/vufYoNr43CVuqsrC/JK2F
eRaanTj4Ebasr8K2nW/jjaqPULz3YwRlvY+4yHewOPwgYnWvYWZAKR5bHIkh
WffBN7JtY9q9AxY1aCuVpvpdjt6JNzeve+Ph8cwOiQmPmX0KIWFvIy68To25
FHNnr3Gpppa8478iGm+ULHW4XruL12HjsXhsvjYMh/7ugdMnne/dsOTtafAL
SlJjPIqn/Y/Cr+ciq1pRztqwPy3FtHlvyzx/jvXCNL3ibox7pSd8c7qban/5
JN4Jn8V3mvQVfuZ3mv5yt5zLa+z1cmlPTYhr5Ew9MK4515570KK8D7Xn3Hv6
AH2BPkHfcLoPiPI5+h59kL5In3SsAS4V33YFC8QO58mcF2KK2CLGRH9RmCP2
bOssMxpyzWZY5JoR28Q4703Mt+XekZPITeQochU5i9xFDiOXkdP2K24jx5Hr
yHmt4UxyLrmXHEwutsXR5O7OQzvYL/q6nNNi/My+B1mVEdIHgf0QPDNnQ1+R
Ir0SzHuouGozS5KwrDJZYqJ8F73p79m1kfJO/IDwUVhU2/w78T9r294Lc3c/
gKVmuorRjLWi2iuO3/gc2/XCdp5Px5az6e323J1f/mTVM+XxNSXSo96or/Az
v+NvF77/j+n8rE9s93JpC+OcOXfz7+quJssatXU9MJtmpyYcfYS+Qp9xu9+2
0JhrtvTQGslneXzrSqw5FGOVa+a5br7UBWOdMHJLa56XUDIRS/cmwzMnBOPm
D4DfzkTJdaFms+VIIrq8/A6uyzqBkjez3E2vnYcLR0TIDukHzlwG9q+oSdTq
MlUmazkFi9NTkJO4D7t0H6HS/xMUjD2PpOkVyAvcilyfEhTqKlF4yx6pn9WW
PUp+jiY1oAY4rgEltadY96uh9hTrgTWtPVXbrVBqVl2ZfqZFuoqpNtucjcgN
XN/i680tb+QeRAeUQJ++RMsriQmC7nx/U8+U4KNDJKek9vzNKP3gVpO+ws/8
jr8F14wwnR9x+WG5B+/Fe/LefEZbjJVz5txber3oLGrtuQfcC4u9UXvFvu6O
ariZm9SOG9T62nE/d5PeMsr3ifXC+ZWCfXIAuYCcQG4gR5AryBmSK5WscQk5
hdwi+VKKa8g5nYdrx/cnDSg++RGqUk9ptWdeuiZ/873oH+rW4rusla2KDVrY
quXYkfah6CiSl/KHrdLzgP2inxlWIn0P2P9AN6tC+iG0Jg5qbhvY537hUryk
i8XoySdwZO0yVG9dbjtnZdVx1Gbb1khKDSWaprI1UKx0xzJ1vnO9Nfhu/kbD
JZfi0nb1lob8FvZuN9YTow4gGkST/JbvLsbjtVQtHluj9rhqxSnsyziCfS9V
oSqnHNVri3EgpwiHX2r/2H5PfTWqlwbja0O4zd7ozpjUUtsxTov7b9fqqLHm
lzHmz9wV3YAxWj7KLV7IWzFS8lUm930Qkx95UD7vUP+doLutId+l3xh8kxFs
Wlvei/fkvfkM0bVs1LxyytQcOdcaNeeeC6vaX+NSe8i95J5yb7nH3GvueU0D
vukL9Amr/BTlO/QhY70v+lZjfopreooto+8TA87Mg5gitow4I+aIPVt9WohV
wawNLBPjxDoxT+yTA8gFbcUrrAfG3Dv2amHNwqeGFkv+Co36sN8LrwvXkfPI
fW3Fo+RkcjM5mlxNzuZ4yOH8m5z+cziKrz1pitufuthb/t5wPhg7y9fhUElK
M/G/ZdKL4eODpQ09Qi7iKzW39499jKP7P0TJ6+expeA4CtOLcCJcO5fX7H89
DbPS9Bg3JUZioE/4Lcf9iV4YsaL96jL5Rv0eI3yjGrSVFzHrthfx9P3p6P10
MfpOoAZRB5+5byFI9zZiw0+Z9J6gueuczN9w0vxfRNz6GJtrWfx6LjbUv4id
1wbi1Huu9cK2ZXH1Y+E9TcuNGDdlGZZEHsTMee9Irwvzmmiu2GMT9mtx+in2
tQF31AvTrDt8w3tqvVkWNeawGPUVU+7Kou5yjq+uZ4ePz5l6YFxbrjHXuiV7
xL3lHnOvuefce7m38gX6RGv9ir5JH6Wv0mfpu039mT5OX28r3BCDxKJRzyBG
iVViltglhollYprYJsaJdWKe2G+vPSVnkbvIYRrOYjArXS8cZ+RHch85kFxI
TiQ3kiPJleTMr48dFQ418qNDzlWcTG4mR5OrydlGHYx//5qPNQ3ve9d+9A9k
VS/B8C1x8p45+x+wDwL7IbRVDHZF2XR4pvpLLgz7WfM7radDGh5Mj8CDWZHq
80r5zt3x4hZZUS/MrXgAi6qsNRVzY55E3Sdp7R/PP2C7XlhwZQyqz89v1+ey
t8rjr9aYdJMff/pQ8lWWeg3Dir8Mls8//nhW/uXvj68uwpq6we06pup3wzB3
70L53N71wGwZ95x77+gc+g59iL7kdn9ugWm9kpajV06M9Gkx75VEzEsenOIA
ckFbPXN+4VDp0cJeLaxZyDpkadVJOPzhZ5KPt+Kd/7ibZn/1R3TMRuhjViHY
oMcLeXokMQchS9cY82yIfbOWE+sy6fQbED213GZ/DqtY/Ngy1MyvhN6nHIVR
b+EfWQbkxp9Hpd/fJGadM+QkCu5zvc7SL8Hs9TDn35lDMiTWXmOnd3rOgGOo
n36p2f4qztqukEyJc7fFvay0m+f3K59Yj9zsSFQcv1XTTfK64N7iFZKvUl/a
YOrz/fmrUZ+v6SoVh29GbtYCuZb3aI+xyZxDXM/bsWXcC+4J98Zyr7eJXsi9
5J5mDl1lc8/pC/QJd/tlexgxTCwT08Q2MU6sE/PEPjmgaa97Kx819tdR3EKO
IddIzbkGDc+o5RaI/rIIUzbFY86GRcJd+qgN7qZRtx+fX9yE/N3fYnPBt6g4
ewZXL21utk9Aa419ndlbhbW+JG+lb5H0N2CfA+M74G0V+2xqdwSeQUDESqxb
tRCv5W9ukq9yHPsy6iQ2zffsGd8tW/u69IpgfwjGhfnuPd+tL926EnuzqlyO
ffM+Gz8raXWc2lpv0Ul/9qtb/Ux6y7evPSSxcZMm8WECylPPObVOB1JPoTr1
NKrSTjToMPuxL3uP5ApU55SgZm2Rtk7ZWjzfQjPI0uLdPIfnS3x/1XF1vzOo
SDoCz5BVJi2jLYw1uqh/cL7MsdA0gQmiCVxaFgjd7cNFQwl75HqE33OdWFi/
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
7ql5fTDuOb/fpXyAf7vbH91RHyyT9cGiWr/mUh9sZK1wEzmqsT5YpHBYqbE+
WLq3cBy5LvW/vD6YraNpf/v8tV+i9PR7eO/yVvy4P6dN+zI329/+t+3X3z5g
YQKyw2Ixyt397bNbq6c46G+/KfBX39/+61XB0PVt6G9/m5f0sg976Abpbz+p
rwfCHrgB29K8Ovvbm+s/7d3fPtu9/e3HTj2BzNCFCNAnwLBgX5vxSpHiKPay
Z197z1u2SJ979rsnp5HbyHHt0d+e9yI3k6PJ1eRsjudn3d/+EvtWD8KGd+aj
pMR23+rW9Lc/u2+DXPNGSRpmrmjsb//YpGW4P3EYvFN/jv3t17R5f/vFdvrb
S9/qcyFa3+pLrY97Lz430k397aNw/+wY9/S31zX0t1/SXXrZexU19rentiL9
7Ze4ub+9WpsO7W/v39jfnj7Raj3lktZLnb5Kn7XFE4t/Jf3tyVnkLnKYhrMY
4TZyHNeFnNd8f/s65/vbq9/JzeRocrWJJzr729vsb88e0e3Z315fkSLG736t
/e0Pf5LeITF99m73eyVIerkb4/od0d/e8OazeDyrUDSUrX3uwo8/njH1tzfq
LPjxb+7vb6/WpiP721PTcXTOL72/vYbnlYLlB9PnC7aNeF60NwVRu1PguWo6
0nbPbrNnRuwcprgqUfra+wf2kT73GYrLyGnkNnJc5+Heo7G//SJTf/u8dulv
f1Lrb7/k3K+jv/19O35d/e3To1Fz+GZNQ8lnL/scy/726vt7t2aa+ttXmvrb
G37R/e25dzn3FTb2tx9io7/9LcVaf3u11+72y/Ywu/3tI97CYp8yVCoOyPVx
zBWW/e3X2+1vnyf97eMVVy1SnKUX7iKHdR7Wx4ELh7BjxQcWMUT+vf3o5zh9
qQTfv2XAdzkrWxUbZPzPeO/82GrtHe8niuQzY5HLdXswevzr8PxfrUf0VLW/
1EcOpLQ8DtrvhTPYGLoQb0bFoWfIeVSnnMGRzctQnFdkJ4fjhOQKOHyvPqNa
01rytbyWspxyu+ceWFUu797zPfv/91as63pKTqwW5y/xkBwLxv2pAXy8iXpD
nPU1a9X368Lx3Zk4bFt3BLU5O9o/tu+E+c3JQ/qiqSZf+DotC1+ujZPxOl6D
cIn/f8P5F2ha0mdrF1qdl+Tvi9BuXgi9zQsbQ/zknHCvrgj3vhmhd4wRCx9/
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
ez8+YAWurO6O2PHNayum+PK9XbDg/i54cvY0LEkaC7/w38M79Xb0TuuH+3Wh
GDIhqRmNifXABneI3iA9VqQn/d3w1TffF2VKOHuo3KP+7dmsvqKde7f1uVZj
6CHPljGEd0xvFq1e2OBm64Vxr7hn3DvuIfeSe8q95R5zr531C/oQfYk+JVqB
8rGy8ovic1otsEZfpG/SR9tOV5kvGCKWiCliy9uJHB5i1VbejtGIdc6N2CcH
kAtawiHknsyR1v3ryVXkLHIXOcyc08hx5DpXuJFc2nl0zHH8w4/lffG0s/+R
XtLOxFbZ13p2QC/ptcB4Kntc89+MqiXSVyGrKqFVMeC5hU8g61g2HkycjV65
SVh/JNHpmkXutl6vxGD/+/NbHLc31gM77kQ9MFs2L3citp4a79S55n1RWNOr
ub4oV/+xQfJSvvlXebP6Cs/lfb/5pszhPU9+GCfPNvZ5sZfz0tQ4R861JWvU
FvXC9r8fhgdfcdxr6Odi7BVPDP15U7JgKu3IGswr9GzVPVnfS6vzlYDhW+KE
A9iLhTUC58681+k+9+ScjLNa/3pyUefxyzvsxTVZB6yi92qc6Orc+/tH1XlH
e2Ugd8427ArJlB4YherfnOlbUBCyWn131uoa9oI//XyQ5IDYumdl11Jk9tqG
HJ9oTW8ZMFNi3cwx+DnUE5P4shp/bddiGU9OzxKk9d8gMXiDT6SMlT2965mb
46ms70xT3L5S4vYhyFXnZY5KQOrQNKR6GpDWewsMPUokn4Ix7Zquu0wxbfbv
uDAgUOLzuT2LUdmjGPV+zed5NNUc7Fnm87WISF+O0w09VuqLu+CFxC0mvYa1
uaQvipl+M87vHTl3SODxRj1NH4T6w11Ec2EdL+P3zweclHO9p5+20D9YZ4y5
J8a/J6pn8tnS56XiN9CnJ8vYmhu/s1oS14xrx1pdXEv2Vsl5PtGk9XHNufZa
vlCJ+CD3hnvEvcqVvQ2RPTTqYLK3ao+519xz7j19gL5An6Bv0EfoK6w7xppj
7vZfjkewpMZKbGl6SrTMt9JOjg2xSswSu1b3CzmnMP8SDFO3olD3ktb7R3FA
3pytwg1O56MpLiH3kIMccVTn0T5HxdkzKEs971Qc8fuTtvtqG+2HHRn4/OIm
VL17HPm7vkVRQp30kGYv6fQw+/0OjMYaPosXNfZd+SJlGfaGxSJ+XDhC/2cW
etxzCgEzyrF5ofV76HtT3sPhzctQvnU1DqSesviteq11TaPaDMVrG3aY3tHf
x3pI64qkr4TUQtoaKPWQ9q3S+nDUZBTjh+2WNcHYs8NlXYWx7VUr8dqVg26P
zTdnnPveXVGo2xyIu/QZ2KxzrFHQwkaMN+WOmHq2NKlFZeyx/lVD/kuY900I
mXGr1Oj6If9BU+01c32F3/E3nhMS0g1hQ2+S73kP6R2i7mmrZhvHYMyh4dia
G3++muNdsVkyZ87duP8/Z6Mv0ada4ovSd8Zs/vRx+rpx/4kBYy97wYbCCLFi
zO0ihoilpmMi5ixzyU4JNolRYrUpfgv01QhU2O5x/2nBetyYcJTpYvH5smWm
sSYtbb7PPS3drH89OYhcRE4iN5GjHK0HOc4ZLiRnkjs7D9vHtmtDcept5+KI
JfsjLWKRTe3jFbfjRO59KEv3waFg9hjRSw9p9pJuTb95nxuipVaS123zMfMm
Bzkx897BGKfyB1oWF3bWglZH4+DrS616Yp+vysOpoz/h4M4hWOL3G6dj6LQh
o4ZjVXqUwxwQ38Tf47H0B/DH6Kl40ndFg64yX31e3WH1wHzD7oR3fk/4pXd3
WsvxWdFT8lesfrOhr8j5i+6GT6pjfcVc8+BYOCaOrSO0Ja4119xYL4x7wT3h
3nCP7F/fXfaYe+2Kb9CX6FP0LfpYU7+jL9In20xXmdQynZLYJEbt57AFCMal
LprCfEv5wrx/PTmIXEROIjeRoxxxGDnOqRpgijPJnZ2Hew72kGYv6ZOXDjcb
EzXqKCY9ZGt/ZFctlP7WfHd9SuCfsXRvitQLa7O48JIArGiDuHB72/wD62C4
tMHleH1L6oHZsrSTK1F9aXmz53nVfmjKHfnppw+cuvfjy19Fv7J3rb63pa8Y
n9E018WecQzG8fC65s6vvpQic23pOrW2Xlju5Q2Yv3+d2/3NkRErGXXZgh1i
qC10ykUlY6Xnis+LTwjWfRXm2a/JXE9xps897eSlg53963/BR/N6SREqPVZJ
/S+thk8zsdp7NyIzcJ9l3Ny/CHkhOaj0z8CFwHyU9noZlU36WDD3g/FmY38L
6jSFN1ZqWkXfTfI+fdrIJC2uPTFcYtuMa1/oM1OsYOKLoknUdm1dfwxnjWPj
uCJ80lAT/yAqh0XjQv+ZqH9+puQ65E2cj8yRS6SmF8eVy/7o6hpbvWpaYkdv
KUJm//U4PSxI4twvzDmEXaPKHOoJ3APqXPZ+Z0/5zOwFMJzsbsodmVk8zyJ3
JCI5A6VpIShoUlfs9FtdkPfpbaa/WXuM/eiN+go/s4aXKbfl89tw+ngXi3vI
PdW95RlmOTQcgzGHxnDydhkjx2o370bNkXN1tBa7RpXihYAjoovVDwtUa2mQ
NW2LvakRna1S9px7Tx+gL9BH6Rv0EfpK5bAF4ju6iSvEl+hTHeG7xAjHxfEY
8UMsEVPEFjFGrAnm1LiIQY7taIPGSowSq03ztaSXSi8DLoTkC9appxr8d1jm
OAVWYtd9G5odY2n3QuEccs9RJ3KCOo/2O9hroLm+zccv7XEpdvvdulXyXrfh
cBF6+p9DP+9DUv/H3v17zjmPI2Z97c3t70sT4TGhCH994XXpT8346UTf15Ed
vg81KVp+DHtkV2zN0nSWFY2aUU3qGVPct+KlfajYtVDi59q7+JtQs6rcIjZc
ul397+D25XgtP0fOqc0oku+/uNIYi26ptkKr+Mj53uDu01UitX4bW1fK+iwJ
X4/Fy6bb1SU2hvhpvU+6eSFpsu3eJ9RGvinxwNfKjP1ONiwbI7krf0+NlJ4o
/N14vrm+Iter33jOpysi5ZrMpGGm+8o9ze7b1JL8fWVsHOM6NVZ781iSMl3m
yjlz7lwDrsXPXWehT7XUH801Fvq48Z4Hdip85K8VLBAT5s/j+gh2mNeisERM
EVum3xXmjPgjFolJYtPYx56YXRuxT/oued6/A553b4ePwjMx/kGCbWy9GRWH
njOs6wAajf3ryTHkGnIOuYcc5MpakOMccSA5klzZeTh3bHhvarN9m7+6kuYw
NmmltyTdjndy78QbhpFInbYIU+6M1npMtzBu6vVMT+g8rsOYZ7rh6XsnYcpN
IVbn9J1QLT0knI0VN9Y1mt9Q1yiyTWLQYxKjsKc4wSLOvbPiZZw63xuxRb2R
qLjRe4hHs7HzaY/ejujUaMyK7u2yPuCv74l7IgNwf5IPRqzoAd/I9szduBt+
q9mDvqfNHvSOrrPbU8WOvmKzV0tzpsYkY1vd3bXrXDSuMdeaa8615x64dL3a
Y+4195x735x/0IfoS/Qp+hZ9zNzn6IP0xTbx6VbU2SMmic2meCWGiWVimtgm
xlvKD+QWcgy5hpxD7iEHucJZ5DiHuoriSHJl5+H+49w/qnB9XB4GVX+FtL0z
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
QPS8vS17b9/UoyVc4suuvrdPeyB4vtSMWlxyN/yi7MfWZ0U9gHHR4UhNneog
/n635G3Y1w16YmDaHzHMb3mLNaGnJ6Tg/vA58Ej3wLhkO3oAa2292rpaW6wH
NmLnPY6vb0ZfoR7Be7S0r4ypptmr9nUargHXgmvCtWmpVsE94d44ypnh3jpa
D/oGfYS+YndeUZqv0efoe66OdYzN3iquz5mYI/aIQWLRGcwS2037sZADyAXk
BHJD4/nXC3eQQ8glbcFJ5DapAaa4jpzXefzyju9++gK+c+dj7z+BV06NMOUN
LNv/Zyys7I25ux+Af3Ev+Oc3xlazKiNEO3EUf5255RF1XiSmFyfBK/pZeGbO
hr4iBSllU+AoN0ZMPYvPD65Qz97SC2sOxeDxrSvxeLQPlh5aA93OgW6Neacc
WYOU8xvtxueN9cDWtEE9MFv26tl0lJxPw7yL/zLV2voG37boXqwHxrpg9ANH
+okjfQU/XZZ71F4Ka9EYOHbjPDgnzu2Vd9LbfN2crhd2cSOWKT9zp4/RxzmG
h2MniZ5nOBQnWCAmiA1zPNoz5qMwL4X5KcxTYb4K81aYv+LoOmovkt9ihkdy
ALmAnMDnG+qGCFe8cmokKr+BcAh9qPP4ZR5tHRemHsL3zSs8Vku9I342jLzk
sO+FwW8XknR5uGbIkLpEtnJJpE/8xBCkhsyWe7KeEN9pt/XOu0vjZW7AoNWo
mDjHpLEY64oZfBZoWotZHDp1aIb0ybC6T9d90gu9oFuF22Pz5lboc6GJFlEK
vW4bCpMXYHF2NF6omYm8NZMwc7sOAz99Rqu1tbULnjs6HZXJQUj1se5pUtjQ
E0W3ZLXVb6lDT8s97txuWXOMuSQ52fM1/WRfFzHJP1HfSc6M2bn3blov91g8
9B2r+8sz1bOb5rfIs9VYOWaOXXJv1D04J86Nc3yhKkDmvCsxEtHzt8haWMxL
rZW798ti7363R3yqtKt1Dxb6Z+qANaa/6aP0VfqseZ0vfqZv08ddydGyZdQ8
SnutEd2DGEwNCVCYDLKpf/BZ7N1CTC9W2Db4FTnmgOcvyD3JGcb+9eSStl7T
zqPjjvrLxTh7uajVcUyjfZqUiMXsXd91FnqMP28z5lqRWo+Cym9x+OJ+fHp6
LR6ZvAPVy6zjtKxFVGyoRm1+ivR64OfqlONSS2i8/3H0HT4P/foHY+jUPGRG
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
Zs1vlL2XZwHPBJ4N86V/5/Cs+F3QETSviG97TkU6s3h28QzjM3imdY37Pz5e
GoZDgWk4WjAAnye7Is7ZXXBTp3s/iuUi3/Bz+Zhs/5/hzV/6mfQRIl/2H/rN
xviXeyDA/ec2OVooU8YOwcr0SF1PrtRuGJA+GsPmJcHxnlq2OVr6JE/SxbxV
3XH06AALruxvP12Ghbsira5vfEig9VyAUQ8p5idGrWlfPzB7++T+mHOYPi8U
r3itaVcOw1BzouoJrygH8iEO5FfEfLG94Jnbfq56CvfIvXLP3HtH6dW8Xxht
aqsmiJiw2ldLwhIxZY4zYo8YFDkWCZOO4tfe2ukr9Bn6Dn2IvkSfsplPkXyS
vkkfpa/SZ419mD5trV6FZwHPBJ4N1xLax19vEOnM4tnFM4xnWdf4aY2aM75Y
+raP+Pzh3e/hO28RvsI/rXJy7LywBtvOmfZwSmrUcbgsYUx4p2P5lsAyN5Fb
mVaWKJ1xIzChKlKaNwsFx2fJv19f3foeP/s9NV5XYczOWAzcEIq8Y2sE/3xn
xMPDmzfg8N9VunjzZX94Fwdh/eWO6QemOT4WY1I3iJxDzYBf45tv3kXeITeR
48prVrY5xzImMgMTmq7avc6R/AqF9SfsE9XW3IqqOQuBdTFib998s1/slXvm
3qkDV+uVtlpv1i/s8N9zoDip6RQMEat5x5QYuDEC40ojUS9hWXVE529JZnkU
Y9Ecm4ry89J/w+yNhU/Ys4LviLxHwWWjHXu25Jv0UcGdYlabUn5+jRB5fY0Q
vdx4Nuj565eWLhB8OV3j33N0dAxT8NqLWOl2VIdXCX5x9aJtFrUUjHGnz6iH
xm8zCvx18XLtbNu1NdqHtLg41h+5wzbLx4efftsQH2bOpbqvpt0cDuUP1UE5
PhNnx7fGtNnLTNG7HhdH+9t8j/9+COsa3ojfjxKVAg0xunoUxrfJ914+sQ7q
T3qInENzzYMYnloBv9N/RF3xFCT477BeZ+T5rpjLvO7DUP9x8EGkf/1by5xM
ZBFy85a3XmeUX6HwN15jfl/CnW4422BZC6PDTpNuX9KarK2Xe9FKe5p9eC5G
pu4Qe+WeuXfqgLqgTqgbzkVdUWfU3f22n7EQW8R7YN93Beb0+CMWiclymf5h
zojovdd3U2t+cmim6M0lV0NCnyPetQ/Z7jVGHxZ9v/w3CaGP09fNsaP23SbO
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
U3JW3LmqnDvukT09RXnPV/exZ+BZeCaeLbQurFlR0NUnDHtS9XHDXmvnrmB/
yzkbwBam2g82h+35sA9fwWfwXah3ICls9XuE6c6M/2hn2ABGCsoHcJj51Pga
xh0mMbUmwDIwDWwzjAft6NKvhzbRItO1jYQm+oIhVoW+R4wj1lW6LngHmPPu
UOnct3VT5x7vQOvo21FU26UHX76tnPyTEygipud0rDVntTSChnh8YVbO99CG
Vrp8Yz09aE2iQ+dPU2VyBzsOXuXD+fvJ7qUSWreyxuh97u3dRfdLZtEDbt6R
afcLE8qDh877iLwHzGM9oMoDF4qqTcDsP+cQbc5cqORWMnuXV2Ezcw8VRHbQ
oDnBNH/1frNqVzCx9qY9y03mV3CN2fvm1ipZXcPWviXii17rE6a7b/hua9ZC
6j/7kGi/VwYtZFgBZoLmzBfWY9HAHrAITAKbwKgxHKdIa8hucAk5zdtP1Z3c
ImICsYEYQawgZsyJtVc9v2Cx2hvvhDWx0bQyKZ69i7q41H/29WvSOkwcQnnd
3prGdB8Yt5LxIrV5ZOhdGzHNm5z/TyRNe+9lko5R5pKDhj9B/hOfpb2+A+hu
whCD/cBqpfz9wFj+ufE6tVTz1x1Ag6OrNsFwDyjNufu2A9PmgFbHpxXx/LwA
61sVTaM9VtG0VO0eYIK6JeHPa2ugaNS9hAaeJucXAtWchOtA7r9tUyvJYVwO
+zxt8QnedQwJ8SDXQP2eXi6Jz5PDR4nCdSMG+BVMXOuSyM93DAn24L0Ga8Ra
J0/IZ2t3Hdi1H+wNe+TTsIdNYBvDfcnQO+xlZmvYHLYX6h0Gn6EWBT6EL8X6
/bhG7zghbRZgDZjjwyIwCqwCs0I98IB1YB7YZ3pEXCwgJhAbiBHEiu59EVOI
LWPxhxjty3cE3lHW8XgP6NqH9KCuveboKc3szK//Re+GpBA95M/Fo88W6wdW
EUnlFxZqfed1wED/puIRFFQ7miYcvkOy3z7B8ub3Ht4VndO3Lwki+eWzdPR6
tOA56AcFPZXtK21Isi+Mjn6daXYPML7ZejWE8RTop2boPEO1JD3Br4ipmblH
D9jawVtYyh7pzeOZ3gz6ccHmeVe3Gewdhv5l6RdOkX3hStHPuP/wG4YVYGZU
7VdKDq9YuIYFGNS8XtUvDLVL6GXH9wxo/UC/XnbjXxaPp9nF0SxWe2OENSdY
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
Mdx8xvbIfZu+zmK9lNB7qiuvPp/l5d8NSSF6+Ln6OOsNVjiM/nK9g2S/UWqs
DCr8vHu8SmcNxK6LCfR+RhEFecygUcm+FFDuYPJ9Mo9n0qj1XrSr3XSOJaf1
XcZHJF3/WfQ1TdcjaWlzeq/xK8taN9FRE3Trc27/i+0JXIupz4INYUvY1FQ/
oH5lVFoALV/2Ac1I3kLbO9bz1x6ZOF8t+VKpzcJh79T16wyLmj3CoF8PzKbf
/BftPbNAfVzVLwzcVE8MV59xPXJfYyOsCTr3CX3ybOswPsTmJittdlgkX8w3
8ft2pRZGV01C6bAapmN+yf0Lui0tpybnRt6eSKLzwE6VTJciMu7PrJ8U8u43
3c+znCt6SJU6X6LsqZ+RfHQT1dqmU9uwdCpb4EvZjgnK/PnMs1T5SiXNG3+I
are8QoqccfSnEnuL2UDJXe2jS1OWkqJ/lbJP2CsqvZM97LiuHouxidx2xtwo
fW5gXAGVzg3uytXP/ZR+lq2m7L2LlXUmC7S5N/TmgnZJxuhixh3IebTshSb8
iv5fzH5OuvorZ9l3OEfs/fBsVnMyWqkhI5uySRun3NqxB9leD7anMsemLntw
e84Yv1XvnrCRqTwAfAGfwDfMppyv4DP4DrUtLZwvGQdgIXzMK57MMAfszbOr
ZlhU9W0DRssW+DHMArvAMLAMTAPbwDjDOod5YB8xgFjg64EndjKtei4mEZuX
Fl1lsarZAwyxDL9aunZFNZU69wWiz7eOR2/cORNM/eL3U10v6drrzsC1sbRe
WsOvr53cTkWNF+mXncbrAb7Ljda671dbYunnbTPoZpE3PZB11bf8lLmejrVk
ko37RXr3/QraePAWfRETTz6/k5LvkyvI+yUpXUtKYr///y4zhb6XB9NPWfzP
/DY3jH78ZAz9VDaGvtnM3xsq4tw++sOMj3q/ziJrD9MIH+4SSwPHb1DatJu1
K4xf2ZlHirIwk/mV6rIIdm13n489YC8DJ2ygUfPWsD12tybHnPmH2S4UemYf
r88ZFjhMABvACC9mOUwBWwxjHNaAOWAPGPT5rZQuc5jMrf2G6dfbfHyRjh5N
Z9jt4lDSGbaBcWBdE/uIBWPxgphCbDUI1LFs8K9hsdkX74QG7l3UL2o/3TkX
3NevR+voxujLHOqRFWtZLrcxfxxd8QrR/w37Qj/y/N1iE/LHi0nyn1Hk+s6z
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
fy8OU8AWMMZry+v/4rD5LXefI2q8Pvz350Ztwnq7Va7pdr+w7sakdfzvHobz
kz2na687VZoN+QP160xU+iSm3hO9o1S9sMTOV52v0s8to+iS/GkqoNkUOvcz
alswhxT9FSy3ra1FUU7tkiZWj9EguUzZ9sfNy1M/U6bcv52SX2lw9ib5oAqW
p85w0tdQEZrQFIfOeosB7W/01CoaWMXtK5XVrqCGhdmK2x907xvm+mnV+oBH
QP+sDBM4KkU/ZT2ISp8EM3vKCXX9Cv5WHWf6Mqx2ib/ehm9iLViTJu+ENWPt
2AP2gmP5zzSyPYYuiKOiAdVs74J24WwG28GGotfB/BPNfKXiiLAX1Hxp9n0z
ZQJDwBIwBWwBY5qYAwax1xYOk6HOp6iIwyiw+vPRUfTygi9MehZ6piFGTF1j
k4C+TAFnY10tpZ6aap17I9yjdTx6o2RlOg2JyaM9suta2g69PeNi1tAaXwXL
7xZtbqV/nxDQrOCrDSiZT78UjaKbRQv1+nT9KF9B9+SBLPf8ZfoK8vy9O8tT
+/1mOXXEJLBn11enMI0L5JV1OZZ7qZvUGhe39ihz4shlC+mxaM5bO70p95Mk
sn8hiQ5v6KX+YBv3UENnryeb1zbQCJcI9nd9boXl+JWS9YwrMZlfKUniZorl
+JVcpc/+2zWWbMZs6NTrOc1s0Bu2btrA7felFMoqW8t8bRSvHGYYDwKujsOS
ShsIGNPlVrCX//mggg7uVx7/IjaBYZbxgr9bRJc3LGeYBraBcd2+ZIgFFhNc
bIjhfhjHwsUcYg8xuMa3hmKi+Lmc3ph4F+GdNCQ2n4r80vv6NWkd3RgXlxvu
a2TJib5Dzflj1TnpW5teVH/X7rGKPEeI63G07CkP1hPJUD8wv8RQVqsA7Q1n
bs7YN5hcwl9Ua8XPSRtCLQer2e/lm0PTjK5d1QOsJuN9uiUbSnfjXtbJr3fN
do8kdZ76VtRgvXPXuerX2kgTw9UaIHNCA3j3JH39P8j3meW09P946HEsqOtg
dSG+gfTBwlCKCWzitZ2tY7V2j66YuVpcw5xUYc15i/IreAb3LM1nYy1a/Aq3
Vv4anSa2xzm+ymfq1unANrARbAWb8dkSNlZp38D2ut/DR5o+u8P5EL5U8YLw
sZD/ce5tDiPAipjeYZjAILB4nMMksKmstXqRYZZhN3Ag+wxMA9sW6xfGxRxi
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
ZnTWcuieZ2l+xVmRw/l0PfMt6ldqL6xkz4Dvk0Ro1/NO9A67Hs1qhmCT5ctW
0lff5oq+/t6/76nxP6PxS8HzUDcjqVwj2C8MmvKPgiaT5sB7ofFyXF8vwzoM
DJbr7mVde75ZAA0Vh6Wk6K/8jT50LJoMrKkSfcVQpyDQY2pm5ft0s8SezpXb
kcMC43UJLJe84HMqclRQrXc65TvWU0PIKiozMzfe4KzNOfDVNmC/Zf1qWa4+
e26kwbVBQx0cDPLbDc+UM75E/koZq9fInp7E6hFq565g/bFgl0vjOdu4+3DH
Phbkn7Tu7+xNskni7KSayQ4ZnM38hO15ajJVclPY3n7sHqY8EzUmtSJ0P1q4
PSsWLGY2gC1gE9gGNoKtsmeu42wnp+xX93EYqmH9xWSMr+vSqxea8BV8xnzn
oMOLjU5R+lrjGLBgHr9STg3hq0jueJgUHCaLnKoZRsXYycF5K8M+YmBe+Xu8
52DfSt0i4T5fmpoyiE3st8AE7ZaemHgvVNoo+wFax6M7AuOjad3KGqpLukjH
tnbxK4cvNfdeHlXG/b/BrW3qPPXBZO7fDb7+9CBzuUbNSqfOSqFA76OsFZQV
6Ml6JLG88geegnllVR3ArY2b6EHJLJa3vpm7njI23Ca7l0oE89yGOJYHsg16
z7u3fxxlnzlNvr65JFmUbfmaifRy2ll9kSqv19FXt5Po3/XB7LkxYXNIOvQJ
yj2nrOfoKW6hqmwNfVKova+GDQpq3elDb4+eRvZjprO/cUyPX+Gu7Yk1Ya/Y
s/xcPbNBxOpZzCawDWwEW8FmDTx1Nd2dC92zydsnl/kcvtfFJzBiKreCaTe0
hDbIvmEY/aloBsMssKvE3XrBePCZp+QZERNpgcLxgJjS1WVB7CEGEYuq/SFG
dbnJnpx4B6lscGzbWvaOSpbWUGDMo/X/UNYhftw9dcOiudLjHml0K004n7zR
Q7ueYPLEt/j7gU3g7wc2LzSQpJF2JEkbSHMKbRjHEpPgSLO5/+8wlJdmv+Uf
/huSvvE0zXh7EO1e/pRZPcAE+ZXAaKYFfmudKm+OWpgufqU9YyLRzShqPzma
3PL1azfcYkKE61f+M5hcX19FGbsvkmdFJGVdm0yn/zqazp6aSI1fjqVp1X40
b2EwSZcX0tLfcP+ufWIx++eyp3zI9ylPmvefkaw+Ybr/csP8CjdHJr7F9Fx6
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
CzYp5qXARs3Z8cLOc2lKx1gao64dZljn8B34kH/saPYp+NaIBXPV38P34IPw
RUM5ZNwFH4Yvm8IYcRe01wf7/08DtlJ34eH79330Gake2CyOoYLPGjHf499E
UNqoYRwPjpg4nvad9zEaO9b6Xf/RDPF3/RbGs0OnuJIl/C3mulSHanYx4u2r
KLJ6IM3bM5gWTO9tE25grHuViXkS9Ntpls1vv51U72EpclZy27hGvgNFCXsH
PwfjLN9kk3vpCoqKfYtli1i+odptxvCV4jMz+B3Ut4pYM5rn+vRitlir7dsU
XgtrtmnPwpmXauSy3P31CMvm99+/4b8hM7vhWzkONM/jL4JuX2EdA1sBxoLv
IuzAc684OoZkb5vnWZE68rRCT2yk0IRxnAdkKE9L6nvOeFOw23SWzWfDHejU
1ThxDsHn4HvQlUdJBNcLe9ha3fkVtKgq4kFvo72ZaQ86ZqoXP3fx4hpN4LNm
HpGxq0iZ040aNg+noh3PU/YT9SbeL2NOcuaJd05X88TXuPrRqbEiR/yPa9ZT
ZUwgZa8LoSTkD6xJ5th1bOgGinet4/h3xOwyzjkwy2c/6xhVdjdcL6vSMYWK
Xtxi+IyDvUSMRVUfC3kTiGcjfq80UtPLWI8Yso2aYyL5n3pruS6iVB2eE8TO
5W5LrVojdVKk0bwR3V6T9geqE7olYzEn5rZmL9i7bn5J6pAtfFY92QwsFmXj
bBj3MNaB30AX0ImURwRdSXozhE0BWzGEp7EeBBuBrZizJ2AsEd4llDdJSakT
6ije/xMKC86hiJhUil8Xpc6f+jFhPXPCnBvtQ3WT/KjQNYgUE6IodeR6zp1B
Do2yk9IIf32+4EMHBV/qzj4F38obH8W+Bp+D750bbR3+dj96e3u4m6P3br08
jf3xTVS/sZXjHv23z+V2jZv+VienrYpm7VyOLbni7+TzU1p5OmTbaVZALq0J
iqbF/X3VMeBS/2i6rfA3gqssba0DZgRXUddAUoRo7avu/AGSuMRLow5YFQPX
xVi+rpxGh+6GUMXlEvogMYBO5cVZnSthHFtZq8YOrm6fQr/uGMA86pyj8cr/
MHYg5WhIXO55J07cQ3xFzG3Yv2MRlW7ON4qv4DuMudf4Cs6KM+PsLCNBFpBJ
0Otibg9kBZlBdq0Yi334RKDj0wVx9EFcAOseNgBbsBVbYcwz+iA5/Slf/Fuw
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
EzEKE/XAXAbLaXlsEy2LL6chk2t1fmfvzRzdIxzfIj+npyj41Y70fscw+8aY
e82hhW+Gcu7AsZBnqDboeVri0NFk/Bt5BGNcetOYbr7k9aS31nyIo0u5CmO3
5BiuI2Wq1tSiII7p3zrcwDH+lgOlrbkr+9K1czGOg09EP0dj2/ejqXmfnBrC
EllXp+dFUVNYV60zTHmzP4XFh5Ff+Ku0JtF4TsiCQU9TAHCNoBfIPbYXTZkT
wXkon+ZFqPCIODqwO4n2FGfTllOh6r1q4ivo+A5jMBbvcK2zPHEuzIm5sQbW
4jWN7Ad7xZ6xd5xB8zucEWfFmXF2yIBloZvHclwlO80cFkG20l4hc8geOsDf
0IlpfEW/7ht0r85pelKbVwg2A9uBDenVD9PpS/p1ZJs8psqhgq3CZu3pA/Ap
+Ja/4GPwtZmCz2nW62OcRfDNZfFKwVePsc9K/unybKBevTD4/BUzGAvuDtwh
uvcK7pr21t6sbchX0awH9vNvLZTy9uuU/0pPqvznr1qx3eLT7qT4KovrGQU2
baTGH0+LeSwHbedXMdfH1V2mn3+usfl95vbI6UuzcxzJa15/8sp9hRYoRXxl
UZOCFI1r7BLTn1nan9LfHEI7Bj1vd752o31fBqU1rlPjRejIhZhXn05T6n8g
3/0KSq8fwc8lfAWf8cx3fzq5Hb5Gsw+m8TvS+5grvXEtuSnthDuZ6ZAVZKZw
dmQZ2mPOTY2xtOBoBp8Hup6dM5hm+rzEuoct6OJR1vTbPynJed/f75m9SzXB
6r5vpGjBN+FryE9BfpnmuC9++TflDvuLYHOv0I3fRJyF64XtDG+vF9beLG73
K3b6zio/Usr6kTLtJQrOGmZwjBw8K5NWUKVjis0YyyXvs+axFWApjK+UaD0L
WyWn2HWr+PMpj4OktKi21jY61TOOY9d6sfnxcYwhpPZtW72zwtBAKgpdYvF4
cMJf9e5jMa990XQ/Urhpz4/cE2AjjIG4zqOkgbl0bNI8yg52JeVAuVo3Er7C
7wjP8F2mMAZj8Q7exRyMs+jks2DNwumLrDpToYVn4ncEmUF2bZE9dMf7F3Rp
je51O2wJNsX4SlIMRaxar2V7wPpgk5bYLmzc6rOosBX4FnxM7mo4F8pfMZJ9
VLmuH72T4N0m2VnT29vD39ICltH/eprGVtR1ebaspn1xYp2enL13rMdW1q+l
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
5XXmfbWK5tPX1U8ar+VwPJ0+b7Wd0fupTvOBBAcpaD9PHq/FMMLPYtwGz+4r
SLH6HPAGHg0YEcf7leL5ZnJBVsjMZOd0MGJuLtMJdKOESUGn3ekdtoGNYKth
r82nwc68DeWwGdhczDt8Ar6Bn1/hfMX/dSn+Ap+Cb8HH4GvCvJWtkU3k/HSF
ok7gw7b+jmSxFdStcN8+YoAtYxBiYMWqFsrhYuIyXz096HSExUr7+uWtWwVj
Oe6brpjLbwwZQMuH/paCR/Uzw1gmujhK8+ND+5HXb3jsYqJXu/lMj5BOCrjb
z1i7EnbEmN/n+MC8DuH3qKVV5Pl7f2P/Lt/jorx+JE17OYJmW+gHBnru5RRy
S76Px1bmz2X8TRykPEP9uafGGGTZGaC+R9iXq//M6SnNTK8d9ZvoUN0a2sP9
9waEn3HN9Lk9YWlsD7XngTeBT/CsPBtnEZMZskMH0AV0oqQv6BI6hW4lM2x8
jxv2hE1gG0MNC+blLDHWHMGmwrOwNWxueg58A/fhKwJOZKx/cjTDVuB78EH4
ouI8Gs6Hbf0d3erYin31bNWf8qO3/t+v6I/+66i8o9bW7Pwi1ujaD+nbb2tJ
c4yfxyLGWJbopb3BUhrXUnCt/OwV0PjSTNK1rZS9F/un+6nfuv2q8vrZLQE0
LGkxLWnSsbkrslhO9Sha1b6WAvfGUXDjGB5P4CjawoyPnlLrJxHk3rRO9l7p
yblU/tCdjPCz3DOeezXcHpF9zhdkFeSGDpZyuoBOvKuekNdZoSMFt2ymYfGv
U86+YFW26Jd1iFbde6/sPdjapVS5JiaU85U1jWsl1+BTptgKeoJ99Y9SGl19
0tafwy9ilR+roN++kcNiZf0Zf1uzc1ssljvMubVyh7bO6crNUg8P3slm3kf5
dpPrD8qiPLcayg/SSjCWZpk5FlmDueszXUnrPZ/0/euMefh5wZTqsskCf2f4
ORG6uapqVzA3pLkLW9EML1R4jpPPUUOHHNPoaP9Sq/SlV+jhlb8+gqJCC1Vh
I+e8P2KzRV5120MXjz1OVzjycqtl13BPVe0KZ6Oi9WHy+E1X7zHVxOkAuoBO
lDAW6JLNYmEYi/IcG4FgK9gMtoMNlZ6D7cWz7Rs534CPNM+cS1mPmJ/TLMwN
Es2yz3etZVifJX3Bl+HT8G3Te/gGbP0d3kqrNYfHoO1L3dItiqSt/pGUlhhH
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
AjEGsQYxB7EHMQix6PEFVTQ1KIPFKMQqXVA0i1329f+z9y5gVZXZ/3iP851J
q2lqKv9a2aSkjmNpGlmaaf408YKSRKKIXA8gJ25yF1HuCgIK2lGRUARFgSAU
EQIMUzMrx8ukDpZdbKb6ztS3merbY9Pz7fn89+c9nMs+e59zADGbZq/neR8O
e7/7fde71mefcn1Ya2miJteTY2lY52E3bn0i7m4Zv2LiWKY+ea8iLm6bHxIR
ssOcjzLt/nQE39CVlzAo1pyPMnNhLOYGqteX4njUq8OcTzHX23E9MJEbsTQF
nnG3I3tNOJaMvsPIrYx3dcpBmIbfJEs+xX79Ld3OKWk3jMX7oStQ9czz8B6W
AK+ptyNtTQy8Im638CsRXdeke5zDuXyGz3Z3H+pk0o+6dvdctAGfoU1oG9qI
tnJkS9raOl+IvrBeU1nfzVhTjL6lj8U8yef0vSmHhZhQ5NfY4Gjq5Htl3IqJ
XyEW7dmFGNa4FU1+StJweik6OlNFv+esN3IQ3GjpSxDcECmu8V7rhVVoOBV0
HTX98SXw7D+AHy5axe2NHMu8hnjRo9wUE0+qnQ3XdE+7sXTW8Qr0ul9x/Yac
NsT/dqDD+P3GjniMj/MQvdJ9d/7eYbzedZ2/6OVu3Ufe2Ofeqg5W/QOqfeav
ZnhtD8f3P1zG+OxSzDnyMS7/fav5nolfMf3Oe+QKxmdvw3fSM16lIX2qC8/G
M8pyevY/ILtPG9FWkVVT7NqTuSvMYRH5Qnbqupn5mLsGo9+qBsV134Uudmu4
cbhmeknYmWPBiYSpOfWxMm6FA9//2YjF/yDhdw2/c8zfS9J3kUn4HcVrddI9
fnfxO0yT/yzpST/yazmMda/U4/X8u/+Kdcu6+oJvED3CRW5A2AYYvKvlnExY
MXJ1O7FyXab0eQ2K3ZNQ/8sDOOOSJfZpu7kW58fp0HFzNYo9liN3RpaqPu/7
njbXlzrvfdSh7ozFM6eC9asY988dU6o6x9jLfUOvbfS+Si01wWW4HUJcdLmo
EdYW9jzaYp8Xn61zUAzee9AWtB4F7sZeNKY1P7k8ThoPW/gN6V6uNIdz+Qxz
X8jZcK2SwhixNvcQ9ciit6N49iFVv71/FTWvaCPaSq3XSu6YrcLGtLUxj8Vx
Pxb6jn3TOza6C5+qzcmdtkZggZggNogRXidmiB1iiFhauS5LYMuaWxH8ile1
wKLIZZGwSYwSq8SsWs6KiQ/rcR21azT4HaCJJtbyUngiikPikZaVgoCs1fh/
AXkYubQRg8Iu4A/PnRI1n1aFHUBpfAsOWnEOdmPx2W9hX2UxXtuRIevXcb04
lrbzFp1bs87gpfIdOLI1Q+j41KxXkRxyQMElhJevxZ2LOs0cS2JII56eY8lX
aMs6iSObM6SznpDzK/nHjLkNeQdRnr8Ig+dHIS1vYbdqglmPxpp4kZNh+r06
fQdcH8iHR3qEqBvGex351Tjy/g5FX5LujgsqvJPaKIg4CNcH92DkM4nwf+kC
vj+wQWbfkBuXiWF9jXMC6i5gpGei6Nu+LuJgt/aiTr09D21Bm4hcFslGz0q2
os1oOzNfUlYibNsTX7AfS3KRTvS6L8tbJHwr+JV8W9yfEJggNkzXiBnWsjJx
K3c+1wl9RZ6CcyLPMEXCIjFJbBKjxKoZbxKGrze3wndZvNOSjtbcqV2uVTov
vzP43cHvEH6X8DuF3y38juF3Db9z+N3D7yBNNOmNXC+OpdnwqN249ekE8is3
KWLgj7nMR8iEfrJrHv8l78/CnAdTPkPwAH/4/cpYG2xx6B9t+qMb81z0wSXw
uNPS33zWoCQEB25V9gOxMx4IiYVf0lB4JVlyayY//vtucxAiL2PSUPOzaQsH
dK//StoQ1GbeBr9RoZh1exz0D3fZJD1Bwa/wmuCopDmcy2f4LNfozl7UycxD
SLr25Gy0helZ2oi2os2c2dXU74a+oE9M69FX9JmpptjcuDizn+hjwVdJPqfv
TTkstnkwxIw1hogpYssWb8Tg2QT7/AoxrHErmvy7CHu6tHemYe8765BhG+Ns
ihdcQx3/TlzEOH2vo6bXRlZ/cAXf/fCxTQx/FHxbMjGxJMbMsRS2pMBrb5rd
ODr7pw9PD5RdYy979kdnb3u1Z8ilRB7ajD8kLkTRoQjH8f3qGYLfyWjKhHeV
iyKHQ8Ed1Ln0Gcfy7bevYcViH4zfvA/ffN2k5Dts+BXT+OfXjRj/Ypv07GJ8
d+VYn3ErPJtqbo9V7g5txN4ntFl89UyHti1sDxM9WZa1G0SPFrU5Zy6dFr5s
PVkquz48Uyd8b29tYqawJdXMrUzYEg2/1kwZtyLyV374ECve+/Z6vw59LvzO
4HdHnTmvzlJjmN81/M7hdw+/g/hdpIkmtnK9Y7wirr7gz6p5LBaepRnZRfFo
SwhBfW4Y4uqXYPHWNERn5iEuNwu5RctFXLum1B3Ru0PQ7PFntN0hPXtPGdpG
5Zn3aXMPQ7HLLpyf7Ieq/s2qesR5twtuZXHmFlS42+egWKeK+RSCq2G/ldn+
OGpT96ujf60xVu/yQq9tUzzhdWEb9pXPluwQl7IRhnVxRr4j5XkUrEtCXMJW
tEU+D4Nbh9lmJQvq0MjeINI4qVOe45O/PiaNCYrrJ3XnxTPs225YYPGJwe2Q
2CMuYZvYs22Vkc8pKVwu6o8xt4WcDHWlzr09b72LQdiMeTXW14VtJRvT1hUL
nhfch6NaYfTd4pTtwpfRPq2qnAYxQCwQE8SG6XqzhJn6e0oFhoglYqqmdL7A
GLFGzBF7iw1pSJKwSEwSm8QosWoPx7TNT4Vb0USTnkpteDzW6xOxMjsVS1ev
xlO+hRjufwADQzox9rlTon83+0zsiG+V5XtwiP4M2zJQX1FqjjlfD46l9s2P
0JT1rqTHFhG7bqjchIPS79THff7LWK6T1z6qz76Ab4rWIjMq3syxzJHmseaV
9TzGmm3rI7Wsecuc93C/qx+GP75I5Dx05HevJpVpsJd6Q7Gx10d56g64jMlA
YpYnmmpiLPH9zn295iJEnktTBlpt+CHrIXquP1EL1xF7sCq8BfX/W4zLu2MU
9g27USeG7fXLu2PFM+n6FrGG6+O12Lq8xe5+1IU6Xc2ZaBMTv0VbJUs2o+1o
Q8GVSDZV61PvaNB39OHwJ3wwbKyPOQ+JvpblZEhYICasrxFbs+e9bOZWsqMT
BbaIMet5op+IhDHBS0jYJEaJVWKW2CWGrxe3wneX7zDfZdv+SjxXeWKr+A7g
dwG/E/jdwO8IflfwO4PfHfwO4XeJJppcC7keHMvRkgfsxq3PJd2r4Ff0I2+A
368C4P2rSDPHoh97gyKe7x3yx67cldUIGRAAvxuDjD3r/QuNsfvFUZi5OMZc
N2rU9HpLX44BSxEX8SfM9Eow151yNIZFBSEzeyEedZ+mWq+s2xzE3UssZx3b
Dx+vtF8jjD3pX48ZiOg5tyJs/ABMnjBF1q/dM0mZv+Jpxf1wLp/hs1yDaznq
c09dqJOZO5J07en5rOtx0Va02bAInVP70gczFyZIPjkj+BLTevSZqQ6c8OVi
Yy4SfUxf0+f0PTFALBATtjoROyZuhZgitogxW36FWLRbx07CsMataPJzkOaz
YWjvTEflO+tEX4vgOr35nqm+UcMFY42eun/TGj2GT74X9a5sY/jshbK4Ot3M
sfjVpSO/xT6/Qn6Etb2srz0xYT4Ge6j351ixfzZcXkjGxKp8UWfKUfw/tc4D
E1PmSPuv6uJOjDyCvkmdW7HmWK6Gy2DPdfYEGb+hGi9euozX/lKoznnY4Vc4
XvvLOmx57wOxxoTGC/jyH9VXpZM9bsWc49P0QNc8o23yW1KF7WhDR88t2zsB
T1QXwqU4wS5fcqdnMqaPk3M1v38x0yE3Rp/51qabuRV+Fn12bLivb3/4Gwr/
8q/r/Tr0WkSdLum7gN8J/G4wCb8z+N1RKTiUdPGdookmPZGe9lm/VoM1ndrc
Gx3UwWI/kVpke7RicVEOFhgyu+Lc+YiOrESuyKew1Ao77/OeqDlVc9828x65
EzcgaUEWTrr5K3mMcUfE/kdXueNopjvOeB22qytrWNUvCEHVgmUixn9mhp+o
OWY9p+3mGpwZmiXbvyejrX8diofuQU1pHapyjfW62PskfV0aksKqUOLWKu/D
krMGK3PTRM91nr8xKF/kVwhuZIYyf+Pi5Ul4Xxq21znXmJtRI9YQNbGkNVfm
pos95HXcXkGSrkbcs64pVl9aI+leJZ2hvldnr7+vVNiONpT5SLIxbU2bsydL
jeQDtXpipkEf0pf0KX1LH9vOIRaICWLDdI0+I3aIIeuaYMQYsUbMEXvPbcyC
X+EagckaBzXTOLi/s1pzP9qQ3nlNNOlL2RNG7iUeydmp8ElNw5M+G+AS0IqB
uk484nkCIf77kB5+GJsMOTi0OQ21pS+Lv/H/sTiWr3LzcFnae9s7xh4XzAlo
yToniw8/++zL0AfIeZPq4381Pr8mx8yxuA7bg7J4OTfQWFmIWoO8RpSIuedX
IyHVE4PmRKF6qy8O5b0sj9cX7UFL8cs4uL4dLbkn0LrmJNqyOd7q+nkSh8ry
UL/mXaRltOPByZ5ILPZFg6HRUufq7Kv4tqj3PIToe2/Qo3zfVwqeoyKpFVOm
18F18G4R9y/P/xhfnd2Cy5UBuFwRqrBzwM1BYij4lfJQ8Qyf5Rrsp+F6727R
850xedt9qQt1upoz0Sa0jTn3RLIZbUcb0pa0KW1rsrPJ5vQBfSF8IvmGPpLx
XZIPX9rmK3wavdJT+NiWXyEWiAnZmaRzEjsmboWYom2IMet5EUGN8PB8WY4l
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
v61caozfSj/5+xbpOuO7nPdjyNvf/p8Y1rFu70qbnIbmaNHHw7ofi+0IbjGY
81GmtHyJ3Jv6IXi3qyUPpdlHxOw9GzcpYvaqeRTNMSLnInd/oPxenUu38zis
R3zLCLvcxd5TniKPR+/phWNfq+dQdHyQBL/D6jknjviVwCMb8NoHKXZtH7pw
MfZ+/gPqzvrY1Y+69/S8wkY2HAttSY6lSLKts+ctXFgIcluWWq5XPih8O37/
34x+knxO39vjVpi3wh73hbZ7ShizPqMJhz+GtJ6LFO8guZJY8p+7u97Bnb7G
d/DUui7+M+ZH0UcTTZzJRX97PSGM8dvGO6pQM3SbiN922MRvO8zcy1Yxr6+4
F/69/2XR111Zd8kQtA0G3TbHsW+vGjQH5eN8UjXabjPW7iq7tRElqyah2M2S
v1I85W3RF8Ow20vE4Gtm70OHd6e6Tu6JOOoeKJ3RyKcUD6oT9arMfMDAyi4+
QB5PZ990wz01KJ6RhrbZYSI3hTkqJdJ6xaPLZLkTZh7I/88Oz1fjVi/yeMh5
kG+qcatDrscroidLTRc31eHRjOaBtapn6bg4URqPqd7jM3xW7CPZhmtybe5B
u3NP5m3UuDU41FENV439G1E8art09iSc6MrT6ZBsQp+wHhrrosnmS7YUfNVA
yzVjPTbjPPqCfe8L3Feon1PyJfvC0Lclko9FfxjJ52afSvsSE8SGWE/CCjHT
LOqrOeaQ7OOwVmC3r3JW2MeHHJPxHVyPjtFr7L6D9U7eQfpEE01+itL0bQ46
Nqdhz/oUpOWnYNHKYtynP4KbYv+KwRFH4OqzE88mbkJ4eh5SIqTvi9hYNOQG
4O1tz+DLSjdc2TYdV8oZZ34GH25LwRdrDPI4dk2hw9i5bd4Aa1TZxqXX+cRg
U0CsrB+LMe6u7Ge+df1BDJoVhYWpnmhhrw8H/U0s8fsTeKnoOA6VZ4n+HVHZ
yXhwQqjoDW49r7zuK1zZ6jxn4Z+5hfh8fYYxv6XYPj/xRV4oCiJ8MHDESVGb
ihyH2Gfr/+C745sU617evFrE802/f5mXL9YJ+K2nGPzMa6b7nMtnbNfh2txD
5HxIe5JfGfjASayTdPk8T2efUyk25qfwbDyjMzvQVrSZtQ1Z4422pY1pa9pc
2L6bfqJPl6R7CR9vXW/xj8g5krBgWse634pBwg4xZKufdW025lHpltrnVziI
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
KQuuOd6I3jtVfq/KRZZ7Yqtjd4fvztH48NsPMD59K7zf+BsufbqpR7YO3LgQ
O0+6dZtfefGt6dDnufVoD/a9937r7xi/cqOk62Whc6/4lb0u8hyYKrnNIiUb
09YrGruXU0QfstcKfVp0KALHz7UIX/MnfW+PWzFdI4Z8y0fb1ZEY/OaHvyvs
0XRWJ2E3DVUShjPeyEFwvSV3K7gpHrlvrkXduVx0dErvwCnH+UeaaPJzkL7h
VxyM/lUiH6F+4E4RR1ZyLzki7sz4M/MVjNyLpcc5a1cVB53GyZQDspwWWy6i
2SdfllcRHVuOitp4sT/7rSdlHhbXg3SNIq/BL7JGlZMoGFqF85P9UPPLZmOM
vCvf4rkF0vpFI9Hm7oXzPjNhmJ1izrforW1Yt4qxekWehHeVqFdVpV+PMid9
7k31vJp1f3W4V9UpV2k84nAO17CuN2ZvVEg6Ubdm/3wYfHYp7gtObErPczpM
g/XTmA9UPHsVzvjOFDavLxyJ57zXGPOBunKK6CP6ij5T44qC9LXC10FhxvMQ
A8QCMUFsRMfutOgtYYcYUuOMTLkqxGCx7rSsBhs5H+Yw1d+z3cyhnJAwLTiU
+7JwQnAoeRL2X0D9oHLxLhztX9Vr22j8iiY/R+kNx2I3NyT9iKivlXCgFZvD
4pGZngxd1mq4ha3Fg4v2YHDInzB80Tk8Pf8AJkyuxdbYFmxa/5kyxyA+BeGu
8twDa46lOtvYL4V73jkqFcMmRtnlVBorC0X8nvkDL21qN8fvD2UdwwLPl+H6
4B5RL0v0Sd9qjLVXrP8E3x/oXe6G9TgUnYjwB5eJPArmPch4lzP5+Fb6N5/o
ZVK82tjLJS9f1Pri+Dw/T+SQsNbXty+NVNTtCrhtkRiK/ijSXD7DZ7mGaT2u
zT24F/fk3tRBYfcnIhA+apmid0lvBm1IW9KmtC1tTP7CdUy1yF+iD8y+knzT
2sV/0Wf0nXUNONO4f0os7hyZanxOwgCxYMutmAYxZGt3DoOEuVIJexOfqoXb
Mwcw0uccBuv/hAeXVsNNtxa6jNVIX52MTSHxiJOwvE2ay/44ffWeaNyKJj93
uRYcS0Oul3N+ZdKtZh5DNT4v+rJbxebTE+CZdDse8cox9kPXn8Zc9+dF3grz
V+Z6J+BRz2NWfUd8MGp6vahFtTKqVdSZ8rhTzpcs/lWYai0r/dgb4PFfSs6n
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
3/wMjFmeh+VZW7A74xQOZTvub9+UfljUJZsxS5k30VS2AV+crO4Vf3ApdTVS
5kUhfLAO5SHxip4fHN+eMphrZZl5jeLDuLJV75AH+aowBt/tUOFXbg5AwK8D
lPyKNJfPOFqTe3Jva12oG3W01ZscUYV0Jp4teW4U3l25ulc2om1pY9s8IvrC
9Yla4RtHvqNv6ePojC3C5/T9MH0M7g8/hiG6S5jx3GEslzBSHHVQYIe1x/iT
WLJdi5gj9vRPReDYcif5ORKWNW5FE016L33FsZzdcrcTfuVe6N1uEzF39ju3
jX8/NnqaOT4eMOo2hCWMlcXQp0eFI+yhmzB101sY9cwZxC3bI+uRHhGyA96/
UecuRA90lZpV+uE3YPpvetfLXuTN3B0m/fsgDO+JfBVlz45XIlbj48K7cC5w
hcVOgZHSfxuccDY36xAxWs6vLM+MM/Mr/Cw7izTX2EPFwbrSntzbpAd1om7U
UenPGHEmno1nDO4lz0Lb0sZqtdjU+u9w0If0pbVv6Wv6fJrhbYSNHiCwIONX
JKwQM6b1iSXbdYk5Yo8YJBYdYZVY1rgVTTT56cs337TgidaLyGKPjnJlHH1W
1ETRq4OfGQ9nXJzxccbJya24FgTC0zcFuf37YcvJN0V8XZnrohzBlePwRGms
iMkr8iYkPZLscCvO+tsb2iMwp/0fGOwei46PvuxTW7V/YsDGztJu8ysbL5ZK
z2zuUx1e++jv4mxPtX6Jko5Y+zauVudXOGhbW1/TB/QFORH6xpn/6OOi5nhs
fPOw8L2HTxJc83wFR8M8lfyWVaKvvRE7LoismiKwpORphgrsTe/4QMJiW5/a
ShNNfu5yvWPDdmPrt1WJ+mD27jPHoKN/jTEG3r8aBm89oqcVoyb2ONpiK3E5
qR5/370Cf88MQc1eHYKKshAa9C6a+zeI547ODkSuW7piXeZNcN/GEQU4P86/
1/oXT34Tl31Pm3t7mPvE+9vvE9/d8b6vsZc8e5aQL+q4uUZVh5LXHpLGaNV7
HTdXi2e5Bn9/X+jaO314lmLfneJsFWEbUOHWaL5OG9AWvbUjfUBf0CdqeUT0
IX1Jn7JHS6jvB/ArzEFVrU74nhi4nFCPjoSdqE94HfppGySsLJNhR9T7srO/
wMJt1753Sm+HJpr8XKQvOJbvX3Hcu+RkYoqoPfXXzjLFs7uS2uE6ZLfD9SuS
TmLw5Dzc8PQxpATEIi4rBVP8N2BQyDmR/7Ip+qCCPxF9P8ZVY/4zLyvuMd7+
1X8vxBdrlPyCo/HX9DRkPxeD8Lt00n9PYkVNKgWvsn4tjnUeRItK3/aDecfx
z4upTnNNyJl8sz7Chl8JEkPWe0Wa812ZkouxHdyTe9vqQx2pK3W2PQfPxvwh
njXz2Rh8LJ29R/yKZFva2JZPIw9Cn7Anyz6bHifMayFfQp8O0p0TPqavV+li
ccNTxwQGypOU/JyMq5OwtCupVXGd2GMNN/accaQ3saxxK5pocnXSFxzLxxvs
x6sFv7LqXkS734a5T96mnu/w5O2WXh0rY+W5K2luoof7qPLnRa5GQFosZmXf
hQeyJ2KE/wrM8lqBUdNfUl135q/V8ygiXG7A5IE97zdCXiX4zlDkTQ/DhRB1
XuVCYBz2F0/DJ6uMZ2+OSpHdD3F1XH9L9EF5/FZ5ba1VFn6Fn63vca6z3inc
01oH6iR8I+lIXamzGs9yUTojzxogndlUi60ngzamrdXyhugbtWfoS/qUvqWP
6Wv6nL4nBogFYsIaI8SMOX9FwpIqzyZhjxgkFh1hlVjWuBVNNPnpy+f/U4Wx
dacQ3fyAIvadVDsbrumeDuPsuc3+yPjtTYgtb8C8qlUiD4K5LqwxxvyX3MYg
BX8i+n4UhyG4LlOZ61I+FPHN9rkVjsV1Sn5l9X4vxL95BQ9NWowXL3x7TWx1
7HI6lr2+sdv8yrI3NknPZF4TXao6vxZnXfb6/yKryUdhj8V19vkVDtpYyae5
CJ+wJwt9JM9xGSX4EpHTxH48OmPOi6gj9+JegYHCFp1DrBBLSbVzFNeJvbEN
7+Dzf1RfE1tposnPVa53fNjeYK4K6zOp3WvrX2vMX+n6vbF/A867+iF32p/N
NbiKZxwV+QuG0jUif8EQdgCfRB9EfWQr/LYmosA3CrY5EaL20whjvw2x5kS/
HunMHusd3p246HPCzD3UuDWgJOwFNPvmwxC0TdSk6j2P0cVlWPEVrJVVMKFY
VZ+SV/8gjd+r3iuYsFHURDP9zjWvhvMx1dsyBJWKs/LMpjpcop6ZZBPahjbq
iU3pA/qCPqFvlPW5diHdNw6ztqYJ39LH9LVhSqnk+9yu2nDHzbXLiJHzE4xr
mtYglogpVR3Yq/7Wq++9c62GJpr8nORqOZZvN+c5jFmz1hT7e7z09geKZxND
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
352IMkzEppB4vBmfLOMIWqISET5qGcKnRIi+MY7O9f0rxdix55se2ast+ySO
vV/muF9K3Sj81RAr51duNA7ra5zDuY7W4l5t2Y57lig4CulMPJujs5+RbMN+
8eEjlqFJsrnJD7QlbUrb0saPLN0pbE7bl79Ra55nPegz5sXwOZO/UmKTMeFZ
ZV2xhtS3BCamRGxSt6+EJdffVCp6u3CM0+3sVh8ZYlrjVjTRpO+kpxzLgdik
bvErcwOfVo15T51szNWYFxdlk5syy9hzY4sOj7lPQ0DsUHldMNs+78zlmHyv
3Xj/pAkPiTpVfpN+gckTRov+69Y8jLk+181BCB4fhle8Y/B+iH2egeN1/3V4
b1M34vWhWbLnst0c90t57F5/ka9jzTWY+RUrTon5HJzraC3uJePDJF2c6csz
8WwO+QTJNrQRbaXW/4W2pY1pa9pc1GWTfGCPz6LvbP1JH8v4FQkDj86ZJjBB
bBAj1veJISMOhqjuMy9kWrf4FWJa41Y00eSnLXVnfTBhnq8i3h262xVey8ZA
0R+la2y/8L9Ives2JNUr4+mRDVmYXs7Yu7FPypr9SzE9bqrIg1Cu5YKi133Q
cCEX+vYU5GaPQWhzAvaeW4fms2HI7Rhj5gPw/VmR5+Cy/wLaT5VfF3uxPhjr
hDnjV/afWwqv6vjromPTWwb8ofk9jM+rAH64iDUdo4VOtCVtStvSxmuyxwmb
0/ZFry82+8t60GfkXXL3B5r9NasyBaH1mYq5sXUzBCZKzv2vKmaIJY/nH1H0
duF4yFsv2SzwuthLE03+3eWy/5+ue9zYehy103ec/TfO3GO5XrO7EtFp681x
89DKGJGvUDbjFfO17Bl/E3084iaX4fwqS0y+zL3BmFvhVa0a58/euByLU7aj
JqwAzT754id7qJR41Ms4AnIBjUHG+1yzr/kJU35H1dAD6ra6eY90Ph2qbm2U
8yuNw6QxVHat6tYDYi6fUVuLezjOz+n9oG2ELSVbGbytbV4rbCr601jZmrbP
3hinuhZ9JmqveVhqj51P2YekiaXC1/S5eV8JC8RE6O7nzdeIGWLHzKNIWFP2
djFe7+j/06oPxndVE03+E6QnHMu+M+ecxqvZK/3OYcoaVWv1BzBxSq16HkXG
CQx6JB8TQnLsxtHv9HkXm8Lj8Vp0sojP86fa/u9crJY925j+JxRnx+Np78O4
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
KTFI/Z31zyGmNW5FE01++tIvcCMM7RGy/BN9gzJ2zr4a92xXxssFh1I+AqH1
mSJ2Hrpb3ttc5D9sCEHukUxkWHErhjem4lJXLgXzVpi/0tfCXiTkd6YkzhB5
F3516ShqiXf+oAMJ3LjQKb/COVcj1JG6UmfqzjNci54z+88F4sX/NuYMnb/y
f/8/e+cCVlWZt/0u552xnKaxt/LrNJU5YzFN5RRjWWY1NaOZZZmjeUQFVEhB
EcEDHkEEFRUdPBGBIoIiBKKAiKJiCkqKigR5SC3Hz6mpnMbL3q7vvf7fup/t
3uzD2pz3Xlu9f9f1XC7WetaznsOd1f/mef6y+sBrljFgrWL2zlbnjtnsP9LK
6DRvtdYjs+aqtdfTxCMZp5Rm7O9DW9b7X6C9NsOXtPrYCCHGeSzYj1Bya6Zu
nBm5OZJ6mvJrWOfV2NAzV/LmjZHAkESJ71Zm8671OWGmsl7KOs+T6T1ypHLg
3rr4PfyQUaa9FEljlmlt5qhzpnYE4ptbm+UbWJcN9rlIRpm+kzAw3eInlL1b
JBs6bm3ynCU8kCkVr/ur67zUe7Ryl7rGPTxranuqD+8WWfymhIEbVV8LRtnm
nNnQCjlnMLeYY8w12ls95u+WPUPWfg3WanqPXKnoHClldrnnscbWuoUGoAVo
YsO1PDqbUt9VmjF9M19pSU/z0B72O9FbIcSzsPdYsP+gobOWMg+cN/krndNl
XXiR5d0er2Wp+L51e88Hxsq9zy6U/NmOvgDi66/3yhLvbpnqrCe9+Pf8pRfk
JfzdODFf1cd+DORXQZ6V9XZ7S/aumqPVcTw/THkfUQflQE2eXImb3+D47MuJ
qRGS7B8qk+dEyJ99YuU+/2PyxsBilWfG+rwq5Tsc3a2ff2XFBPk2y8vy8w/L
6/wVXJvvow7q6rWBtq39I3wbfej9/i65L+CY6hv6iL6iz00dJ+YGc6SX38a0
XofVHFvfg8fxl95Zah8JcrdgjbDH5CX/eLV2eu3Ai+naPVOtvZ7HUjinTGnG
e8x8m/vQFjRm/nm9pj1oENfQZEPjs9//RG+FENdg77EgH0dDsfUtUz9QdT98
+wPxvc3HEu9+s22Iw/lfz40cJV5xPjI3OsjOdxlmisU/fYv23iSnsfi3/muy
BD5h5av8rp1Mf+d2OTr5frk4o/F+AM7F2hL3F6kdGdIov8GxTJDd/vMkZ1Fv
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
1aMsWjpRgufGyiSfbHUG1oaetr5E2btFEt/jULPnrRQ56H+eK0l35Mmijhsl
uNsameQXKOvGvy21o25TBde4F9xtlaqDunintIGz0+orqs/vFtmMBWPDGDFW
jBljN88D5gRz05g9PphrzLm1h6T22Tj1T9bLpo6rTOvmFaub994eaAbaWfT6
fqWlQUtjlLagMU/TPSGkftL2mPKR63ks5TW23ghyZ0zx3yq5yKfyq7WWXCr3
/mG+/H5omKUevBDve1K1uo7eCt59728fy1PtN8rczfMblVMkPyhMHhhcpt61
PlPs+PlU+Sa9p6E+BMrlmPmy90yyg0+yL81P8mOL1XV+nDZnv05V84ZrdU97
hjr276EttGn0uDC3mGPrs76QN+WBoWWyLSisYd8pMlLmZc1Xa43z4ezPA0OZ
Pmar0oq1f/bYsAi59/fz1TU0hjnD2kN71mfSoZTr6PbANd1C24QQ97Pl4tNS
caCzrseydXl3230Nw+Cv+Mm4cYekc8zTKvY9ZMLD8tSS0TJohu25YIPWz9P1
VhBr971rtES9+oGUrvaSizOa56sgJ8mWqQFu8xtsvIeVjnk/Fg27Tcdfsc2v
EhZ0RBVn+VnMBW3Zt49vGjFWzLE5/0tzfJbSNV5qrbHmej4LNAKtWGtnyOwI
6RLnp7SFn6E1aA7agwat+weN6nkr0DS0TQjxbPqWXJbyM6dkdJq39B/7lAxK
6WzKr9Lxcem65StLjHxOzgDpEfa6xBVOcdy3kN1H5hz+H+n6fD/J+fr/Neq7
OGvL96OBLh5d61NyZrIMKllgOQ+s36JE6Td/heVnPEOd6w3flEFSUjOtUXUL
vvtJrXVo+VWZuaW/js8WrrQCzVjysGy7KGMf/u21nC2dpV9AF01zXZX2ehd/
5+LREUKc4Y7Y8o7JpnOdVF7yjHdNeckn6+clt/gPt6ZLntdik6/SOd7mDC1n
BWdtYU+Edd3sB7KlYnCN7OiT1+h9G/Gvl6hzpybFzJWEpR9IwVx/2RHsr/qc
N2+slKUlyCK/MFndd4LE950ki/pMlUU9Z8miNyJMpecMdQ/PErQ6G94NlOx3
/WRH35FS+fpwOdFVK09ppdtwKXvDR/LeHSWr3w2SmNfnSsxTq6Rk6e1SqhVc
4x6eoQ7q4h31rtYG2kKbaBvfSLDpzwxLiek529If9HmRX7gaA8aCMWFsGCPG
ijFj7JiDxs4X5hZzjLm2Xj91htu9axv2mnD2Wadlaq1xlljprRvr1Rr6DA2t
zuhn0pSmLWd6qg/6KoQYS3L6D5ZYtb3HkpJ12SaWjXOaJvnlyfzArdKthykP
xtN+M+XeP8ZK4RxTHpSEifni/d+pMi9wq22ulNl7xWdYrni3T1Wx9sNHVzcp
1r80JEw69KtS8Xb066etS+Tr6NVyNfk1w30I5bGcmOm4fyVjtOQt3mryUmLK
TP6KVnCNe3iGOvbvoS2jx4OCucUcY64x55j7+96rkkXBoU1q5+jxRHkPOVe0
tR88ONchtz20As0sDzadA1cUuV9p6qlRM9XP0Bo0B+2Zzwqz7HfR+qXnraBA
24QQ91P6hZeKRet5LLvG2p5HVeYzWd58aI70HzRTekXdo2Lf06NnSpflo8U3
pLMlPv7XhGHS9277XPZDxPdOP5nx0mg5MjJcStc0d2/EPVKdcK/NuWXuLnox
/U8m3OHgkwQ/+jN57qH+ljmYGHRMFfPPzz3SX6vjuO8FbTXkdbmzYK4x581d
L6w11hxr7/trPxlx2xAbbUArr2maMesHWnoqIUDTlsmzU1rTNAftQYPWfYNG
9bwVFGibEOLZDN/3b9l35iuJ2zZeXvlosin+vfs7Cbn/ARmZ+kfTnoQtI6VX
UDeVj906jh6Y0V021FyRrl1Nsfamgv0egcWNi+l7Ev0/GmPjr/SNXWP5uX/K
GKO712RwltlHRxc0+b2Zh6+qtU84flVCM/9q67EUBCvNxOSNUj8PXfuEBD/4
kPTf+a3Jb9G0Bs1Be9AgIcR4XBFXDk7zl+lxUyUmY9C1WPh2FcsfFLxRt74p
1v53S6y95Fb9/O5OPRZ4MV7zxH6fy6aHTB5AY/azODtPrGzg5zL61ZMSf2+m
xHitlSjvBInqvkhiXo2WmNcjTf6IKpHqXlT3hVqdv0vME0myqGO6JHTIlg23
FkjerTkO52VZl5KkdlKa2K5ePwJtoC20ibbxDXwL37T0p+dsU0GfLP1JUH3H
GDAWjKmh877q26+COcXcOvQR+VW8ljRp7Rw9tQ26Ghk0PlNpyOzZLcoYIOGa
xqC15kJPhRD3kx5zxiZebfZYfkxfKEVRZTbPkJcc5329/36uyp+ROf2g3Pdi
rPQMTlbPF4wzeSvIQ25+BzH5cTgH6u5UtfcAZ0Udr93Y5Fg/cntMnDpF3svI
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
tqCxlzMnK81Be9AgtGj2Vsw6hWbprxBy/YE8Ksg5HrjzM5UbI6JwjXgv8JGs
A0vk8Yzz0mb4Eik/c8otfUk4HCPhe2e75Vst4aNTiZJzdpWDv7Ll3Cr1zNOZ
um+uLK2Iccu3Pj1TLW38lst9a2ul4OAq8V40UqYWrlJaCyz+TPqXfKtysBBC
biw2pb4p3bPD1L6CXklzZV3Gmw2+44q4f57XIinxijbcf2iSV3Ed7l/Z4RUj
BV4LXdJ2Q0Bb0Bi01j17ktIeIcSzqahxzGWBUlObZhMPN3ssk/zy5NnOmXLv
07HSqXuYin+/3suUrxxxb+t85dZeTVP3OHxVkySZ0Z87jemb87t0eL9aVgSG
mvZaLG/6PgpXlM9r6876yk7IVPnr8xfudvBXcA/PUMdcH+8a3X8UzCXmNHFc
qHQYWK27rjb+mbZWWLMmeSyaJvQ8EayrOm/unlR55S9Zal8LtHbvH2Pl2d9m
Kg3aeyso0Kxe36BxQoj7WFUzRDcmvaoywBK3NnssF/duU7HtZ0cvk/4bp8nc
+BHy7KBI6TV6qmRl7ZOTOr4KytYJU5u8x6F09W89Jt+Is3LQJ1q37xtG23om
Ezu1k4Ftw5Wn0s+/Svr6mvLb4x6eWdfFu3pt4ltGj7e+grXCmjV1bxK04dje
BKUlaAraenbQPKW1/hunKu1Bg9CitbeCAs3qalnTOCHEc9l35ivx/qhCgh98
SF5J3C8DUxZIr+LvVL5yI+LevnkhklPlnth/cym+sEwWVq9x8Fdwr/jCcqO7
Vy9bqmPEN2e827+75+xFua9PiHTd9k8ZtHaJvPbhfgm5/wFNe4eUBgkhNw6D
QtIlO+VNFe+elOYnJUsbd2aTa2L/66Ws8zzJ7vR3wz2IG9Vfye6YoOa4ufns
W+qvgJKlvTSt+SvN5aW8rTRICPFcCo+X6cakf8xy3AuCeDbyjj/68AS59w/z
1V4V71+tVfkw8mfrx99TtlyWKytiGx9z1+ranx1VX9k8fZc8NiJPsqNGy8X0
dwz3JVCurlsoefF5plz1i7fKzozRsiOqwsFfwT08Qx1VV3sH7xrdfxTMZa42
p5hbzHFj1wNr19T1hkb02irUNKXOnsOcaVqD5h57eJzSoL23ggLN6rajaZwQ
4j6Sv3xVNya9JXOFTez6209K5cKBs6b9K+vWS/+PZ8pzPstk4pKpUlGYIpnR
abpx9+LAmXJ+dhP2rMx2PDvKk8v5RY5jqA2/U8Y9au2v3Cav/crkr/QaeUwV
XOMenln8Fe0dvOswJ9o3jB5nYwvWrqnrDY3otQVNHdG0Faxp7E+a1qA5aA8a
hBahSWuNQrN6WobGCSGeC/LVv/LyYAl8sKO8srpUXny2j0fkwyiqcr8H0Fj2
nJ0hvvuWOPgruLfv7Cyju+eUouOBRndBMmv+Ld5d+0m3laUy9uHfyisvDVIa
JITcOMSv8pPAvLdlR0g/KVn1VwmfMa9R77kq/l9y60aVcz2v/XVyTtjcX0iF
VgzvRyMK5hRzW3LrJpd9ozFAYzsSeynNBea/LYs0DRJCPJeN+79yiEcnp//g
NB4+ZkuR3Nc9Vh5pnyDvvvex5M7c7TTWjnauJjU+1v7TnnhJTv6u0bF8c0HO
l55j4uWLpS96zBlhSVv+R/bEpUt+bLHs2TS67kwzK39F7cHQnqk6Wl28Y3S/
UTCH5+NfUnOKXChNXQ+sIdaysd+DRqAVZ+3laRobMPBjefTXq5X2/HOLnLal
1w40TghxHzkXnnGIR+/+wssmbo2S+XGVinlfOvRPeW5bgQQvSZftWdFSmhsp
W7fV6sbHd4+OlPNzGx9rPx3fQT4ZGWO4R9CU4mzPxriedWeEBT/6c3nuQR+T
p+JzTBVc4x6eWfyVnvpng+EbRo+zKQVriLVstMeiaQRa0WsL2irNnaO0Bs1B
e9Cg8l80TdrrFNq11zM0TgjxXPacuajyjc/5+a0Scfiq0d1RFBwdY3QX6mVL
1TDpnxHi4K/03xiqnnkyBccDjO6CYuHRqzKz7S+V9qBBQsiNw+yEICmZ/La8
Xv6GhGcPavR7rvUB0lXu9ZLrIN99aeIvpGyV5/sr8FQwp5hbV36nsYRnDpVX
yt9U2oMGCSGei15+k301+U7j10MeDJEB782U5P17JTnJuReCZ03Zi1Fdm+Y0
P3ljyogRxeK/tJucWj7TcH8CpaImSwqjD0ph/FbZuWKhU38Fz1AHdfGO0f1G
wRz6x78oPj7FzV4PrGW13Rlz9XosmlYa0tP6A/uU9obcH+K0HWjX/l1onBDi
Pnadc4xHrzn9nk3MGmcxWTyTvNNypPCCXD50Xk7vypTL5freyicjF8j5qMZ7
K8jfXj1ycqvG+d1RcqIH6I5n1Ujrc7/ayHNP/El5Ki8PqVRF+StPPKeemevh
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
fc2+du5rtj3IET72NVtyLhLzzxTDWu25rxm1H2ZOFOGVp2NQY257ORZ9vFz4
O9cOvyzn6Yh9tjreR77Qt9K7btoceTqUc+LM0zHpCzrydI6jJe6M+N6fKy7g
y5D3Az7PgYrLig+FxtdmZXmc/5RzWBhm0NBc3xjoLgw7jpx/A3GNG3HhDx3+
StQjKFwyVngqj2c1YbQUdEzn6BrdQ/fSM/Qs4180f2SNM8xgQB5CQtoheX05
aXMTjl4sQeqJGLTV7EBw3rsBXwsPRPjc14z2vtq3S6y/z/wyCElnn0LqR0+h
7OwTKPvgYRhPjILZPgr6pnh8tuwBnIt/AB+ofoDGpB/CuOFH0G94GIVrxiAv
/hmoVVORHRqLdGUi8n6xD43zo0Tk/awC6cFJKAyNhjpxGrLjJqFQ9Uvokx6V
2vgxGjc8iLY1P8C5xAfEO/T2eJibRsF4bBQqpT5USn1RfzQWyWfHYuat5zzy
dJR5VYgUtUgOIXnzQag3j8xvS5r+oCZbaPzo1beF5p3XVJzDwjADhjwEc06R
vL6sVZXB/lUmImo3Bbpr9zVrT67CG9VrkGJYjw36TVirScHa7I3IzUhEWrYN
e8bEoGhCPIqCEqGdnoA9r8Zhz9bHoV4ahwbFEjQvW4TmKVloD8rE2UmZSFPE
4w0pzj77Jk5L545L146HL5TuVSJ3aTxKt45G6exYqS2pzSmJKHpWavOJWPEu
eueGzPVYW7hJ9CWlfCPSqtdC9f6aQE/TfQ1pvOHb3wjNO/VPeVycw8Iw/Ydy
MGg/J1/rz5a48dBmPBfwdfChFjSfJl2ha1+ziAsOv2TXYfxQeQyWczle+5rd
sMzEIt1SLCpeipu1M7zqzNguZOKBsEZYdh+Q/RjyAa6FfCJ8Gtq7K9DjHmpR
mPUcLBHjfF6j/B3ytRiG8S/5l7nux2Cxtq0cptCHULZmNDRK8lfG4mc7m/GI
FHRM5+ga3UP3MoMDa5xh/I8jd0Xltf6sr1+B1GPhUP12BYz7YhCWVRvwNfH7
KWh9Xt6PqyhW7Mfl3KPro6otODp1EY5OXgrz5BiUTYlE4a+XIC94PrLDXH5J
atFoNAYvFkE1WBJyakXQ30fnOyJV83MUrnlC+DHZr01FXsgsFM5ajLJpETBK
bTdODkfjtHDxTled+yjRJ+d+ZSPVH+sqSMuk6eWStlPt4ULrne+h/B3a24xh
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
nhfHXd13RmqjblqRaLPdYPX2X3Zohcfifo76Sn2mvgd6/gIZZWmTYEkY3+fn
KM+L8r0YhvE/TX81o5X/t/99wnQuE4Vu9VJKop8QXolhzc8c/orySeGl6KR/
X0zbj6lbDOJY+CvKJ8U9dC89Q886oTarz3EOS19okbRLGmYYxv9oq2KwfLul
V2vUyfZYR+7DvoPIy5uIssyxSM6rlPehUjdFIzvt3YCvpQ9+uHJXxHxoVsCs
WyH//YV5R7e+R3ZJlaj9Ifscxh0Izqvy8Lk6+yu0N1Vw0T5xr/M5aoPa6u5d
1BfXHmErRF/lfo+QHBbSpNoWLe/bRprVZj2F7KLnoJW0TOdJ271pi/K8OIeF
Ybondn0NzAWaHteVKfaULxNr+4YcA2K3zsOGLTM82jLoIwI0intPd/kf5oMV
aFcouvQ91PZ10O6PEnNJkVaY2mt/he51PrfHEIMs+5ou33Na6oPJXNGvMQw3
OmtzQ/oMRGxdJLQs5lLSdm9+A5zDwjDdY9lVgs8PT+/X+vSR2ZfE//6/cPnI
y4m4GXrMUVPFh/dxJuEwvq/+Cb6OLve8lqCHKe53+C6/HJVPFeBGhLZL3+Tb
9FLE7XoZcfkvi+Ou7rsZUYzKJwvwXW65aJve4eGlRJfi+9qf4lSizaeHQ2Og
sQR6Pu91lEX8DtZp42EN6buvSEH5XnXFmkD/fBlmWJJ4Yi/K/pQa6G4MSU7+
wSTv9UV1Vdz9lbrIaXikuA2jdreJY3d/xVmDhYLaYPoOaZa0yzCM/6EaHKm2
+F6vU1OuC61Ff2V5G+anY6E6FoXCqYtxzdYgr9k71qmH95r9nOISt9yVWOiL
YjzyRMoqanx6HUenLcEXNrPHPmIUkZlm6Vu8jUjbOvkdnf2VsPpkzKnIF/d6
5KRIbVGb1Lavd1Jf3O+nvlKfZW9HGkug53Nwo0r2BUXej6RVfVA4VO9Fo/LZ
KKFlMQ+StnvbJvlgc/btCvTPl2HuWxJ6kbsir+3nbBdr0Xf0ebDPiBA5LFVx
s3F1r+s/N9M69UjGbojA2sITuDjWh98xYSH+ajChufphlKa/LvskuSnv9Npf
oXudzxnSE9G8/2HRJrXt5bFIfVBpWmHfP3J8L1+4a5K0alq2EEuN69GwwKFl
4XFJ2u7t74DyvRiG8c3d8hfRuvyTfq9TZ++aCkvouICvl9+LuE11VaJtuK3S
d+l3CH/lxERYa1d4nb9uqEJd7mnZE+mujVvlFUhonIk420xx3G0Nlg6vhtqm
d3S+bjGuwtm28d22QWMSYxshdVosEeOQnxvU7+fbI89zDgvDDBKW/7BgVRuv
U/eGIxe2Ym2zy4tSlG911V6JnCi8E+deYGdUK/Fk6208LgUdu/YIe1Lc63xO
Ydgmt0dt0zuYnkk4sUdol2EY/0O5K5Hbe183JXnzIbf9r95F5aaHkV4yHUeD
wvGNRStfU9kTpfu7r2UxlKOwPsrNX/HcG6ytIhmNryz18jlS47fgVv3bnj4M
hc6xL1VwzW+kyHC9o5O/EmzMhNK8zbFPmy7Sqx1qm97R+b3UF+pTV3uE0VgC
PZ+DF5VCi3JNHEmjpNXUfdNh3Pyw0LDsC0ra7m27tJcb57AwjG8od8XUy9wV
kb+i2iuv7WdteQe5W5/DvMwosbZP69ROivYO799cd3uh7anfAVN4lJfXoV20
CXf2FnR4IqPkeWzI9L0vVVf+itinLTNUfr65epTwaqhtekfn91Jf9hzM6ddY
hgPuWiSNklbnZb+GrPQgoWE5F0jSdm9/B5zDwjC+sewqxfXGlwa0Tn1d0Qrr
jHFYm7sp4GvmgxW3Q47iWkId7iR07U8441qEDf8o/QluRtZ5XavOOCO8Euee
Xt21Q/uIbTs1Htvax4vj7u517jVGbdM7vGqwRJpEnz6PONxj/2mMNFYac6Dn
fbBi7Y50odnPFR8OqB3K+6rbrQv0z5hhhiWLbG/D9hdeq+6JGNs6HDm/URy3
X0yVPZK6yIcc3oqbv9KSmIrEq9+LoGPnee0SRw4LPeN8ntoiqG16B9M9pNUl
jW8HuhsMMyyZU6JBav2Kvq9Zd9Sw+L9NFWh5djFUtnAUqiYjYU0ejpauceVk
2FffB+vr/g9lXqd8kE57g31Ub/byOJKLytGyb4O3t0L+hsXhb0TWbxA5Ec73
dPZX6HsttyU5rlmifLZF76B3dX4/9amrPcIoaEyBntfBCNKgc4ykTdJoXvx0
SbMRODo+QmjYWTuor21T3tec0sJA/4wZ5r4jIbuu12vKcuic9cH34PTTi6DU
r0K++imvtnP3xgVgRIHFrglDqf4ELk6a6+Fx5Kfvwdmdaxy+lH4hSm2j5XV9
s867tn13/opY3+/4BsIXsD0O9d4F4pjeQe/y8FienSv6ZNcObx/FF740mJ/+
DJTla3H6WaXQMM2bqYtv0F0kcA4Lw3hBuSstcWcGvl6dvxaWmeNxM2R47RN2
O6QZ1xNN3dY/6RxNjQvRcmKq1/nvpP8OUa36ULRFNelPzu+m9ooUptzTMJ16
CKZ2KXZ4eybucVKhgXVGkWib3kHv6nxPc8t0NB1e0OtxUFs09tvDrEbLl8pW
odW1u1YMuC2qWUS/IYZh/I/uag0Ulnw03doe6K4MGdRnqmV/pHr1o17+SoZy
DXL/47YU/w+2hazx8lfoGefz1BbTO0ijpFXSLMMw/kfkrmT2vR59sCWjIw8i
Bgmb3kZh4hSobEvRMjkSZVWHPNbtg+u3BHyN3d+R3uTaC4xqebjvDWYuiUde
WJKnv2GxyPVpfIXTh6K66cEFrvd09leUOe/Ke7m5+wadg95F73TvA/WJ+ua5
R5irTzSmQM+rv4O05zE3kjZbgiKgaloKbdJEod3KjjkgTfe1fapZRL8hhmFc
iNyVwt7nrjjjDe16sSZtV0cgK+5N5KvHCo/l7NiFXu9Q69YGYGSDS+nervfa
0h5ch7VJ2zz9DX0N7JnLZD8k3zYO6upXXHuD7Y3rs79CzzifV++fiSLbWPlv
ehe9070P1CfqW3/GNFTxpb3zYxdAIWk1V/1LoV3SMM0ZabqvvwOqWUS/IYZh
HFh27McN28ByV9zDqhyHzF3+ay+QQbkb1xNq+uSriD22oivwj/Kf4FLEca9r
VH/emYdSObEQ18K6rr1CNVRskcdhK/0RbPofiePOdVXc47rUVuWEAjnvhd7V
+Z7LEc2ib7ci9/dpTMJnkeZiuOSzZBTNgFXhv/3srje+LPLAGIbxL5o/qsRe
VxSMbzRnMkVteyfa+HGyP6Jd/XiHvzJWeCglS8ZB9+gEJP/xBNb/8bg4pnMO
f2Ws417pGfl5qS0nddI7qNY94xuhU8M2oVmGYfzLHN07SO9P7gqtK2fUy2vW
39nr0TZ5KZKqZqFy2xjpeAn+3/cOeqxrzzH/JuBr7f4KVVpDJy/Dc2+wW01G
2dPQhq7GN7aSLn0QeX466n5kW2LFmr3zXQ5/JdE179sOIs8cK46ddXC6C3o3
9cHZH+pbV3uEiT3dpLEFen79FaQ597GRJkmbZWlPILlqjtAsadd5nTTdn/eI
HJYSrhvJME4SMvuRuyJF/voSeS3/b4b9Yv1ekROD3PRnxfF/GQyBHlrAaDY0
48q0eY59uWYkSHPh2n9K9j/MD0ObGe+qbd9F3Y/u/BVnHRwKrToB9tpRXu+h
d1MfqC9Xps4TfWvIGTn17N0hTdI85GY8I7RKx6Rd2fOSNN2f3wLlfzEM4+Du
/hfRnHDab+vMuXHNotZ9y+wrAV9D73/YcW25FXfi+uarOMNamobPf/u49zWV
HnXR74s69bcii1H5izx83Z1PU1qB6jfPwJr7IKw7HhTHdK6r+6mtyl8UiLa/
TSsV77rjo0bM5bZfwlK+qV9jozmhufl6CNdnaZ99SWg0O9HmtzZb4z7hHBaG
GSTUn1Qj4rAW+Rd5j9eeaPp9jeyNUGTHP+Phr5xKXIGU4ESs/+NBEXRM59z9
FXrGvQ1qk+ke0iZplLTKMIz/0RpjENaP3BVn6I2OdWlryUrkhWxA2fxoJJyI
RmPQSujnqHDNmOnpIVTs6ve77qfonDeiL46X9wajOvOqtDzhZagyNfioKq1H
D4QiYZvD16BciCS3GiDkrbj7K6mbLdDuc+SZJGw71Ku2qQ/UF9EnqW/UR3mP
sOJ4j3uHy35upDX3cZEWSZNHJW2q2mKgVy4VmiXtim8oabnfethu5hwWhukg
dmNdv3JXHLEL1gLHuvTx7BgYZr8Ow8qZotZ984wIWKfF4IomJdBDHBS62/Os
tDYGs9QVYu0+K2kXrhRu8vI8TBkxOF4+CtaMCPlcUVJZn/2V/CRXHRxq67hh
lNR2rNf7qA/UF+rTrEwDSs2x/RrbUIa0SJo8PiUKS40bUbp6htAsaVfMn6Rl
0nS/fguFnMPCMIQ1y4SbVv/nmhjWT4Qp6ZmAr6P3J26EHsPXid3Xre8p7lp/
ipb13nVXbnTUtafjC0oNKqcWdttOk+44LhhqZH+Fjulcd89US21+qnTsOdZV
nfvWpAOij3ei+z9OmiMxV/fBN+trVA6SPqmGEeWDMQzjX6x/2Yq124JFXPhP
rnfvzpELqR517WN2RHr6K6HjPPyVsugtaF+9Beo/mUXQMZ3z8FdCx3m0QW06
4Tr33pAmnfq0/CW15wcYhukTwcV6qC39y11xRlhTkmv92nYY56aEI69oEvIK
npOOF0O1vURev5Y9Fp0+4GvvA4n0zWaUlbjGU1kcjcq8KNmz+MqmEz6G2VgL
o25Fr/yPsn20tl8p2tcXx0CdViW/r7O/ki3dR/dki3sqxbO9eQf1hfpEfaM+
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
r3aex3X1ewOeu/wt/8t7Pb8jZqnLUSr9343e+hjNxlHYk/G6y29RlfvNX6G2
nO2Wpr+O5upRve6XoTYGszIMXY6T5mCg0LcQ30T6NvSN6FvRN6Nv15tvTFog
TXj0bSztz6YQGiItmfYmCm1Zjz0GtaQ1U/sYKD9WQFsbK7TolU8kaXYwfxOU
L8b7hDHDkaakk6LWdiByVygs5WqUVSfA8KQFlujx0G6chObpVhh+fgA3FI1o
jfsEN60viT7S/9bfX+8drHr2zrgUcRz/KP8JbkX63tfrksEEm65V/vvLiGJR
2568jlMGi/BDustb6Yu/QkFtUZvUNr2D/JWb0jud16kv1Cefz0ZXiDr3NKbB
nDN/1ru3bTwuNPOldSpa4s5IWrIJTZG2NFuegyVyHAxPWVBiWAXr/m0B0T79
5ihvjPLHGIbxH9abFnmde0JxBmI2KuW/F2XEQHs9JdBdHBSaLmzH2b/8H+/9
wMJG49PVa4Ufcm1LhJu34umv5IaOQ92SUTD8doEIOqZzvvwVCtGW1Ca1Te/w
qnUv9YX6NBwhDZGWnHMRlxSMCbrt8t+kQYZh/AvV2h7M3BWKzjVA9EXS/8/Y
VwtrSZJY304yroSx6VGYLY8ioWmRfF9jzSGxrk9r5BS0T5WzDkjesqherr13
H3mTaxEW/29I3f4XNGq+xpWS/4Vrxb9HS9770G7znZ/RkncSYTH/A8nByV5+
A9VK/2i8Al819b+ufee9qWhfMNofrLf+Cn3ThDRP78hjj7Y+Bo2FxuSsA+8e
NAc0FzQnvuaK5pDmkuaU5pbmmOaa5pzm3i/fcFmUq+5NULisF9IOacg5DlV9
uNAYaU1liRHaIw2SFkmT8pg71b4ZnN9EhcgbY5jhCNXaHsx1ZApRAyTHc/26
KqcCe8yvI/bgJrHen1IbhLT6F5BrGye8htL0RDQ31aFoagKKJiXgrMIzN8E8
fUmvPZbuomrsO0gLP4k9G/8NpzP/iL/u/D3+mv1hj/OWtrgVhqAEn57DlWnz
0Gxo8RpzV0E17anuvLw3laZ3e1P11l+hoDZlL2e/Y3575bFkh8IujYXG5Gus
NAc0Fz1Bc0pzS3NMc01zTnM/0O9HGiAtuPfpvKQV0gxphzQkPCVJU7n14/GG
7QWkGIPE37H16yUNrhJa9BhzTs+1b/yTw8J17pnhB60/W7fXBWh9+bCoh2E1
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
2tXtkkZz/MO818qYSVQTH0zty+ZRf0o8mdNW0/G319Px1DWUcfL/oeqMJ3is
Ez7jGu7hGTyL3+C3lbFTeC7MKbuW4AN8YZ9+/nP2Eb7CZ/iOPWAv2NP9bMAE
sCGHmbkyWALmFFNMsTtnonal9p6fI3eW/ZvNWfhC6hMG+pAXV1k1LKWnHiXV
0SlUc2YCxX4YRoajj1h6sUB74VJfEbKQTk+eT4UBWuoO0FHnw5rb0EccoKvl
l1zuI2XjAVme4VbLO6yFGCqHcWx6GBkf1jr5UxMVTTlPV1q+1z9RSbFRH1NG
fq0wavgzrkn3856sIkNEtNM8mBtrDJljEfaGPcrySkJMXMULsURMh86raDin
yC1yLPIi8j4CI1LPlfqjART70XzGEjClPf6oxV9gDthDbTBgUfo9MHqv3wu8
ixpFw6LYj9yWr2+859oVjLOFn9mdhe+cnUQnwsOpduserleFs2/oWDZdCOJa
TgUdr3AvFkPuEqrKeY3+95GlVDvvWXl9RfBc0ocvpZSROmoI3kYnfjH0c3zN
VD39qfBjl/tQp1fL1skyfLCPzMJ+fOEsGiLHCuMpiyan/yHPXMThYVto06IO
Ssndx2PT4g6+5ul3mFvSejREPkMNC570yVf0jDcYGmT3jpi4ihdiiZgOmVcR
cmkQcrpcyG1VeCLnWs4/YAMYAVaAGWCqoGMmYyn7wnPcc4U5PAFTwBxyhb4t
tnMAo/f6vWANS6bCryj247VrbS9Qy44qv58pMyfSOZNM68WeGS3BRuqdaeVO
GlInkF41ye756+FtpH/8fe7V4mpOc8Rl5m3Qn6VlR6WFR7oW13HX+ADuX2L4
HZn6w6k9vpd7mTCnsv4kndE3019yRB0I+I927Ud2v60JLqXzUWU+rXchrot+
MAynlKJZlFQwiz/jmk9zxAj/P+i5Urtr8O284CPvSfAZvmMPrGsR9oS9mU6G
U11Lr1jD7C7FE7mSeAdg9XttEJ0/OJtORl1wmXdgArzJDQEjtter06dQc9IE
y/cjAsaanxPxg77y19pe9Pt7wPjfUsu6MsUUU+zOWOU1lXM9p/JcmlGwWva8
fE3abDL/u8bfbttZ+8BmSjSu5s+pnRuYm0hsWkld53fQuh7DYG/5VWRMXi3L
c9hxHqkB9rXBosdae6+kjqTm6BGk+XQfpR7aQCkHM6nskzq+hnvSc/iN7RyY
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
BFRQ58uLeOCz4/2cqJWU8XKO63mFNYfiK/aIveIz9m4bC8TGVdwQU8QWMZbi
jdiXDnJ+yAlygxwhV974gtxLXBwwkVeRQRnqtYyV2NZoSjesIM3xAJEHEzAF
bMnxK8CiLf9mibGAXX+8M3N2l/I7q5hi97NBu1LiJ+2KOed9Zz3GQ1vp3NhQ
0oxZThcDrefo6EdSUDqPDuTF8nl4Q+tIKqiIok2/i6K8DwJppy7VqRfLX/WV
ohYj8im6Ei7yFXLn8v3T5wnrFlB2aDtdy/tQ9G/DDtqkqSaVqo6yNToybPDM
szj2tu+ob7f0kPFJuzJqMV0Je4A/V01dLcuBWPrWj5PvqeKKX2H+ZJzIsRhD
tsrex5rM8Qgx6xoT5zs/FBrGez+Q71uPe8Q82xLzav6O68gJcoMcIVdyayK3
FwV/kWt8R+4lLk7qubJT+xpjJftIJBWUxZJBwJDoXyzllc0j40QrB3dx6lza
KWAQWLTl3ywxFLDrj3cGOjOVomFR7D43/Bv9W1HO9bX8PX4oCaIbEf02PMhB
0v+8WbbWl141iRpSJ7idD/oXfYC1f7ntcK+lMFFvzz8NainirXWvUrSW/iJ/
UTv3FkHdrm8OjvTIRXy3pYr7k9hpTMLLqGWG694r8AO9SFzVHauZUko1XXOp
plMYE+V5GvwWHAjmcsnhzFRTf7h9jTLupbLFc32xbzpHUvvmSqfriJXESUl9
76FPMRqSBjVD01i/4nZuh/whp8gtcuwOA3UCTjAcr9+KamNs2dYTuxnxO/ph
y/3Hr0BnBr2ZYoopdvtW8m/tLs/FJ5fn0cSqQsv3ivMHnc7apbGkbzblH5tK
mt5Z1HtpH63LDrPU1XLkClB/6ogbniWxKXmQW1kie//MlWpnfsBhHE96ngqD
Z3rkNlhvkzzSuUZa0kQb7cpICi9bRXldUyz8Cj7jWnOMtT8LfuM4D+b2qj6Z
4Ct8dvcM9oy9yxlixZzUBtc8C2KO2DvPLe4BOUPukEPkEjl1lW9gwaJ1EjAy
uSLfJY6AMcUUU+z2zZ/aFWPZN7Ln+/WxkbL8iu25/TJDHJ+Pa8uTqe34aOoU
hrZsBaW0LLTrxWKob/LqPH7Zh/VUvfmAzNm/lWcpfKOeitNrxO8b652e1bTY
18RK315lqTXVN3UItcFC5M/2LTzJq+mUNT/DA7/i3Mc+Y86blBOR5nJe5rhC
fOdXsEdJc4S928YCsXGKlxBDxLL49VqOrSOvYjuQG+TIGz+Qc2vPlRG0zBTJ
2Og8NpoHMFN8KoCWtUTb8WBy/AqwKBcjYNcf7wzeVbyziil2P5s/tSv9+f8s
e75/eMY8qhq91K4nPPqVX5v5AH2r0/OZeIEm2nI+nvlhMGW3Pyded+jFcrhs
n0X/As4C3IXc+Xyebg91rNc7+WjI2UGZg1qKAk0lNax3vR+jxsonGJoW08xt
HUPSrtTOfJ57s58bJ3+23xBczL1IzGNc96t3x68wPyD8Fj1nMJcsxyWs3bFo
ONXODh7SHmZu7xBisMTa417jpse9EFPEljVDQqzlNEPIDXLkjo9Cjvm7kHNL
zxUBC+i5gu/ZHc9ZcNJgGslYwedvdTq6NuMB+149E0NJP3oJY1EufsCuP94Z
vKt4ZxVT7H618wdnU7O22O9nxrL8SkEQ10Oy41EmttBAqPMZen/oZ6xLyExr
dDtn/8z9pH/kfbo6355jQU8PT3wBeoGY+yaIvUD0r1OzWuRWbgl/18k9f6M7
gEwlxR7nRV0w47tHPPIa0oCW5j9Nw5n3keUewK88Xkymvnlk6gmjmoBivuaK
O/qu7WFhzlkEvY3jfTmeB7461jKT5YCEvSMGcvcQM9axCDFEXxXEFDXFBoQY
e5rXsf8KcomcIrfucp+bZGKM9Iaed7p3fq6Ai/HO2qgfNt9//AoG9GbQnSmm
mGK3Z+b/IV/TSRqrLll1Cc0Dm12et7OORfh7NP+TqZTfOYnKep4n8+c1FFmX
J8uxcP2p8jU08McyO38Se4tpo/C/fYfOZTj5euZKJYXrN3pZc2sl1SWs8urZ
hrQAuz1rsNdUq54Dz0S3vePEr+Capa4WOBbhNxqH+GFub3yAr/DZm2cRA8TC
0RAzxA4xtDXEGLGWn28k5wi5Qs6QO+QQuXSXa2BBDiNyAxhTTDHFbs/STak0
Z0+xX86JNRsbKSvkgEv9hFx9MNtze215AtcIy6lcS1nbM6jaPJriP4yk+oqV
3J9F6sViqFxJqjeLXJ7Fd4dE0lWTgTUM6R0rBN/kuSaxp7nIBYADAB9Q+GYj
aXMlPqCGqiutfMJVQ6Fljc+Co6kv0Pfe9sWLl7jkQLhXSkwiZYT8VoZf0VLn
K3E8ZPmV4C1UGpPgfm5hbZ/5FWGP2Kv0HTGwcCyV8RwjxAoxQ+wQQ4lfQWxd
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
6NGgS1NMMX8YtCt5ftSu/KnwY+/O9oPyqWhsNfU9tIXOjXM+y78S+gD1jZK0
KHtFfUNTiKXvBvqcn/hwDZ3rz6SSvGo+gxdriz1i0b4UpO+gjvzFduf1qCsF
HQz6tThxLIXCGpnvudxb7UdLKLz0Q3lNR8g8rhcG7qEjPEp2TxhVWydT3IwN
1BW85bZ4kTvFr2B0BRdQXMgGwbdJ8rzK2FDqiowkjbC3qtDlLmuihZd2cYxc
6jCE2CLGjtwKcoGcSDW/pIHcIYeSBgV14zjHQq7VuZWce7OAAWABzxeZxlPB
oKYJmMGz/aNiuLf92TEOvJeQH2CvaNwu6g/yzK9gANv+eq9YwyK824op5g/D
v3O/HvHxXT/vvRlxmK4t2083VDr6JtW7c/xvUrV0XbWHrsV1knF9L13onOFy
/rpftdDJWa57sGDciusV/pv+15SkTaJvYjyfeeO8XDrTb5heSnUhpXY1sZhD
qepwya9c7RtFxvI8t3s0J3TShb6nWBNiOrmNarIHrBxD+vtkyv0JaTJ915lI
40h4GWs9HPkV9Kc/Mn9o/ApGxXotmXJ+Qr3rmi3XarLPUnu/mn5oGk6Xj46i
k0nycZGG8d18jpErfgWxtb2G2CMHyIXEdSFH3uAvSZfEub8R555bMwsYApZc
3b/QOYuMmV2MSWATGPUOyxWMfbwDeBfu9vsGPZqiYVFMMe+t4XyzDb+yg7LO
Blo4FLEO1OBwOJPHGXuXoYUKz/0n5XbPu63zetayCPOVXCsm/QZ7fiWvZwot
6Z4ly7Ggp4krTcj51FepMDTGu5pcqgAqSp3o8bn+c1ku+RXc8/R7XkPlWXfD
2hvBd+xBlluJt/aKceRWECvEzDaGiClim3SbXBjGxu45nPPupmbK7LTXwDBX
NoiXNZbxPGNK0q/wEDCnmGKKeWf+1K5gZG3+Vy/5lSo+28bnmsXyOg9pqLKL
ufZUcdlKOtY3iT5rPUDpr++g9NxKqj/+OJWaHxfup9LXrWX0RXsLFZtXUtDW
leLvW1p86vNRvTueluXK99o4dTTftZ8Twgf1Hegns5D6pkYyx+LYk6X4iT1e
8x1Z8zMo59V02XvdATo6Nn8JD3yW//3rwljr9XrwzbHXCniVvqninrA31qxM
cFNL7Kh8XTrEFLH1JRfIHeYMKlBR6amV9IXpA84xcl1oHs25BwaAhc9a9zM2
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
dvwUXis+Y+3nhQyQxTFrMcumrfl5iXUAXUAn0A10BF1BZ9AdzgP/CXTaMN64
/gc2gW30OFdymxIpxb6RbRt76lnKdKQpv+W3PE4lnh+yT8A3NDwvnm9SrjUm
gFcHvgafg+8NeN6n2OKfD9l/4fMjtd+w18M1LOHxZY7O1jhqcw3ORWFYy5Hg
4hz4V5lfZmzg0CyuYQl2DnpdlY8popteTpZgs63uNNX1rCX3pNFkLxkv9ZLq
M+4t9qEpMM//x8IqqkvvZ6541LFcfKWMPj10H7Xl7A0RW6migZ7H6cOu++lc
1evksXcrv/XPtVLz5EDOEcwrsYcYv0A9C3SC+hZdnc0soc7ZvnugdkVdv9Il
fmubrv+MW/H7yF3/EvcBQ6+zK7H69TjAb4DjKPiDkAGyAC9BTzO5JmWw2bZ5
H33Weg9dzC3juhXotC6zn3Xsfy5sYYiR9Bzinm/2smfYto6Ta8nlGrwPHrhW
yscU00eD9EtDbzD0CPuq/R97Dntv2DUsQifhGpbwCA/9oe5l1Xa5WcmDbzw9
LqTcuaV7Lufa+5KWUMbUJWT9+VGaVr+HMia+SH3JaUqOHjOhxxW0fsLWu5xm
16fxZ3Cx47v6dxlj8a9h0WAsV/dzH62utE1kX7pxaPhK/H1SbUVUYP1K7/mN
Ac9C7Ype/QrODcBXorx1MfFDw1cgA2SBTJDNSG5f7cokjc7sJ1YyrsI6Fbr1
16l/zQpspLZZf3IKZUyYTzOFTWHbjNkrqT9pBf8G24fiI/Al2a/gY2qfC4/w
CI/AEdOSQZGurBF9n7666JOQctLmCS1UX/IJdRUcp7y1+8mWrcWE4tqTB82P
I99eXdtEeVYT1zgAM/H1BFvEPPe29+5Xjsn1DGoull94Bu8TJs+Mkirl2Rvb
xb3s2vXgmb9wbqObHpdYVyOZ1m3zXfv8Wp26ERu57yqnnvvLNZjHYQ3OYqPi
e2rp8Gxj7hQ34yuxPN1B8BXwrxTcv4/v2aPCVbru8fUmw1qwpsM6dS6QQakv
EbJBRsgKmSG7xj52r46836G7UPUMm8icK6kD31XqleS+YMXCptXCtvxM7zFg
MfCBPGsy+4SMpwWb8DG1z8EH4YvwSfgmfDQUX4bPj+SeQ71aTLiGJTy+pJFp
dVCWrWpE36fvzLkaUk664olKOmq+Smc3u8WaKynXVq65T/4eLcd8Q84SOlp1
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
sU0ro59UzoXNQ8ZXvNwr6vXD5+B78MHwCI+RGpG1Ns33qaX7aEbtT2lpYypl
tKygYucKqtyL/K8eXqLCTTTT95sm7+nNMeM9fryzX1mwiKoLpPf3y8Rx03uT
KGPgGb4H8qf++MuQZjlwmEWcz41sy6AZe4spxuLk9+SNcsLgpWi1fkq2EGpV
jHAFI3yFZ4u+PO/VbtDk6FOLKqReUSfGU+J7T6pqSZZ78/OPUzXn51ewjsqK
lij1D2oulmvOPHL/JFa57+FJUXRi33rdNTzfkqVZa+r6Nopx5bE8Q9WDhG/o
69ncslzYwYd9QNfvlfTTtfJblJf7n5Q46U3qmb2IJz7jGH7DOWq7xIl7mF3L
DdbgDKluw39CVsgM2dXHoRtdfEXoknUq160IXUPnG0uT/ThXlns5dOIljnth
O7muhWtavLZL7Bsr5tNSLVKRtscbfERvDfApXRt48ZXh4EyyXbAX9HiG5Im9
hD2FvYU9hr2GPWeEmYQyJfxkmdQPT8QCxATEBq7fErGiUo4XvBdWKHHlduIS
YhtiHGIdYh5iH2IgYqE2Vr76VYbmv+qx+I1s3eP5e1YwN4UTufjtw8NLhjpy
mxKVflS3PfOiee3gzTADB9i+lXIzX+X35I3ywuClAO+5M3X4tTKJlmZq0MFX
eNq1efEKzwPc1+t8cbomR5+/6VUJc3GOo/yWxxV5ZOyJ8/POsZyfR+8w9Jc6
WLcwgIvlI/sr1DM2Srmv88WFVHFgR4CukM/PfGcc2Y4somXJrzF3h81URVus
wbETx54oMqcb6zOUCV1fNXfQR8WXaUvVDZoy+R1yPhbFE5+zqj6gj6yX+Zzb
sQsm1lpbFhn0HMgM2aED1sURSTcyTqKxn9AldKrUrQhdQ+f+nCuwjdwDjPEx
YTvgY+DPgU2xv7impeUpyj8wVvosfECDjQkfybVFkUNV08T4mPApXVmKrbTM
3HxbdsFeMOIZwsRewp7C3sIew17jeGGAmQx1IhaAm+arGLAB1o6Yh9inN5Yd
2fSVrOVvYeA9esyuxDF0Y+dYuumcSBcOPce5TZfDTO7chq9sLXhf/WLEz4Lm
XD+a202fJY18jthogh8kVM717tkl5JnqhxkstbOM+v2lcph3BZ/l/lLcS6nm
NHkqEhlr0fZOO+LDC+xv083fPMwc8/je73BRW5nv9+5UN3Vs/TolJBYoWIL/
vFWxj5p3SrUaMieK0bmhzmYvnwhwJtSJ2B7ZSwmpk3navruPj+G3fhVfzbBt
47dmyHKzSr/WCOckLi2hjpx/oK7U15Tj0Bl0h8/QJXTqLu1VfofONTVWqVfY
Nm11p/l75QZff7e8n9sN+7uxny/VrskzvYRrcEKRFWtjjpu/gD2hO5OM/Vye
iAVfZQ2Le2szuaos3Jvs3KHpdNM1ka6LmNgpYqMcJ8MjPEZyzHNu5BoJ/9w9
cuKrOn4YUv7cfPJ1TZ6+OmET865wjv76QVr0Vgt/7jUtoewnpzNPi1GO3x6/
geskEjLmUvPF16nuXKXS40pvLumdKuFBKoyl4/QaSuvKVr63XW6kvERjjMWG
P02PaDCQ7L66oLgJ168cyhAzOL6CiXup741n2YJgK1gr1qz0OhOydJxN09gH
MkN2I71AZ9AddAhdcu3JIuP6IVfcs2ybXtMyXgNsBtvhc1fypoD+brB5KL4B
H1L3BlNqWITPwffCIzxGcrSe2UnuG+vIeeIw/Xf7Afqjp4KuNf6UDlckDx/b
GFI+dRG/j15WmkqHj4yi4tL1nO/k/GlRPE/mA7fLedFlg/N9DzLL6iU+EX6n
3t5EJ+z/m2JWnJd6UZUO/7195LORozfivHje+bLuem62NQXUQYBzI8+a7K1n
WBaQi3ee+Cb3l/Ll7314lJqL5Rce372L99Yb6iTPE+/NmTdJeEJFnFS/UjD0
/Dz35Vpbq/QI0+TtG5eQaf1Bg+uqqThVnNNeQGVt+fxZ7x6YuIetfonuPaRn
h9YbTD0hK2SG7NABdMG/eYxxPuhU1i907c+5wviXqv8X+rux7fwwM+AusDVq
WGQuHi1njn4NDXxKHx+RfFHCWIbnz9gLzMci9gb2CPYK9gz2DvbQ7e/7Zbyn
sbe5hgf7vWCRVycrORYgJiA2SPVut7fvQ52IfYiBiIWIic63OqlVxEjEyvAI
bdQe3U2Ooy/T7pMFVOg8Tu6mg9TgeZVKDmxgjg/UTSA/jNzwlzm4dgU5aKPa
lS9w4r155FH5nXrLq3R1+wcK38rZvNt5b7+IluW8Rs4ifRwAuXtt/ngS5XtG
02eO/QE9psC5gdoWuZ5BOn8V24T7WNU/xf2l+F71Xr57u8ThoeZi+Vi+96PT
aVnxMWp3xOrqxPFGAkVUpVNu7wrKsq2TcuSoXzHgwak1WcU588hhCuyFNtSJ
Wocs83bKrVpC7j2RVGjfztNdFcnH8Js/b8pw5mBrhqyQGbJDB/lCF5FVaUI3
y/RrLIQuoVPoFjqGrv05V+DPsA1shO/o71YibIfPJU3LlP5uuA62Rg2LzMWj
nvARYG3m+h9q1mCEgTmLSmjZ5tduS1/YCzIfC/YI9gr2DPYO1558yfuUa1iA
KQ6zhiXk2IN9I2IcYp1N2ASxDzHQ7WyjwgM9HBtrRYxErAyP0EZlfQS5Z4/m
nO/GnCmU8vBxSox/jXIKt5PLmUT9h+bQh+4f0Z8cz9DnuePp813j6bOmf6aL
hydTd+sCctdlkSt/H7WlHr+tdXia1lBXa2zQfCv3vFo6wnlhnQluc2AP5xyN
1Psf36fyurP8+TP7Xvosybin1ZVoG1V/L7Ae4dMkO92aezhA/r6Si+R2rWb+
Dku6xI/ePPcU/5Z/cR/3CvOvhZDrfCx9r1HnH5/xrXlDOTXHv0mfJZdRZ2YD
1410iD9dfr2wNOsVsa3NftS7dm0tyFBxjguRVonT5N4CnqjLOB5hZV6ahMKp
PMEzgmP4TT4P1+DaT4dpK3XNDbASyOR/DvdME+dBFx2ybsT/f6Ar6Ay6k8+F
TqFbfIauNboXtqjrWUt571dImNjcs2yznPRa/u5qXU3H7Rd06rMOsw8ErF3o
+0qweiH4mvA5+F5l1c+o/7dP82f4Jnx0pPdJwBR7GXs62J5HTPA4V992nHNt
qyV3zWa+38XDU+lTEcP+VDqeY9qfqsbTR+6JdObQLLG/Esi80yJiYCOteqSb
cnImc2x0R4wmR/2s217H39voPL1qpJfwVz3cH6RT5dmdVHjyX8h6ejdd/3//
izynVlJ+1zOq/P2YIeErtnNtmtx7d8J8ypgQzfwdM3OTqPjyBuZJZ4xl9UZK
mxyvqYVQz46kjTzl70kW8e9c51tKzzBdfo9eb82NjK+c20L5J8yqfmETaV7T
RioW69HHNB4lm+lhBf+YV72FrN0/HhQ3SWjNEHNwfAX3mufIVu6PZ1kN1oI1
Yq1Ys7L+PjO1CZlk20BWyGyoD6Er6Ay6M9Krhm9F2CJtyjI6LmyDNcBWsBls
h+8ZP1pAxxMXaK8TNh8avqLq3yZ8DT4H34MPwhfhk/DN8Bj+CMfGoY9H9r1O
Me1x9Pg+G7Xm3EvFc2dSz/gIzulWP7+c+x1ttO6l6tom5oG42VZPv/OU8Xv6
hytWf2E5T9RqgD8kMA8bz3loXx52uVTzgj/tK1W1LkNbx6VGMx12OqksMoll
7Zk2h4qXxFGGp5aW5qDfkn5e3xhTkLCBYPgKeCX01gL9+ufTCyoknnvwqcS9
MU3Kx6OXlLfH1FLXi15+9CRJT/J7+N57ylws0It8f0Oe9HLxHC/eBGxBPi7h
XssCeoeFhDUZ1PGUlS+hzQY1McBEMlIPUSU4ZN4bRampHYY4iXn9fiqzB+Ir
XLcxjJobyAhZmYNe1kuFxMMC3RjVZMhYCO8R6FrFuSJNuUYijmuKYDMZe4Et
ZT4W9HQzDzzIn2F7f3/A/XX3TbZ+LzwZXwmGURnPat4D2AvYE9gbWAP2CvYM
9s7wsJQVBnt4Je9xvXo19FJL7Bv3hcQYrAMxC7ELMQyxDDENsQ36Ze4jEfM4
HogYWPz8HHJaHqDH977KMfKRfS0jHa7/asZ3jjfSpLIUetK6h0rMj9L1lV+n
g+Z7qdA0i7ISNtKsvCqaZWuntfYecpZ1Uqejk9qdB8npqaSSA9nMV4H+Ru76
hdReFUsHi4aXCwXXB/gpvuycrTw/sGXTu/YGck5O4Pz12bHTyf1cFFWUlXJf
o+H2F1u26TVy7tDnagGvhHoNJXkJ3M+rJKc8IJ9eu13iuQefirlmqpLPT9ku
YTSZR2MVfnR8R48w9AqTayF8XCwxfP93IyLIeaBOH29qWkiL96RT1huZVPLG
o9peWHnRlLuhNECWUGpBguEcWzbsknp12SOZd76kKoYy0eNtpZsKW0ZT4YHR
4rOL1hZtIltVDJ+Dc9GTbItYD+4xnGcb1dxARrnuArI7W+4j2xvfoS1CJ9AN
dKSnO+gUuoWOoWsN5wr3b8vknD3bSNgKNst8U7oWPC8Ha6T7oqcb6pnwGbb3
9wfcH3Yp3K7FeuBTuvjK9hJatmG49Ss7eQ9gL2BPYG9w/ZPYK9gz2Dtf1T4F
pojYMJwB/bfviWVsq1bEqBIRq2wiZiF2tR84KPZTp4hpb9BaWw/HuGl5Dspa
solyTTPFs+/mWGje/qSIjZUcI0f1fnU1F38L40LdeFqVGUHuuaMZa0ncmkd1
33OR45+ayTHaRV2T3XQ9wiO9jz/3FPXGniNP+lFq3mVnXKS3dT5db/0R/Vfd
M/R54Xj6fOd4/oxj+A3n8LniGqMh1a5cNMyzXkt4beTzwX654QuOBuqOO6RM
T9xR6nc9Q5WxV/h7W9wR5beLOnn8YDUgN0x7dfUADg+5F5grdjTbTP7NcnMz
5f8mK7AOQtzv3H+NprRjRzTPcO86Tta+/YwfHE92K8fVXO7q8/scLjpeJdXm
+HOZBJuQ81qMja9Bry3IDPyic6aEr9xSPeejuFoFX/kwzsevwz3MxLl8zQ+8
9xD3wj2vhcD3rpZN5oyBLH3eWhTf80tZdrVsqEf63HEnWftrWGfq86FT6Jav
9avHgC3ybvrqU2ArV7Rkr+6yC+Q6lKJrY9jef90sv5BZD1eCb8l+JvtcdcxV
GnA+I3zyiMZH4bN/aRgl9rZxDcuFoDUswHVdOyvEv2vXU3drFF05NJl+3/TP
fM3n28bTn2qeoRueH1Ff6wuM0zSXlpAn8zD1xp2lKxHYR+0c2zpFjEOsQ8xr
+J6bkrbmSrhzpIiH6fPpQk2YC2a4Y+DiT+nc1cqRXsZfzWg7t5UqMx/i6ch5
mFJyp1JexpN0xl5DlZtnUOHOccrvbedylB5hoeIr1RcOBuTs06bEU29SvMTT
fvEwOd7v8PG2L91I+bH6tRSos0ANi/qYNS6TCksaqUE8R+4bpp4Zp8crPaiQ
x284baHqUz/VYBz9Fy1UnGyAr0Q+QuXJD0rYij2N6nrnBtRbBMzDYymxNY0n
Pgc7F/fCPXFvPAPPwjN18RWxRqxVfT1kgUwytgJZIXMgrjKfdQRdQWd6dUF6
Oi+OE/peulFZA2xlu3CYPx9PiqO0SbEB18DmoeIrcm8w+JbsZ+xzwvfgg/DF
NMsU9k2fH24d6W3zVzMQCwcu5o30Mv5qx7Uj5VS//Tv0SG4xTV1fT86t36a8
hGeoa9w8Xf5u9XROW0Smddsoo6SKKvc10nsuYDCNzB/xC2c+de3N0OasdSb6
XEm8K6HVzAS8+45eY3j33ctFYoS3YB2/a9vLa9WTJa+81nf+vjhKbV/BvPTg
3R4sJ8357HX1Xs4L4/5i/u/9t1YkU+uPXwxYC/pOvVebRal7V1D1W3dTmVdu
yAr5WJ4Td5PTy3Xvz5+ucLG8MZNtYLZXB2Aqie1JtHTrAYW7PtKzLkBfrNuK
OD5vKDl68H74c3+YhW/pYSLKzBbPaFxO1T2jqPrYKP7Mx4x0WbHEV2MS5LmD
TcgGGSXdan0VOmG8SOgI50Fn/lgLdAsdx7XPoeoTPs4ViVtlueKLsFW9116w
oVRzJP0GrhbTvuVsc3XPMXnCR1r9asrgS8b63z9oPZV6wsfh6/B5+L78DOwJ
vb2CPYS9pLe35f2pcM4USTU8w6lBk2u4CrwcNUYT64ANEHMQexCDEIsQk7BW
xCjEqsHiGWJeXsJEclq+zbEQMdG5/dscI8NjaMN8pIVqNzxK9256lb6X1kym
qrF0dPH/oOtT7qCBF/+Bauc8RUcflPogXRo3ky49N4vORsyho/PmkW1xIs3K
K6dZ9jYylfVQhb2LOquAwbSRs0X494FcKnSuYv4J5KiBEfi/jw5MhmtX7F9u
7Uq7ZSH9H0c5lWwOxDMwK/IcvvN3SLzu4A4H73bI+EpmM/N2GP3uLlbhGjkL
6Wzdd+noEzEBa3n3iRfoUvE6zqe3N/k4N5jDw9sLLMs5jsx1Y5X7ZdWlUGZN
mnJviYtlGg3sSKEXyzqpoUnV48oSTYV7ltGWPVWUmCz+719kJXOZhG+hT5Wa
yx156vx0bf1IcC4TfzylhPJT91CmdR1VVEVJNSR7oijLvoZy08v5d8Y+kkvJ
WRVDJfWjqaRuNDlrYvmYfA+zWAOuwbW4B+6Fe+LetSHiYXqcMZBNxqUgM2TP
b3lSyu8LnaAeaZnQEXQFnXGNi1eP0Cl0Cx2bq2ZqOFeyatawTRSsoOlpyhKT
vwsbsi1l38Qzdyxhm8P2/v4AHzlb813JrrL/CF8ykpN5dNJDx1fg4/B1+Dx8
X34G9oTeXsEewl7CnvpS96zMw1IUGDOA5wLXBb5b4nyJdh+wkNPjoPYDbSLO
dJHD3kkmxk7aOEYhVnWKmDUQEcEx7NJ4iTunc9RCEeOe5FiHmHd08T9yDEQs
REys3fAdMr8RxuyHM24WPk0ZD71DafY4ck8dTa6kx6kutpfOTX+dXBPc5Lj3
NXI89Bp5JrrpwszX6VaQd85vzH2X+iMv+uU+F3DNC2pfUAPDuU/HM/Sh50f8
7jhyoA1lIu5u9tDx+NPcG+hWZKeY7XTDFBpf/FcyU8uo1+HW5KwHHK9JNQLi
30XUfx9df+Uo83rgmP+5dVv76dOyvUqOOxiHyfW49gDdohZCztl3z7zE9RAp
Wwv4OzhaHCfXKj3E5NmR3kl0+VtUnX5Wc3/PyVzyuGZSf1J7wLMZCxldRB/G
+rCPDhE/OT8vPtdNLKYzkca1FLiuN0Lq6QVOdmAW6IV2Tlwj40k4p/oRLV87
amkSSqbybNustTvWg/oWGW/AvXDP6jFF/Ay515h6zf4T12Dt+AxZIJN6zXhG
p04ProHETvK4ZwqdWbRrSj/NuoWONXa6bidH31q2Cb5nbC1hW3VNv+Tt9ZbN
/cECarTiAm3BGArqhX7grRcSvgMfgi+pfQtYEXwOvnf9FWHzvvuYLwbH4KPq
c+GX8OUR30/eiT2Ova7FcI9Q8y4b47SIE/4Y7h/rgeE+K2G49enkKikjT1o3
9cX+jK7P7TeMT4hdiGGIZY4HXuPY5hYxDrEOMc+V+DjHwLTSxZT5UD/HxvC4
/eE430xtFxvJdXLZSC/lL3LUnbYo+WpM11kLdZxOofzT6dT7/h4qT4unC9ed
5PggO+DcJa0ZIvZnUloIGIv74usB+ffjyRuVnH1a8lTKu5BGz5Rb+Ht59JOU
MXsldSZtCriuKyGS+dU19TAroinj+y9QedRjtDFxEuWcfJ2aT23y9QjrmSrV
SHgxFlu/hfPz/jjHxpN1lB812q832KP8DEfyt2ies4Cqe1/Q7WelnVL/tMTW
dJ4Sd7vx+XK/Ndwbz8CzWDa/GhasLed0YF8yyAKZZGwFEzLL8kMX0Al0Ax1B
V9CZWofQKXQboG/TJsqYvpxtgjXARrAVbMa2StjI5/hfB5sP5hfwHfgQfEnt
W8CK4HPwPfggfDFP+CR8Ez6qPhd+GR6BAzEPsQ8xMDxubzzfmE2/8rio+CdR
VLb+u5SYvZ8iV5SRbf1YKlj/KLWOWzBoXjLYRL7YtNpMpoJy7qfU43JxL6Xf
te2jm65iKv7XKNp4Zsxtvpser3k/XsJbpPoW8GT8rMVJG1dsCLrOT1peNcaA
WhbR864coRt9rEXmHGF8JcsYXwF3uvq+0IGh3pxO6bwT91LiPm9fsHJfnQr4
PcoGHqS4I1OVnD3klnPeai6WT9r268qFHD34x/OyasmU1RagU3C7yHiTKUu/
r5euPrIDOeaNenpJ+EUt5bV7axuAr4iJzziWZ1DDUsy9xvzt0eR9dmjrhEwy
ngBZ/WsooBM8Hzoy6okF3W60azlX2AZF8QoWhvoU2Er+XfJNyY7AVYCv4DNs
buQP8BX1c+FLRnKh7idv3X4KxkUDX4ZPw7eN/B57ItiewZ7C3sIek7C9ld6e
fr76stviURITscF2fj7HCugAsQMxBLEEMQWxRQ+TGspEjMtbN5pjHmIfYiBi
IWIiYiNiZHgMbeQ606ik5iRdX/kPtLjsBxSxoZG+t7KStqxcQ7UTI8i94F66
OusOuhpxBzlffJDcT8yjs6Nm6eZdeY6dSZemzKKzc+ZQT8QLVPviYoowl9A0
m4eWlfWQTczOqjeovb6DDrY0UkldCWXt2cQ1GMhXt9cslPqEWb6YHO3ZojV0
fU8D2eatM16zmH/YYzW8B3guwH9uVC+g4CvgRTcb5/rBsa2+72enVpDzqcB8
OmMs9gbpPOTeiyQOdNRCyDl7h30110OYTkZI5+VFU4otU+khJnOxcI1LXVeA
PpGXTilOoy3Ol6k2uYRKkiuV33KbJlJnvdSvSsab8LuSj6+KpiyD3mGYJSur
KHPHy1RStVBcO4+cqD3Zs4KyNll1+3Ph+RV7pHx5fv3jlF/3OH/GMfwWUIci
7pG1qYS2VCXwvfEMPCtz+1Z+ttG6sjaX8NqVdUJmL54AWSEzZJf1gN/x/C1N
L7OuZC56NU4F3e6uecnb30viXIENUqyZSk2M6d15bCvYDN/RF6zEW9cCXAX4
Cj7D5nq+gD0HX1E/G75kiK/k7KTE1Iagvgpfhk/78wKpJ/ZEsD2DPYW9hT32
hWEqxTGMwzqbFjIum1Ul/l9XX0IHPY1CT2/QwapOstm7aZmYU6wHKSJH+JSI
MUdFrEHMYexk3EzDNSN2OZ8SPvniAxzTENvcC+6jBhHrEPPGr9jDMRCxEDER
sTH3QNpIh+m/ygFc41bF98l29xFyT3qbind9n/kGbPnfp3MRJzkveWW2hzom
ucnxXRc57n6Nmse5qX/q6/TR3NagPX705s3IbnHfq9Rh6qXPt45nDAacL+B+
ueWcSH+yj6c/vfLP9EfPPcxpcqHnEersmswc6J7CAupOfY0uxnbSrfjAd/2/
jIn+SsjFy/npzop23ToA1IJcj3MH3iOhTJPjrjO9I743U0eslWsydJ+bYKeb
c7V8HjeSTlHnzqX04dJ3+Ls1V7KTUueTfJE8jiRq9vQqx5B/drlXc23DZ17O
e3f9S/R5012Ul/MpfWTAQQJ8BPjHdW99SHNJrzi3Rqq7eahI00MMn8G/7p4q
4TLAO1zAO8SxjwzwjgsqrEOebZ4oStg1lWdb6wua33DuOQNMB8/As1wyniPW
gLVgTf7rrH5IqgOBLJAJxyEjZEU/Mt37Cx1BV9AZfJCPC12iPgS6hY5lfbuc
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
dq85CxtdSb9EndYk2pLyB7ahp10dcyZTS/pUzWfgWKYc20iZV3fxXmHPsHcy
V/btkZvob7YbaEDssaH8DO+5en7widH607n++8lZUhzY+YZq9nX4PHwfMYBY
QEwouikiVhAzHDsihtSaLHIfP+dI+viNcgA7gCHAkjCTgRwlZ7Q6LAJ7gEHy
e2ATMApYpT4PPca6neP/f/KPcHS+30JlDz1KfbHTqT3xZipaJvXw6U56in5a
2k+Wmk4y5tk0PZEUrkXFs2BAR8JimMpa3W2x3jnz0Yy++IdpX4yR88W2u6fQ
ZVMEf94dc5/0zHtSKlmnPMw6Dn3GdXQ5JZLaowLXClePmtTbpLVfrFL6OalH
wuAcnz3CMNqufkOZQZEankNdTwINkJ7EJdRr2kw1STle+f6m8/mU8doKWlho
1HxujZxM9f/9Niq5YyY5Yp7Q5RFKorNYd919v3VUkZkdQO2KeySVx1PJaWjc
j5BfaV7NYyT8Cu6Be+GevvfEu4YFa1LX6mDNWLueTdpjgqnoriBq+tkktqHa
prAxbI36Fc99qE/eTN3GzbxX2DPPehmZ18FeY899+QN8BT7j5UfCt+BjuBd8
bjS+Ch+Hr8Pn4fuIAcQCYgKxgXMQK4gZxA5iCLE0JpyKiG3EOGIdMe/uZ+fi
Xj3rhwR2rBUYAiz5acmrjC3cF018DswB9gCDgEXjx4/vyHklVdMzCdrWplTz
sPnXmMhsOrJkOVVHRlP9jVL/nrK76ykxt5aadyRTjhP1Di8qOXBzbiMtqBHn
HEwgS/sqWlJRo9RDGLZ08DPsle1j15MIGiXHgofXSQmcX5H07aVc9grOpb/t
ynFLPIub94COuXouap31JVW1mp5VqLlI7/LO+Z/tsFPZvKe5nkK+rvv+7nn9
63uzWQcEmh9e82U+RuJ/ZC0WU9KzdKw21YNfWU3VFcPzK5wbb4yhxG2HXOtp
FHNfrdSFxLyykNLfnuzzt4kF7VSW7rLDuQViLOTX+Azf+eRlxDVjXpmn1Nng
nsUu38FcMKeA5l4h1cCoP4MtYBPYxq25spRtJ+vFywM2hq3/+NvZWluDc5uh
2hexZ2XzwnkPPeeAvdbU2QhfgE/I/gFfUZ8PX1LzODKvItUzhbMvyvf3nO+1
DMQOYmis4hGxjRhHrEv1RvW0pHw/Y0FlcwIt2F9G5k0vquqRXmQMAZYAU4oF
tgBjmgXWQMP+2KLlFBW1adh1AMuAafI8gHXAvPHjuz321Gnzjns6smle9h5N
rrVl+mLOPTumhCufNQavVDRZlOfIp1dRRN4eKikwUkjXVmpML/eZP9VwLel7
Od9qHya/LvcdKkLfoeYJPNBvq2hnnFffofO71tFbU54a87zzW2FhtGd+kt9z
ai3a3PRW8w5lrVkd4WIN7n5VRQ3JVHIqiXtnrS/I4BqPolYDXT3+EtmnhXE9
BV8z1Egt6ZMUbkXZmzfjxPnTyb7Lm2PhWpt7kuhS0EJFi6UobCsN7PDNTSFX
Dnv63INdkRRdly32KpzK19iocu/wPcf4uq2xFFrhVOwwryuc5jkj3HwLvmsN
7Fq4Z+WaOp5DtC2L5+TrXKwFa/L1PWxRErZF0Vy5NGsh20yvJgQ2ZlsPaPVC
wLHYM26lPWKP+DOxZy1i77CH2Mu0so203ryO97jkVDLvucIT7Uxgn5DtAF9R
zw++5NfX5q+ige+AX0HsIIa08Sf38btfir+mCRyLgfTxQ2wzpyJiPRBMAHbM
69rCWAJMAbZoNFigtSIwSJ4vsAkYBaxSr2Pe5heo8lCOX8wbP76f46vW31Bb
VbkmT+mZv2x57o/0iUd/nvePzqX6kzGUdnETpUU/TBmR0yj2Y2PA3MVIh5du
dkg5Ne1+kerj+7gvk6PqFOuH6/4+0Urf7K7jXDs0MvD8vqPK1UdKp5+WPBy7
C2nw5IOjnjN0KJrmv0SO6jzmFP5efQPV/2U+rf2wkt6PPuF1/mV7I1kjfi+w
7yyVbIuhz2JOaW0e9ibXU2TsjvfiApwlH1HmBy3U1L+ef/eFx7pQv4Baim9y
pRz6RduLlBDt1GiY+BrQkkGO/ZNofQ6Ea45mu7mPnp455GyPU94nFc2hpO0h
bru2rqae3seV9+2zpZ5wetdGzzHcuy8AzRKsBWvC2vAeawV/4Fm/BNt8EfMq
1b+2XtiskRzCdp72TCs3sK1hc/Xn+F3JNvHf90XnqVLsFfbMcx4Xo3vEHlfx
Xv/degPXQDlqc9kX4BOj9afTJx8Wfmv2fY5YF3wavs01KsLX4fPwfc+aJmVv
RcwgdhBDiCXEFGILMYZY6wmwfmxUQ2BFwscGxg7GkAu5ZOtNoovHQrQ98Ha/
yhjki/9lHajd4noCy8aPf5yj7cN/o09SEyRdjpRfuXOlEXdznn6R9VUy1h0n
x4YCfZ7F1TtMoyki3luSHxw11wItjvdT02jfvVM5v90Uv5ZOmdb5PPeCYQGd
E+dZwmKp/q77qCVxLV1NX0WO6DtG9Cy+JXIyZQ6+TDnnp3vlxQv6p1FS71yf
+fRlPS9STXw2D718/5CLY+lLepp17muiHtTYbN7ReoodmEu9HzZ55fxrEnOo
3biFMkJW6fI36GFVdNcsaot51MWvbKASwzZdXXuf60+8mXr/vcW93gD4EuZX
mhIoqSE+4PPl6+NeuKc/H/DStxdrwtqwRqyVOSdX7zUN/7FsCmXMWU0tBmiE
eHNZsDFsDZtr7CxsW3JXEO8R9mpIh1vh67v2GXvuyx/gK/AZTz+Cb8HH4Gsj
qfmCL8On4dvwcfg6fB6+72tfETOIHcQQYgkx5c8HhuVUkqW+X546QZ61KjKv
4hSYAewAhoAXk7DCpcEisAaYA+wBBo0fP94Dz3OrNSK+aC8LiJvYF7WM0pdk
cg8f8901zLXEJJkpqrmSqncILBMjpr1IyZlKedMDtKS4kcwdq6myMYEWHCgm
86Zm5XvokkM7w4weSX56Rg033u2wj1muGUPWtWd+Q9WHSc5xcz4+SOJZ/tz5
omYuhi6jxgZLyg/w2vK6pN5h5k7v2ove/eupeV4svW38CVU/sdzFmXjk8XH/
jqNk+e09ZP7tvWS21nvMWdvfStZi8eR/sPfV5fraLLqjJoYW1Lyg5MEtXSmc
t058baYYs3R/A8151K1YNko59Ij+cB58DfEZvivzwa8l9j9Khjdm8D1wL5m3
wxzUXNWw/IpYo6cWCmyh1lyR+6t59tqCbXN+O5XtfLajW/Ndv6p2pDp4BXM1
2DvsoeccsNfcA6xL8m/4gto34Cvq8+FLmBP3KnsgXOH2FM5llotfUXTux87n
39XhhwIe1hiOYcQyYlrhWTe9SAv2lzCnYm5fTUt2SVyL2gYx7cWMHcAQYElU
wvPi76IVLg37cEpfuo6xJxCOCFim9vPx2pUf7nC0tpFjhfa5eb385YnZodSv
0mSBXoJ58QGKO1RORZYkKipIojBncUD5VHlAlzy3bDPZ0COpYJg8u9lAha1B
Kt1s6IM8xXobH+1tGfOcM8ZA2FOKxoav8RfbAc080YtIyZ9XP0MRXRvIZo+j
uK4sMplaKM6ZTXvsCdRV7eaIhnamUs/0KNboBs9yNe46MoSEc+8v9b2utnZS
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
5UfjJdABDgBrwxrVn180nKH2o2nCJgfZNrARbAWbyfbL39DINnUsPa/lVoTt
61O+oMHaFXS6xF27oh6DYg+j7j1Gn5Xo+y18IFAdmS9TGmjfyXbK/HgtdTbP
Zd/rufo0dTqf5h5hvn4HX+5W124JXwdfBd8P5L69Kn0ef4NjU8QoYhUxi9hF
DCOWEdNcoyZiHLGOmEfs1/xuEmMB9wsc5vrAFth9dtb/IrPAnAuLznvh0fth
l8Y1V/4POVrOPk/5r20jy8mZFNtdpeFYKlzPr2vyzaY13Csp9rUzNPSn7WT7
Hx2UZgwhW+SD1JsUwToVeL79lCmHBlJQd5At3q+j08YEaooJ0n1OHjoPnIdN
mUjdxjSfmvZjm3sO5vtUzH1U0utIzaT29Puo5vxBnzUI4Aos/Q9SgsAB5NX7
PrB55ePxfL9ac95z9CQuIcd1N1FGSCzVR8/Q6rB8eIjrLDrfL9X0ZUL+W655
wTwzHlvBfcHU1z2VvIJ7XCEXznoYxok+e3Cp+2/J/Apf4z8aFC5pOI4lpzSE
tpQ8ERC3gmvi2vJ9ZH7FX/8ynrtYA84vic7itWGNmt5okQ9TRnA0DQibsP2E
jWArdZ862JJtKmyrqQsStgcXg71A3zF/fcF6db7H3jO3InwBPsE1Oj78Bj4F
38LeZYaZ2OdOMbcX/J37Oe6DmGpx9f/S01ThGh8Rm4hRjlURs4hdxDBiGTEN
GyDGOdZFzCP2EwQGwD7ABA234rqHmlsBtgBjzAJrgDnjxz/Okdm1xqV1r61j
6G9v181jHpkezXn/fbO0PXvy3minnNx2imjfxLUo3nUoL1KOc5303HpVMqUX
dPrI1x6giOJGyutYTZWNCbTgQBGZNzX7zfE2l/+ZjtxUwcN+Uw1Z7qijzHn5
ZIlKIHvkUnrjiWvhV56ms/ct8pnLNq1/XsqhN0qa9tChQF8sSXeklcrs+jUi
MZ3pfrkB9Kg6sv56Ja8scStufmXfUqkXWeYBI5mrsinq3Bz+3duN2ZRuzHfz
AbOWKfUWai2WP3e8wDUTXHMzSn6l2moke9cEWlD+Ipk2dVL1ARe30rVa2ZvK
LXYe4FLS27fwwGv5c6VfXJerpkZcA9daUN7I1662/v/svQt0VOW5P+zC5Wk/
/1yKtd4qFUFpMUqpiCk3ESIEQggJ5EKGccjFkBCSkJAyTjMQEpg0TBhyZQgJ
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
+IK/3Mw/lHJtuJ7G/4QPw5fh0/Bt+Dh8vdwvBmwcAw9yjCBWEDOIHcQQYkmt
X8QaYg6xx7iKiEXEJGIT5yJWA2emLaGchxZp/BT7QA5Q5wRL5nTOFaFyycjx
7TjkeTuxnXHU+MptVK2q+ZsdjcG5EeqaQta+Td1rND0r8/bYJJ7rmsoQ9eVD
VNayhuzbxapZTfkFvVyTj41+NWTtuGVMHeXM20C9P19MjTHLqOjea69Hy/iK
NKOpmmc0fVz3n8OqkeO9erUu8r01duhDqs0nUKPQubp3SF5vt/yCyp6Mov70
UcqsqtdVM8LU/Rjz9pYzv0V1pXT/6C5tjwVmWqkxFmAQx6YsZZ6SiLLVdGzP
M2HjK9WvT6DMPakKz47/qi5sE/IdIPM6N5kKD5K1KY0XPuM7q3dOmN61uGdO
nZHqX/9hSI4T9cLeI8pSWRbIBNnU2Ir/PC/ohvcpdAWdzWsq9+E06n4f1Wyw
3vSbhS0WsE00+pB7KFQ8KzJ/PWytPhe+MBzfga9Js+l8Png9+Ir17jqqj1lO
vY8vpvwn13H/SqjzEWuIOY69utUci2VNiGV9bJTt58dhL/s6ckAoGyKHBMsv
yD3yechJyE2xXcuUeYYjxz/G4TywkjJsuUrN2XVgBS3b+oKGY129nFud0nv/
1U9Rzz7x37QW7awwe+3KITm9/ZczdxdFu9ZTaXEKJddmUF1RA7nEPQrmdvlq
xFOrlBox8JXXplwb10RQfOX79QGzxD7Z9uGQe5f7Elod0VSy7zFydYwne+fd
VOKKYK4SCYOoGLJO/1HlRmqNmM+8FO9Nl/hT3rlPvx+jYNsmMnVksb6kPgFt
LxFmWg3e9RRdjLyJzk5aQBVTDHR8wVLGW5KzU+i1bWuH3I//UvPsrKvcS+UO
bS/DOkce2R2JZNiWzQuf1znWa86pENess/lmSzEvxzD3gb1DBsgCmSDb2QcW
sKyQ2X+eF3TD/TJCV9BZwfZNPpxG3e8zYa7E3zJjPg0uu1nY4gm2yVD7kX0d
ti5xPcy2hw/AF+AT/n1OwRZ8zX/mF3z9Rvm3hNk8K2Jnu/D1Biq/ZTdVTN2l
YJOINcQcYg8xCFwl+sB6js3hxDL0gRygyQkiRyBXIGcwJiVyiC6+8sATnHtc
BxIULDGjMpdz1Mjxj3XgXfFTcW9r3v3vORxPbx2ZT58bA2ulp5xuat4s1ebf
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
NF857HC4FQ7muj1reAKNL4oHNUeUf3ubHMIzFF40wXxuj0ufpEO4ONMh/Ipl
rB2RP/m98t/AvVheapSeWCXfOY/mhA/w2QaXvU7ogn3uJXwa464/YvykGMZ/
T8JnScr/d2g6qPj8uNeatF5Sl04o+/+sb/0cfr+i5y5UdN8lr33d17m+XrDk
q4eavea4+n1lTcXK2rhGN4zGDNqSMGQLbaXNtJ0+WP6sEZVFvYic+HvhVRwR
drw9c7/4zsnHnLbBeLFE6jToa1ffh7JnWn1PKN8JhmMhJolNb36i1m+9Vsf/
fVxigTHR/huj3MtYOeOD66PGkn1rifdnrGta5V3XxBhmLHMdjG3GuGtfPp4B
PAt8afp0OhYMait5Y4lnT6DzaaRP2DfvOnyhEPUnZuhyGVcyElAfu8z5d3P6
d3E8YxWyp8S76WJomhrM95alPOiRd1Z1JS5crh3qS3UuE9lbZ6C6aKxuXt/Z
n6p7nOSXT19uReXZ3aL5XZgzxUfvMDX3HFu2BNm9jTjzWwsa+6aj5MhDynMe
Qv658UjunuKWO6/4zVLk504drHkJrI/hNmJGS21AR/zjos9uU/51pBWiZOzP
kRu5HAMZuZL39uzXRL9lT1+K6//ye5VXODkNOcq6GnvPoSdlSLuFmiW1Yx5U
+4a5fN+SvBYl0atQsWCsMkcm2uMNQ/xKiu/6lZizh725rLO/hONCiQy+9vyc
3/HJr6QM1a9wDVwL12SKyZE1uts8VmyhTdp7tJU20/b4QU17+oS+8dRcMQ/y
eKczcpAzZ7n0HaOvbYO+Z/807gX3JJQ9FP5FWT8xQCy4YoNYIWaIHWKIWDrz
22bBFjHmT1uFGCVWiVlilxgmln3hnDHAWGBMMDa09xkzTp0iFx6RMaanYS/Y
mhynxGi2xKq2HsYwY1mP82HsH76w9us+hkaur+gSjROPvmCeI6drKLdpZe7T
I9/5ZtszaHsyEYaskrDzqxxZXUuddQfvVF9A211DnAg1JagxwX5IgXS75Tf6
Y5qQ/8BzyFptRs7GFpjmLpP8faBcsjtXUys1Fo2jmvFTx1G1xseRgaRCfZ1y
Zx3C6jZdTRb6WNOMoCZIOD7q2bFSsennaFt9D87d/yTenDjUI6xvZ45aK2Er
dps3ylokNSyGNQfUdRbuxrmq13Cu9k9IXfMezHfvEVtjFp9DW0mn83vsoUWb
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
KZT1jUdEjxVlKQ/ClhyYT/Ec9ujvIvPJKPSnxgkPcDp9Fcpic1x4g0ThGo5n
5LvXoXz4e6T1VSD+2DQU9y1E4pa5OPPeIbUG6K4fedV2ePbQMi5Yofx/hVz0
FynzxeX55ToqLg75kNrq5r6pMvhae5/3+HtGZXyezMU5Obde7zPXGh3awJ5e
tIm20UbaulyxeeDa79zup2/oI/pKe68sLhcDii/pU/qWPqavQ90f7in3VvZY
2euSQb6tZBALN7JepfbEdBWzCnaJYWJZ7z5inzHgWSelxorKnTCGvPZAiTXG
nL+YZMwydhnDjGXGdIT918LzjFzfjCucvmCeY84+7zyqcCw1Kfiic6f6e/Z9
z4fwG/YlMJQ+786tDI6+f5yNulFtAXO+HDk/L1b1uCNMQd2v1jo0oPFvm2Fd
nI6szc1oW2RA3egXnTxLTPRbAf1Bze0ZbWUw24bywpXVSxF3bDLaXr4N5a+N
QWqL2h9M9Lo3J8BY0K1878Cwcvh/6mzGucRbYJ+Y5vSXMTkH5uJu5BT80afW
RurqSpgWZ3i83+TUuPcc1uqh+h1D52p80NXi06d8hp5mvS9+hff6mpeDc2V1
DmmucC2+5qUNru+VL0oXW3XvV3xDH9FX9JnmP/qSPqVvh7M33Nuigh7Za02j
3bAjBaYz30PbS7ch6UQEyquHtNuJHWIokH47BzGp8SqNo21oW2wQ7NoXLVOw
3CKYDka/XngmTcP+CX0Ne28upk1iUi9WGcOuffAC4nefGvM8M/R6gglPpZw1
4Z5TQ33Cnvu6j91vxBVqXzAvjqU202cu9H9btuNUZCQO7LLjwKbg+gR1l8Sj
NLtK8rUtkyfh8vRvoes+tV/T+Yeno+umLd553m8/g6qbanDqdv+66sGMo7dv
xrpJy7FkbSuMkzLQdY/a74o9kn6a/uuA3Ao1tws2r4XVHHxfpLJlu9GyMTHk
Xkqu489NTeKr9sgl2DYtWdVgiVyh7G2TLrfizJ2nrEP3tNlB+6ev5LLghXo9
s17Jw1svqf4JVqMjFH6Fw1Vbh3PNOp4rc3MNXEuw6+6eNkts9fU5fURf0Wfi
O8WH9CV9St+Guy/cU+5t2bL2oL9D7BBDvvTbXTkWYlLrjdd151YFu5mC3dKI
pxUs68RKqOO29Wpsfdv7M8YiY1K4vHtixFeMWf7NGGYsB2Uze+YpZ0S/clbw
zPDJrShnTbjn1EifsK/uCqsvmDKuz+0NKU98/NijOH3sEb/3dNa9jPYytX9Q
R1U/WvNel/ffmKv2MmLNiL/vX+sZ41cTWzdHm1Aj2h7UxrjukXPu2WtDZ8Ms
tZ7lk8mwN5Sgu/sRn3or/D57fGl9m1gb83EIOXX2VArEI/nMbVta1HoBrsOw
G51bnnbTfGffq2bDR8r77+DTWFWTxfJDO8riPoCj9GVV637Dm+jZegHXIg9i
QdwVmLOPyGtfGLiW/DraHWtgfqsa837Yi+bTNaKDE2it3XFHYH/2ZtjX3yyv
A93PZ7aeM8sctW9VyZyc2+e65h6UtdMGrp9aMpYNb4uN9mdfRlnCB2K73K/4
gj6hb1z7qL2fdhadFU/jevoeWQN9Sx+HtTfkHcYGz50RM9LDbrAPXffMKl0+
RONYiEli0/EvUwSrxOxhmzuXSWwS48Q6MR/K+hlTjC1/90g9lxKjbwxq5DB2
GcOs92kvPY3Ddf752NPHxonWTijr4hkU6rl1Zu47I33CvmHXhQ/fQjVzslkG
NMalwTTNs2+R79Gc/l2ULXDPt/O9obyx9+/t6xPuwYXL23zmqm2nE6SfEWsA
ygaMQWuzeOXP2fPJo3bFM6feeH42frglX9WkN9zj1JAJdlzNSkFaTLZwAZbo
R1B596Numu/sdZU9JV60WWqjH5T3njzUjpmtmWg9XyJ678UDlVLjkXryRemt
dToj0y/fQQ5j+WOxuPrscmRPesrv/faPq5220p/0JQdfa+/zHl/f57M5x9Vn
DTKnP+5Hu5820JYyxaZCxTbaSFtntmWL7SpP9KD4hL5x7aMm9Th3jUdz9I/E
p/QtfRwSr6LsIfeSe8q95R57cm1evcGc/cGG+LdgMEdfEqP0JzFr89AZcudW
tgn2veJowVB/M8aOqz8ZW1o8BTMYu4xhxnJFVCIuffRPX/fxMnJ9hVc4fcG8
RwvKHe7a7FodyxXrc9JjyZiYg54dK4PKs9r3WHXztdo4MjcS1tGBdbk5Kke3
4Mic+TBHx6FtVGBdFjXX3gD739ai/N425BueQerGHbDGxKkaI6WfoK7Y6qaX
If2HCg9IDyhjp+KHWt+21dUkIM4xD80nv4PmE99RXs9V3l+CGTvrYVrdBuvO
pWHn8NlbadzOlWhb8wOnrypT4pBT/KHKrUgNg7cPyh/egaz1O9E4eu8Q/+FD
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
4E+fI7kOvXGHZHj2YnL+Rt6HjkUwv7P3Ny4McjgDc92f/0nCDtiPPIUyxwTk
RD2CZMPjuPjRXbBvLcX7cb71JDhYiyB1BuMrJcdNXfL3Y/VrVAYiVU4m3PUz
p82+TJJ3tx5E+5EV3nsX04XDVW+jOflDdKYeQs/k/ejdeg7Vxe9KfYex6IL8
/VnZUTSnf4SLM1W+whFhV7Cij4WytuOYt3U2Tn/yYxTXvOd3jV882yA5d41f
4Wu+5+87fCafzTk4l37vp0OyRq6Va+baaQNtMRa9KbZVF70rf/dO2Y/O5EPi
A/qCPvF8Xnv3CvTaVM0g+tSV6wt1cE8HfPBm7O8lWvUKNogRYiVQzRMxR57y
7Y/vEiwSkyb7BMEoseqJKU/uI9Tx/rEx6CzaqfvZG1FabZnH81Nd4tgPL0V9
HZ4JZ5IC1zF5Dp5B4Zxd0ifMFoGOrbVf9zE8cn1F14Xf7cbx/+cmGb50VwL3
C3PJzRvGeOSRvb9jThmL078xBVkfMBaJTbFwnF4Sco48YP68exy6/6XdqffB
YYp/CB1ptweV138/IxHGhFhnP6ucSbG6fb3aUwuR/dhCOJJmYF5POypefw6J
x8qkviP/ZKX8fe2jk8iemhCQx5BaEcMyZE+LEk0WchV698T22VDS+wga++cg
sXmotoKv+R4/4z163+Uz+WzOwbmCWRPXThtoS+5JtXaFNvJv2kzb6QP6Qq/P
WM6UeMWH8aruiuJT+jYobkXZK+6Z6x5yT41h8ir+BjFILBKTwdRXEePEuje3
4hEThiHdFcZSoH5gvnRYtDhmTI9c34xrRsPw+4J59Qkr362bO22MzkHf+AWS
P73i8P179nf2GNE8Z2lQOVuOnCdXB50L5ii6v070uovmZIl+dzDfkXz/LXWi
hx5n26ecuw+h+dj3UNSSBdFPqVoi/Z4C8Ub+Rn5tOvJ//QOYG5bhjo+fQGXN
msE+Ut6/4Q80juxYgayaf0RORgRee0ut81A1OoZ4I2qcHBnjrsXhWd8xpDUf
QK/j12cQtWeLaLGc6zKh/F6ry1y+9ep98SvCa3nMy2fy2dRc4Vyc0z835r52
07gmr/ocuYfcCn3hsj5NW4e+ow/pS/o0NF4lXvaOe2iuycEdH0TK3hb9+k7k
NKSFjRP1uSrmiL18BYPEIjGZZHtRMEqs+uoD58VBuWrYPxxYl8V1MPaCjVPG
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
dN5Yinf3bDDlJRy7W+CcH3nVsVz20A4JXYGzT01B599tNOxf7x0r/2zDm4br
LkitQUtVmOF3ezeY9DUf6JcR0rwRjgzP3+PPaC9HZP1cRG4Nx+SD+Ybjsm9H
we7JaPT6LT/7g5RXb0VY6Z+k1ztzOfZOWGfKbehSvvVNWH8Tg+TSnTibY9wP
xUxqJyxBQUYFuv+u1PB7xuULRvnPKSkofBMFTQWIzKkx5Vf4HZ/hs37HGlWH
Uw8Ycyfd1xXLWmsnxA1pj9QJdbNG6ah8q/8eNeR4mPNB3dMGYgtlE0e+J8Zo
u4LdT4otjWw8+eA6zQ+UzOjwsrPymZCmjeJDhv5F2eCbpyKifNW6wjhXjT7u
syeFBWKC2CBGiBVihtgJCU0VLF0tHvcqTBPbRjk4FJ4JPBt4Rgz7OTVSJyzg
pdUFy7/mMUjhVyIPXNNY6UX7ThTlfY6Lv3sQ/XH7g35Pr1N0yu6ZD8K4tzWp
BokTt+NTxw1++9f7E9be6phWbvq9q/e3Qcy768DTktPg3W/iC7Xmua+GYqHl
CcRHjUdEtxN/yfXkfFiD6n2TXuWUS1G70F5SLL05/lo7SuLxjI/3W/Z71rFS
60qL7sOFqna0VkfhUpxnDkvflJfROs6YX/k8ohMNKZcRd91pJP7jCbxf+WuP
79lzPnJWGY7vm234/oWn22H/wYuSI1PTtw9HD0xEVca/+fArvHd0/0R5xjnR
CfuYF+VdozH79s1BZFipzO3hj2ptif/YL2vlmrl2o/dbf+KUPbvfo06oG+oo
LbZP61V/72DdNeq03RkpOqauT/X+UHR/Kco8B4m2o/49fFXZOOLAPsRHjxfb
z+0NFV9wf4a+Qp/p2j/Dk9cw4fK8pUutmTJk/ClsnO+9W7CSOGk7rPG1giH3
Z4gxYs27Lp8/ORV7QDAt2B7ocX+thGfQV3G28cz8sH2kTtjfwtV1bg0sXelo
PZvvisu+/u7WIOoUTZM6ReeXJps+07rk5qDj5YULx6LNMsgTpB6p84hre+cN
BFP/yVucx6MkhyXGHi15C0V9eajrnRZUjTCdYyn56FBQ+2FtK8sT5FcWonDc
RDREhgR85+kDTa5clacdGUhe+ySsaWPRdPaXcp/iPPdLZC55zMV5UOxJvjW9
dHk/Jx4t141B6rFPYT39yOBe1Gfe43d8xux9ju0+F+fmGvT1cG1cY2L+FFmz
ntPCvQTaL3VC3VzMi1a6ig6qHpjkeygb+ONWvH2DNqat01kHTNmePkBfGKr/
ePtGvhePQ5915f0oX6ZPB+v/xIpp3orCGLFGzAXEpcKuvj5iOl5hmxgfub79
1zehLpgux6o+w1s1n0jNJPfe8N7yXrtjgFeZj95xc3Fmgm8P7GCkd+YzUh/L
vX+9Wa2ot2oCx3UzVzmQ2b5Eft+u81WF7eb7EKmKQkTxbld+SnXu7gHOxIGI
thzEds5HWmMawor3oDhFu89nKFMqG9zi8g2m3Ip7fNyIN5KcjrGH4KzJRnX5
c0jrWImxcf82JP4hZVUOipfE+9wvC09BzpMlPutx3lDlk3cSlfsXfPZKPYpv
3ebDr/Aev+MzPvkVaizvfXHOsgjfvJniJc8jZWXOkPYWsuj3SOjIEt1QR5lj
jfknWYMJP+fOsej5J7Qdbajbk7aljWlr2py2pw/wvvbOYH4LfYa+48+36Huc
L23VHljbnhOsp616KaAf09eN90ds6P2IajTszLzSemCzBbvEMLFMTJvtg2cB
zwSeDTwjhvucovDMzBmpE2Z6sdZN0bDWBRuUt9a/i483vK3+3VkJ997w7tJZ
HQlH/RG89dRV1iJSUh5qQfmiFTi7YBqSb3B69K/3lo83mMd1s6qWYc3WeMPv
GqsjzePfSgoc8Xi0cI9hz41JnWuxSL1vKV2KhB2+NipwPIOSpHqPex41wW7O
k/4Y5WO3oOS6zZKHwPi4d14OpfGOGvTVxyFsSSdaMjYiK7R7SPyDbd4y7J0R
bvgduQb28gg0RnLVJ+h8qQ0tt2z04Vd4r/OlF+WZQONwrr0mNa06Z8yVtQ5l
b9QFdULd9NrjRFc+nIrSaeOEYtExdU2dU/e0gejHoFYYbUcbets12V4jNqft
J3es9Y3vK1+hzxQ4LH59i75n6K/Vicpnk039+WOT/CVigxghVoiZ8kWpgqGr
xeFbk2cIpjtNsMKzgGcCzwaeEcN9TlGkTlj+SJ0wo4s1brS6YN1fSQzyUpjv
7/WvRk7ZX5Q+Da0nbfhv52hX/atghHFr1iDqqu529W5hH4yPu8fgfOX3EPd0
hV+uwp80/KTMp8+KkZjVbHI64vClY7Tknni8E1et1vtrxOc9ioUZkxGf/iiq
qt5y5TGwd3pfaHB5CMwx6EltRXf3FHzZNlp62Rw5/Cg6snbgXHgt6tbWYva0
Ixj/+7lI7K/1yAk5z97xDxj3e6f82XIAdVPOIO66M6iafMaHP0kveRptG2tM
3ycP0jLOKT3lF75dCWff4/hi7Y7B/iv8rO7xOz7T8iOnD3fiEfveWKvmnObD
v9QMrJF/cs1m77N22Tm3fjPURXJ/PSYq3VBHNUpX1Bl7AlGH1CV1yn4l1LF3
PoeZ0Ha0IT/TpjVV5xGfMWDr3EeV7Y+KD7i/Qx+hr9BnPLgPk1p0RnKBz/4k
cA8WQ75CYSRumg3nq74n2GGtM/nOUi3YIsa8eUB/QgwTy61nKgTbxPi1PDN4
Bn0VZ5urTlhlxXAf4yPXVV5tZ/OlhlDX2VRXXLb/gjWoekVHoh9B4VNz0GVJ
RlvEbT7fNyXdGnR8WXJZ2Ocj4U753f/sikSf3AEf7mMIOSy6FHU/ovaaq8Xa
96XJn/aT+a48hkD9NYRjuXQ4qP30L12GtFC1j/g8HElaDelJH+CdmpOpWg7L
4RmSD5K4cZr25wCfIbkh7zg8OI+KhLtN+RGpt5a6FGnZ9Sh7Z45rH/zMe/zO
37sc230uzu2+Fvc1cs28xz34557uFl1QJ9RNWmiC6CoobkXp3m/eils+CW1K
27rbmranDwzVb7xzV8QXvfyPPkvfpQ/Tl4fi+8SKN36IKWKLGCPWgsEksauv
kZgmtonxkevbfbHGjVYXzDcHYjjkjYrXXZ+ln4kJx8KeDJkV2wZqC81H70Oz
8caE4OuFMZ77xgTyMvORMj1X8g72Xa/Fxg+oPyns66HXRTpW9X9LPFyr1RVY
V9O3l8jv26ezb3BnvH9+ZSDPgHWcWCOKeQusE6XnMWSmvITCXTmI2rUY1u0r
Yc0+oMXhlzfi2fUva706UhpQlsL4+x5Y8z8ZzKcYUyW1wGQfo83rO+liO/4a
YttX4dnGzejp6IAjPAbWH1YrHQTmIIpv3Y6U0gYU3umZv9EQ8RwKx3nml0hs
3qCWFuXZWrX+g3ukz4rOr0hfFnVPvjN4R2qejfEcr3DcNpnbY423b5M18s9g
eJXCOznGYvS0dyBs10bRDXXk7x2pLze61lWHjX/XuRbahjaircRmyna0oVb3
zaFs2wVr40pl6xixOW2v57QUS86KVkdM6s4FyIui0PfYw158sbHQ1V/HTITD
ydZypejzep08YkHHBTEieSwKM8QOMUQsDSWPjFgVzCrsSh6ZwnKDSf8YngHu
vY3cz4jhlME6YRuH+xj/Rl7fhLpguvx7/mHXZ3vSZlOOpWV3DGas78SbD1xd
XNcRGoF5M9Zh3kMbcWLBNDivN+51/mah/5iufetcrMnYZPhdydbFfmPglPL2
OISldkruiff7tau3IrIiG4vKlsBSmo4tudtd3y12LEH6hheMuRWDHIQT4/Kl
pwbzO4q+V4MtIZvQF5Iv+Qh8xtneg8mHslGi/nt4Iv93Q+Ig7DeuR0nOJtTe
7NtjhXyHvx4e7jKj/RMUHT2CQ9evd/Er/Mx7/C6YMcz4HPuN62SN/HMoe6Mu
2Hd+8sE1oiO5p3RG3VGH1CV1Kr16lI6Ncp+MOBbajjZ02TqnHotLM7CoIk5J
tvr7Vh9/oI/QV+gzgfyKvmfkk2vSK8Vn/fk0fd5oD4KRRdMQNnajYIcYuip+
RWF4xoZOwbQ5t7LZ8IwYVhmpE2Z6fVV1wXS5POvgNY2VHqlvhzP6EP6ysR7H
Dz8iMqQxUqrRUnQCrSW/gbO+AH8tHyWxcfaxYN0s1nm6GD40joX1oIbSz8Ko
5zilrX6lrOX1qG6fd9jfPcZxAhbLTxG39gnE1z+OfvvLOB5hc8XnhyrspeHc
/ZzEyP9aPQoX+u5GpL0dubt34We1y6VfPOtkvR/aLmK//UW/tv7zuoNI/Kd+
JF53Ap+XDMa0mQfStXas0q9xLS536Zv8MiLDLmJhewaSe1fCufZ6OPOul88x
6h6/O2rQB8Zb6NOc0yMHRa2Ja2P+Ctfq733u9f2Z7fgwdJ/ogLkyT9iXI925
ExH1+3C+717RGXXn3B3n05ckWKHtaENyCpYdT4htaeOFzl/jiyxfjoK+QR9p
q8/wuE9fok8Fw/FRpF+Q8tlPDeqS+RP2lOE8xAoxw7UQQ057vmCK2CLGhjIm
+9L0H35YMN0WfUQwfi3PDJ5BX9X59nrouyN1wv4GLvvpX8JaNBEtx+e74rLd
Z5OD7rfdEXkPKsKfQ1XEEjgj7/T4riIp+PiyK+4edjcKox6EPeVuw54YnvzH
0HNYdKk6MhmFfXmwVM9B8oHVyNw4Gc4zVhR1jw8Qu1eiMFsWBMfCvvapE8PR
vzQZmdELUbjwQY0P8cOz5J/pcHEXVccTJTckOyMEdSdXuO6zt0nRmb0uzqMo
7kG/HElbbCLutO9B6O5o6XtO4Wfe43f+3uXYrnnUnJxbXwfXxLVxjVyrfp97
8MercCzqIjM2WnRDHVFXAfk3ciuHA3ErD4sNaUvalLaljWnrmt6nrthfAvkd
fVV8Vvmu9MYZgt+LKKy4Y4dYIqaILWIsWDwSu66eQQrTuRseE4yPXN/u65tS
F4zSU3wUCVn/7nHPH8fSsy0N1pg0j97Y/uqF6ZwKfy/PXg98/sx9M3HsZ/Nx
YEzjQBxcy+/QZLPkRhyo/N9ajDvbITWZGBvX4tz++RZL1sso27UYYy8/hrKK
JQFj4cWSa9Ao43HswuVarTDhXFbuRGxBBzJr0pBQm4SU9gR5tjhrL3KyDml8
zCoHrCv/IHFvXZjXwXwDcg9meSse3MbU19CwLR7WVc14q/JtWEPU+1PnoefZ
hciZVOzRu92Qj4hbAsuqfE/uY1Y0qu/e5fVsrZZPYzJObO9RPL5tkF/hZ94z
e17rv+7J61TfuUvmdr/HtTF/xd8enGqP1pAKHFDvHvjZXOlZ/wZ1oXRC3VBH
gfQo+ULC99RreTpuNqGNaCvaLDPriNiQNk9oTxLbZlalIXb9XrE5bU8foC9o
PVkaNLsHyolSUlbxHO6+/CRsbj3szfgU8Tfl05pv7xZfp8/T9wUDPrioEswc
mzpfMEQsEVPElj+uxb0eGDHLe8QwsRwMt0LhGcGzYrjPK1nLSJ0ww+ubUheM
cjbHiZKk33ryFn44FttLBVicWnDFcd3e0J+j8Y6FsI2NQ++odai9Yw3Ojp2M
lhuKPeLJvfkBuJWETdhbyH4Wxr1SrNV+6je5x8KPLsbilFZTe6yprsPy/BVI
WL8UM17KRGNSufq8AVlbkwNzK0a5CPethWPCBhTcVYfy6zZLXsLimF50ti9C
5Op2fFzo2zs+kHRPm42SBSt97rM2mHfvDlP53guY2ncWIXvqXfwKP/OeGW9h
tDejemRcG/NXhrov6oI66exYJDqiriQfSOmuRekw6L15cSzpyna0IT9P3bNa
bEsbp9f78ipiY+Ub9BH6SjA+Rd8zGoe+Sp+1J5j3faHQ993X3vK9UsFI7V2r
BTPETuMdCwRLV4pDYphYDoZbofCM4Fkx3OeVbo+ROmGeF2vbfFV1wTzi7rHX
LlbK2Ct/487f+kt81zlaajANiVeIO4SW/z0FDWfm4FRJp/THYO8Vd+7jwhB6
U5zjOxOHlgvwYaQNDQ9o/U/ceZn2jRukP/3xeOMYM/tZjN+fgbi1jyN+3U/x
033JKEypd+XjXKmwl4dzUwG6/+dRdL86Aw32uWg5twIlE89KjxP2obdf34rL
YeY5IxTnxnNIvK4fC6d8MMhVTDiJ43kPq8/Gtbi8pSzpD6iIOoHUdXOR7nwY
aY6xSCuaq+79Rr4L1u/61Zx1Pxmscxaj1sS1OUvO+ecE1R65V+brcO9FSgdN
ShdN9jnoUrrp+Z8Q0dWHUVeZZ6FsRtuNd2QjvuinYtOJ3ctMe5bQJ+gb9BGX
P9Bn2P9F+RJ9aijz02fPBcnHUCTnRWFDf4c5OsQOMUQstSpMEVtDWUN7Ubnk
/RDLxDSxfU35FXX2fNXn20idsG//xdgrf+NedmTSYF2h/oVBx3P139k7lyyV
39kfjR3vup+/0LyntznHco+rl3r62cnI7zHOJZAaUN1Dz1/xlq7T8YhrWIjE
A5lI7VbnUXUYus7lCgcRiGOxBVEr7PjSNOTOXYb4KZE4Z3kKtoS7PPrFe9fE
ikkPc+WBCFfR/ytk5o3H0/Z4D34lrXsyZnbt0HiP8Pv9cyQz56MrLxV1RWq+
/nxUKOFn3uN3ft9VY3OOUDUX53TnV7gmro1r1O9x7dyDt01lr3oejNLBOcsU
0Um20g11FNAvWBMsALdCm9F2tGFaT7bYlLalja/WT/JNclZElI/SV117DLLO
mQevprCi44YYIpaIKaO8MH/S2h81mKOkME1sj/Ar3+4r5xtUF4yx3IiY38Iy
vcfnO9YFsprEkz9rr/KI3R6boNcLm+Nx/4ze40F994Y8M8/jubSZqwzj5Oz1
4M2faPxH80BMWqvXVGbCtVizGnH9B3PQfPhGpGwLzLGEdSwf1Anj6iubZWzm
L0j8W30Oa/4l0iqXIbNipdgvZVWHqyaYHv925axI7/d605pnhvkXv92L6dtK
tDEn7pV3i+/bibpno9DzsygUzszR8kkM3m3We5v8bLD+1oEnI9F80yC/Ijk0
fuqU6RxHWsduNIQ/J8LPTj97kHpj/1DlkZ/DOQ88GeX6e9qT1oEeMcZrd4yu
hnXqL9EzNQrNMyNR+NB2dX+z6IC6oE56fvty0HrUeAitlpaey6LzFHqtMNpu
emOR2JI2pW3LdK4jS/Mrqf+WvcvlF/SRQH6UVhuP5t4bceOHoT497HVOpWyg
Hh19mL5MnzbydWLAaH9pM1cOcpsKS8TUmQH8afyJJ9epP3fM6z4xbLQHYl7q
BHrzluqM4FnBM2O4zy3KSJ0wz4u1bb4pdcH2pm5B1pwjKJrY6stfJFXCblQ3
aL2S5j3oCw0dWi2iJ2bANsmC8pB4qTFWe8ci2Cf8QuLHzL1486HJkovBv2u9
HnzrdrlL1uoK1Nab5wKsUWdGMLFwyvJfJ0t/escGc85r6isFSLamYnnuCsw4
mIfaisVD5lZ8+AipI7YOJWNrsOWVHszYUApr1XZsCd0xNH5F720ycdHg2HcE
7jfvLX035mNGcxfSn1omMqP5Fbk3lDE4p3utt9qJMVqPmOuKhzQOdUBdUCdb
XukWboW6OnWL/342wXAstF3owbViS9qUtjWN5SufoG/QR4L1J/qe2Xj02ayc
QNzqRsEA10xMEBu1t2h2sE+IF+wQQ8QSMUVsDQWLJxR29zbt0bDstXZiXuoE
eq2JZwTPCp4Zw31uyXpG6oS5Lta0+SrrgrnLpwlXF/t3l+7aTonB6n9nzwv2
3DbqG+4t7Mnt6l+/Yxlet7dJD+4/X74dR5OcrucuesWRA8aIp5SjJ4iaTD7r
iVKYmVSGhgllHv3NO3LrZY1HUk36dsRX44h9H+Lqn0Bm1f2w5DyOuSsu4EN7
49Xr2FKNJstJ5P8/0bD/yYL/rh+P/6PE1hwJy93dqPvHl6U3yYWnTXJIIjqR
eP9J4TEuVh6Ve3FRu9DheDw4f4nshHPWRXwa14mSlAtIDP2pSEnSBVyO2y/f
8Zlgxmrf/QTiolvkM9fCNSXee9K05wpribVNcKLun15G/J0HYWuKwv+xj1c6
CBFd5P+/i9BgOX3VXBaFtopMeReW3MfFhvG1j4tNaVuj5+kL9An6hn6PPkPf
oQ8NNQ+FQp+l7wbz7DkD3rEv4WV8obBDDBFLbfbl2hrb5wjWAo3JOmd8/rhl
sO8QsU2MX7Uf6xhTZ89Xfr6pM/RjJ+uElQ/3sT5yXeFVdVLjV9zj1IzRDiWm
q8uFlKXSg/tCQhhaLcH3XvGVe1AY9TBSux5DTM8U5J80zlOxmsW7hygl3SFo
Oa3lO9SdLERydyZiGqLQdS4zIMfS8MeDAXJYHkD6j2agNT4bPempwlm0JNyM
orn3mfIs3e/scvEV7GcitbdyxqPh7DoXv5LcNVHN/3NMtBfJGG1RNxnyI87w
W+Eccyu6Iu5G/9uZKCu5X4SfeY/f8RnDvBc1JsfmHJyLc+r8SsPZQlkT16b3
XNFql+0y5VW4Z+6dYx/JWIEWS7bohjryp0PqOBC3QlvRZrQdbUhb0qa07dX6
h1YbzCRXSvkmfZS+Sp+tuAJuRRdihtgRDCksXQkG3fkVCrFNTm3k+nZerGnz
TaoLVlwwWPdJ60PhzbHsQk6ncf2gY21tnrWHJs6T39JL3aKB2mGM6TK+y3v8
jvfdY7y9U7U+LO7xY7Oe5N4y2I98kGthrNoVf931S1gaF6P54I2wHAtBdaX/
3INnyxs8xi4eiLFLHkvWQI8OdT+tPV7i8oU1WZhe/LkxV8LcgzFa35Vg81ju
TrgI267FWi0pN7vwvbpb21A463n0TIxEWUQK6kbv9Hk/JywelvzNwoewrljP
Q/PUffc+K8b96L2lenQjLClFIvwckBeSMd3HrZa5neRe1Fq4ppww39yV5tFq
n+GrtD3NWozqO3d76Ig6oC6oE+om2LwV4ZDG1Pv0mNFl+vo/ie2EW1G21PKR
HGJjLWepWWyv1QbT/IG+4c93qisXIrb3MTS/ciNid0WJ7+nvCn/ixqkM1h3z
799G/Xyk78pUr9ywifNduBPecsJ8Vw2wQdx51fBT2DXaB7FOzPvysLs97DLs
51aWVieMvW3Iv41c36y6YI0Zb7tiz3tTN/t8b0/ahNqtvhxLpz0SW6p78dak
IOK6902DMzQcW+5ajO7Zs109uRkbPjvnGfRdr8WNG0dtkDiyJf+CT78MQ/5k
6xKk+4ljZ5VlBB0Pp6Q3bZLfxLeUmc/N3BXmsDAun56biQT7h1cc6/eWsEUn
kPWKBYvXt2JRzhcouGErtoRU4ESIed0rd9k7+RkUJK1D33WaPg9NKJA+70Nd
R+c9mxC5oFSEn4f6PnkQzi18jVoL17R38ozA73KPUverQnJgqAPqgjoJizlx
zfScvPVDZT/NhqEOLR/J1M+UL9An6BtD8SX6ntmY9Nk19XEB/ZsYsFjfFkw0
jtJ4R2LlTYWZ8nHxGrYUlogpYsuhMEasBeQ5J84Q7BLD3usm1ol577XwbND1
xzNjuM8tEdYJs47wK7y+6rpg7vJhQuBYa7DC3tnu/AqFXAl7ivvrecGeGOzx
wN7c7v3rmSuQ1psI2x9Xejz/XoRWB6l/VmCOpeHhMnn+SvfEPuPefep7VuzS
YtU5vrpjngJ7bLTE2fDjyX9AXMFk2KpuxsIdT6FoxQe4XH91+j5n34WydZfR
Yo/G5cgj6A+7AOeOHNTlPYLLRY+grmkKFobXo+wHR9D9hBOXQr1yWqQOVz9i
bj8nXIZl7VzUVeUFEac+iKPlZxG3v0Xi1V8WhaAj4xF0pI/FlyUhci9m/y55
hs8GGo9zxhfMwefh+2UtXJN73TLKpVn70KP2UHH7r7Fw1jZUNT2l7TFvrNpz
No5HvCE6oC6oE+rmanRL25SteBeRah7aLC5vMh564g9oibUJ32GUg0IfoC/Q
J/R79BX6zJX0qPfw8QdKAz7XP1A3z9vHbR9lKez8wiPf5r3IfYIx5qS4r9db
iFVitq1pqcd9rf+KCa94BcKz5+s4486N1An7Vl/Ogf4r7jFZ5+klVxTbpVxM
miPx4aP5mVfBr9yN8eWZWjx/QOJPPo7CIwb1wg5cG46FYzQcm4P4rgzEOZdK
T/CY9mWIccSj6+wKvxxL2+UOFEWacwRHl2bCGp6K3ImTXVxGW+xNrnph3jzL
eOdWjx4nrMOVmT0eqWufHOAyJrn0UtYXjYkb09Eaf7MhR/J63JNInxmJyH2/
gvP8LkT0HBPhZ97jd3zGMH9FjcmxOYc+n8zN/Jm1j8ua3OuWUbh2n3yVgXpg
3LPO+VAX1Al1Y6Y36pS69cet0Da0EW1Fm9F2lv3pYstr5Rf0MZ96YMoX6ZPu
PkqfvRqfP5qfIdghhq4Uf8SuN7/iHOm/8q29vkl1wd6q+Q+P2O2x0j6TZxsN
e5k0V6m9FGz26u8wV+oWiUyYI3+XGkbSS3uWYe2itInrXGuwrPo9bNm+8d1g
YtF6bS/GyRkPfnbXL7VaRxXPo/jULag+/n3kVKSYx8m3ab1YPOLK2Rp3Uz2Q
M5Ow6hBSVu2HZWU33urtQNj6vVquh0luhpbTUj+Q01IlXIS/XiwfHN+mxmzG
BzW/N84VuakZmbNWoSdkHuoinkfZrZ78hyWvDIULnkPz6G04Nm62i6+Qvis3
VAdVq0yeHzdbJLh8EZur77r+d87NNRSHx8ia3J+3qT3YIpJkDzlhKWi+yWG4
LupAdHHcvGcLdanlqlQN5KqY5wwxx4c6CyveL7aLXdkjtmStMOE9BjgQb55R
eq5s89PLviIJtuNjUPbaGPU5QePqlO9xHPqiXmMsGM7Q1693CSb0PRArxvW/
tBphxJrW32iOC4dabb7BZ4nZZoOeK8R4sQnvw7PBXZc8O4b7/KKM1AnTrm9S
XbBPNlzwiDu/ldtuyimUb/Xt0VD70hJMsjpdfImhzHgG5Q9ZsOWpOLw14WmP
7xqfWYDO0DDY78twrcGS9C46yyKRlb8ucPy5KgxFKcb1nIR/qUgfUkx874Zw
bCmzi40aK3w5lvLn7Vhctg4l1RY46hfBaT+M0PS9SH9mGQ7dXHpNYv9//k0l
JmW8iM/KzuLUA2vRwr7td2h925njwr7tp242z98oWJKHzqc0LoM8BeuQBcVr
jMtH44RSqbtlu65SfQ4XKVefeY/f+etv4i6cU3ghcjyTp8qaTJ+X/J0C6Ukv
db/UXrln9qynDqgL6uRa6PbQjRuwfM5KhGbshbO+Bw77IrHl4rIClCTYff2+
QuNW6BP0jaH4En3PzC/psw7b7ID+TQwQC8SEvgdihZghdjw4E4UtYqz8AQve
fOYZczwqrBKzxK73molxM66JZ4O7Lnl2DPf5JWdA/kidsK+rLpgu70e/fO3i
pfZGH36FcvHV29F14Gnf56NeRP/hsfiy2fO3/x78hrMcRW9GefS913kM9gs/
6qd//MeRlRJ7Drb3ipm8PhDDPjXLMz+A9aCcReXSE0Z4mIdLZU3OKeWSU8B5
L9p3YuqK3yC3+l40VI7GxJ4oNOX049PaK+RZEqolJ6Hk8lw0HB7Mb2p4uA1H
ppyQ3vHn9z+FjwseQUNVCCLjspD/wBs4NeVl6QPPZ5MnvyV8RtfG38Ce8CB6
Yk8b+gY5vpbqUlw4MBlfbgzBe3+chuTfVaMroQ+Xw46gLfdhtOU8LJ95L/X9
KnmGz/IdvmvGEx6JPiNzcw2Su/LEWwM8zn68Pu1lFKo1R8bmoE7t4eO1Y9V4
U2RvPZNPyl71cZq6D6Hso7lartMV5mLRFrTJj3rixEa5VfdiasYRsR1tyLp0
UudL2ZacR8e0csmjou2968XpfYJeD4L7CyQchz5s9n0f+7qoNX3ozq0M9LEv
Ohcl2DF6ryN3G77cPUr6qrwf5fT5vmv/DMGs931i+/1rkYc1IDx7vq5zrq12
/UidsG/pxd/9e/Mrx89nX3F8l3I8fiLin4iGPW51wNwEM4k80orErsc84tdx
B55E9plHfOPfQ+zFosXM9Rpjvv3sGadP3TQddad/ie5zGYhxJCDGuRQdZ5KN
4/w9D6P9Ewes0eMM91IToZ65/3GkPpuISxmLB/mLcN/+8TrP0nA6A8luvEXM
xlnIXDseVWfKPPgVSl3/MiysjPTgRmY3rEHLm7uA/zyLsmMlsu/UI3WwZDwj
ws+8V3ZsozzDZ/mO+xgck2O7z8W5uQauhWsarFn2mKzZm1eR/ag9cq/6uNRB
6sx40Ql1Y6Qz6lJ0atLLnragTWgb2oi2Si+fIrbzftZlZ93uwfqJ7hte79AH
6YseelG+Sp+9El8nRoiV+EkLBTtXg72+86t9+JWuc6uH+5gZua7g+ibVBTtT
/hqq72vwjGdXvev3nbD2VT4x2TON2aibtUTiu3p/B8ZzWQtsML47zzAmrMu+
8Fkyf8TSi1dde0irwaTFtac7XoCj5nn179SFstaog1Ph6LwRUe2zTGPlOR0x
HrxSVH4bnm0uw5RtVZhezp73Lw/kNjQgM++PyHyI6/4VwvKaURYebcoDaFyA
VjOM+RXsw27EBdxSeQ5p7WrNeS+pf9MaczaabEPm1HXomTQXzvAYFD5UIzkr
meNKkFCq1n73duybHunieNh/xLsPvV9+ZdJskaCf59hSe2xgP2puroFryQwp
1vIe7tuGZvasnzgXOTNfUOttMB2Pe6cOqAvqxJizqtX6vfvJVXHlXCgd0Ua0
FW1G22k1uTSbPqtsSxvT1lF5bR48A33CzF9i2+ZJzkrU4SdQrf5OX6PP0feE
51O+aNYnKFiRGn5LB/J3wo05SiN+kxjU+U2tP9Iswapg1rs+nsK2vzXwbHDX
J88OniHDfY5RWOftu1wn7JtUF+x96yvYe4snJ/DZ+n4/72yEtXqpAcdSAevz
qb6/kR/3NGpnxKD8viU4FWoc72V9McaE+yY9LfNnxZyQ2kOMdTvLZiO9NNt0
PVue34q9G9h7xZyrslYFX8/J/ff7jtJNUg/KVlEDy+omzHglEms6pqCgPkz6
drAuGftobFnxr2r96zEjZgtCU1qwfEn8VXMAoflHEda5Eo6t29E9UCuNwppY
7B3P3BD2bCm6p054DO/+I1vGJqNIrW/v31Wg4LZ6nBhrXNuL7zknrpf8Fo7H
Z+0TNmq5MjcoW0xbgjXT4uQz79Wq7/iM9ItR7/Bds94np9ScfJZr4Fps45Z6
fn+P1n+GeyB/w/G4t1O3DfIw3Dt1ENaxUnRytXpd/ny82GjGgs2wzVgntqMN
12RsUjZdhgJ7GKztkxF6MByLV+/QbE8utLTCMH8rYP8V5XtmftmosETftT1f
Z/pM+oYXBAMlCfVaDb+B/B1iRTBjUpvvrMIaMUfsEYPe31ufXyaY9e0XsxT+
6vHxbHDXJ88OniHDfY5Rvst1wljDhnkAX0ddMF0+nnXkmsVL/1y9zZBfYf8Q
9truyhqMzTorrRKb7u5+Svo7mI3JfJa/OkajdeNv0LS2H1/kDPYVv0T+5P5S
0/pf/G1/66QrzyHwiAW75SR8Gl2J18PUeTi5Hc6E67AwZaXcZ39xo3e/yFD/
n1D5a9zZloW2jaPQsmkUHrI3yn7+bNLPw5+w33p8dzeKfpc7GD/+iVP6z+t/
J+fRnnoEXfvm43zJWLTmPQxLRhQyQ4/ivbiDSLz+BGKuOw+n5UH1rJY3cjH0
LJwFLejbNwf/XR0itbeO7FP/r5PrxPuz+tFe8i7OVfYNzjnAr7jyBNR3fIbP
8h2+yzE4Fsfk2JxD41EOwhn3oKyBa3nf0o3cmf+CuIxotKpxz60bi+5989C+
4pDsRZ+De2QNNP3v1AF1QZ1cib/SBj+qfhktlaPENve1Lxdb0WZG7zBPpFvZ
mjan7QuVD5BLoU8Y5TpdjbQ+UY7jJjwNfZ5zXXLjX4gN7odYYY7KxUjzWl6X
o3YI9oQjrM5R9zRuihglVo361xDbZv1nrkR49nxd59xInbBv79VxOt6HXzn3
buVVxXjLku5BXcRY5EesQFpoAloWPj7kmHPHOy+56mB5S9yxySg85hbzHoiD
5xvEwj3qOw30bAnYv16JrXcKrK/mIaZhITrOJGo8S/NziNu/QnRmxLG0Xd6C
+JQZhvvpSVotfVhyE5J98kSaksagJOweD06i5s0Ot3yRx5B95OfITn8EuWmP
IO3AFB+dtP+xTjiTc+9sQUPfzwdrn/Xloetsrny2n23Bj5tW48c7MuUz7/E7
PqM/z3c5BsfimN7zcG6uITt9nKxJ44A0O3HN7nvgnrg37/1SB9QFdWKkK+qQ
ujTiVqh72oC2oE1om5gd0WIrsVkQtnX1UjGpL6dxb27cjJ6zonyOvmfkk/RV
+uxQ/ZzYIEaIFWKG2Lka7BG73vxKx5mE4T5mRq4hXqxhw1o234S6YA15exAR
9hufGPRbNZ8GjmVu+xXqqjxjs//Tucujx71eJ0z4lpB5Pn1ZjCQk7iNZ17Xc
p+UV9st4HnWl0WiuIs8SjczKpWh49fvIOXUXyiq8+rJs0+ojcY+Z6k/+nn96
VbX0+dZ6v2j5Dbal21Cn1sr+ILrucmYlICK3AVHLNyNtUr7fWL+rlhW5luuZ
k1Lr6hHCPvbvtZcgZdVej7wFc6mGNaQK+6bOw4GZUbA+qfxs6UrUxaehLixG
xtR7wQTLlVwJv6LxR/XC43BOzl2XkIaclVkoDLFh37MLXT3rnTf550Io3HvK
qpdFF46bNg/2trlJ41Sou2BqrqVNLETUys1im5xZ8a77tF117h6tFhhtOsCZ
0da0OW2fOeALUh/PK3/FVrEYaafuQfOrNyKtKkF8iz5GX6PP0feuNWZD4v7g
F0OufiwKc6+51QVz74NErHr4vMIy9xhofp4N3rrlGXKtMXsl8l2vE8ZaNt+E
umDdK+qQNa3DJwb98YZ3Ar6btX4t9ua71QkrjUD3jk6cdfvNPHtu2+5ajJbQ
SLz5gJ86RfzNvXpOem3POyvr0ucpf74ezorZyLKtMI4/FxagvD7Sf9x1a9zQ
4uLrw2GrjsGM6nys+fghzDs0CQlvzsXyqnQUpGyVuLg+tiOpHLaxdpfu0p9P
RGhSE8JiNsO6IPOKeQDW03r3NwUIze9GQcIZ4+duUM+F5MMWsglF36tBwY11
qJ1Q7sovsYcugWP2AuEuhB8hp3HbQJ7IuM3aOzdshW1cpdTxMupn4uJXvLkT
9Szf4bscg2NxTMmr0fkRtQbmwDjmLMCWOYmu/BiuseDmOnmHa++bkO9an7dw
76H5r4gu9HpnVyIFc9YgNG6L2Ga5spF+n7ZzeOVqMK9keVWm2Dzy4CRYP34Q
M7bmiU8Y9SnxJ/Q9f75ZUr9A+XC+sW9XrBTfJwbcMUuMECvElncumIcozBF7
fI5YdHEvCqPEamdZxOBaFZaJ6UC459ng6yMdHpgdNvkO1wljDZvXQ9/92mKO
Lom/RvwKe4+wv31Wrc937FHx5Y5ROBV7AB/3jJH6Q+zPEsy4X+4ejXNRh9Bv
b0NL3L94xHilz8XDZYa1mNqeKJff+F+TWLCaR/IF7ixFw/eLpbcGc2eOhx+U
9Tl3PxdwDOZJ1MWfxdwzP4Uz4XrYm2+CJeX3EhMfStyavcabovrRvmMG3kvR
8j46JjnRNclpauO+yHNo2LEC7VU/hjPyhwjti8R9lgIk9sxBV3scvtj9KL4s
D8G5/dPQuskmNZW8x2iI/Qhf5A3W/vLmV/gdn/F+j2PJmGpszvGX5vEyJ+fm
GkKPR8EZ9UN0bHpErXE5+qLIwRj3YeEeOwb2yb1TB9QFdRKs/j4f4FUSk/4I
++6bxBaRJyeKbYLJK6KtaXPanj7AXvTiE3dq+VT+ck6GIsfVWPRh7/vC4zzg
mdvCPREbxMh5hRXmhAUzBzH4+YGb8XH3GPlMjPYY9BYipoU7NelBM1ThmfN1
n3MjdcK+vRdjsFWvTnPFZLvfbgkunhtxE1rjbkZLwhg0LL0VVUtvR93S2+Qz
4+pt8bfiXE4qbJMm4r30cBSmP4bQTQkIbcrF7H2/QlzPFqT21SP39A7knmlC
5ukmpJ3dgcQz9Tj1nzvQ/58VOPJpMdo/ykTd+4nIvxCD+P5nEHN4CuIOPI7U
0+OR3+2ewzKYyzJUPsVMJE+ifj6KjllRceRJyQWIaYrReJYzCT4cS8OlPDxd
EO8TR7dHjkPJnSGoGDMWR6PH+vY6WXIzCiMecHETE0vSpKeHe35E3ZlfIXvt
eFiP/wrWw8+i58IWFJ3Zi4k1v5R3mX/S1DfLgyuIs0eh9dg8+dz39k7MPrlV
hJ95j9/xGfd3OMZse7aMybE5B+finJyba+Ba3POLuFau2VUPTL3LPXnvk3un
DqiLhsgQHz1Rd9ShN7dCXcftT0NM82KxAW1Bm9A2pnlFQYoH3+KdzyRcy4Pi
a/Q5+h59kL5In6Rv0kfpq/RZ+i59mL5Mn6Zv08fp6/R5+j4xQCwQE8QGMUKs
EDPEDjFELPEzsSUYiwiOX+l5p8W1dmKa2B65vn3XN6UuGGPIKdl/MIxFOyo+
C2qMiILdqN6u/VafMeXq0hjsa34ZZybM9ulf792Xxb33iqte0cp1SHml7NrH
XdujXXXMGqoGeZbqysVIeO2HaDh1Ix7tXYYpjcWwZO9BYVaz9NlI6Vwifzca
U/qdL2/EW/mv+eSDkAeoi4hB1PrdKIxZheIx2wPyCBrXwjyVwbyWiIOvI6o9
xzCm7W+csvt2ojosBj1KzynlbagLj7kibuVK+RWdY+GcnDuh1IEDE+ejYdZC
FI9lja/gapPpXF/UnhylizOuPBWtj01tUDXOym5qEBvQFg3hC8U2HvtTtqMN
tdpvxvXo6AP0BfoEfYN/p688fjgNDa/fiJRT96K64jkXr0If0+tu0feutT8T
I8SKb22wUMM+Ky6+RWGS2CRGiVWNa1woGCaWg5mbZ4ORnnmWXG1+zrWQ72qd
sG9OXbCNKEl5wzAW3Zv/blBjFKSr88+9XlLTAmTZjuCtyZ7964Pps83f2hfl
FKDW7htrZo4Ka4BlVSf6cif1C+U3/v7W2VjtP+/AWarVREpYvwGRG8pRrsYs
qg5D0ck7Ma9iPWy527E4dZdhzhF/u+/DjXwvH8tjlmFeRhsWP/MCnGPLryzX
wtGFSVtfwCf17wb1PGtpSW2v2+qlt/zykCYsbtqBeeNqUBtSjoJb6rT6Yg/V
YC/zTu4xzjsJhl/xmVuNxTE5ttT3urlO5pw3disW7diBZLUWrqnglnpZI9ca
zJ6490lb85Du6LwiHe59YBMWh+aJLZYvWCq28X7GKP+CtqbNt+TaEVm2AQXK
F+gT5fULEFlaKr5Cn6Hv+PMt+p4/30xfvxYlyt+879PXWTuMvu/9HTFStLpA
MBMMtojB8gnxKJ9okc/EKLHq8n+FYWI5GMzzbDDSM88Sf3kvX5d8F+uESV2w
2vVfP7ei5P34a1TzJ9a8RwN7arMW2F9LRkmv7c+jfTkYMzl1+EHJd5G/D8SR
j9vbZD7eu0yOZVyZ1OVyrwXGePelq4h1Mw9B8gTU2A23l0o+AXNipFbUA6Wu
fhzMsWH/mI59Pw88blI1umsPIC3yj2hyKF1E/j3KTt4KW9KFIeWzHKlvR9rl
ZbD+3qbxJ5NflhyWYOx9IfQcSorKkBn7DLKfnoH2/bk4Gn3Gb97UFzndaIr8
d4973vwKhc/wWbNxOAfn4pzZM2cgM/oZFJUU43zoG0GtnXs8OpCnk//7StEB
dRGUTQd4laoktf+zt4nuW5pHITXqD2IT2ibQGLQxba33CZI6dcoX6BOsDUY+
RDg45TPdyneuJpfl0kB9O/d74ntqbPq8jrnjA7yj7jvOTfk41fvD4LkOhcU2
+wrBJmuGEas+GNR7K8Veg3OC2FJnznCcdSN1wr6dl96jQY/Lpr7a4Ns3e8nN
Eu+tSLoLhZYHkR/1MErm3ucRG09fMgmzuwqRfXwH2i/swql369B/wYr3f1eF
3PrFaD2Tb1iPy1teV+95zD/Xs3d7atYzmF2TjpgDFSg614SmT/ag608v4cin
JWh9JxolfeN94+RXISWHJ0qPcEvNHHSfTUNhz7gBniXaMJ/F9rt4jK+x+nAH
zvhsZIYloz9vhXE/+YU3oTB2sCdL15slHjkS5DB6ipIRn9eCqtgnfepw8f3Z
m5aiW61H50ni1b/Jdd7k/DvqjP1jqwg/6/f5jM7L8N3ZFYkylvf4nJNzcw2p
XrXbut7cOMitqD3wfaM99q9dITqgLnx67iidUXe++Sppouuuc9mie9qAtqBN
aJtrZWf6DH2HPkRfok/Rt+hj9DX6HH3PfT/0TXdfff3drUHwOWMFC8QEsUGM
ECvEDLFDDBFL7roh1og5Yo8YJBaJSW+cErv6PHpvpZHr23VpdcGKhj0GSXmt
yjhOKr/1z/0o6HEyV+1H8Z54VFcukd/u76tdjoTlG33615v1h9Dvp8Tn4rXG
DNjaFl7jvTairtarB3lbDKI6szC9vFZ6bkSsb4Zt+3P4x4P5iO1M8njes06Y
p7A3+ZnSzyVXw6iXStlNjSiMWQlLcTOawyPhGG3eb8WXa6mB7fYO9Dbnw5n7
qsYp3For9a+C7Z1SN8aBfVOjEKvsMZSaYNeCX9G5i9iUEjinLkT17buC3jv3
yL1yz9w7dSC6CCJPRRfquiFioeieNrCNbvR5Rnq2KNvRhv76zHvUBVO+EduZ
gOs718G27TmElTaID9GX6FP0LY+8EPW8WS+TKxVihFghZtzrgfnrb6Tlk80X
bBKjxCoxS+wKhoOcm2eDmc55pgz3uUb5rtUJ+ybVBXt3vXnMvjz1zaDH2ZKg
/l+hauB38IXhKNidici4zR7964ORsAx1DnWuhsMWYThPbcJmNKp/J1vVv9nc
a4E5Sz1/3+/DrSSVy7rcY96co2CrBWvy1yEroU1yY+zV4ShRsvzkgyion42W
XK3PjH2rFh935G7E4oxWrLHVBa3HzrsqETknD5EZu5A1JxG9o9YPiRtwfG8L
7IfWwm7vHjKvcOqOPOE7CkJ+gakLNmm9TMYG1zflSvgVD/meVhuMc05dUAHr
hF9odcTu8NN/xUS4d+qAuhjKe703FCB9frLofnHoC9h73ybTZ2lDd5vSxrQ1
bc6/2wfqgjlyF0ltuOSTD4mv0GfoO+kJL4ov0afoWx4ci/I9s14mFJvyXdYI
G/TXjcrH48TX6fOGHIKag1ghZoLFF7F4SGGS2CRGdUwQu4LhIPHOsyFYPQ6X
fJfqhA1HXTB3uRR+8JrETCXuH7Xfp0YYe2l/OdC/nnkrTkfckMZk7Pfo4R+7
/u6qg1R0wpW3wPpMzCkhB/J59GA9r6HMw/cuhFdIfw2+23CvFjfnPe8eLscH
+mywz4rE2VlPad9N6Dn8U+i1lvzJF5Xb0JRyAk+070NHyt/DGfn3SP7ocTSl
9qMpL3B/FuYTlFnegN2ZrP02f9rLHn1J/Np71lHxt+6PYpF43UnETQqcM9Vf
2Y+OjW8F5Ff4DJ8NNB7n5Nw9H0XhkvOnsqZg1s49sj8LP9vbl6Is/qxhvpS7
SH8VpVPq1vLRNNF1R9Lf46cHWsUGtEVg/6jWbKtsrNfOYl8W+sBxrxwp3Y/a
dT+639yPAoleb4zvCXejfJy+Lj6gfJ8Y8K6bR6yQwxzKPM7dcYJNYpS1xbrT
WwLi+mqEZ85wnHUjdcK+nRdjsO41wuI2RKl/J4zRuJQlD6No7v0+sfD8hWMx
fpcNJef2o/udnWg4nY7MNx83jSlXvTpduIjk7kxUHDF/rujwBIRWr/DkdoRj
cYtnz71Z3dPE9VzSra78j/yFj+BHtcWYeXI/6j7pwvH/qoPzd8+h8MjVcS7O
k89J7kpmbx4qeiejsCdE41maFyNm3wp0nVnmerbw7Z/jiX31XrWgJqHpe7fB
8lSkIfeg92Qpi9dqhVlPvuzBYbSczkRRkfp/hqQy5D4wxYf/aEnQ8kWsKY9J
jS/nGStsx60uHqX/zTVqD9Ei/Kzf5zN8lu/wXdGzGst7fM7JubkGrsV9bVwr
n+Ha3XuteItlmvr/xe+NEV2464a6os50/VGX1KmWr5ItuqbOc1mzTdmAtrga
W9IX6BP0DfoIfYU+Q9/R82/oU4M+OOBvc2928X3ik178Bn2XPmw2L32fGCAW
iAmz54glYorYIsaINWLOG4fEJjFKrBKzxK4+ho7rkevbc32T6oK9VfmvcNxq
HuuPiPltcHHe7Gapq1SW/RIsnRmoLl8sNZE+cBTBMXVhgP4Q81zx4LKI5Xhr
l9UVk05Z1XHN9pqQtRfW9miE7VmFZ0t3St2nwfXvRFT+foS1paG6cTnKTv0A
1ce/D2tFikeMfHpljen4lpW/1/gVP31N0iYUIXbVrxCbVwtr2JIhcRRlx7sQ
VmuDZclFHGBOyOgaHGAtsdE1wj8wT4Q9SMhHaFLveo693g+MaUBCQS0yp6/8
2vkVzsm5uQa97/wBg/VqeTWee+Nz3DP3Th0MZd6csOdF17Erf6V0v86U+9Ht
RhuaxuqV7X162L82RsktsDWuEt+hD7n3rKeP0dfoc/Q9+uC18mdiQ18LMUPs
DPKV/vsbEZPEJjFKrBKzxC4xTCwHMz/PBlNOS50pPFuG+3z7rtUJ+6bUBfuk
8F/Qe4N5raWsOUeGNB7jxwW/TkTyhpVIt6eisdmO2kVxQcd+7dN+gVOHCrCm
SevrYjOJ99oTNqF261z5vT85lpIkrXaY33hwUh3s1ZGwVi2FNacctQk1sK7Y
jDVbLXDaZqN86wKp71FkWwRnrnGeyxrrei2uvXojFue8iPSKwR7oBc+b1O5y
/23/7BcQGrcZ85LsSE74xZB4Aue5F/FgxVaxyZC4iVEvSD/6knFbUZBajMbJ
c4fMbVwxv6JzI2pOzl0ytk7WwjUNaW615wcr1P87nmsb0nvJz/9CdB0WVyl1
wQI9Txvq9qRtaWPaWrgWZXvDnCflKyUVMYg88Zj4EP1wTX0c1qRXaj6mfI0+
R9+jD/rzUfphkXqGPs18LLvycfq6IR+jsCE+qbByQmGG2AkWZ7WLFgs2idHk
9SsFs/64HyPx54c8U3i2DPf59l2qE8aaNUb1mL7WuOMV9gb3lj67U+Kwf1lX
K72z+Xt4rX+9FsPm7/7Z84H94YMdsz9Oyw/xuG+pxpH6fWiK/43rd/uMQbdM
KhM5MrNc8lkCjc1Y9ZXmHbCvPfuL6/1fLkXt0uosHR6r1lIfeG/x2h7Ymz35
0uNoC78O7RF/h9zecjRl9EvP9Y/rd+DPcca2YR9zZ89k9NSfxXsz22G/MzC/
onMrPfsiwRpciePOI/G6E/i8wD+315B0GZ9vPBSQX+Ez8qy/dai5OCfn5hrY
pyVYjoV75F57as/J3juUDgx1q3RG3VGH1GX+gW1oj/w70XHapfGic+o+mHpX
tCVtStvSxrwneU3K9hdNeu64i1EeFH3OlYPiR8jL0Jfp000Tywb5GebiKN+X
PVg890CsBFt7TzCrsPjX+lGunJyOnO1S/4zYJYaJZWK6rz54zPrFnDprhvOs
G6kT9u27ms7kw77uLpS9E4WadwtRNvcew14R42sLUfHmfnRdqETm4Wdcvc0p
caefDBzT7gmRPuRS08moh4kS1jfyyZ2RP2/2iWUb1SurSrgTZW69TKTf+sB+
2Nfjga6dyP+oG33/VY+2d6JN+6eb8j8942UPqZumS/8PPR9B+rM44qXnOj8z
z8L65iQk9+/1rBMWtxo1Yx7Ee2lh5hyLkrqk2zA7JwZpBx53cSuRGfO1PJIx
DwjP0RMX5smBqL27j/HE7tP474/2oqj7EVQcnoT+d3YOci3qM+/xu//+4155
1v1djuU+NufinJybf+dadI6Fa+RauWZ/e3ovbZbsvS7Os+8KdURdSW4K9Sh9
6+Pls57vxM/UOXVPGwyJT2FvHGVr2py2f2D/TlefHPEN+sjAPuk79KFA9bj8
+eQRtxpd7kKfp+9zD8RCoHUTU+4YI+aIPWJQsGiAUWJXMKywTEwT2yPXt+f6
ptQFc+R3IeVn/uPVZWON6yS5S3Xubq2mEv/MdkiMNqpiN+q2a7Hfyx27/MZ6
9d/UN4ctwweNxa5aRcJn1Gy+4v3lrHJIbPvZPRkS257evM4wRv1sWy6qHVED
dcMWy2/5GXNOUFh0dN6IqPbZg/kuu6KkLpSRDtjfW+8bzx4q5ArMcizYW91S
sA2WlCJkjtsYFFcQNWkPmvcsR0/lZ4Y5HjKflwh/4ZbrkTlzGSzra3xqY32V
/Arn4pycW18z16TzP+6icUS+uTncM/dOHQTF5zxUIbqljqlro2c03Wn9bvQe
MbSh+LFPnL5ZbO/qYe+YLz3sE16dClu55jP0HfER5Uv0KSNukD5IX6RPahyf
44r9m9jgfHpNPsGOwpBRrpi3EJOyF4VRYlV6zijsemA5wPw8G/zZgGcLz5jh
Pue+K3XCpC5Y/vDXBetNb0JJyE6/8eaWuyqDHo9x6OSyJqmllNW0CXs3hKOT
v+G39+Ctacb97N3FOSkGn1Tlo9MeieTSlVrsuLDAnMtJqICtPlwkvSJd8lnc
v69N2jwQ206W2HZW2WqJVWflFkvsmrkC5VVLEHpwLsptS4LqoeEsYw5ChTZH
xkaJ3XLPe1dslv7ewcb9lydYMG/FDsxbUIqS0OByOdY8VI+s3Xk4tfuDIXMr
7G0i9pw8W3iO3usKvjZ+hXNxTs7Nv0ufliFyLNwz904dBPM8+9WHLdgoOmYf
+2DnoQ1pS/FjcqAZGwd4wwqxfTA+YquIVz4VLr5FH2NflSzreslBER8Uji9Z
4/iSPPNSmK9CX7bVR2CL8mv6uJn/Exucj1ghZogdYihgjTCFxU6FScGmwmjW
jk2CWe5Z55KCEnU2+NMlzxaeMcN9zn0X6oRdav8pWms3DGu8kfJ+dJA1lgLI
X9bV40hUJ+JPtrr617OXtvszHbn1+HL3KFyK8q0jZhzfrsVfa417bjM3ocXS
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
Gcj45TTERsXCkJqIM+vj8Xmy+H/C8AkwuaihYfyfz7BGxSCxpRy1RxfD9NFu
JKXOROjxYmSffkHYZRw6zqixYIvSq/yAKfQeZAeNRanY05iE7ShY9KTLHmGJ
rQYpvXtjjZT38F6uwbW4pjfP5h65V+5Z89E0cYZt8iw8E8/GM/KsPDPP7mqN
I8ufweXkJTi7YZWwVRLiFfFImjwL2Y89j5UzlbIOiPmUYzEJ0ga0BW1C29BG
tBVtxmfQhlWPPCptStvSxrQ1bU7bEwPEAjFBbBAjxAoxQ+wQQ8QSMUUsEmPE
GjHXrlJ2YjFK/klsSowKrBKzvJ4YJpaJaWKbGCfWiXlinxwgF8gJ/kyOFP/h
H5Iz5E52S2CP3mAvSK6Rc+SeuzoxV3kWcrsn3+kD6Asca3foK259bvxnOPQF
O1f4Eaof6vsdfr7vL2eAd9assK9V4qQ84RvC0Ozv1x2XNZn6FU8+UZ0OdVii
21ivXZhb6Hkv353Ptgy89sSeZynKj0BRQRSMxVEDmtHCe7nGp7sLoL3PJN/Z
L3+kBEEB72K66o+Yn/UfUFReR17r73HiowO4ZizHHw/rcKA6GaXFEdDujkCK
JQohdasxvzoT8wuLEJLJmeNNaM56H38s+TPysv4k1/M2N1F9dzHM/sFyTok2
cBXyHvA9x5EdGAHFetucF1/zK7yH93INX5/LnmLaoFVy7/VzF8uzeHsvdURd
UWetWceQndqA8PUmzC8owazKbATVJSLRsgJ5xgiUlkTgQGUy/nhQJ21y7mQT
tG+fhqL6K8zK+Xe8oPoKAWI92pI2pW1p48HCC7FHDA5WTRW5IWvIevyeXOqL
b+Qkudmf59IX2Nehj6CvoM+g7+iqZaFP8WKuEH0UfdVQ+sq470mfsOHQF+xq
9hEcusv17G6nmP/YDXLWRdbDZfLvjSO2wPBoCoxTA9ExaXZXb6GPinZ7HYfl
/AfWiXAexNW9k5GbMQGVMyeg9cGg7vUcZd48WCua0Kh1niXOd+c1b0UgtSrW
5XO2WR6WM1t8iRFzb417RiLLOH7AMfOvi3Jg/rFtro11ZA5SZ+yDatlHSEr6
HJqCj1FjfBetb5px7s3XcNm4Hqf2xKBmbzDUuigsfjMBz1l+g+d0eXgu04Dn
chqwbNM+NFa14GrdRdRsvijX82S7rPuFzTprMTiXJCIsAcvWViFi8Vo0jin0
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
0ul75RenzpL37skX8Ls7sdCG0f6o8h1t5yUaFt2BKq+Z+Ny0sfdaRumLJSbs
bsy1/LlIZLy4HrlpRbBsrpC+2V+b30DrW28gcXeT1C7a663WNmsOsr2WSeyZ
MejyKZNx2VubF3kf5pzYclAYw2Ysm7kp5ukT1LxnyXreHeUrMd6Lz81Cm48P
an38sXV6OHLH61F8bwhiQrxginsIxbPChYviM8+Nd1E77dHpeDfzBn6f+Vtc
3PARsgxnUD7awxwLR/mxVgcr65FtbnEC7Q+vQ8aPt3n8nL2PvoqFS9ZJbxbD
4hi0/dA1P9P03AvIXryyT36F1zRM93U5TtsP1kEfEiPP1C1Zi1qv3rkdZ8K1
cs19XkuuSu2hp1xVD35J6ZI6pW6pY+qaOnduCzNxcTpt6gWY54QhN/EhxEQ8
CbOyqdxH9dj6XLjwCrSpi9PnyPXto3zQNEqH2vE+ygcmKV/7mdShI2/B2mNi
y3M6a5DR1nkdr28atRhZXjFin/QN+gh9hT5D36EP0ZfoU/Qt+pi7/kjfpQ/3
5uPXTBtQpebBnB36G3mi2vmjlF/64cyovvGlLzwSDFNYRkwjthHjiHVDia3E
8lvhcyvWBfPkffGbjZl6Kozl8v34a/Na8Jn/QXwW0ITLukZcDmyQeO+FQHXO
+gRKXt2Oy6FWfJD/Dg6cXoSsyD+jIPBLZGV8gvTYt3A9/IiMc2Ne1zwL9jVv
Lj4rPInxejpyrsbDUhuNtoxA4VPIq7DvBvtvsA8H+3HwPq7ZfH9d154nugZ8
nH8EZXFfoSz0S7Tnv4tv9O7nmTjuMTkq8yNab5WmKRZ7rSXmCJXcvw/Gwjn4
zPI0Ppv3bq9j8R171hTrcpz9SqK+wvn8vvvZG9ezt8YY6X+SXhzp9Jpr4Q3S
h8W0tpPv6c6v8Jz0agl3UZvs1VVajxX1LGNuWp/z4tzLoq73yMPhWqsKN/d6
L/eMe5deOFP28rOOXivc4+aOHi3ce+qgPzZNnbcrO6QN0BZoE7QNu82xr86D
dbB4a/kyrBP33tqPUdF0COmf5kkdubK3V6Bl/RJYzZGS/8I8GObDMC/m46iu
XANtmrZNG6etZ677RLN95QP0hQ8K3sHlcGU3r74uvkKfET6TPqR8iT5F36KP
iY8MEvfbPy6W+XTFkk9XX7vMo3y6oZDv6oTd/Kf9+ht42pqGh8vWd+VUusjA
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
giW29RJjiDXEnO8+7n8Gqy5Y0su7MDfvdfjVr8Cm3cEoKeilJldlTbd36jX+
4KiXZz1WepPa54PwsbVWi9Fai3G9vlJitHw2Y7R8f765lz7ejPky9ssYMGPB
+hOPIbX9XhQeuxO1DSNQa1WY8fYIbGq/G7HtDyG09SmYTpSjsKNmUqsb69B4
FF97bPtoFy7F/fi2xHhfzkJleY30xzhdnqLFqZWuDWnNqE1pguWOYrT+tBSN
veSAuCuVd2xHZUAYamfrUPmT2h7n2budfUYG4lmOYpmn5ZUkhKci6VEX/Eh6
gT3PxZFf4TGe4zU97nu4QMbUb3hdnmG5yfpmjsI90PrS9OSiKn9SjbK5gbD4
haDsjvIBeRZ1TF1T59Q9bYC2QJugbdBGaCt926Uzfq+jvlgHxyf5Zm7yoLZa
eKajNQg8PAWGE2OR2X4PSo52+FM9/elOzZ9OjEFg62SE1i1AbPGLyMyLQmF+
kFOOlD5MX6ZPC64IN1opPk/fJwYQCwYCUzRsWtS5Fw65Yny2yzwahYXERGIj
MZJYOdD4S0wfzjphg1UXrNhQhDVpm2AsjERVQQD2prt+p/xQ3htd+RLHfgcu
+tczn4OxW8ZtWTerr5o/hyb441ppFb4uXI+/mbfiLx0xWj67OL0Uf9mWh/aN
MS5js4z5MvbLGLCx4hlk7R4n9YbYw4W9XA5tGyF9tcutdyHXOhpZbZOxwvom
9k73l1gz81ckp4Q8yPxR0huFMWmulXW7WL+LdbwYs2VdL6nvNStE6n21+8zB
xcmz3Or7zVpNjF3HhLwm8Wf2x7iYlyhrsOT5Izt2G1oTKwaWW3GQrV55yLi7
FO13u+Yjsh/Z1u+e744SFh4neSVLlqSj3Du3J48zdQ4yYjeg7fvpPfgVHuM5
XtP9Puao6EIyoFu1A/qQ5ZLDcjPzPKTWyjW7Os+9yri3VPZusPRCnVP3tAHa
Am2CtkEbWRGSLxwgbdKdPJGL3s7tdqsLu62a/5DYvNyvfIDXkANsmBqAFbsO
I+PIM9KnxWy9B3trO/ypVPmT+l5uvVv61LOHC3sn5W4IhzlVL/3snXGk9GH6
Mn36UAc3+hfhRreK7xMDiAVOMUL5KXPGmFNGTCEPSg7UGV8p+zBhpsY7OekH
xWe7zKNRWEhMJDYSI4mVA42/w1knrK40/ZaqC0Yu5fj+ORKvrI890uM8uRP2
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
BdpW/RhNoxZ39pSZ4I+s1a9JjPVvpfn2XjG9vcdeW6DWvm0J1uQlwrgqv893
2TPiiiSenpy2Cdc2fjikMX3hO7w0PoE/c7+fj3d/PETczr1bsHBJCpasqkDy
rOWYHL5VJGZhIpawx8qi1Wh64NWh2Ycf/0rW7rgXQ60H6j45dYvYAvNX+sxZ
U7ZFG6Ot0eb6yluj7dKGacu0acc+8k2jdGL79AH6Qn/9SHJediyWWmLCz5bG
I2bjShjps5tXSl0+Hi9X5xt26LS6fcrX6fP0fU+eVZsWJD2MsjYHwVg6U/Lo
TNb7UWurQVY4QnrX8HfJYdk1XvJahCcmN/PmXZh1ygc+G9ai/a06j3GS2EqM
dae3FIXYTQwnlhPTbTzrUNQJs6j/x5tXPQbT2ieGRVi3if3DSwxqDvHjYUpU
suqJIZPE1DkIiQpHiE8wEqb6IiQgHPr1S5BSOB1F5l/AUvAE6uIfQ51+3ICL
5FOwd/ogjN23jEVd8FiEPLIP5h/s1PKEbt+p9e4e8RuUPWJBxZQ9KPPZhyL/
/cjRNSBddxCJuiNYFvAO9P6nEDTvLAJmX8SCaR/B58lP4HPfR1j2P467JY/e
dwVxk30RnuiLZSOPiyy477z9u018Jqtxp3UV3+k9jzked/XTJreFf46QyFCk
eM8S4ffvxb7v0TPcOq7m3n09jmvk2uO8fWUv3N037jH3mnvOvacOqAvqhLqh
jqgr6oy6q5hiFV2a76zTdHt7h66Vzql72oDYwjDYIG1feK3BGD/qMVhzn0BZ
6UT1b8A0LNuyCCH6peLj4TMD1fdwJCS/MIRY04FtCuNK1Nxk7Qr7hgt3ifnE
/uH6ZJ6NQ/al1Sj6nRFVVzfBct2EA4z//alCyU71vRY7v6pD9kdViDtaCl/r
K/ApXqV0NkNih0XBD/SQgtDRnZI4DinhkyQumxTxlAj7HVDioqZJnR1KZOws
EdZCogSt8kdAsk7ENy1EhDFeypSs5SITc1dhYl4SJuavwcSKHI1vOLdeeipk
vq2Tmktl5/ai5NQHeLj0JGbGbcWIopN4fP+XCD/6B6SduobEY2cQ1LIHCw5X
y7vnjC/rj+5C5NHdEm9mbkDaqb3SLyP77H6JRTM2S06nQj2P9YWYR2D9cA/q
WT/rw1o0fViF5g8r0HypFE2XilB//hVYz6u9PftrVJ1OQcnJeJiOGZDdFgxj
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
/gLD+UWW3AuxzblEmeqlyDc/KXvcMa+Sue8Z5G+JQNWWQqxY93Yv3pBL7PEl
uSU4lm3+KzK1bQPzH4LzKZoy6QPoC+gT+qNzq16HUr6rfcEcj5rCAtwy3p19
wm74tXg97/3zkLdx7PAzMiZdl967LqVTVyPjtPJdfFex3KJUGRO27SnkTJjD
+bt2hDjP/r16zvtu87XUrLCPmPw5QS10bKn34Ixzfs9Y9OfBdya3wufoJ+TJ
XmWMh5vNi/E300hc5syRPtyHfZuqIo6gpcyMsyEHBAe/J3MJxo3fw/lgo6xv
uFG2G/qkM2g2vIA5cf8bnWt6cinX/dp6eoV5yLGwP9fCoE8QcN95OQuF9SUX
Co+4rHnxKr8iruU9eC/eM+D757Ew8BP5LG9yK6wn4B6sn3Nv86L/DS2VL8g9
c+/UAXVBnVA31BF1RZ1Rd4596DwJbURb0Wa0ncxjTLjD2BFYJWaJXWLYqK2W
mJb5OvbKm6yW/cIc1/TN8jLJkesh7ut3JIcE54xla12eQ87KWhahR8fv6tJ3
4m97R6Dj8ARcC/Gyz53wKfQtQ+3fHIU+WPYF097r8383Hs1nViG0oVDGXyvO
18iYrOmMJbdiPJPhNBauap6Alad6Yr224izfwp9hzdMRcXQ6Yk9OQfqpZ5B1
1DLfhX2kcjsquuoAHsFppaVm5VrMqx77OLmuM3AfBzeGPoAC5RhZWzCQmhWZ
U2kQa//yIHI/XoyMY5Z4d8OpWKzUvgzdyTd79cSSPcEO+6Diq61IPHoTFfc9
hoaImO54vFUW7k63y7EsrMzojtdbZ9lTVP7iWSGpGBNTKGelNEclozkxFQ1B
Y1zuv/O8Soqr73kt79Ek7sV78t7xQQnyWdbnypn3Xfkwrs02t8K129XLiL1x
j9yr3LPYO3XQSy9CV9QZdUcdynye0Cl1Sx1T1/3NtVhrWaQI2xMD/cnbOc5i
cSbELjFMLMsZOeIzYpxYJ+aJfXKAXCAnyA1brjjLp9iJ4B456Iybxi7uUo/8
nZzmuslxcv3ecfcds3cKPhhXDHmfsKL0vQiKPNfnmGhpniUmqumKr+bE6VGU
2t/33/cgZPUnUI0pQevpfTbv8FtizbOL3+ru+9WdXynpyqsU9sytl3kVJ33A
0viOfh7ncFt0zfkVg5tXCUWleHZI/a+RXJ4K/4ISfFpsH2tufaRM9k1yFes/
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
DtZobIB5srtuzkzLNuhPnNC+30+OxXpbmejQbx2z+hvjV/hsvsN6e5nX6zxx
K3ae5sQZTNvtHrPmSRvFRlLbE6MbPsei+Io+o+/sHI7iU5t/6etrHT+MScYm
Y3SrEquM2ZK2HznFMvWIGONu9w9qpxAboW3ZsLQt1HwHsWXDWd+CYKxTsEcM
+o1XBdvE+OJVLWgqd+ZTuScEYmPuOdx7rvf+xz2Ye/F36bjR+oRdinb/rbq/
g/Un/M0/c7bW02vQE9ktv73/c5x2XpvX/0/bXdJnzJ/n89kd+2d7vea8uUne
ecS0HXXjS1Vu5d+K1T5Kj6j1JOc1NFuu1eidpXI5qi5MNY4c/oloU2hpXXgc
FdvRkHgcbaZe5DbGD2mMVM8T3fOOyoNoje4VPXf2jhLN+2PPwXi6BeZ/exWX
gtvc/OqLY6He/PJ/OYF4ZQifEjb0XZ3uU9Gi/zLc/T6P/IpyrejX6xz6gCnP
5LP5Dr6L7wyEW5H4VNbGNZqO7UXTwBRZO21AW9AmtA1tRFvZtGnEhootaVPa
1m+OQ/EZfSc+jK5V9VEU39LH30TsMCb5DuoKUV+IfE7dqGI1hpVYZkwzthnj
3p5DffmOtrn+YaqsUHhR9vrSvEbBLt9JLLedyFD165Vn+6o18za4x1zvfc42
bvUFu/mOgbJMtO3pQvrhGdq/nXcZMcemQn9Y+7f0nka+jCHOpetMLnLLZ6Lm
zO998yq++jd5qC+oSxyForAxQ1ovAdSs/MSUh7T3D6LrihFFZyZp1g60nVqK
mJ3RMBzVO/VZkxqCY2EoOqZHbuUzqPvjaeW6BnQvnav8v8YIXMpN8LpW8hVn
3yuVvlaGCGduxRo1BWljZiB57GykTYqw69BT071o0kz03/Y9Td2ahqOhMlzP
81rew3v5DD6Lz0ybHIn4x+fIu/hOJ45FmRPnxjl641Y4PsqNlzVz7bQBbUGb
0Da0kaPNaEPakjalbbVqqOgL+oS+oY8C7Rcmvc6UmKjT0Krx3nvOv/5zHIxp
xjZj3M6lyAgMM8QYseYPJoldYnhgU8b13k5uHQEcN0qfsA+r/hBQbpTXO97P
38EbVrOn0S75Xbuj9omnkbPGAstbdTjwzDx7ztc2/tKxw3NOuXmZvMOQvQ/h
ha14oTVH/Z1/tZ+57OpI4Vcqm6+mZkWtHYjcEYP2ww8g9vUgPF1f4rS+8KX/
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
Lvcr6n9WqZOmCOfEuXGOwgX1z5mDtrT9ttUPvz2ItInP41zWHPEZfUcf0pf+
aMRzbfzpEeZuEBPEBjFCrLiraQqEg+Mgdp39R4wT68T8UPgVtS/fNIlBxqK7
7xm7nAdjeZhb+WYe/xP6hD298Re2nGtO2Q4HTQbhI7a3OmhjD3pMmgP9iCav
+XTRLaHuhPxefyAPX/lQHS6VXZT5xme3onjXUsRbEpGzZpeLPXNL6tzmvJsU
uyrL4xC/plNy7zlZBzD118HIfPufEfLGAiRnHZI6BebYi/t5Ff5rn6cPa0uG
Nsv1md44FvIJ1Kzvnjwf5hnh0E1iHUI5wkr+otgRLdoxvC4i1XdvMGuvqMyw
ZCSv98xTkMepmRvhnptR/BuT8BvEl7XivaN7pLbEF79CLZb3ju1BfJVRruU9
3N27UngPz3ozyXmvoDAkTmw46AfPQp9Y/co1n1v6Z/EdtWWMs8NxbPI86Ulm
z9n44laEn1PWkGtpv2b2ay7cmoKFtKxOwQYxMkPBSk7WQTmXGCKWmjzol8zd
7FrfRF4lxpIsPAv5Fn5GTBPbA+urF+zTv4wFb75hLDGmhhKTjGnGNmPcni/i
HsC9wHoe94ivc4/iHjncF8z/4+vvE7YFSYkv2XKtem0N2rUD/YKMuxdjyeZO
nB8/tDzu2R/NQvuS76NIE4uSCZ5rKtjbqeC7Vaqmxp0DvMDeuzbjX3W/cpm/
vjYMWdqNDp+ty9nitgYnvXYV0g2rUJKi9vaqSK9F0BuLkb7nMczarfz3M6/R
u6/StyD4j9MR1K7+jn7p2leh1W+DcZNTLYufmvdZub+H2bIAS1Ja1HnHnfCb
d9g7fRby47zXxghX8miV2i/L+dmLuvFcZQeOXzRLvt4Xv9J9ywacvGjCc9sO
IGtxtytXpDyDdSO+5sM5dz/znN920if0zdJVu2BuU9ZQ+55vbsVNTzCuEdeK
fCbX7sdtpQj+dIqsqbc112vrBRvEyJMKVirS1ZoXYohYIqbc1X6sc+o7R4wS
q873J6aJbdv8b39JsM8Y6JjomUsqmVAlscSYYmwNiWNRYpsxblTstPUDVPYA
7gXWc7hHcK/4uvYp7pHDfcECO252n7Br8T7yqn4O6j783XA7ejSvwVTyKzX/
vtVz/65egwmNicfxxcuOeiWf9vMgrDM41z1a9DG8PZc9mI4c/gn+3ng7LBs8
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
uvQO41pxzQLtEeY8iB1iiFgipoitQGtYiGFiWcX6nQ4ci0OdiRITBf1aM4yV
QOOLMcnYZIza6mOUwRhmLA/3B/tmH5mWONHB/qryliGFu1BTHoG/WCrd9gyK
1zDedw85b2vtC1Y8yn3O3ddg7lz36A50TloA7dxssDdU/IxOdG7scmtX5hqT
rfbGWrPSVL4MurJU1HXfA333KFS+fT9mmLQ27Q1d6k7JpeuyjNJ7bG4J+xFt
QEhbKpLbX0ChJQqVuyIwY1ee9JTyqLmxQ4PMPzyAnCvjcOvFKMzIOypaHtZe
Yfaa8E29BxDSOlDjkLn+Iy/cygAPUTx6J5Jzd6DmbiMO3qr36rvO8Yuwzy5f
n/yzA6IXH9aagcLuDge9dH/5FVmP7k7EKHPnvXhP23ejyuWZ3ng0zrlu5B4k
r1fsHrt9gDca5bkXFn1jw60pA01v73XxJ31MX8/NexO3no+WNcj8w/1Ia0jw
uF5cS64p15ZrzLXmmnPtiQFiQSfcilEwYtXgIXaIIWKp6fA90JanCsastSzW
GhBi0R1GiV1ieJ/iJ93cl9A5UcH2hGqP6+FrMLaG2ifMOhjz8Qk6t70AuVdw
z+De8ZVxwMN9wYZ0fNV9wrRrt4p2xL/VlrnNtS7JK1T+tmwfUr72+I/m4+zz
t2Dv4jtgvLVE1Vj5bpXfeXUZ331J6iKo7cFaDL4vmNSCk+SjrLnr4vko6dcq
r06sGOBW9GFI2rwaBbvjUV27HAVNj0j9gabtcWTVpg/4Y9VmGPSl0BS3YFby
XgRtakFw+0Zo31gBfW0kGirDpFZhYaXyt/xbY9xru/TXyZj1odBvW4J1pauR
n/4KjMlb3XIshyy7kHpkuaw751Cx6l/88kf1PeuldqX5Nt+1Ilb/UeudNUFF
QTtx1rAXT25bB+PxVz1e441fEX7nLTMmG7Jxtn6v3JM9reQZt/nJD313s9hQ
ff9a//gYxTf0UfzGXUg6koTu9kYP3MpW8Tl9zzXgWnBNPK3XuuNjlTV9SdaW
a6zfFon811fI2hMDxAIxQf6FGLHxkgp2NO2PC5aKGh9BtWG5YIxYs9Z/cBCL
PJ/YJEat1xO7xLA7/fpAYoO1LowpxhZjjLHGmBtKzDLmw/M2uf2OewX3DO4d
X9U+NdwXbOjHzeoTNtT6FdaNsM7karijznxj8nE0ruob+Cy2EpbyQ2h8WflM
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
rBENumiYcwev4fLXWoOa454Ti4ppseIv/fOrlbWthX6VZ44lP06xbYpvfRJb
Xj3viuCF9U+zjqTj/Otl8vnJH61Hwa0VN51foV77yftfltdnX69AyJFVUn/A
OXAu/s67fXow8mM9f08fia8Un9F3FdNjFV/GiU//Wrtj0Oti1oahYWM0iuL8
4xo4iB1iiFhyhzErt1KyzIAnNWeFfxIb7ypFloJZYjd/YgIO3eUmVgIdSkzp
GVtueo8xFhmT9BdjlL5izIqWihLDjGW/bObe0GRW9oqfe613GZIWy3BfsK/0
GGyfMG89f6yDWivUV6D2iqdz+gwm0cK29YliLnt9HzoLqjF/Yhc+iPGdCz6S
aMZn+0b6nZuVnkajN+PIbLs6FMUe898mSQ3AgfLpsBx15EnasupxtfseeS1a
MD8olNE4qVh+tz8obqR/UMeC9xnMtRcNzZLLtr4vOr8GLZa3RFfkSNkpNIa9
78AbcHysvJ9/xyU0TlE5hwMlZ5GecRqGH76Kq8ntwjV4W/vcjzai+E8L8WnZ
TjTH/grmML3o1vx99wic86avo4zGlD60Nd2Gtsbb5LUv/Py98XbhFUzKM/gs
PrPo/yyE9pM8r3OkDbSFNtG2NsVG4VeeeU1s/9jJJ8JDKb6iz+g7s/EESk+s
sc2FPqavB7NGzZOLcWbe4DVQiC1eT4xYcWftlXf56H1oW+/YY81yuFowLLVX
X0xyiFXWVRH73nrtuTx//504kmz2eR5jdf7jXejcUK3WU/Vzfoxtxjhj3dO1
J2MO+tZnsovVQPcr7nHc64aPb8fRcjYPLccO4EDEQ5KfvaiZJ/rYlxMXQjd5
hkcdlpaYO5EX45oD5jAljFJzxdKvyan3UfIknPxNgRv+Y7zkgFkDEF/1PCyn
Em5Kztt6b099oRo/2YsWzSjJb6tz7R8LRg7Y4GWcy0uCNiTJpveRMns5ehMT
hH9o06xVtdzteAOOlJ7zCK6MFg34yKPTpG7FcKEVYVnhMEVNFa7BG9dBPZTl
4em4rJmL4ulPO9TKOI8nqnXIOzbe5ovophdQd+x5GXxt85FyDs/1yJkoz+Cz
+MzlERnKGmd7nSNtoC20ibbRRtpKm2k7feDQE0zxEX1Fn9F3PRrqysTZ/Eof
09e+1sO6btZ1bAlV60K4xlxrb33ibhbeLKeWCYaJZWLa3b0ZA4wF5z5hVhsY
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
nNS74hD/Yg4WOFdylm2gU2m5Sq+K1QsfyVy0jq5c+xVt6Psxc5DkiH01Dp7R
zNdCn4btjhk+c8VaUjaRJSqbKlZNpxNp6dQRZ1L0XZqi31OEFf36UV+c6vVn
yXnWQq5zFv7s/Tuu8Xc/PEuxs9gD9oI9lUbnUGPyJs25kAGyyL0nWJAVMkN2
6AC6uPKfv2bdePuW3NNyKi2HcpYYWcfQtcOt+664R9gWsMl4Z4Rh//AB+ILa
N+Ar8BkZZ4Evjb7Xwr4FH5P9u0sHl4OPwlfhs/Bd+HCgvhfEAGIBMYHYkL9H
zCi896s8fSyIMasbr/PxLRGbiFHEqrwfxDBi2XufiHnE/tFzm/7eaWjy+F86
wm27x5wTltPrmW3VbVtHjTviNfOu8I5/+5IEMm3cel111ozedeJ50j7erj5H
7Xd53rVvua0paA57mb8+/4FKysiqppxtrWReZuK5SsHUpZX69FRpflXtba30
cE8/120TXRlcw9XTE3Ovozfh6XZltpb33KLIcqnGnrPxhQnpaGBvlrh2HrVk
3afBVrCGmiWsYJmjWIshdBcR+NVl/pLKwv10pmqUuTwSn36frNM6GUuKXnuG
6+XydeBcgcz5Vf+PglcBw7CGx1NGSDljT9zfAzzFzbfuDzfR5V9R4TBsM3EP
3Av3xL1zHqymxvBYfqaMB2Av2JMsCxb2jL1DBsgCmSAbZKx094jgfOgg0rFR
oxvoCjqD7mQ9yhhLY9Z3ha5DWecTsRVszPoXNteLL/iI5Cvdmnlh6oV9o2cH
Mi/o6SOr8H3oJlDflR7OAt9nnFHEAsfE7Aqh77FnhoHvvnv5KmqPXCU+e3pZ
EJtvVv+be5+tHLvXE/vIHcgh6n4hzjEi13DOkXUqcpG/POWZC2b9e6fVyUMc
SZsCzwnb0xTnv+ZpiaKG7j1UlfwklSRbgsMHlBrsnZr33K314vtUCeu5Yhmi
Y7fq83owR8ec3WPWh81PbKKYJ8q5rpybPH7Ob7zDL3OtV2W+5aOX8WIskM28
aRdjHunj6PNRr9HtaVS1di4dWvMN2rMwmYYiHldwgdHt2VS2PYEihxeR07qC
97a5KZmSRsT/xy82UK99lVSDFvu4bH6RuTxK1p9R+lIKIvrpWG6zVOOvFvnQ
0k+Htq+gBvN/BNQT5kiNNastGHwFnO1lY82kEnvBniJLX6Ssammv2DP2jt8h
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
oHMZk0Tumjy+nEe3NVrzd26TNCes1xZDvfbj9PZCX84VZdV20OZ9YdTfNoX2
FD+pfZefOdd3jqseG/bSFn5nfvMOA22u19ahL3vVnKUa8TNSjfibTVR28x53
jbiEa8TXha/c0yhhNurvTGd868ematqct4vMTcncn+C0rhD7NpI5ezeV2dJY
L/3tU6hse4LCQQ9+jrHq9P3V+xlbAcbSHRFNrUuf0Oh9dHuaUnMuMTt45tXa
X+TT5upczX3+YN/vmQm28kbKWpzO93KuuZ2Orfka/bm+etyYBq/t0kwyyLPH
WkOmHR1ufVQJ/0knc1s0NZj2kKH6aTJUPs2f8V2W+K3V7RPpO/aT1SrNn+JZ
XdsnsA/gIkKG/jVf5zlqkC13USa9JWSV5YYONNiQ0FHSsULWmbm0S8ESoVMN
dhgRw7rvCHmMbQGbjLUX2JaxI2Hrim0Jkv3Fgi/AJzbXG9hH4CvwGfgOfMjb
r+Br3lhIyd1N14epiJhAbDA2KWJFxiZxb+9zL3thiZtrG6lAxCRic56I0fH1
suzkXKDWU0PRk6wXc9sjnEP85RfkHuQg5CKeC9aUHTB3TR5f7gM1zc/aH6Ku
hu1KvfnDKA9/NWYBYVYS3sdHvRgzscaqqX62xT/HR8XOPHLF3EjO6Bup9MDD
utcPNrlooOGI/5p/TD/3UXxw/A76q+1Wevflu8jRlEeXYsbfh4J79Od26P4G
Tg28e981T8h+VznjDJiVpcGXTLV03t5JVsMvaVXYIA2XBeaa8Vez/yD6l+Sy
G+mNLZekPpSqQWqL/g19munhC3HETidnhKd3BX0tp2pO+vBWzD9robihLPrT
TqmPBvfHrCvveVfBLOgAc55kvYMbBDiB3K9xTfwOTg5jwY/ECuU+BXwHXeEc
nItr5BlvuNeVIHzIe6n3j/lcf6pqpYSXsyn0rNlHfuhE3fPjXD6dHFEevUGn
bTG/Vfp+zhX9mlwNBmHXEe1z/WBhPpiIsDlsbzWMsC+o8Qr4ygBiR+gDPgRf
gk+Bq0fvXgOZXXRl4I5x6+dSjIuctYUcC4gJ+HVXW3pAbiHEGGJN7zezPYJj
FLFaVpPmG+MyN86WsXvJeI7ejB3c74Vcop4ZiFyj9GrVlnMuQk6aPL7aR/7Q
Fg3nSubLLZr6aUvqtzTvz3N/QWyYm1vE0xNQJs5pzL6Xut7qpMrj87h++8aF
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
sbe8thfIUF7AdQiFmTvIYmkkR9Y2Lb5Snk2GMm1/sGZxToqlnq/BtbgH7oV7
3uq6Sl3i/y5NBsqcl8977hy9yG2/MRrZQFZKjzQhwyVCltPemcnfIWNNj6qw
2RLGCB4XoZvmSdO0XC4qbAU9wZzlkq7l38DhviNPsgnYhj+7gU3BtmBjsLXe
yTPpUtRscggbRA0NbNIeFktnhY1eeGI226xT2C5sGLbcnDhK2HYE2zhsHTYP
24cPwBf68xf4FHzrVnxT6vuXFXTfP44dIoYglsj1cajdgpztIuZAd95cLIhR
iFXD4/sx0AvsSvhlbY5ZzIuzzlGuYzo9n/X/unPM/edJkR+uW3yGat69382D
fTu1L3bSF0mVzA2OfOs1+x7mwsa8aN8rcYFU7vLh/9abyEV31R4MKmf7mbGC
e3ShrgH1JMjno27ieoCcN3LamJ3vGejUXyfS4fqXKPvGK1TzRjN9bAkOHzod
XqbUUvjIp7iaosd00GmL7283DOJ48VXqq15IdUmf0hcmLVe9M/yCDy/755GH
qNHwB6Uuo/xcC7UeSqEr5nPa/HdpNaU8+hq1bv/VoHPowAqQ05frNZTjPfdz
7l99rnnNz3hqZJu7i26euFeDP/C9Hu0fhwg0ndtPUcqY1+jmNi1GcMV0hmVR
fm6vts4n0iPTvLQ9LNPWCG0PNsgeOjhda6DTpVdYNz56FjqMHnNE6FTfbtH7
7LQO746uXVgaqKanhTJuLKf2xpfo9F8mUOcHUdR+8GXq7HzJ73Ww5U7UAgGr
EjYOu4PNB8uPBF8KhneFfVP4KHwVPiv7L3wZPg3fho8fNrrIlS7VqtVdup9j
QTB1LIgtkPvzWV9yzDkvYo93PEKMQs+w4fH9H43nfkG5b2xgPu6YwxU+2IrM
Ye9dtxL/xtt09k+byP6fbZRiDiV75DPMA4J8a19SOnNhY6JWA7UHp83xPtzs
Sk8hmVcl6V46bE4R16342nPPpxMm83PKXnqO+0qBu6M19QmqurDXD7Yi4Q3W
nmcoviuUUg6HUPe7dp88dFfCXCp8ZJIPj7g8wXXvvP0uSpsaJ/WoUsmh/b39
zMvefnmbJvcNnvf2hNkk87CkTTZQXbS27xj435HvLnZzijSb79WtCfHGWFoT
PfjKqb/VB4WtYGZvC+UZ6Bw1xoJ7K/hK4l39Yiu8drPEbVNmzOS9YY/qPaOP
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
cWPfAVqzfwKZPphM1fm1PmtR6jKemq5wrlRb9WsSUFNzvHYkyy8gZmGNpDBH
MjnL5lHxsnqpP1s/GMf6Y68whqD0hdofS6FCBkr/OPHbmmPL+70PnlW8rJGf
jTXIXCX+piM3ho7vHCn2tkj/fkIWMheLXOejVw8C2Vo+eI5lfWNfu0+9BHRz
I/52oasIru+C7tQ4W4fNQDsc8RTrypJ03pHJNhDRsYrW7zR7arTAv6LBgHYH
tDXgQcD8vg5bhw85cmO5vxp8Cz4G/K3AMYF9T+az0Z3Cd+HD8GX49EBiQNR+
d/wQM0LEEsQUxBY5ziDmHFdhv45x4RybHE9r5YAYhlg2PL790XnQSOcPhWny
lOeny++Ie/KXjYY/0JfpWo51Z/EZCreYKDNyLBnem0KfmfrvbzSQiZ5a4N9w
TS3lGgbwmCA3DW4Odb+tf+RWc5+kxqwznFP+olKqqZH6ftUzvzb6NaGeADzc
n1cG36/MtamccZHB7qHupyUanpLr9lYyFV+k7r4Q+qrxTvqncwRzwaOe44Z9
L1UZPqEvNxyjzA9K6KnOVXQqVJtDbk4dS85Qnb5V0R2Ua/4THbYtpuup1+h6
wms+awE3OXLt8nfUPMSkH+mX40TuI/WxH2yF78X8KR5uEcjt2hsPKt8Tiqfy
lL/jN5yjyEncX68uRp54ttz3LdBaIeuY1CO8N/kY9oy9e58LGYGDpd2WQOuS
/sAy9OnDNnUMtSSN1RyDTp7qWsU899AVdHbTvod6La9T+8GX6b9dI+gr+510
qk/8/V/6Dl2rdWrWB3xwsPZ0sWcMc/4Ei13A1mHzsH34AHwBPqHUaQlfYRwG
viN8CL6k9r9rYr3wOfgefNApfPFiRFlQffcG5OtirQtuTOdYgpjSUvqWRuaI
PYhB8vcrbvz37HStf8gcUsPjuz/aLzdTyU+eo+6YCdS6+B4qXDCGc5+HE16m
O4pPkrWqncw5dn1cxYtbBf2ErKaxt4SpeM/uuGe5T5L1pfmcU75mieDj6JV0
I3UptSQkk+2pZ8k6ZTZ1m1fwe/r9vZfvb4Lrm/d+pYLi33zJJy8e3zeVlh+Z
7Def3nLjS8oIidTFP/rc2Ern4jnUaV5LdYlrfXL+dRc2UMYbC2lmgVlz3BY5
hrnXgSW0Gl/QzfcXGzKpS8UL0pe0gsoyMn3wiUA88gmlcVR8OsTDzR4svrI3
kRKalg4IX8Ez8Cw8079OfPEV7Enduwt7xt71ZNJqnEyFj4RQ4w9HsQw1WJaQ
MWTdeCHXRw+NQjftQkfQFXTWp4OxQMfQNXTuzx5gK7AZHzsStgUbYzwn+cFB
2SpsHLYOm4ftwwfgC/AJuY8YfIVxGOE78KHuIGtegsZahK+re4jJHC16OAti
CGIJYgpiC85HrEHM6Y4ZzzEIsWh4fPdG9tFkDaf9weokSjXn9pu7NEauooNz
oqg80kBNI6rp4F1lVPRoHS1eV0tNmxMpx5Wq4WeQOOtLPJz1pbVKXhXc2XPa
1lC5n/z6YCb4F4LBiILONU9aoMqjR3GOm+tYmH9joaanlDf/xpyyXR5spaJa
gwkY21MptcOXs/1cm4OKZsylnuTbtXn8EG1e+epvnqOm0w9Q5e4m3/U+PU+p
aZA5VywJP+ceV+pnce+ksuB447lGYYPc461BrH0p84WAK8TYPpsyzj7m99rF
+a1UkuqWw/kZYs6U6nfEscWq3ljeM5XrYmZIfCTiWXimbFtYS7C1Tdijugce
JmSRmpCr4WJhvhrgZZO09gMZQ9bXzz+nlXWIFvfqSr6DimbNZh367EXoGjpX
Y1WwCQ/niLYflxozg42dc9uc1BdMwlvk53uv91YmfEfNYXKrE74NH4evyzhr
RFED5bTJOGsh5a1u0vAr5bSv4FiCmFL0xG6OMU0jqqgkMo66Zi2giEUr+92H
JTmPY5oHY1nGMW94fL1jR632fe7y/dkUnqXtR9Q8Pozzl8jzy8caJhuo9wcb
lZwnpnN8BUXk7qTifDOFdqwPmp8BvYXAPeEoD5Cv5fz/IirYGsM9rMBvAe6K
wranqXhzPGMD6nMvbF3h08dpKCZ6dMkcEH5z3vnaOoz1uR6MKbNtHhVu9eAX
hfZEKj2ZQOubltPK/DRK2bqKCvaZ6P3jr1HzhDC6MP92dx7dTI60B7hGQv0s
e+8iKmx6lhxbG33WoeYVkTlXisPXcY8rfzJudt3DMg5Uo2CwZ4r4HEHly2qp
fGdwdSTN+2IorMzlqV/pmEfTXBGefmH4bV9w98Iz8WysAWsJVNtUuCWeHG33
+P0dsigOX6twsah5arzlCRlD1g0ntf3hoBNH2n20I+wV/n426g7urXXj2GtU
KHQJna7MW0HrG5Op+FQCFdYnerA3sb41+1/24G+52r5iepiZeu6YnsA2OeR2
LnwHPuSNv6EOqHD/OOYQ6qwfSaWux6mgZJFf/ErBuYRvw8eD7SPWYCmlaUfX
cyyJEjHFMaFCE2sQexCD5PUC12L8d4KWpyYsp0LEtLUBY97w+HqHK/MI/bN2
It2c68llnnb337nmxXHQNfe39GXBMeld8g19NOVEMmWHzKaY4qV0+sYzQ5Zn
/dhYQafnlgmfL6G6B4sYn+ieVUo3dXow+eSe7Xup23iIJ/LFzKWy7dfcKylo
Tm6v2b6mnq73jBpczhi4wQNFXFOB7//YVMv1I+D8ls6ppNNmF7W75tOV/xpD
LQfDqe89g/BZFzn3LafO4t8yp7eMsdije7meoth0xAcHOF/4B+rbHkVd1Rd1
+4J9WbGLmk29mlod5NnTco/7xSywfuZDH1/Sb42LvFc5737D6GS+duwR3xO2
TeUp7xu/XTe4dK/1N7EGrAU5fn/nor4Je8LelONiz9g7ZKA5390nDDKD7CBD
b7kWJ3SyzKuMpxRsBTrp3HSZnE2vCB86Rr3vGan5SDhd/+vj1H5oNuMs8r6h
a9b5JknnsIVg9upvApdqzx0cjgkfgC/AJ+Ab8BHZX+A7/V0PH+yeVUZ1k0p4
D/DR0+Fl7LND5f/dHz1LMduWcmyZ1vUK3dzwjoSviNiDGKTpX+jmhkLMko/d
nPtrjmmIbcPjuztcl/fy++O9/+MOOm+aztzTnYkRNCWrjnKr2+iOTUeo2Suf
781Zb418iorFdXVJ/ff+upV5JTWZTv2P23kiXwxeCvRMQq+kU4snDskz8o3P
UPQaA6V1AUd5jvLf9NQeZFyYwMeW++kNVvJGDFn3/pq6EiJ88svMxz5+DrXH
TWde8LRJ86krMVKT019+uo3z7tYL7T75/l6L+D/c7UJPJqMujnDKtJCyn5mh
wXVQd2FPS/atX+EaFn0so/uTFm2NyUDwFTEHVL/ivjeeqYf5MB+MztqxJ3VN
CfaMvUMGerKBzFh2QobecoWsIXPIXlPbkjif0n4awbqCzqA76ND73tA1dA7d
6+IrwlZgM7AdpQZK2BSOwcZga7C5obBd+AB8AT4B34CPyP4C3/m6/BI+D99H
DLC6eW5knMW7pgWxBDEFsQUxBrEGMQexBzEIsQgxaXh8t4Y370ZRdUPgnOXk
2TQudg31TJ5HGSG/4JynY0QtlcRbKDV3N5VEr6Q5m7fR27Y/kyP/kF/O+sW5
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
db1br8YC0MsHtQHIbUu4gNRf6r1d2XRyv33E/kt4zz7Y8yv3L+e8dGLe67r5
bK5dybVLNRt5wesKYruTNc+FDILKzW5XcvOpXt56KWcv5e3B22E5NY5i35jr
zduv1mAvMmdLjjU5KLYCfGFmcxmZUEeS6w6QKfjYJRwoVvzeGRZuIfXqgjy0
2EfqRvH/k81xQep6msnU7cWGvP3B8BnfmYLgJZbWODJs9N9Tu3ft8PaJM+Fs
LAtxVn+uGeagEetDRsE4WSDbnOr1LGvIXI2hyL3YYrvns65wnXSfj1sGuoWO
a8Rn6DyYPcBW1OvCloKdS6rl2cM2Kdlm4DWwZdg0bDsofiR8IpTPwKfgW/Ax
qZfbWj4369Hb302Pv2c0M2f4UbKcXcKxAjJA7Ojlfn97OKYgtiDG3BjOu5SM
6eLfTrmTKTK+hmNgjYh9ZXMWcmxEjBwboxvF+9Ko3DZMlxO+TitqHqeI7L30
47UNVLD2JWqevoB5CS7O+xpzQNiXjiPnhEVB+1nx1OGJX7ppG80wO2mF5TBV
WQ6reOL3kqXFTLl1eT6eeHCdmEfgOhnFPF3xEl2sawvaf0mef27cHvQZbdZo
zkuXp9aFzPOvTttLdmPwvHdpXbzmuZ+fSCD7I/r41DGrVFPjab+TyktWK7hI
Qct6/myzrqdi+2QyHHteqWlIsWRRVbu0hszZssP2olTj44dFcQ+xyjQqsL/M
+EVVcoMP92mfxuvW50vYSufWKP5dydM3RlNuYVkIvKORskpeoXL0Qtu6iGtG
CnTwDjXGUu/lASltfZhKWx7mz/hOD1uxGarFs6r4mXg21sBaWBNrB9sX7kFN
i/w3n3mrF08RZ8WZcXYFFxG/Y33ICLJS9/7iCZm29FK9bZ0k60Kpzxx0kGLO
UmqVDO8+z7qqb1wnYSNCh7KeoFus6zRGs871bAE+B1tRrw1bCoqvFG5jrC+U
rcKWYdOw7WB2D58I5TPwKfgWfOxm+WtnRbSIDz5OmNzGTbSj3Uyd3W3Uve8N
ctoO0w6Lh1ZUHqYZFfspclMV2ZbGkWfRIgmDmT2Pa2lQo6K3Z8Qu5ohafB/j
LOhpiN6Gzc/MJWN8Cv3Y0ECRIgYutT5Fl9d+nUpFbESMHBujG+dtj1FixhJy
LpS4CJLyt1LLjx1k+1YH2SY4uF/O5QgX4x3oNzUQc4ZcWR7q2G7huhP0FUP+
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
8IEb8SH4IHwRPsm+iVox4avwWfgufBi+HAyLMZkNXt6VtZrvJfwlTsJgrD7c
RIPj1koxCLEIMQmxCTEKsQoxi2OXiGFj469z4N155CLB2WCri+Fcr9McxfwN
1zPwnjpjCJYgNSymKHKKZzstUdRcA+xkOXN845363Io8KiiUenDtMFx/fy/M
gaJ/odN4dz87ND+43jSU7KVmSyAOAH4L//MgB2/LT5Ry68llSi79PxqrOZ8v
/S7l6NGDLasxgzGVUvsjFHP+aan/VMUGqvf2n8I9EufKPDpkiqPihGJtjn7C
bNpR06/huZF7Ya1ufZE5TuxFVbQ6bS8ZjrzEtRzMfx5ElujvBT6U0cinM20H
fWp6h84K+ZYm/y9qfuhV6pxWQqX/VEvlk2tp+MFXaMeEF3jic9XkHfwbrsG1
uAf34hl41mjWBu9KQV1SkN+38VlxZpwdMoAsIBPIRtMzzVtbscPaR2cfmauR
MWQO2ftzsUBH3A9M6Az4WHn7I9S2dTXrlPvrQcfCFuR6JdiA8sxkCRMDNwx+
By+M2o70+IGaga8IWxyt/cLmYfvwgevHsraxD8IX4ZPwTa4VE74Kn4Xvwofh
y8GwmButXUEMQixCTEJsQoxCrELMGhv/eMNtX8fvrYeTg5V6YHno88TbnzeW
J+pDXFtGrukAt0jTeF+u/BNDY8hzWs9mUNuBt8iWNYmcM8bTZ1HdVP67jdwz
TLfGxw836I3tFnKqoZ6Dcynvj+to2Nahy+WOeSHmAP3F+W1ydz0fsO+OVUfo
T/n1/PlMpJlrO65PVjXkKi+jz1q/SZVV36TBxC4f7tG/gKf8N34rr7qDr8U9
uPd61mwRez0VKenmT7n1fJYAXMK1hM8OGWi+FzKCrICHQXZZ/5pBnt5nWKYs
W9W1ejUscn836Ay6gw5bMiZRR9cRsp7JCKl72Ib8bNgMbGeks7q2WJRapb+K
mWhlXw3Xr8FFD66UsTE2xoY0+kScQI6ba1g+LNX0BjP1B+f38J/THLVK3j3z
uXU0lLyOZvW0kO1fPGRZ8iCVxmRyz7BgOf1p1kLynLNIufjsyZR58Fmlx1XD
iW1B1006ERz7SNs+h4Z+/RZZ1/9gRCyD8YxVkzQ4CD5DLh5Vn66A/mA9WTyD
/Y57Wb5+z8Va4ewJex/69WE+S7A1IINg8oHs5N5qkClki8+QNWQeTB/QVWls
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
9INfAcZ17Ypu/0iG99rxfvvtzus68tKH6Lph923p0WIrMVHvR0EevIo8uqZa
yRrqu/dKyvkESpqWQFn/M8/nudARfJUk3R81tlqmGqnuqVLO98vrai46Tt0J
B+krtz2ixhc4h5sJOzXtrzv9XTrzl3HUdfMZas2tpfbsevpGXJ8SWutyP7/9
Nt1I3bONHvwKfsOxQXMCYk2vPlXLa2zN3kmtOTuo84updOHrcdS9Urlfjfv4
YvEO5pLOJHzgekz4Ej5tKjrucj/4HjGQ650hNlq0Hlk3CphfSTmb4PNca5iV
OlV6+AB7wKCtxP8aaO4DzwSejc9voW+9z700vk69B+YG+s+Mbrp9Jyz67bQB
HmA49V8sosITQZrz5iWf/I3yen9LSdb/Qc2n3hh0/l4e8e35lLUmhPLOTaG8
Lgdvsda99pUYeaf323mKpjhPfuJKeipZk5er8hfyqFn+KGtCUJ/LhX9x40YK
l0+mwsOTVfkVHMM53ubAPXAv3NPXurB27MHjmNirzAvBB+5+ga/snA98KHwJ
n8YJ395qfBBjxHpt379R0eW/aedXBKaALRlnwJxuuunm2/BeO95vD1T+11rQ
To2PVWnLUz9cPaDnKKOMGWt91o262dpINTt2U2nuI1S4aDLXpzq5ey8ZeqZK
PTnKV1DlZqmWlNxzpbG+iP7UuoPz7Zd254tjC3325uCxI4FSnbgVedQctqhr
VMZEuHAO4FV6gudJ3MqY2dwPvnRBgl9cR96cZMr4ec6g+ZWMZ39BhXNe8uue
WCPWijVDp4Je9swROXFJOKZaC63Hs0ZdanYr+1SL7xEjxAoxQ+wQQ7kXC2KL
GJvK06VeO0enMAaAhcJFYYwNYARY8YUnYI79KDAILGrxDbANjAfq+Xph9y9o
iS090H9mdPsHM7zXjvfbA5X/7V2ziw4N0ZarPhRaQCUTq/hzddByz3pdERPJ
Mu8h+/f/NDeQdXMDWZIfofrpIVJOfVsThf8qnntyZDe85qgXNtBzpbM0n/7L
XMP59t+Z3hTHHL3OrbnxrG1B/aim3ESX/P/+TbFkXFbrqs/JN1J2YzedH6+R
a5gVQcYwA/cv6Y+MoLMREZQ2ZQWdnzedDt276a7jVw7du5HOz53Oa8RaMYzB
Yv2hKbwXTXseM51WCR9ZCo0uvjMuq2GfunIsUu0uxACxcByL41ghZogdYujS
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
UM8Ta1c26/yKboE3vO+O994DnRtWG/1RV+gvDZOV88lPWalbJR/O3Ercr8k6
ZSw1R3rXLcgD2oXSJ6z2vvC+RkPKh9Ty9q8Vj6G//d9KhtDfyodQ3+En6Up8
m9e5zph3U2d1hys/EizV8oL2BXqYzq6ppFRzTJVfGagFJvMrF51qhmkbldTZ
OY3vDQ3KlVgTr8n5HKwZa/c2z5X4g3Tk8D/T394ewj5x1+7IA76ET7WsrXu2
+P9pj1tV9Sbuwzr7HGOh1EsfliMCS8CU0jFgEFgM9POgNvAM/7Vc167opttg
reuTJur+7WqfufK8njnU9G8mt5ph2jmWpL5wKjw6ifP7+W7cCkZi7XzK6llH
GWdDeO6i3oU02bLVziGULntCM09xMX05dRrSNJ8v9zSpW/awkwbFwZOAH5B7
3DvzK/gNx1y1K9J1mEvuFaN1HVgz1q71fPhE9g98BZ/Bd/AhfJlonu/iY/hc
9j9i4ZeWZYBbkQewAEz4wg2wBYzppptugzO874733gORD65bt49ME3f54Fcq
qOt7Jjr9/Fz1HhmzE6mjermUZz/2IBnql4rPL1P67lQynRlJWTtWiO/JZCpL
pLqjD1Jl3+uU+voGKq72g1sRY0Z1maZ9xbWuYA7h67Z9dl4F+g65H7xSPTB1
7cQWnzn9uqG11DMlWplfGQF+JUHiV1T6h3T9PJpqhvrmV7AWLWuW64VJWp25
du0OfoNP4Bv4SBNnIHzuT4wQU8S28tgaEesHOOaIfc72DMZCquVlxgZjRGAF
1wA7wJDafoA9YBBY9OYfYBmYDsSzhGfYtF3Xruh2dxhrWFYHJh/cubqGLCPL
vPMrY9ZT3gNmOj/RM3+PGl/oYd8WuoB6Nw70Nbc8SEWbpV4pBbZEKtgbRMbG
5IGaXwupTRzfv/c1KkjKp/qNrtwKdA2djQ9QXuMUT24F/dI3rteW595m4B4i
/bU2Mo9cxPXALoVq41Wcx9m591L2+ALqf2gd5/e3hnj31bfBr1SHGCVu4dF1
9Ob4jbwmf/eBvZtnLRK+WMg+gW/gIy2+hM+VYpHX8CzHStYpyQMxRWwRY/Bk
ct8c004DY6GgTfrOGAEWxGdgBxiqf+4pxpTHHgT28oabGYvefAUsA9MB4VfE
M2zQtSu63SWG993x3nug88Nq42LkRfprdYjiMfNj79K12er59Za4sVSS+8+a
7oN5zA++S62xyrl/pWEt/5VUz2pllf039CCBPgO1tL46MIz6D0/QNl/ldmpY
71pnq3W6kToHuB5oP252DmeuBvfQtL6BXvYyv+Lc897XwD16DwvfdQzne+O3
LrEW23TX63nNYu1a5uS1HxzOvrFWrnXZB3wIX8KnWv3fGlfPMfOGAedRuD6E
WmLHesfAY8r15v5aG0IXIi8F/HlQxXptPp05OCvQf0500+07bf1/2uY1R468
ff7FQ9T5yS6F4945lpT2KZR1OtjBqyhwKzx615E5/3HKPPwiNZ/NpalFK+zc
QUnqWM2cA8aV1DlUFLVQ8/mo4YX7FIq/k82LJe1Kc8wD4l/HOdBfuPMr+M2h
XRk2cM1wngNz8ZzJ2vkVrBlr92ev8I3sJ/gMvssQPoQv4VN3PztzLBiIDWLk
tS6YG7eC0f5JE2NC5nTUBrClm266Dd7wvjveew/UO/eVxd41LF3DKqh4WNVA
P3jl/HeHRdKupFe/TI09D1BdxVJJu3L0QbKcfETSLJQnUkb/aMrq/zGfe2l3
nl/alRm7tfkItaESbIVUaUwkS1U6mRa8JtYeTcdCpb4k4By454oGnoL3NifS
J+9hBY8SEi3+9azxxf1rmF9JUKxvZR1mUr3WfWAtWtcN/Qr2yr1YwC8JH5gW
ZAifrGDfwEda62jB9/5oWBBbfEa8MRB7xkP/I4wJfAZGGo8+QOnbkyWOxaKu
YQH2gEFf/AqwHKjnaEZ9IaXadB2nbneH4X33QGpY9ud417D0j1pHSx9qUM7b
R95DbaNj6XiFpF0xbkxiXQPqSDEfsieYMj98yp57N9pGk8n2OH/+nWmti3bF
lGfgumJ5tbOUuZXSNdr2lL6ZUj/IolX5Kym74hdkSF3vNx8hD8u8R6k6eYLk
i+HruEaVMfgdOv79O8CviHuYgsu5NhvuzfMkTRRremjQ+zEsW8c+gW/gI/hK
E8cifK/IsWyL4JiZ8pNdNCyILcfU9mMedg3LR08xJuRaY8BKyUapzhgw1DYq
jjGltHZgsH+Ud34FWA7Uc1Rk2kqpm/V32HS7ewzvvd+tGpZrUadYY+P+++dR
B8j8o2b6QuU6w/ocsoaPpYuRvvvLXJxp497m/dPeoxup2rgLmRMBJ9Bvlmp+
ta6vpL9ah9KNrhHUm/oe1wJDbSy1mmAuY9lAn3infi5n5pRRQ5hDLwJNzLWe
R+liz4/pi8U7NGk8bNOMzK9ggBvRos35YvF2utDzBH12+GG+p/x705RSOhPl
6L1i722/zLemBhwNfAEdTF+KTcw9Qqp7tgHzVbIPuTaYRq6G5xSxQswQu4sz
1XVM8rgS+WvGhGG9ck08YMn8o3cZWx78inhGrkSeDfjzoDQ+j/qVrl3RTbfb
YHkZQVR2/iBlHY7wyI93Xa6lycY1lHb5A7Ke+6VyHl2lF0vi4WlU2DfJN7ci
RuvpFMpaN5mu/++/Ulby03bOoNAwwa03iu9hix/FfeK19rgvSR1jv19R6lg7
v+KsYTl3tZzXmdKeyRwLPuM3Z+2KzK8UOXEemFvLGuTe9li7P3vlHi/CR/L9
4Dv2ofAlfKrka3eOBTFCrNR6rijFnLFwsZOxAYy4HweWgClgSzfddLs1w3vv
gdKwnDSe8J7TH/YOFc5IVuVXusKi6WR9NufIc/pHUcIH0yTtysmnqa5/JBUa
08lS9TIl2KI5n84alopEyjDWSnO0tPjsbf9CS642rmjtHip8rZGmba8Ucy4l
S8VLdHpfq1N9rEipL0modn6FNSwTvef1HRqUOkV+pWNGAg8lfgW6FVzrU7si
1uDPmuV9yntmHwhfwCfwDXwEX1Xm7tHEsyAGvnrcI5a4N2KLGMt6JdSMAwaK
BRaAifT+UMZIwgfPC8yM5OuBIWBJjV8BBjt8cFDAciCeobzXd+naFd3uOjME
UMNyNa/dO7/y0DoyTHnNI999fGQ0XQ+/h46PfpEulb7GOXL0P4euAZ9TL4Zx
z42mTUsHcvGRnE9nDUtePJXkbJXmqtxNpo0pnKcvMMUo5vHfNK3UtBez6W1a
uqaZQsy11LZzAbWVxpG58rDmmmDuoylkJvXOv4/qHx3I6w/5BRWN30YlE6vo
+P3fIr8i5sY9uKf7kIEaYWINPfP/iZpCnx8cvxI0k33RVhZHbeZ4CtlZS0tX
N1O18JkW3yIGSrFBzNBLxbjJwLHEvRBbxFjWK8l1wJo2LmVMGC5KdcLe3BlO
1QIz3L9FYAhYQo/74yPnePIrUzJZw+PNb8ByQPgVXbui211oeO8d778HOk+s
NLhnd4knv3Jm+ntUN6lF+Zo5h8g6bSwZipJ8zn9uupSfx7+cY0/VXn/rqyUV
1J7QSUXpx+mrjx726GmPgbpY6PWuZb6GNR/Rn8sd/MJN9Et5bDP90U1XInEf
I1TrbMnjwgA/I+tX8PncnDKv14BPQd8Y3AM8i/MxuZ+LXXMi1oo1a9mb1ZLE
+hXn39DrHhqfP58YQYWre9mX8KlW/yNWiNmFma4x9DaSNqQwNm5EHVI8Dkyd
UZjnmy0h9FmUb64uEKO5ehOdOzg90H9GdNPtO2/5SyT9xsI1sfRq3z6qudBK
eaf30+SqPOn3cx2cty88Gq+Ya09T4FhSPnqGCrsmuOTx8zqDqOLoc9R/uYj6
ru6iqrO7aW3fTu59nnl9H9kq3qQzFTvJ/MmH9PzBOopfP99vbsWuSXluLl1I
eUHTuaZlj9v5CYyWlBESvxLjOAc1rtz1K/jNPk+MpF/Btc5zYW4ta8BasebB
7BU+gq/gM/gOPoQv4VP4Fj6Gr+Fz+B4xyHPnWESsEDN3biVNRZcCLAATwAbX
JxNYAWaAHWAIWOL6aAJbuumm260Z3nvH+++Bevc+bvkVL/yKiU7+fLYqv1K6
vZHz44VlqdyzvLI8lUo3v0Q1feK/gX8TRJVlyZQ30M88q3y5Yr+N9M3V1LMj
QzFvr6WOVeXa3VT4ujTw2VDcyj0/Ko1L6WR9DnU86+BToF056Se/YonzzX9Y
o+ZS8WPblfmV5xN4KPErxSN2cP8VX/NjDf6sGXt01unAB/AFfALfsI/c/OYT
J60rFGOE2CGGzveX+/HklC3n2OeUp0tY+M2TjI3S4mTGCo4BOzgXWFLjV4BB
b/wKMByo52fGjiLxDKcE+s+Ibrq5GN57x/vvgXr3PjvxuHreesgvaGvIIk/u
IXgW9c7/HjVt2inVhcpJ5jx7U24iWfMX0Jt7JpLhsqRV2Jqbwse25qW49Ntg
jUhQJJkqF1BTZaZy/l5LHavSMlqa8y4tfeNdqi8ro4I15fbrt+7Np/r5nuvX
MpDnR77/0JRIF12JO/dxW/kVcDhjPDmcQ1MjeC29j8YOai/wgWlvgcOvwkdN
ZQN+y5H85svPXHdNIUZNFWs4hoilfD+5H4977A2Xn2JsWPIXkiV3ER8Ddnge
gSXwWU0hszzWvzUk0a7jURrAcKCeH9aubNK1K7rdfYb33/EefKBzxe7jizmd
9M06T36ldYqV2qco98pYuyGcrJHqdaDk4dA+OOpLfWXQnt/vMxygi//vT6h/
z2RK6zlISr1R+hd30Dc7h3hwFUqjvbKTzrn1MkEf9+txJpff/ri4mnkb59pd
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
e6ZgHd9YhtLFeGUdSd1PS6mucyaZO2byZ6VzcC33QvFSx6xFrKHPjefBWrFm
X/tCT/vWXE/9Dnwl+03uO4O+MtY9L7GPew//M12J9x4T9/h9JmJqfuRd6pyq
rG2SR4PACYb778AUsOXc1+dGVK9ijbpAD9auVOraFd10ux1W8u+tqnnxiRX5
NL660P694sJB1Xz7wp7nKP9YEJm6p1H35V20MjvCo4eJXa+y9gU68on6fxfW
rHmMajIfo5YTCxWPn7laQ4kbErxyEH1JT1NhaLgmvqI52ZMXKUwa76JhiSx7
1YNfwW/O2hVc48HTJCtzS+4Da8WavZ2DPWPvSgZfwWfwnZrB5/C9EseC9SNm
iB1iiFgipmrxBhbkPQIjE8vzVHEEjOmmm263bngPPk+FU/i2x4GyPyrXpYqN
4tz2yZAoj7z3n2xVks5k31wq7n+IKsuT6UDfSOo4NpJrUC2xzWXdAvpwcI+O
+j2auIEl7zdSzbr9HmsEHwAOwLR8O/MBMr+ipLkwtbjWsJLz9sjV9wQpa3G8
jrAIahxard4fZfYqMVYo8CsV1PHz+TyU+JWsGa9RzgvpqvPinri33/yK2KPM
ick8mDzgG0/OysGvwLfwcamdr3I9t2ZdK8dIyzoQc77nQC+WJbZoxgYwwjgR
mAF2oHHBecCU+xzAHjAILCr6SWA3EM+Mrl3R7btgyG3jffhA5ImP5/9WMXfd
M2UWVY9M5P4dcr777MgIuj71Hvpq2zZJu1L5ItXbhks9zN8PpezWpxR1C51l
uyRuJWIiXY24hw49ukCRD8ir3UFtq82evEruFlpVtoNSl+2iAlOVV72P1eTg
V6yNCyh8Y9vg6mpNnUKd83/E/FLPfRs9/NMUWkwFQ7Z57b3ui1/BtQVDangu
D/+Le+LebWIN4KQGs4fwTW1k3bPA4Q9TrFc9Bte7Ej5eVbqTfe5+TtvqHRwj
pXshpohtfcQEiXMRMVfSMWW3PcWDa8sJ7AAr+AxMAVvAmH3eiTMFBhcxFhV9
KLAbiGdG167o9l0wvAeP9+EDnTd2H+69xbkW1E88e6/kJXWwLqFdQZcgD9QV
Mz/2Lt2I9ORmvpjTppjDR92s9oOzuD87/lWsyZXqxLG87c6xSH3vu1aq1/KS
R/OSX9GfcxycxWfxJq7r5e0aaGig+0AtMo/5phqp9MB0KrFNV+RpoBPBtS3m
VV7vgdpgWIudGxFrxFp97ac7/V3mbtxrp8FHdm5FoecNfNx64EX2eWfnNPos
4V3F+REz9zgitubH3+VYq3JsAiOsc0ryxAGw5Vwz7lrUKcZgoJ8D99FcXkYX
O8ID/WdDN93+Luyfu3er5sUNF111CWnLp1PFieWeupUT06ioZzL1X62T6ngN
6DmaYoZ78APdXngVZ2OugDmWxarnlJ7a5b3u108mUNfiJ33zG3HDPGukzXmC
WpKG2TUsVYtHUeHhyXZ+BZ/xm73vijgX17jXxtLSPwZrxFq9nYO9qhl8JPtL
iyEGHvxUjEOvgxj2XzVzTBFbD25FYABY8IYV5wGM6aabbrdu6axhKQlIrrhj
4yGF3H4tHQuNUORXUrOL7fW3KvsepPTdL1NcC3QJoyjDuIIKyzNceq78qXW7
pny8NTaKLMOqKG7Oh3Ta2O/BqzC3kr3HZ192aCycOYU/2aoHcvWRdHJcpP/8
ihgZM9aq8iDQrhTGLvXBr1R4HM+D7uXZXPV5xT0Hs1bsEXuVeDBXfkXSBin7
DT7lemGoFTbgb2eeBTFBbBAjxErLWhB7514seRUZlLF5BWMlbl8MZQjsAENy
/TJgS4lfARaBSXcfAbuBeGZmbN9CGbaXA/1nQzfdvBreg8f78IHIFfe/0eyR
tz6E3P7o6WQatZQuhTj4lf3jYyivbBZrGDhfv/dBKiiNpzePzGFdwtZtr3j0
3fgvc5VUEyz6x1xzS62PSO+UWdRzXwFlT2+l63nvS+tbs4WyTTWUmtrA/+K7
r/1IGgsHx9JmaaXzsyL85iaYL5gl1eWqDlquXEMtbCMVfb+K+scrcyze+JX+
Mev5WmuYJ3fDGhlxT9wbnEXnSGU+yusQe25rbHXxBXzjExPCx2/C58t2UXZZ
LVnekHyOmCA2iBFipRhDEdtL0fdyDTl8R+zde7FAu8I6J4GZgtIFjCFpfXES
tgTG5PkuBc9kDAKLhxQ4LmA3EM8MtFOpG/X/X6Xb3W+ShkW593fA+JXayXQh
0sGZQH9iDfXMnaOvRl7BzxTngB4B1yB3/nmUZ05dHs65e+hT0JcdWgroVqBf
8conpFZSa+UHzBn0mq0eHMjFnh/75CNajL/2qLmFHire+qZg2EqK6RvzEI/+
JZ2zjbS25TnKsjxHnTNd+RX0j8E1NuNGr3N/jj4uj7tyPJ+JNTYbe33uB7W+
3Lkb+AY+gq+UuBXngbpl3Yf/RdIMWePp8wRX36jFETFGrFtEzL9QOQc9WIAZ
DxyJa7qc9C/A3l9r7y5+Bc+orl3RTbfbZ4b0CMWc+PiDuxSPTS7LIuu5X9pz
7YZTz1DX+ZUUufuXDj3IQM0s5gUMkyitp5bOXa3we21FfXnMGTSczlc958wn
Wygje4Yyv7Iwla6lJ2vSj+THTfDgV8pSRzlpWIZRQ1+snV9p6pvPv8nHca47
v4I5tdz7WvpLVJOQongMe8Me1Qy+gY/gK38NMUFsEKOmgZg1O9chEzFFbBFj
Od6I/WTjGg9cJK2OEphRrjUHHOmmm263xwKpYUnN/p1rbj+0mHP0SvXBvmzd
JdV9qk6hxh5oVJLpwMmRVNP/Y6osX+bSc+XYjteoNG65zzx8x5xIF41I3RM7
6Fr1/7Hn+U3gWLK19aiZYclz4RTqKhIpddVAnbCJUYp6HF+jKypSXb8y0cQ9
WDxy/8PeoY6fz5OGQn/2yth4ygp6S3Ve3NNvbgV7myjtD3vG3p19Ad9o8SF8
bXLitRALxMRZW4OY+VoPx15gwLkXCzACrAAzwA4wBCzhHGDL+Xq5PhiwCEw6
+weYDcSzomtXdPsuWSA1LCXLfuOStzaPzuL8tnFMMl0Kc+TSoT/pP5XF+XBj
YRJ1NqK+U7zUV+NUiIdW4ezmFWQOf5Ws84fT2bn3ct94pbz88bCZLhqRtpHF
dNz2O0lLUbZDUUuhNt4se82FUzBbkuj53JpB6T9Q86rn0XjqD52pqkHpDC2g
ovu2Uv9ET45FjV/BubgG16pqW8Q9wVegt8lg1o49V1tce6bAN1r9aMnZQpkD
mqFeEQuOiZO2BjFTjOXIaI71/vkPcuyBAXdNU9q5pxgzwA4wBCzhHGALGLPz
KwJ7wCA+A5PO/gFmA/Gs6NoV3b5Lhvfh8V58oPPHzuMvDZOpP8rBrzT8tMWj
j7mhKIWs08bSjShPbgj59aZgK5nHt9BNL9wK8yvo6bG4VtKE7BzCfVbOxR/y
ySO4cg87mT9oSP2QvirfbudqwBFc8DHXBXOTxDs4a1CmGOlElHIPFueBGly4
h7NOpl9c9+rOaZRinsaf7boScQ7Obc31rGfmPnBd0xTX2mJY4wXzbq/Xoe4Y
7mHnRIQv4BP4Bj7yx6fwW//hCcwHga9BjNz7r3hyEAc45oi9EscCrAAzSUUv
ufwObAFj8vf+qCuMwUA/B86j+e0KunJwaqD/XOim29+FWf/tVcV8eFH8eHq+
7z2vPTXie1qo8z+2Ud/VXWRKHsv5ePRNR/2pGNtb1HTeQueult/yGjvPZdl1
GbZTyarnRda96cFNXEkX/78qWVuP+0K3vvRlMaOpKGYMNcc+YK9z1nvhDTu/
gs9yXS2cg3PL3DQwmFPLvbHGK+me68Se1Ez2BXwDH92qIVaIGWKHGCKWWANi
ixgj1oi5N0wAM8CO0jFgTTfddLt1w/vweC8+EDnjTyuuuuSuTQvm27UDzvwK
+pk3VrzEufCs/h9Tak8EpZ4MosaTI6l0c7L4bay95wpy+xnGWt/1rKIiqG7o
dgcnMaKWur73Fll/UEGVxf+HanJb/NrLnOLdLpwC92JvleqT9QTHcM/0wehC
ih/bociDFD+8naxRcxX5la5nY3go8Su4pvAxT00GzynuNZg1Ym/YIz5jz+5+
gG/88SV8jxhY76/gmCA28l4QM8TOp/ZHYEDmeYCNHDGAFWAm/eQkSj0cIXAz
SqojJ7AFjHnyK1GMSWcfAbOBeFZmVJdSlk39v1l00+1uMrwPbwyQhuXLjSdc
ctdtU6WeJcYgA12a6uBX8nJDqaRywUBfjccpr+EZMlx+ivL2TCRL/kKXXhtt
efFU9MY2rrGFvhr9I5X7oJwNhTZhk3Tv7zs0ISVBVdRUdpX2r/SvN03eG2+7
cAr7N4q1mA/TJRXNhVcNy/wfUNOUZ/mzZcgmVS6kNzSfSu7bSseD833zK8HS
uT2h+arz4V6s+QmbJtbwT36vG7wE9oy9O/sCvvHHl+z70qsCB1uZD2Ktzfdl
jdMmjp3S/ftHRtJxEfPO+fczBoAF5uRsoxk31vwF9KbATOrlEIGhZ2mr+A3H
gS1gzL4PgT1gEJ+BSWcfAbOBeFbwjBp07Ypu3yH7a/VdpmHZ8y/UG3/O/t38
gGt9r+uR3WQNH0uGgtcVc+zIlWOo6Rgco41sbxu5n8lnhx/20IL4M74uqeX+
JMyzrD7BmpTWzmjqOvwz39ctO+7y25HZZWSbpt6DxXm48ybX40xkeDuckozh
/FmNh/E2cO/u2a73xxq/3uKdm+nsCqf2rgjeO3zAvkDPlhLfnI7aOJF0kK71
PErf7BlKtsqNHDNvMf1igI+rm9Si2K/HsC6HsXMl8tcO3gX1xQTG5O998R/T
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
7p/gjODOfMGlror10npeFRwD1/RHH6CMitWCg+AiOAlu2tcNzgZrXeJbM7O2
whjeSFwX3BiWwkrXWiRHChJIO3c1ddhW08oLT5O6aTwVHxpL+479iJbXriVt
yRYqTn/NpV65vR2ZMoe6737D5XzdMK6Kshf8jrav+h90Iu8T+tuWS/S3gveH
ZO++aKunIxOiPbWHWXOovd7mfw4u26Okrp6p/J1dsj5g+gpsKbpB9Sxprof9
9qu9yeaSk015D9KasfahAN4l3ineLd4x3jXeuTMHwAlww+M9jJ5OZRKXtKVF
pDKuo33dPxJcA+fAPXAQXAQnndcNzgY1dmUdayuM4Q38jt5er2JIf8Of30AN
KWPJOnMMpW57mf5Z9nNRD+N65LEhmf/zyE66tTh4GsuX+++jttwdXp91G610
2LDfVfeYWubS55tN1dQZt58+NdZ6tdGbvoIxGAsbzvcxR7eTjgMfRN4wLzba
sqV5W+8JnrYi7T3ewdC863fIWptD/9z2c1q+7SWyzh5DzUljBQeHmve2zIP0
ZdMvQv3ZMxjDDievN4i66+pFT9Pj5u3KuXfDtbZQuzYkqD+TRxUf/pYaLjZ7
1T5EvrDMcLJ8bxSdXPaah75SlfZjOn1xo2i4dtdXMAZjYcOXfcxd8YHkg+TL
SAC4pegrEuegt4CD4CKDwQgsRAxLSfDOyfUmpzN71Lx4e684A/9zexuZ20aR
6dC9lFOeTVUl8WSuSKOMkmolBgF1NVqfl2tpxNlqSF/yv+mM7ib9ueJPdKbs
FNVsbAnqGX9fLdz8Ov3RvIlU6XmOs33oQmELKEuzY8C6Rka7q0biLeeXN33F
Wy4x2BqoH1gD1iKvqSdmRVor1oy1h3Lv8e7BAcEFiRPgBjgCroAzoibLeDn2
CZwCt8CxHE021Ry6n8wtowQHsSZwEtxUcrSZ4oLmt/jWWF9hDHPgd/TGIMaw
WEvcYleM9fLZd7eFsuufIbXpSdpw/glanptJZU2pVKh+yzUO4cm5iq/7cv9I
17b8gW5tOUfX1G+HcNdkbNCsor/p5P/edz/bn1V6gKxNC/3SMaCtQGOx/729
emHA9BXYststs40mtXG6Xz5ZTQvFGtzXBWDNWHuoAQ4ILkicADfsAGecfQan
tE0pgmOZF8bTBtPTlF37jOAgnoOTLmsv8S9H20CakWNXGCMAtlWHxO/ph/qc
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
zJ3TL4t64gWpoT9P97fdiOygT1U7Bq01dGQ20D9tP/T6rKHwBH1qlONlDsws
E82nLZWemhe/I3QZu76Ca9y71Utesw4nu5gLc3rr93XrPXQg23eOMX8b9gx7
F+r3528rTDkouHlY4migbXekvi++KQaDEXjEHNDQogPllLn2Raq4lhxqd24b
LO3Ioo7zWeL67JUq1xr3Sfe56CtV0U9Q4aMTqTluMmmvm0XDNe7hmbO+grHO
tmAbwFyYkyEDXAQnwU1wlMFgBB6ljQni9/aDOU8OL6tRzqi7dq4m0/NLyBr2
KqUcjSd9ZCx9NHE+nTG3uGorujgKL6kJ+Vn8QNuMxt+6aBFmXbL0b7Lyd0FF
HX3VVtcvvSOrXa7BkrWmifSGBJf5vOkr6JPVUxsFY/sXt1InfHTcS+5Zg5Pe
I60x1Ps8YE5K3ALHnDUWcBBcrAqPFdxsDUsVXAVn7f3A5cHMGyN9S9rGOyv3
DYMRaOB39g2DjGHZkLNVOaM+sWUpHZkQTUcmL6Ko+lVkUE2V4wQqR07+2H2m
hTRfc5j+YTT2qm/kmydILcyRU63Sd/xEX/oKxjrsPkP5e57udW74Nl97lKyS
ryMF4CC4aFS9ILjZMWWh4Co4q2hcEpcHpa8gdiWT9RXGyIY1v0H83j7Q58z1
K54SLdRn6QNpn0Yfoi9TB1eXBfoKdBYPLcJYR809egdiV2om+a7BgtamO0Ln
jY2KvoJr3OttTL1k83xPXEyz0HM8NZTDqxp9akD+NuyR2Kvb4J31t9VI3GxI
fyLw3LH9iiyb6kL9WTMYww7Wv66j5evDRTv/nyO75oo7DpzPouVOekfCpjjX
GizRY4Reop0n17Gvil9L3WlrSf0ns2i4xj1Rh6VHX8EYZxuwaQfmOnCe9RVn
gJN2flr+ynvDYAQa4eX6QcewxLWnKefTV2376czEBVSkmUDakvHS9cuk2lhB
1grX2IgZOn3Iz+AH09zr3OP8vqZokVJX5gubTuSjMpua/K/HsgPxIvL5vh41
bLLrlPnc9ZUC6Zm+PEH6d6cY41x3pLcGX+ATfIOPsu+Sz8J319iiO6GufW8N
HHNeOzgILoKTpRI3S0ueFlwFZ+19wOVB8aJliaifw2CMdAw2hqWwMsmRG6zn
DDsldxYtXzvdZ16w4Y59TS10Yc4cOqLZRR15r3jXV0oWUYPNKc5kc7S0n97P
93vXV7aKsXY7dZLN/FLvucHgC3yCb/BxJAKcVK2bKZpd+1NifyQuD+ZbSMlj
bYXBAL6tfZY6Uk4E7Iy5ILVVxAd0BiE+YOhaO11dbKVbSQPTHpAf7ON3f+I9
JiVejkm5EedaJ8Vbu2nYSfVvnFT0FVzjnk/NQ2o1PykStkWsS7z3WJeP331Y
8nH9wLQVaU+wN1/exnVW+mrd0y/2xFfZAmbzcNJJ+tbIsSsMRjCg/rCeYvdr
qfjiyPkN2EDR9vtGrzXu7frK8dQllBmeSis+2SMarnHPRV9xq20Pm4zeUXyh
QXAUXGUwGIGH1pRAMXkDz9Olr3OcXxdFriR95AJKOSTHB+hnqOiySe2qrews
DvnZeyCas64k8mmJGJAlimahyi4SOoYqT0On6rL90j9S1u8VtrV1CZS+Zq8y
l7u+krGmhbQ75RgXjPHHNnyAL8InyTe7FgSf9eWusSuD1RlulwauueREk7gI
Th5U4qsWCM7a9T9wecB8kL4hfEsMBoMocVUzNZQONIZlK1lL5LPpIwUJZJz+
GzKI+IAVIobFOjmBLpeuDvUSgwKcxfuCsSmBpql3ivP7/PStYg/ctY6G3ARR
g8WaG6vcK06v7Le+gjGOui6xwiZsu88HH+ALfIJv8HEga7uTgT0AJ49M7Imv
SpsqOAvuiv0r8a1x9dmkbyhxFf9/RQYDsGyqFb+7D9Q5M+pb5JZNDfkZeiDa
zciDdC2lkW4t7p8Ggfr2qHOPevfuzw7oO+i40SKua35WSlejtb5tpejJFneE
bIZ/I5v+38S1r7r2aFdjtFTzlBwTgzkwl3ufi7FH6F/VPxA+9ktXkfYAe4E9
CfV7CUQDR62RgasPdK31V+JbYjAYgYXmExVFGNdTRPW6ULty20JzMo8azjjq
zWuTHfEn2rSHe/SVx4SGUjFvDOnuH0cZnxwVDde4J+srcm4wjFHGS7bsaJbm
KD3Ode19ARxFA2cZDEZgMUP3lvjd/UDOlEU98Z6z62/aW6hrwnzKMM2gquyH
pOt59H/ftrjlnMoL+Zl7oJoqe59bbIhrDZMbbSahZaBpo9PoK1tFnxrIjB2l
wnaBJZHiNjriR2R9ReW07xbRR2gI0pg+84FJc8MHuz/wTYm9kXw2udVewdpC
vb+BajPcauGAk+Cmfv2jlFE3Q3AW3LU/B6cHMk+WiF15K9SfM4Nx2wC/ux9Q
7Mqq7cr5/d+N9T31LRKpMPcJcf0PY3WolxYytBs76PKUWWIfGqamSHvxlmdM
ifleKstLVv7O3ryx3/oKxtjHayVb7ZJNz3xgbwkf4MvlybOoQ/JtpAKcFLqX
eryoxYJrcFeJYZE4PaDYlQKOXWEwnIHf3eP394M9Y15alkLWF8bQ51GdIT8/
D2RDfZFrqQ390lnabPOo8+gvPO5/U1ZN9ar3hS3bC2XUOdt3jXs01E9pOH4P
NXTf47OWir0di9BI+18mbGMOzOXe5/DRSdTW+lL/dBVp7TfvoBor/jRwFFxd
vnXJoG11Jn1I31Zz7AqDEQzorjSKGuJtNzaG2pU7BuqT9Yo+Up92v4u+gpYb
tYwK/3JTNFzb79v1FYyxj4cthn8AR8FVcJbBYAQe+N193ABiWMJbsnvO6BMo
ZfWbpE0fTyrby3Q4LJaq6lzjKqJa1oT8rD3QLafNUffEJO2Bvszxt7kimYpi
0hVNA+1Ui1n086WD2ONG0m2pFF62Q5kH2oqzvhJespMybK+Ka/c4GlfNJ0HM
6ewDfIJvStyN5LOzT1hTqPc10A3cc9kbiZvgKLiqTX9KcLemZw/A6f7ahxaG
mCMGg+EAfnc/kBgWtW65OJNuV8dSftIbVKweTRG639C50XM85lDrloVgZcGF
oTLW57Pte5bT8vQN4vze3i5XNlB7niN3V7FtDKnrn+8zP1Vv+opzfrYN9VMl
mz9V/sZcl3tyttnb8vT1pN3z2oDWdKfCG/fAUXC1UP2o4C44jD0DpwcUu7KC
/38Pg+EMy1aD+P39YM6Yr0b8jqxTx9DyTTkhPzsPVkPsxtWUZrqV0rcucS3O
Sv8y/ICuxzV7PKvPPUk3qnfS6UgNNU/upcZ9TxzK+uNjaX33WCXuxVdrnlJG
JyWbsI053J/DF/h0NdbWt64irRFrHS7xKt4auArOfhzx/uC4v/858Q0xGIzA
Y17rm2T7qyXUbtz2SLC9RgfOrRLX3ReyHDXu4+5RatbbdZTDqVmUeuU70XBt
v6/Uto9z5AaDLQC2MQejd4Crc21vhtoNBmNYYkaFRvz+vr/nyqUWOcfU/2mv
o4NjF5CqLZaKkn9JKcuK6KBhmUM3aEsP+Rl7UM7tixpdc4Rplig5wkROLjdt
Ay2jrJoO71jpVQ/BfsJuTMtKmrHDkUfNXV9BzEqc1Mf5Hbg3zIG53OeHT4oG
hNxgGtf6MFhTqPc1GA0ctK8R3ARHwVVw9uDYWMFh53fQn5ZlSxbfEIPBcAV+
f9/fc2WzLqYnPqKCToyLogjjcirOHethu7AyOQQrCi3aS2PIoD9KF8bPdNE3
inO20+kty+QaLLq5ZLA9qOgh2M/+6iv2d4BmsD1E+fqXxDXmwFzOc8MX+NSu
iQn19gw5vHEQXAVnTzwZJTjc2zvoPXaFtRUGwxvw+/vOxR8O+Iy5sPBZssQE
Lt/S7dxuRrXTtXgb3fRS28RFGzn6NFnNSZ7aS0+d++ux5VTzWEmvNqCVpLS+
QEm2F8R1b31hCzZh+5qXuvbWpiQ6eXR8rzawJrG2O7i+Sn+aJXYMFReGDXj8
sfgz0rcTFurPl8EYlrD8xUIpR7eH2o07AgfOr3Opc4+canaNJC/uKVk7iZI1
lpOqV+mxzpv0sNRwLbSVKFlbQV/7ONiwQ65rzzna/MHSrkrBXQaDEXjg9/fO
Oan6aulr2pTz6vSiGqrJ/hFlVUymg2EL6CuL1pFrqh11Q2pCfr4erFba4tA3
3HOEde3MoNbn53toHFnJa+lGy5ueuogujtTZjRTeqKYoc45jDvf4lcZcqb0u
+mKMux3Yxhzu88IX+OQrNxjWEur9DF6rEVxUcqZJHAVXs3ZMIdOaewWH7c8y
1vifHw252jh2hcHwDvz+vqHE/xgWrarKUas9cxup1c/QrLyFdGLcS3RLX6TY
Lasc3t9cg863VrG9ZRPVLXjFVeOQmnbuarpVWULGnFTqqB3lyOWVF03GtG1+
6yvoizFK/XrJlkGyCduYw33eugWLhE8DWctwgDMXwVFwdVbeIsrPCRMctu/j
donbfmuMJRy7wmD4gqVMTx/vnzKgM2ZrxDlRL1wXdyzk5+VD3a5HH6Lrqmqv
ucNOJu2n7+p/QF/Gu+XpStFTQ9Lv6Jviaqr5aQl9Guu7Bgvq1CdtfY6Sip8T
1776XZdsQF+BTdh2r9MCH+DLyZT9XnOAYQ1YS6j3c6hbVezvyDp5DFkjzwxo
PL6Z5m26UH++DMawROrRSqr6U1bfHRkeOPaHBkUnKVY97qKvNMdNplHbukTD
tbO+gr72cbDB6D/AWXCXwWAEHjMMb4rf4ft7rjyjTq4d/oXlTTI9GU/pRxNI
P3E+/dHmqEuS0Z4o9a27Dc7Wg9dmlFc46SuJpC9LVGrHi7az0UPnQDs4eZ60
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
XxbaB87vb4nze1kbERrJtjD6tvZZoZ1ca31OaCmdrQvIZl4mNBZLmV7oGcip
dTvhW0OYiPVw3ovPI1vJ+P1m+nTbO3Q48iP6+g2HxvDrbUtomtTsf3+df0j0
QV/j93eLsc62EJODGJTbCY68Zj0xQtI7QhzMab9jhOx5zeKd8prJMULBymum
Tm8WnAf38Q3gW2AwGIw7DYfPZdL5bRV0Nul5akYN+8VP0bOpuaLhGvfOJ78g
+qAvg8Fg3GnAOTjiG9LXHKHLf0yn8ad1ATvDVguNxCLyLsVtNFNUUZ3QNIS2
0agW9cWheaS7n99XOGkkJufYChXFIbbCsl5oLDMMb1K4xhCyvUO9dOd68vb2
VdvOvvWV8EKyRr7sEb9ijpxHz0UW9DkeczjPCR/gC3wKFVxjhNaLOBiVU4yQ
1jlGqMIzRkjoXyJGyJ7X7C0KL6kJWl6z8af1gvPgPr4BfAsMBiMwQHxDcU4z
7TvxBk37ZN2Qzu1yfr9OPr+3A+fdiauaHef3JQ208jaKrUDsiDe01x+gyy/O
ctFDTjwURdem3kXnHpLvG8a/5lNfMYxfLvqg77UX7xJjnW3Bdkdte798CgU8
YoQy/Y8RGgrMurJecB7cx9wMBiNwgI5Rs+opalY94XEGjfPsSxEX6XjMR9SR
ckLkpRL5pwxbyGZaRR2tryj5p5AbS+Sf0oXRd5vkhmucq+PZpYNTRA6mjtY4
Of+UYbM4j0c+reEE6AvYE/e9ND68m67OttHn2zqpPvYzurm1k9q2XqYpTcvo
16Zl4hr3auL+LPqgr/Enuz3swPZwq8HuPa+Zlxo3feU1g/bmlNcMuk9vec3A
eXCfY1cYDMadjO9uHKLSn/2SrqbNp47012he9m9p3to8cY17hT9/XvRhMBiM
OxXQMbJOvU7aP7/mqZGsMcm1SNa3UAxqkZTsFOfeM3YWilxZMS0Z3vNP6Zzz
bCX0nKEnixxMGCPnnyqU80+V3D5nW/3BDPPrVFMeT1Ul8fK/SixJAqWn5vaq
j6REr6TD0+Z6xK/gXkp0Rq9jYRtzOOraO3yAT3cioKPIvCpS8ppBb+l/XrP1
LnnNovrIawbOZ51Sc+wKgxFgCB3jSBFtONf/s5U+80+5n6GL/FNDd4YeCmw3
p1DUujKPmJPLc79H7aOj5fiVKTG+41ekZ+jT/kgMXY64y8MObGOO4YyhymsG
ziceKuLYFQYjwCitfYmsk8fQJePPXeunI86gWI4z+LrpFyLvFc67EXNir5/e
oC/pqZ9+JNTLuK2A3FkfR7jGsFiesVLnVDnXl11jQZyK1vQs6aSGa9zDM/RB
X4xxtoF4INhmOKDkjhN5zXJc8pohb5nXvGbVcl6zjyXOg/v4BhgMBuNOxuG8
DVQ64Tk69l+/R4W5saLhGvfwjMFgMO5kqNrlOGO9RaXEGSh5tuxxBuZEUrf4
ijPQhXgFoYO+0Sl2xCme5KrN3KtGUhUzj7omeuoruFcVPb/XsbDtmhtMjqGB
LyMVvvKaZfnKa9aTO65K4jxg/wYYDEZgMNm2VfwblrdPiTNQuccZrGuW82yF
IM7gdoa11DNeZF9JDJkrj9Llia55vfYtGEV108Pk+itTZvmuvzJFjnFBX4xx
0WjCZgrbmMMfX0YiXPKaFfjIa7ZCzmsWlmcT9+zfAIPBCCxwTs0IDBDXgxgd
Z22k+4W91DDBs1a9ZuvPSSs19/voizHO92AT8T+MwOB2yy3HYDAYA0XKQR01
RN8ntXsoL32SaLjGPTxjMBgMxshEeFkNmcoTPGJYWg1pZJqd4FMj6Zohtclz
qeaHBllfQZOucQ/PfI2DTdh2j12BD/CFwWAwGMMT2j1ZVJy01EUbqZsymToW
/Luc+2v8dJ/6Cp6hT8eC74sxzjZgE7YZDAaDMfKAGKDPI99RtJFrETYy3uuZ
78uXvmK8f7cY41zPhvNYMRgMBsMbun+/y6e+gmcMBoPBGLnIak/wGsNibew9
hsU6O45K76lT4le0P6yT7sX2PqbRe+wKfGAwGAzG8IChcqHHvXZ9LOVrO+nC
OIc2cuTBhXRlliPfV9fd+R76Cu7Zn6Mvxij6yuPThU3Y9scHBoPBYAwvIJea
pUzvqpncu5s+jWjtU19BH3ctxrK1QthkMBgMBsMdx8+vpYZ5sr5SsOxZ0YS+
It3DMwaDwWCMbJgM9hiWRYr2ccbUew2WrJhkynmsQtFX1NJ1jnSvtzGw6Yhd
WSTHrnDtEAaDwRgRMO4ppyMRL7nEn1yZDs0kVlxb/73IQ1/BPaG9SH3Q13ls
l2QLNhkMBoMxcoG67M411Rt+ZqXjbjm/vOkr6IO+zvdgi8FgMBgMXyhOfVpo
KsWqp0UT19I9BoPBYDDCLbleY1jUuhqfWkn4ygWUMbFQ0Veywoqke75rr8CW
t9gVzM1gMBiM4YUN2hUe9/bVL6So0g4XjeTIgn+jhsnPi2vjI+s89BXcwzP0
QV+XuvaSrX0mzzgVb3MzGAwGY3jiVtMvRF0bu0bSOWUvWSZa+9RXrFIf9LX/
DRuwxWAwGAyGL8xteVNoKqUpT4mGa9xjMBgMBgOoavGsw3KjRetTL3kufxpl
TFur6Cu4fi7/BZ/9Ycu97grmZDAYDMbwhFXrpdZ9k4XOzZnjqMEy62myLrhX
1lcmJnnqK9I9Eduy4D7R1z4ONmDLnzkZDAaDMXxh2VRHV/c/p+gkH8+2kfFh
S5/6CvqgrzJu/xTJVm2ol8NgMBiM2xjWi40e+gruMRgMBoNhh7cYFtX6rd7j
V/KnUE5UqqKv5ESminve+sKGt9gVBoPBYIws1DW9QlPzdik6SfvoaLo893uy
hjIlyjM/mHQPz9AHfe3jphbsIqNki8FgMBiMb3VhdDLqktBJbkI7+e/N9Hlk
q099Bc+M328WffH36cjLwgaDwWAwGL3h/O9LqTn6HtImjyHd4tHiGvcYDAaD
wbBjcXu6RwzLF227vGom6StnkDZ6kayvSK1UusY9b31hwz12BXMxGAwGY3ij
sDLJ4157bQddnjpLjkN5aBZdm3oXnXhoLnVNnuVZ3x73pGfog75Ca5kyS9jw
Zy4Gg8FgDH9Y67Ops3WeIzblKQudnb7Xp76CZ+ij5BSTxsIGg8FgMBh9AZpK
RfwjouGawWAwGAx31DTKsSWOWJMlpE7I8NBMSqPmkUlq9vgVXOOeR90VaSxs
KPoKYlcaOXaFwWAwRgqsJa45u7TmpZS4Il+JRTmx4L9Qw4Q5dG78dA99Bffw
DH3s/TEWNnqbg8FgMBgjC9+VhdG1yJNCLzkw2Uptk60+9RU8O9DzHGMwlsFg
MBgMf7Bi/UuKvoJrBoPBYDC8QV+SQCZdoqKJfNRi9tBNTBMS6ODsBYq+0ipd
mybEe/TDWIdWkyhsMxgMBmPkor00hur0R+nyhJly7fq5P6WGlx8W19135yn6
Cq7Fc+kZ+ojYFWkMxsIGg8FgMBh2iBiU2vVCM7k4cy8Zx1h86it4hj6izr00
BmMZDAaDwfAHCQd0ir6CawaDwWAwvCHjUAbpy5MVXeTwjpVknrbIRTc5OGE+
1UxKVvSVmsnJ4p5zH4zBWLsd2IRtBoPBYIwsFFcmuvy9fc8bZHhFrl1vfvIl
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
AAAAAAAAAAAAMIv9DX5wfBI=
    "], {{0, 1218}, {1624, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->200,
  ImageSizeRaw->{1624, 1218},
  PlotRange->{{0, 1624}, {0, 1218}}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.779813745568223*^9, 3.780352339187055*^9, 
  3.780396937814784*^9, 3.780397458323133*^9, 3.7803998714101458`*^9, 
  3.780400245911079*^9, 3.78040038592487*^9, 3.780401141895205*^9, 
  3.7804013029854727`*^9, 3.780401823377112*^9, 3.780402278184195*^9, 
  3.780402406546978*^9},
 CellLabel->"Out[7]=",
 CellID->985014584]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source & Additional Information", "Section",
 Deletable->False,
 CellTags->"Source & Additional Information",
 CellID->318391102],

Cell[CellGroupData[{

Cell[TextData[{
 "Contributed By",
 Cell[BoxData[
  TemplateBox[{"Contributed By",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Enter the name of the person, people or organization that should be \
publicly credited with contributing this function.", "MoreInfoText"], 
       Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
       GrayLevel[0.9], RoundingRadius -> 5]], "MoreInfoText", Deletable -> 
     True, CellTags -> {"SectionMoreInfoContributedBy"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Text",
 CellTags->"Contributed By",
 CellID->127820888],

Cell["Anton Antonov", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Keywords",
 Cell[BoxData[
  TemplateBox[{"Keywords",Cell[
     BoxData[
      FrameBox[
       Cell[
       "List relevant terms (e.g. functional areas, algorithm names, related \
concepts) that should be used to include the function in search results.", 
        "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
       FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5]], "MoreInfoText", 
     Deletable -> True, CellTags -> {"SectionMoreInfoKeywords"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Item",
 CellTags->"Keywords",
 CellID->547400482],

Cell["mandala", "Item"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Categories", "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Item",
 CellTags->"Categories",
 CellID->749076926],

Cell["Geometry", "Item"],

Cell["Just For Fun", "Item"],

Cell["Visualization & Graphics", "Item"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Symbols",
 Cell[BoxData[
  TemplateBox[{"Related Symbols",Cell[
     BoxData[
      FrameBox[
       Cell[
       "List up to twenty documented, system-level Wolfram Language symbols \
related to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
       FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 
       5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoRelatedSymbols"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Item",
 CellTags->"Related Symbols",
 CellID->161079978],

Cell["Graphics", "Item"],

Cell["BezierCurve", "Item"],

Cell["FilledCurve", "Item"],

Cell["ColorData", "Item"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Resource Objects",
 Cell[BoxData[
  TemplateBox[{"Related Resource Objects",Cell[
     BoxData[
      FrameBox[
       Cell[
       "List the names of published resource objects from any Wolfram \
repository that are related to this function.", "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoRelatedResourceObjects"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Item",
 CellTags->"Related Resource Objects",
 CellID->588449267],

Cell["Resource Name (resources from any Wolfram repository)", "Item",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->"TabNext",
 CellID->960273585]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Source/Reference Citation",
 Cell[BoxData[
  TemplateBox[{"Source/Reference Citation",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Give a bibliographic-style citation for the original source of the \
function and/or its components (e.g. a published paper, algorithm, or code \
repository).", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
       20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5]], 
     "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoSourceReferenceCitation"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Text",
 CellTags->"Source/Reference Citation",
 CellID->642091068],

Cell["\<\
Anton Antonov, \"Comparison of dimension reduction algorithms over mandala \
images\[NonBreakingSpace]generation\", (2017), MathematicaForPrediction at \
WordPress.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Links",
 Cell[BoxData[
  TemplateBox[{"Links",Cell[
     BoxData[
      FrameBox[
       Cell[
       "List additional URLs or hyperlinks for external information related \
to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
       FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 
       5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoLinks"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Item",
 CellTags->"Links",
 CellID->521525586],

Cell["\<\
https://mathematicaforprediction.wordpress.com/2017/02/10/comparison-of-\
dimension-reduction-algorithms-over-mandala-images-generation/\
\>", "Item"],

Cell["https://mathematica.stackexchange.com/q/136974/34008", "Item"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tests",
 Cell[BoxData[
  TemplateBox[{"Tests",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Specify an optional list of tests for verifying that the function is \
working properly in any environment. Tests can be specified as Input/Output \
cell pairs or as symbolic VerificationTest expressions for including \
additional options.", "MoreInfoText"], Background -> GrayLevel[0.95], 
       FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 
       5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoTests"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Subsection",
 Deletable->False,
 DefaultNewCellStyle->"Input",
 CellTags->"Tests",
 CellID->74308299],

Cell["This should produces different mandalas:", "Text",
 CellChangeTimes->{{3.779265407641748*^9, 3.779265418588081*^9}},
 CellID->339790071],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Head", "@", 
    RowBox[{"RandomMandala", "[", "]"}]}], ",", "36"}], "]"}]], "Input",
 CellChangeTimes->{{3.7792653960549088`*^9, 3.7792654256196537`*^9}, {
  3.779265624941702*^9, 3.7792656264919033`*^9}, {3.779813487491227*^9, 
  3.7798134910846*^9}},
 CellLabel->"In[1]:=",
 CellID->898055012],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.779530201996943*^9, 3.7795304286480513`*^9, 
  3.7795307104513693`*^9, 3.779549738025964*^9, 3.779552090327948*^9, 
  3.779554221236668*^9, 3.7795548337406816`*^9, 3.779813500138342*^9, 
  3.780352339380435*^9, 3.780353504402878*^9, 3.7803969381076097`*^9, 
  3.780397458625988*^9, 3.780399871901176*^9, 3.780400246242569*^9, 
  3.780400386261146*^9, 3.780401142440708*^9, 3.780401303400172*^9, 
  3.7804018237388897`*^9, 3.7804022786024218`*^9, 3.780402406924868*^9},
 CellLabel->"Out[1]=",
 CellID->236495118]
}, Open  ]],

Cell["This should run without failures (single-mandala mode):", "Text",
 CellChangeTimes->{{3.7792654398734627`*^9, 3.7792654563212547`*^9}, {
  3.780397806272366*^9, 3.780397811594211*^9}},
 CellID->1424158351],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"mandalas", "=", "\[IndentingNewLine]", 
  RowBox[{"Flatten", "@", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Head", "@", 
      RowBox[{"RandomMandala", "[", 
       RowBox[{
        RowBox[{"\"\<Radius\>\"", "\[Rule]", "r"}], ",", 
        RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "ord"}], ",", 
        RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "gp"}], ",", 
        RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "nel"}], ",", 
        RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "s"}], ",", 
        RowBox[{"ColorFunction", "\[Rule]", "cf"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.1", ",", "100"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"ord", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"gp", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nel", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"s", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"cf", ",", 
       RowBox[{"{", 
        RowBox[{"None", ",", "\"\<BrightBands\>\""}], "}"}]}], "}"}]}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.779265028616885*^9, 3.77926517568611*^9}, {
  3.7792652396355667`*^9, 3.779265375771326*^9}, {3.7792654336209517`*^9, 
  3.779265526905772*^9}, {3.779530444961281*^9, 3.779530476008258*^9}, {
  3.779530725687714*^9, 3.77953073799269*^9}, {3.7798135081022263`*^9, 
  3.7798135196178293`*^9}},
 CellLabel->"In[2]:=",
 CellID->1656091683],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7795506450265713`*^9, 3.7795520907608843`*^9, 3.779554221575673*^9, 
   3.779554834088564*^9, {3.779813511177834*^9, 3.779813520253737*^9}, 
   3.780352339516871*^9, 3.7803535061589613`*^9, 3.780396938267673*^9, 
   3.780397458774572*^9, 3.7803998720746*^9, 3.7804002463804817`*^9, 
   3.780400386418292*^9, 3.7804011425631647`*^9, 3.780401303529948*^9, 
   3.780401823867878*^9, 3.780402278785715*^9, 3.780402407047821*^9},
 CellLabel->"Out[3]=",
 CellID->1928701276]
}, Open  ]],

Cell["This should run without failures (multi-mandala mode):", "Text",
 CellChangeTimes->{{3.7792654398734627`*^9, 3.7792654563212547`*^9}, {
  3.7803977951799803`*^9, 3.7803978027170258`*^9}},
 CellID->636579626],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"mandalas", "=", "\[IndentingNewLine]", 
  RowBox[{"Flatten", "@", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Head", "@", 
      RowBox[{"RandomMandala", "[", 
       RowBox[{
        RowBox[{"\"\<Radius\>\"", "\[Rule]", 
         RowBox[{"Range", "[", "r", "]"}]}], ",", 
        RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "ord"}], ",", 
        RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "gp"}], ",", 
        RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "nel"}], ",", 
        RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "s"}], ",", 
        RowBox[{"ColorFunction", "\[Rule]", "cf"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "100"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"ord", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"gp", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nel", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"s", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"cf", ",", 
       RowBox[{"{", 
        RowBox[{"None", ",", "\"\<BrightBands\>\""}], "}"}]}], "}"}]}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.779265028616885*^9, 3.77926517568611*^9}, {
  3.7792652396355667`*^9, 3.779265375771326*^9}, {3.7792654336209517`*^9, 
  3.779265526905772*^9}, {3.779530444961281*^9, 3.779530476008258*^9}, {
  3.779530725687714*^9, 3.77953073799269*^9}, {3.7798135081022263`*^9, 
  3.7798135196178293`*^9}, {3.78039774147808*^9, 3.780397776539089*^9}},
 CellLabel->"In[4]:=",
 CellID->117247322],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.780397782140032*^9, 3.780399880990382*^9, 
  3.780400252248761*^9, 3.780400392506585*^9, 3.7804011471131144`*^9, 
  3.780401309082265*^9, 3.780401829018097*^9, 3.780402284357029*^9, 
  3.780402412232635*^9},
 CellLabel->"Out[5]=",
 CellID->1305338730]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"mandalas", "=", "\[IndentingNewLine]", 
  RowBox[{"Flatten", "@", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Head", "@", 
      RowBox[{"RandomMandala", "[", 
       RowBox[{
        RowBox[{"\"\<Radius\>\"", "\[Rule]", 
         RowBox[{"Range", "[", "r", "]"}]}], ",", 
        RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "ord"}], ",", 
        RowBox[{"\"\<KeepGridPoints\>\"", "\[Rule]", "gp"}], ",", 
        RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "nel"}], ",", 
        RowBox[{"\"\<SymmetricSeed\>\"", "\[Rule]", "s"}], ",", 
        RowBox[{"ColorFunction", "\[Rule]", "cf"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "6"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"ord", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"gp", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"nel", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "10"}], "}"}], ",", "n"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"s", ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"cf", ",", 
       RowBox[{"{", 
        RowBox[{"None", ",", "\"\<BrightBands\>\""}], "}"}]}], "}"}]}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.779265028616885*^9, 3.77926517568611*^9}, {
  3.7792652396355667`*^9, 3.779265375771326*^9}, {3.7792654336209517`*^9, 
  3.779265526905772*^9}, {3.779530444961281*^9, 3.779530476008258*^9}, {
  3.779530725687714*^9, 3.77953073799269*^9}, {3.7798135081022263`*^9, 
  3.7798135196178293`*^9}, {3.78039774147808*^9, 3.780397776539089*^9}, {
  3.780397817761903*^9, 3.780397820876741*^9}, {3.780397864337852*^9, 
  3.7803978668445787`*^9}, {3.780397906715667*^9, 3.7803979107993097`*^9}},
 CellLabel->"In[6]:=",
 CellID->679420060],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics", ",", 
   "Graphics", ",", "Graphics", ",", "Graphics", ",", "Graphics"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.780397838908092*^9, {3.780397869286916*^9, 3.780397912071946*^9}, 
   3.7803998813625717`*^9, 3.78040025285236*^9, 3.7804003931121187`*^9, 
   3.780401147656365*^9, 3.78040130964391*^9, 3.7804018294384193`*^9, 
   3.780402284817021*^9, 3.780402412664266*^9},
 CellLabel->"Out[7]=",
 CellID->135097358]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", 
  RowBox[{"RandomMandala", "[", 
   RowBox[{"\"\<Radius\>\"", "\[Rule]", "Automatic"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7804016627124557`*^9, 3.780401673310678*^9}},
 CellLabel->"In[8]:=",
 CellID->192437816],

Cell[BoxData["Graphics"], "Output",
 CellChangeTimes->{{3.7804016661029997`*^9, 3.7804016739015207`*^9}, 
   3.780401829449482*^9, 3.78040228482979*^9, 3.780402412674869*^9},
 CellLabel->"Out[8]=",
 CellID->691081027]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", 
  RowBox[{"RandomMandala", "[", 
   RowBox[{
    RowBox[{"\"\<Radius\>\"", "\[Rule]", "Automatic"}], ",", 
    RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7804016627124557`*^9, 3.780401710335535*^9}},
 CellLabel->"In[9]:=",
 CellID->1192201479],

Cell[BoxData["Graphics"], "Output",
 CellChangeTimes->{{3.780401697765376*^9, 3.780401710787051*^9}, 
   3.7804018294907713`*^9, 3.7804022849005337`*^9, 3.78040241271854*^9},
 CellLabel->"Out[9]=",
 CellID->1407257813]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", 
  RowBox[{"RandomMandala", "[", 
   RowBox[{
    RowBox[{"\"\<Radius\>\"", "\[Rule]", "Automatic"}], ",", 
    RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", "Automatic"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7804016627124557`*^9, 3.7804017423646793`*^9}},
 CellLabel->"In[10]:=",
 CellID->1862071492],

Cell[BoxData["Graphics"], "Output",
 CellChangeTimes->{{3.780401723795649*^9, 3.780401743124467*^9}, 
   3.780401829500237*^9, 3.780402284913032*^9, 3.7804024127281723`*^9},
 CellLabel->"Out[10]=",
 CellID->1544658680]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", 
  RowBox[{"RandomMandala", "[", 
   RowBox[{
    RowBox[{"\"\<Radius\>\"", "\[Rule]", "Automatic"}], ",", 
    RowBox[{"\"\<ConnectingFunction\>\"", "\[Rule]", "Random"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7804016627124557`*^9, 3.7804017423646793`*^9}, {
  3.780404931793342*^9, 3.780404944582206*^9}},
 CellLabel->"In[349]:=",
 CellID->989188074],

Cell[BoxData["Graphics"], "Output",
 CellChangeTimes->{{3.780404936564104*^9, 3.780404944990237*^9}},
 CellLabel->"Out[349]=",
 CellID->1928061248]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", 
  RowBox[{"RandomMandala", "[", 
   RowBox[{"\"\<Radius\>\"", "\[Rule]", 
    RowBox[{"Log", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"10", ",", "2", ",", 
       RowBox[{"-", "2"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.780402297255704*^9, 3.780402322185891*^9}},
 CellLabel->"In[11]:=",
 CellID->1891823472],

Cell[BoxData["Graphics"], "Output",
 CellChangeTimes->{{3.780402298472961*^9, 3.7804023225815372`*^9}, 
   3.7804024127715054`*^9},
 CellLabel->"Out[11]=",
 CellID->148626177]
}, Open  ]],

Cell[CellGroupData[{

Cell["These should fail", "Subsubsection",
 CellChangeTimes->{{3.779250515753829*^9, 3.779250523071279*^9}},
 CellLabel->"In[12]:=",
 CellID->49494754],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<Radius\>\"", "\[Rule]", 
   RowBox[{"-", "12"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792153939174547`*^9}},
 CellLabel->"In[1]:=",
 CellID->1486259351],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Radius\\\\\\\"\
\\\"}]\\)\\\" is expected to be a positive real number or list of positive \
real numbers.\"",2,1,58,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7795302023449287`*^9, 3.779530711303646*^9, 
  3.7795497385828543`*^9, 3.779552090874889*^9, 3.779554221980535*^9, 
  3.779554834226139*^9, 3.780352339569736*^9, 3.7803535086352167`*^9, 
  3.780396938318334*^9, 3.780397458820595*^9, 3.780399881417334*^9, 
  3.78040025291232*^9, 3.7804003931650753`*^9, 3.7804011476899014`*^9, 
  3.7804013097424793`*^9, 3.7804018295491123`*^9, 3.780402284992016*^9, 
  3.7804024128214293`*^9},
 CellLabel->"During evaluation of In[1]:=",
 CellID->436675378],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.7795302023677387`*^9, 3.779530711311245*^9, 
  3.7795497386123657`*^9, 3.7795520908828*^9, 3.7795542219888906`*^9, 
  3.779554834240263*^9, 3.780352339570259*^9, 3.7803535086434803`*^9, 
  3.780396938328137*^9, 3.780397458829813*^9, 3.780399881427783*^9, 
  3.7804002529207706`*^9, 3.780400393173746*^9, 3.780401147696906*^9, 
  3.780401309752185*^9, 3.780401829557989*^9, 3.78040228500112*^9, 
  3.7804024128295393`*^9},
 CellLabel->"Out[1]=",
 CellID->1251456247]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<Radius\>\"", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "Blah", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792153939174547`*^9}, {
  3.7803535162237186`*^9, 3.780353528034802*^9}},
 CellLabel->"In[2]:=",
 CellID->2141340476],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Radius\\\\\\\"\
\\\"}]\\)\\\" is expected to be a positive real number or list of positive \
real numbers.\"",2,2,59,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780353528658626*^9, 3.780396938337082*^9, 
  3.780397458837566*^9, 3.7803998814364233`*^9, 3.7804002529293528`*^9, 
  3.780400393181645*^9, 3.780401147705632*^9, 3.780401309761272*^9, 
  3.780401829596672*^9, 3.780402285072801*^9, 3.780402412838847*^9},
 CellLabel->"During evaluation of In[2]:=",
 CellID->770304611],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.780353528664878*^9, 3.7803969383443213`*^9, 
  3.780397458844099*^9, 3.780399881442779*^9, 3.7804002529358873`*^9, 
  3.7804003931885653`*^9, 3.7804011477124023`*^9, 3.780401309767847*^9, 
  3.7804018296032248`*^9, 3.780402285079549*^9, 3.780402412845509*^9},
 CellLabel->"Out[2]=",
 CellID->1478172961]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", 
   RowBox[{"-", "12"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}},
 CellLabel->"In[3]:=",
 CellID->727293398],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","ipopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"NumberOfSeedElements\\\\\\\"\\\"}]\\)\\\" is \
expected to be a positive integer.\"",2,3,60,32612694105430197388,"Local",
   "Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.779530202396682*^9, 3.779530711318609*^9, 
  3.779549738620202*^9, 3.779552090948621*^9, 3.779554221995994*^9, 
  3.779554834295062*^9, 3.78035233957758*^9, 3.7803535107988997`*^9, 
  3.780396938384849*^9, 3.7803974588828487`*^9, 3.780399881485422*^9, 
  3.780400252986929*^9, 3.780400393232875*^9, 3.780401147740261*^9, 
  3.7804013098136787`*^9, 3.780401829610969*^9, 3.780402285153442*^9, 
  3.780402412887686*^9},
 CellLabel->"During evaluation of In[3]:=",
 CellID->1562127031],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.779530202402899*^9, 3.7795307113243856`*^9, 
  3.779549738626068*^9, 3.7795520909542427`*^9, 3.779554222002281*^9, 
  3.7795548343011007`*^9, 3.780352339578107*^9, 3.7803535108050623`*^9, 
  3.780396938392536*^9, 3.7803974588897*^9, 3.7803998814922953`*^9, 
  3.78040025299319*^9, 3.780400393239316*^9, 3.780401147747594*^9, 
  3.780401309820079*^9, 3.78040182961758*^9, 3.780402285159893*^9, 
  3.7804024128937798`*^9},
 CellLabel->"Out[3]=",
 CellID->1681425442]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", 
   RowBox[{"-", "12"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251211807351*^9}, {
   3.7792637538601227`*^9, 3.779263767888908*^9}},
 CellLabel->"In[4]:=",
 CellID->922752450],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,4,61,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.779530202410181*^9, 3.779530711372671*^9, 
  3.779549738657658*^9, 3.779552090961479*^9, 3.7795542221511993`*^9, 
  3.779554834308147*^9, 3.780352339625102*^9, 3.7803535117522984`*^9, 
  3.780396938507494*^9, 3.78039745889804*^9, 3.780399881500551*^9, 
  3.780400253000815*^9, 3.780400393249118*^9, 3.7804011477554283`*^9, 
  3.780401309830537*^9, 3.780401829656189*^9, 3.780402285168475*^9, 
  3.780402412903853*^9},
 CellLabel->"During evaluation of In[4]:=",
 CellID->980092821],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.779530202415985*^9, 3.779530711378375*^9, 
  3.779549738663444*^9, 3.779552090967462*^9, 3.779554222156336*^9, 
  3.779554834314148*^9, 3.7803523396256237`*^9, 3.780353511758729*^9, 
  3.78039693851495*^9, 3.780397458905032*^9, 3.7803998815069847`*^9, 
  3.78040025300749*^9, 3.780400393255549*^9, 3.780401147762127*^9, 
  3.780401309837347*^9, 3.780401829663086*^9, 3.780402285175748*^9, 
  3.780402412909875*^9},
 CellLabel->"Out[4]=",
 CellID->1220470057]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "\"\<a\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251219997302*^9}, 
   3.779263777142385*^9},
 CellLabel->"In[5]:=",
 CellID->605998972],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,5,62,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.779530202444147*^9, 3.779530711385742*^9, 
  3.779549738670868*^9, 3.7795520910362186`*^9, 3.779554222163084*^9, 
  3.7795548343682613`*^9, 3.7803523396325397`*^9, 3.780353512655086*^9, 
  3.780396938525503*^9, 3.7803974589479427`*^9, 3.780399881549876*^9, 
  3.7804002530582933`*^9, 3.780400393299838*^9, 3.780401147789472*^9, 
  3.780401309892231*^9, 3.780401829672422*^9, 3.7804022852390003`*^9, 
  3.78040241295146*^9},
 CellLabel->"During evaluation of In[5]:=",
 CellID->1823935502],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.779530202450461*^9, 3.779530711391777*^9, 
  3.779549738676881*^9, 3.779552091042026*^9, 3.779554222169134*^9, 
  3.779554834374195*^9, 3.78035233963307*^9, 3.7803535126613207`*^9, 
  3.7803969385325003`*^9, 3.78039745895788*^9, 3.7803998815564537`*^9, 
  3.780400253064663*^9, 3.780400393306662*^9, 3.780401147796056*^9, 
  3.780401309898766*^9, 3.7804018296788816`*^9, 3.780402285245647*^9, 
  3.780402412958065*^9},
 CellLabel->"Out[5]=",
 CellID->1702404836]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "0"}], "]"}]], "Input",\

 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251219997302*^9}, {
   3.779257234454167*^9, 3.779257237018509*^9}, 3.779263782328278*^9},
 CellLabel->"In[6]:=",
 CellID->2134600312],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,6,63,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.779530202457644*^9, 3.7795307114403152`*^9, 
  3.779549738708515*^9, 3.7795520910490913`*^9, 3.7795542223260727`*^9, 
  3.779554834381402*^9, 3.780352339680018*^9, 3.7803535135955677`*^9, 
  3.780396938583428*^9, 3.7803974589695997`*^9, 3.780399881564527*^9, 
  3.780400253072371*^9, 3.7804003933145*^9, 3.780401147803924*^9, 
  3.780401309909156*^9, 3.7804018297182426`*^9, 3.780402285252954*^9, 
  3.780402412965858*^9},
 CellLabel->"During evaluation of In[6]:=",
 CellID->1393449671],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.779530202463504*^9, 3.779530711445829*^9, 
  3.779549738714569*^9, 3.779552091054905*^9, 3.7795542223313627`*^9, 
  3.7795548343875103`*^9, 3.7803523396805983`*^9, 3.7803535136014137`*^9, 
  3.780396938590445*^9, 3.780397458978332*^9, 3.780399881571245*^9, 
  3.780400253078864*^9, 3.7804003933208847`*^9, 3.780401147810864*^9, 
  3.780401309916356*^9, 3.78040182972488*^9, 3.780402285260153*^9, 
  3.780402412972185*^9},
 CellLabel->"Out[6]=",
 CellID->1399449962]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{
   RowBox[{"\"\<Radius\>\"", "\[Rule]", 
    RowBox[{"Range", "[", "3", "]"}]}], ",", 
   RowBox[{"\"\<RotationalSymmetryOrder\>\"", "\[Rule]", "0"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251219997302*^9}, {
   3.779257234454167*^9, 3.779257237018509*^9}, 3.779263782328278*^9, {
   3.780397648553228*^9, 3.780397664014666*^9}, {3.78039769466293*^9, 
   3.780397713682953*^9}},
 CellLabel->"In[7]:=",
 CellID->1923894224],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,7,64,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780397714038924*^9, 3.78039821421222*^9, 
  3.780398322310771*^9, 3.78039988161605*^9, 3.780400253129919*^9, 
  3.7804003933653517`*^9, 3.7804011478400087`*^9, 3.7804013099800243`*^9, 
  3.780401829733201*^9, 3.7804022853439713`*^9, 3.780402413013956*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1314609390],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,7,65,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780397714038924*^9, 3.78039821421222*^9, 
  3.780398322310771*^9, 3.78039988161605*^9, 3.780400253129919*^9, 
  3.7804003933653517`*^9, 3.7804011478400087`*^9, 3.7804013099800243`*^9, 
  3.780401829733201*^9, 3.7804022853439713`*^9, 3.7804024130207872`*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1328257394],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"RotationalSymmetryOrder\\\\\\\"\\\"}]\\)\\\" \
is expected to be a positive real number or list of positive real numbers.\"",
   2,7,66,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780397714038924*^9, 3.78039821421222*^9, 
  3.780398322310771*^9, 3.78039988161605*^9, 3.780400253129919*^9, 
  3.7804003933653517`*^9, 3.7804011478400087`*^9, 3.7804013099800243`*^9, 
  3.780401829733201*^9, 3.7804022853439713`*^9, 3.780402413026063*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->929510393],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"RandomMandala\\\", \
\\\"::\\\", \\\"rpopt\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,7,67,32612694105430197388,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.780397714038924*^9, 3.78039821421222*^9, 
  3.780398322310771*^9, 3.78039988161605*^9, 3.780400253129919*^9, 
  3.7804003933653517`*^9, 3.7804011478400087`*^9, 3.7804013099800243`*^9, 
  3.780401829733201*^9, 3.7804022853439713`*^9, 3.780402413030723*^9},
 CellLabel->"During evaluation of In[7]:=",
 CellID->1485126873],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.7803977140829973`*^9, 3.7803982142374268`*^9, 
  3.7803983223369837`*^9, 3.780399881638818*^9, 3.780400253152423*^9, 
  3.780400393387567*^9, 3.7804011478938217`*^9, 3.7804013100047398`*^9, 
  3.780401829754944*^9, 3.7804022853706903`*^9, 3.780402413036264*^9},
 CellLabel->"Out[7]=",
 CellID->324925430]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{
   RowBox[{"\"\<Radius\>\"", "\[Rule]", 
    RowBox[{"Range", "[", "3", "]"}]}], ",", 
   RowBox[{"\"\<NumberOfSeedElements\>\"", "\[Rule]", 
    RowBox[{"-", "12"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251219997302*^9}, {
   3.779257234454167*^9, 3.779257237018509*^9}, 3.779263782328278*^9, {
   3.780397648553228*^9, 3.780397664014666*^9}, {3.78039769466293*^9, 
   3.780397713682953*^9}, {3.780398339691633*^9, 3.780398356662896*^9}},
 CellLabel->"In[8]:=",
 CellID->1554101902],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","ipopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"NumberOfSeedElements\\\\\\\"\\\"}]\\)\\\" is \
expected to be a positive integer.\"",2,8,68,32612694105430197388,"Local",
   "Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780401829795064*^9, 3.7804022853812437`*^9, 
  3.7804024130447702`*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->2118271336],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","ipopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"NumberOfSeedElements\\\\\\\"\\\"}]\\)\\\" is \
expected to be a positive integer.\"",2,8,69,32612694105430197388,"Local",
   "Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780401829795064*^9, 3.7804022853812437`*^9, 
  3.780402413050528*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->802444186],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","ipopt",
   "\"The value of the option \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"NumberOfSeedElements\\\\\\\"\\\"}]\\)\\\" is \
expected to be a positive integer.\"",2,8,70,32612694105430197388,"Local",
   "Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.780401829795064*^9, 3.7804022853812437`*^9, 
  3.78040241305508*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->482130942],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"RandomMandala\\\", \
\\\"::\\\", \\\"ipopt\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,8,71,32612694105430197388,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.780401829795064*^9, 3.7804022853812437`*^9, 
  3.780402413059556*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->718942063],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.780398347576171*^9, 3.7803983574017897`*^9}, 
   3.780399881684999*^9, 3.7804002532050123`*^9, 3.7804003934337606`*^9, 
   3.780401147937007*^9, 3.7804013100178556`*^9, 3.7804017541629677`*^9, 
   3.780401829818074*^9, 3.780402285403846*^9, 3.780402413064252*^9},
 CellLabel->"Out[8]=",
 CellID->1516254819]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomMandala", "[", 
  RowBox[{"\"\<Radius\>\"", "\[Rule]", 
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"-", "10"}], ",", 
     RowBox[{"-", "1"}], ",", "1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.779215353599655*^9, 3.7792154328094177`*^9}, 
   3.7792505340628757`*^9, {3.7792512092233047`*^9, 3.779251219997302*^9}, {
   3.779257234454167*^9, 3.779257237018509*^9}, 3.779263782328278*^9, {
   3.780397648553228*^9, 3.780397664014666*^9}, {3.78039769466293*^9, 
   3.780397713682953*^9}, {3.780398339691633*^9, 3.780398356662896*^9}, {
   3.7803984066977377`*^9, 3.7803984226744747`*^9}},
 CellLabel->"In[9]:=",
 CellID->1732163943],

Cell[BoxData[
 TemplateBox[{
  "RandomMandala","rpopt",
   "\"The value of the option \\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Radius\\\\\\\"\
\\\"}]\\)\\\" is expected to be a positive real number or list of positive \
real numbers.\"",2,9,72,32612694105430197388,"Local","Global`RandomMandala"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.780398416766651*^9, 3.7803984231120787`*^9}, 
   3.7803985057367907`*^9, 3.780399881695677*^9, 3.780400253214717*^9, 
   3.780400393451604*^9, 3.780401147966958*^9, 3.780401310080999*^9, 
   3.780401829825779*^9, 3.780402285627425*^9, 3.780402413107088*^9},
 CellLabel->"During evaluation of In[9]:=",
 CellID->1653787631],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.78039841677794*^9, 3.7803984231234207`*^9}, 
   3.780398505742934*^9, 3.780399881702124*^9, 3.780400253221037*^9, 
   3.7804003934580936`*^9, 3.7804011479785147`*^9, 3.7804013100877943`*^9, 
   3.780401829832161*^9, 3.780402285659738*^9, 3.780402413113415*^9},
 CellLabel->"Out[9]=",
 CellID->327871096]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Author Notes", "Section",
 Deletable->False,
 DefaultNewCellStyle->"Text",
 CellTags->"Author Notes",
 CellID->795110225],

Cell["Additional information about limitations, issues, etc.", "Text",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->"TabNext",
 CellID->567921317]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Submission Notes",
 Cell[BoxData[
  TemplateBox[{"Submission Notes",Cell[
     BoxData[
      FrameBox[
       Cell[
       "Enter any additional information that you would like to communicate \
to the reviewer here. This section will not be included in the published \
resource.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
       20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5]], 
     "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoSubmissionNotes"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]]]
}], "Section",
 Deletable->False,
 DefaultNewCellStyle->"Text",
 CellTags->"Submission Notes",
 CellID->843283583],

Cell["Additional information for the reviewer.", "Text",
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->"TabNext",
 CellID->920818074]
}, Open  ]]
},
WindowSize->Automatic,
WindowMargins->Automatic,
TaggingRules->{
 "ResourceType" -> "Function", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> "1.2.26", "CreationTimestamp" -> 
  3.78085552653365`16.330165071646004*^9, "UpdatedTimestamp" -> 
  3.780855526533739`16.330165071646018*^9},
CreateCellID->True,
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, 
       CellTags -> {"MainDockedCell"}], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       Background -> RGBColor[0.996078, 0.941176, 0.921569], 
       CellFrameMargins -> {{39, 5}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CellFrameColor -> GrayLevel[0.75], CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, False]]]}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.458824, 0.458824, 0.458824]], 
   
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.07142857142857142], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYCYpfunOe/V2o6MICBjAOM//GSb5KAhKLD46Wz
jygUaDjIRKVY3+dXgahzUIPTMHGYOpg+XObKgtSfF4Xze6fnCTUf4Ifr/w8G
bHDzn15Quv2z7o89zJ4nIHUbPtnD7IHxYfbA+HJQe2D6J0DtQTGfgR1u/wOo
Opj7HqCZ+wDNXhgf5i6YfpTwAZoP8xfMfpi/5dDCAWYPAFLnobw=
               "], 
               CurveClosed -> {1}]}, 
             JoinForm[{"Miter", 3.25}], 
             Thickness[0.049999999999999996`], 
             RGBColor[0.627441, 0.627441, 0.627441, 1.], StripOnInput -> 
             False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/Tcg88iZOhmHGu7Xx3YXKzm03fzoEzpdGs7nS6q6
eve8lMPjwkBdpVlKDtNeMcWlaUg5bLCT+/XumZKDfHH3s3cNkhD1xsoOydvP
axnrSjrM0+V9eXcqgi+2tCUhlFcFzu+V+XP9TIsKXP8jkPnPVODmg9UbqsLt
97yxfXJHjSrcfWD3LFJ1gLkfxn9jH7F5d64snA9Wby4H139K1mzizNtyqObX
y8PtN2iZ8/3/RXm4+2B8mPthfJj/YPph/oeZDwsfmP2w8IO5Dxa+6OEPAGHh
sd4=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQLeF07vf/KwoOB35VvNh9m88Bxo+YItQUGsrtcErW
bOLMbHEMPky9Qcuc7/8vSjp80F0j/f4cP5xvEy11afdrATjfL0f78Zk/gnC+
jhfnwVVSwnC+lOWP9TMtReD8F6xHa9LMROH8SRvy1QUFxdD4EnA+l8bzeR0a
knD+koMNFkpCUnB+Qq3Nl7tnEXwZkH2d0qjyvjJo7pOF8CXFHX6IXestL0fw
jz1eFOXyR84hZft5LeO7cg4b7OR+vTulAJFPlHeo4X59bPd0BB+iXxrOR/EP
kI/iXyC/aX6cGIOFCJwPdp+oMJwPDt/PgnA+2D1PBOB8WHygxy8Abafrpg==

                "]}]}, 
             FaceForm[
              RGBColor[0.627441, 0.627441, 0.627441, 1.]], StripOnInput -> 
             False]}, ImageSize -> {14., 14.}, 
           PlotRange -> {{0., 14.}, {0., 14.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.07142857142857142], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYCYpfunOe/V2o6MICBjAOM//GSb5KAhKLD46Wz
jygUaDjIRKVY3+dXgahzUIPTMHGYOpg+XObKgtSfF4Xze6fnCTUf4Ifr/w8G
bHDzn15Quv2z7o89zJ4nIHUbPtnD7IHxYfbA+HJQe2D6J0DtQTGfgR1u/wOo
Opj7HqCZ+wDNXhgf5i6YfpTwAZoP8xfMfpi/5dDCAWYPAFLnobw=
               "], 
               CurveClosed -> {1}]}, 
             JoinForm[{"Miter", 3.25}], 
             Thickness[0.049999999999999996`], 
             RGBColor[0.5, 0.5, 0.5, 1.], StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYCYpfunOe/V2o6MICBjAOM//GSb5KAhKLD46Wz
jygUaDjIRKVY3+dXgahzUIPTMHGYOpg+XObKgtSfF4Xze6fnCTUf4Ifr/w8G
bHDzn15Quv2z7o89zJ4nIHUbPtnD7IHxYfbA+HJQe2D6J0DtQTGfgR1u/wOo
Opj7HqCZ+wDNXhgf5i6YfpTwAZoP8xfMfpi/5dDCAWYPAFLnobw=
               "]]}, 
             FaceForm[
              RGBColor[0.5, 0.5, 0.5, 1.]], StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/Tcg88iZOhmHGu7Xx3YXKzm03fzoEzpdGs7nS6q6
eve8lMPjwkBdpVlKDtNeMcWlaUg5bLCT+/XumZKDfHH3s3cNkhD1xsoOydvP
axnrSjrM0+V9eXcqgi+2tCUhlFcFzu+V+XP9TIsKXP8jkPnPVODmg9UbqsLt
97yxfXJHjSrcfWD3LFJ1gLkfxn9jH7F5d64snA9Wby4H139K1mzizNtyqObX
y8PtN2iZ8/3/RXm4+2B8mPthfJj/YPph/oeZDwsfmP2w8IO5Dxa+6OEPAGHh
sd4=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQLeF07vf/KwoOB35VvNh9m88Bxo+YItQUGsrtcErW
bOLMbHEMPky9Qcuc7/8vSjp80F0j/f4cP5xvEy11afdrATjfL0f78Zk/gnC+
jhfnwVVSwnC+lOWP9TMtReD8F6xHa9LMROH8SRvy1QUFxdD4EnA+l8bzeR0a
knD+koMNFkpCUnB+Qq3Nl7tnEXwZkH2d0qjyvjJo7pOF8CXFHX6IXestL0fw
jz1eFOXyR84hZft5LeO7cg4b7OR+vTulAJFPlHeo4X59bPd0BB+iXxrOR/EP
kI/iXyC/aX6cGIOFCJwPdp+oMJwPDt/PgnA+2D1PBOB8WHygxy8Abafrpg==

                "]}]}, 
             FaceForm[
              RGBColor[0.999985, 0.999985, 0.999985, 1.]], StripOnInput -> 
             False]}, ImageSize -> {14., 14.}, 
           PlotRange -> {{0., 14.}, {0., 14.}}, AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
           "\"Click for more information\""}, "PrettyTooltipTemplate"], 
         ButtonFunction :> (If[
            MatchQ[
             CurrentValue[
              ButtonNotebook[], {TaggingRules, "AttachedCells", #}], 
             Blank[CellObject]], NotebookDelete[
              CurrentValue[
               ButtonNotebook[], {TaggingRules, "AttachedCells", #}]]; 
            CurrentValue[
               ButtonNotebook[], {TaggingRules, "AttachedCells", #}] = 
             Inherited, CurrentValue[
               ButtonNotebook[], {TaggingRules, "AttachedCells", #}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ParentCell[
                 EvaluationCell[]], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]; 
            Null]; Null), Appearance -> None, Evaluator -> Automatic, Method -> 
         "Preemptive"], BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.85], 
                 Thickness[
                  NCache[2/45, 0.044444444444444446`]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{
           FunctionResourceTools`BuildDefinitionNotebook`Private`clickTime$$ = 
            0., FunctionResourceTools`BuildDefinitionNotebook`Private`timeout$\
$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[
                    AbsoluteTime[] - 
                    FunctionResourceTools`BuildDefinitionNotebook`Private`\
clickTime$$ > FunctionResourceTools`BuildDefinitionNotebook`Private`timeout$$, 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.65], 
                    Thickness[2/45], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], 
                    Graphics[{
                    RGBColor[0.988235, 0.419608, 0.203922], 
                    Thickness[2/45], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]], 
                    "Click to copy to the clipboard"], 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Graphics[{
                    RGBColor[0, 2/3, 0], 
                    Thickness[2/45], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "Copied"]], UpdateInterval -> 
                    1, TrackedSymbols :> {
                    FunctionResourceTools`BuildDefinitionNotebook`Private`\
clickTime$$}], StandardForm], Evaluator -> "System"], 
                 ButtonFunction :> (
                  FunctionResourceTools`BuildDefinitionNotebook`Private`\
clickTime$$ = AbsoluteTime[]; CopyToClipboard[#2]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[0.537255, 0.537255, 0.537255], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain", StripOnInput -> False], 
          Background -> RGBColor[0.960784, 0.960784, 0.960784], FrameStyle -> 
          RGBColor[0.898039, 0.898039, 0.898039], FrameMargins -> 8, 
          StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], 
        Annotation[#, 
         Framed[
          Style[
          FunctionResourceTools`BuildDefinitionNotebook`Private`$$tooltip, 
           "Text", FontColor -> RGBColor[0.537255, 0.537255, 0.537255], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain"], 
          Background -> RGBColor[0.960784, 0.960784, 0.960784], FrameStyle -> 
          RGBColor[0.898039, 0.898039, 0.898039], FrameMargins -> 8], 
         "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Template Input\"", "Text", FontFamily -> "Source Sans Pro", 
               FontSize -> 11, StripOnInput -> False], 
              "\"Format selection automatically using appropriate \
documentation styles\""}, "PrettyTooltipTemplate"], 
            ButtonFunction :> (
             Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
               Symbol["System`ResourceFunction"]]; Identity[
               FunctionResource`DocuToolsTemplate`FunctionTemplateToggle[]]), 
            FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue["MouseOver"], {FontColor -> RGBColor[1, 1, 1]}, {
               FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
              Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                "], "Byte", ColorSpace -> 
                "RGB", Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
              Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
            RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
            ImageSize -> {All, 20}, Evaluator -> Automatic], 
           ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Literal Input\"", "Text", FontFamily -> "Source Sans Pro", 
               FontSize -> 11, StripOnInput -> False], 
              "\"Format selection as literal Wolfram Language code\""}, 
             "PrettyTooltipTemplate"], 
            ButtonFunction :> (
             Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
               Symbol["System`ResourceFunction"]]; Identity[
               
               FunctionResource`DocuToolsTemplate`\
FunctionTemplateLiteralInput[]]), FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
            Dynamic[
              FEPrivate`If[
               CurrentValue["MouseOver"], {FontColor -> RGBColor[1, 1, 1]}, {
               FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
              Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                "], "Byte", ColorSpace -> 
                "RGB", Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
              Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
            RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
            ImageSize -> {All, 20}, Evaluator -> Automatic], 
           ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Insert Delimiter\"", "Text", FontFamily -> "Source Sans Pro",
                FontSize -> 11, StripOnInput -> False], 
              "\"Insert example delimiter\""}, "PrettyTooltipTemplate"], 
            ButtonFunction :> (
             Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
               Symbol["System`ResourceFunction"]]; Identity[
               FunctionResource`DocuToolsTemplate`DocDelimiter[]]), 
            FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue["MouseOver"], {FontColor -> RGBColor[1, 1, 1]}, {
               FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
              Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                "], "Byte", ColorSpace -> 
                "RGB", Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
              Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
            RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
            ImageSize -> {All, 20}, Evaluator -> Automatic], 
           ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Subscripted Variable\"", "Text", FontFamily -> 
               "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
              "\"Insert subscripted variable placeholder\""}, 
             "PrettyTooltipTemplate"], 
            ButtonFunction :> (
             Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
               Symbol["System`ResourceFunction"]]; Identity[
               FunctionResource`DocuToolsTemplate`InsertSubscript[]]), 
            FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue["MouseOver"], {FontColor -> RGBColor[1, 1, 1]}, {
               FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
              Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                "], "Byte", ColorSpace -> 
                "RGB", Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
              Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                "], "Byte", 
                ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
            RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
            ImageSize -> {All, 20}, Evaluator -> Automatic], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
               "\"Tables\[ThinSpace]\[ThinSpace]\[ThinSpace]\
\[FilledDownTriangle]\"", "Text", FontFamily -> "Source Sans Pro", FontSize -> 
                11, StripOnInput -> False], "\"Table Functions\""}, 
              "PrettyTooltipTemplate"], 
             ButtonFunction :> (
              Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
                Symbol["System`ResourceFunction"]]; 
              FunctionResource`DefinitionNotebook`Private`showProgress[Null]),
              FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue["MouseOver"], {FontColor -> RGBColor[1, 1, 1]}, {
                FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
               Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                 "], "Byte", ColorSpace -> 
                 "RGB", Interleaving -> True], "Hover" -> 
               Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                 "], "Byte", 
                 ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
               Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                 "], "Byte", 
                 ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
             RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
             ImageSize -> {All, 20}, Evaluator -> Automatic], {
            "\"Insert table with two columns\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DocuToolsTemplate`TableInsert[2]]", InputForm], 
             "\"Insert table with three columns\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DocuToolsTemplate`TableInsert[3]]", InputForm], 
             "\"Add a row to the selected table\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
System`FrontEndExecute[{System`FrontEndToken[System`ButtonNotebook[], \
\"NewRow\"]}]]", InputForm], "\"Sort the selected table\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DocuToolsTemplate`TableSort[]]", InputForm], 
             "\"Merge selected tables\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DocuToolsTemplate`TableMerge[]]", InputForm]}, Appearance -> 
            None, Method -> "Queued"], 
           DynamicBox[
            ToBoxes[
             If[
              CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "SubmissionReviewData", "Review"}, False], 
              Button[
               RawBoxes[
                TemplateBox[{
                  StyleBox[
                  "\"Insert Comment\"", "Text", FontFamily -> 
                   "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                  "\"Insert comment for reviewer\""}, 
                 "PrettyTooltipTemplate"]], 
               Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False}, 
                 Symbol["System`ResourceFunction"]]; Identity[
                 FunctionResource`DocuToolsTemplate`InsertComment[]], 
               FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> Dynamic[
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> RGBColor[1, 1, 1]}, {
                  FontColor -> RGBColor[0.92549, 0.498039, 0.235294]}], 
                 Evaluator -> "System"], 
               Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh9mpryfFAVBQDZcMVzZr9un
gFK/H1+BWwFkA0WA4nBlf988A+l9fgvNMUARoDhQFuJaoJYP0xKwOhsoDpRl
AANilBFpGvFuI9KnxIcbMbGABrDGKQDn48Vx
                   "], "Byte", 
                   ColorSpace -> "RGB", Interleaving -> True], "Hover" -> 
                 Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUh8mRbxvd4MgIBuuGK7s1+1T
7zs8fvbb/JkCRUA2UAQoDlf2982zDxNDf05AqIGqnGADFAfKQlwL1PKhwx1N
DQQBxYGyDGBAjDIiTSPebUT6lPhwIyYWiIlTAA7cjww=
                   "], "Byte", 
                   ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
                 Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQ/PvwGo5+3zsPQciCyMqAUu/6wt42OkMQkA1XDFf26/ap
t81urxOUXodLQ1GCElAEKA5X9vfNs3c9wa/jFRFqICheESgOlIW4FqjlXYMz
uhowAooDZRnAgBhlRJpGvNuI9Cnx4UZMLBATpwBrEHs/
                   "], "Byte", 
                   ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
               RGBColor[0.996078, 0.941176, 0.921569], Method -> "Queued", 
               ImageSize -> {All, 20}], ""], StandardForm], Evaluator -> 
            "System", SingleEvaluation -> True], 
           ItemBox["\"\"", ItemSize -> Fit, StripOnInput -> False]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.996078, 0.941176, 0.921569]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {1 -> RGBColor[0.996078, 0.941176, 0.921569]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "ColumnsIndexed" -> {1 -> 0, -1 -> 0}, "Rows" -> {{Automatic}}}, 
         FrameStyle -> GrayLevel[0.75]], "Grid"]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           TagBox[
            GridBox[{{
               GraphicsBox[{
                 Thickness[0.022222222222222223`], {
                  FaceForm[{
                    RGBColor[0.87451, 0.278431, 0.03137260000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{45., 22.5}, {45., 10.073999999999998`}, {34.926, 
                   0.}, {22.5, 0.}, {10.074, 0.}, {0., 10.073999999999998`}, {
                   0., 22.5}, {0., 34.926}, {10.074, 45.}, {22.5, 45.}, {
                   34.926, 45.}, {45., 34.926}, {45., 22.5}}}]}, {
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLcESxqe7SdlhqnN3zvPblg4w/omyffOl/K0cEp9e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcKUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzmAIymNfOAWj43PfpGg45YIV2Dguk9O+qsGlB
9M+0h9gjpgOxh8fBYePc98uPees5MICAggNE/TF9B6Bl574rO0DcMcsAwmd2
cNCM6T/0VcPQAeQsjh6oeWWGEPt97R3UDTnWyMwyhKh7Yefw5S/QB22GEHe1
2zlIg5yTaAh3by7InUKGDmBnLrR1cOkGudzAYZHrts9/Q2wdHi+dfUShwMBh
Q1HGxLcytg5BO+RaXwsaQN1r6/BdA2jRVn1oeNk6aIEcWq4HcccvWwfTuF2e
PEy6UPPtHIC+CH68VBvOP70QaNFeLTg/T6j5wKlELYdPl3yTBCLsIOGkowVx
71tbhycg93zQdAjonZ4ndNgGzgern2ENVw90TZVInhUkfqy1IO65ZQl3L4wP
iW99B/NOx4SnEyzh4Q+W32XhcBUc0PoQd7dawM1D568H2cdnCOd/A9nzVc/h
I9hdWg4ZoIg6oueQD/Kfoh40nSD4fkDfWpboQOw7oYDBh6mHxIcy3DxYek4A
peOfCD7MPTA+zL0yUSnW9/sV4Hxw/DgpQOL7igUkfi8qwsMHAHSDTZ8=
                    
                    "], {{19.051000000000002`, 14.242}, {19.051000000000002`, 
                    27.594}, {23.828, 27.594}, {23.828, 26.543}, {21.426, 
                    26.308999999999997`}, {21.375, 26.258000000000003`}, {
                    21.375, 24.219}, {21.375, 17.535000000000004`}, {21.375, 
                    15.602}, {21.426, 15.547}, {23.828, 
                    15.315999999999999`}, {23.828, 14.242}}, {{24.578, 
                    18.75}, {24.578, 23.078000000000003`}, {24.578, 23.539}, {
                    24.953, 23.914}, {25.418, 23.91}, {29.746, 23.91}, {
                    30.203, 23.91}, {30.578, 23.539}, {30.578, 
                    23.078000000000003`}, {30.578, 18.75}, {
                    30.581999999999997`, 18.288999999999998`}, {30.207, 
                    17.91}, {29.746, 17.91}, {25.418, 17.91}, {24.953, 
                    17.906}, {24.574, 18.285}, {24.578, 18.75}}, {{31.328, 
                    14.242}, {31.328, 15.315999999999999`}, {33.684, 
                    15.539000000000001`}, {33.789, 15.602}, {33.789, 
                    17.641}, {33.789, 24.188}, {33.789, 26.227}, {33.684, 
                    26.281}, {31.328, 26.512000000000004`}, {31.328, 
                    27.586}, {36.113, 27.586}, {36.113, 
                    14.234000000000002`}}}]}}, {
                ImageSize -> {Automatic, 32}, 
                 ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                 Scaled[0.25], Background -> 
                 RGBColor[0.988235, 0.419608, 0.203922], AspectRatio -> 
                 Automatic, ImageSize -> {45., 45.}, 
                 PlotRange -> {{0., 45.}, {0., 45.}}}], 
               StyleBox[
                TagBox[
                 GridBox[{{
                    StyleBox[
                    "\"Function Resource\"", FontFamily -> 
                    "Source Sans Pro SemiBold", FontWeight -> "SemiBold", 
                    StripOnInput -> False], 
                    StyleBox[
                    "\"DEFINITION NOTEBOOK\"", FontFamily -> 
                    "Source Sans Pro", FontTracking -> "SemiCondensed", 
                    FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxDividers -> {
                   "ColumnsIndexed" -> {2 -> GrayLevel[1]}, 
                    "Rows" -> {{None}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], FontSize -> 24, FontColor -> GrayLevel[1], 
                StripOnInput -> False]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", 
           ItemBox[
            TemplateBox[{
              StyleBox[
              "\"Function Repository \[RightGuillemet]  \"", "Text", 
               FontColor -> GrayLevel[1], StripOnInput -> False], 
              "https://resources.wolframcloud.com/FunctionRepository/"}, 
             "HyperlinkURL"], Alignment -> {Right, Bottom}, StripOnInput -> 
            False]}, {
           TemplateBox[{
             
             TemplateBox[{
              "\"Open Sample\"", 
               "\"View a completed sample definition notebook\""}, 
              "PrettyTooltipTemplate"], 
             
             FunctionResource`DefinitionNotebook`Private`viewExampleNotebook[]\
& , "\"View a completed sample definition notebook\"", True}, 
            "OrangeButtonTemplate"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Style Guidelines\"", 
               "\"View general guidelines for authoring resource \
functions\""}, "PrettyTooltipTemplate"], 
             FunctionResource`DefinitionNotebook`Private`viewStyleGuidelines[]\
& , "\"View general guidelines for authoring resource functions\"", True}, 
            "OrangeButtonTemplate"], 
           TemplateBox[{
             TemplateBox[{
               TagBox[
                GridBox[{{"\"Tools\"", 
                   PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{0., 0.65}, {0., -0.65}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 12, 
                    PlotRangePadding -> None, Background -> None], True -> 
                    GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 12, 
                    PlotRangePadding -> None, Background -> None]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[0.1]]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
               "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"], 
             FunctionResource`DefinitionNotebook`Private`getResource[
              ButtonNotebook[], "Tools"]& , 
             "\"Toggle documentation toolbar\"", False}, 
            "OrangeButtonTemplate"], 
           TagBox[
            
            GridBox[{{"\"\"", "\"\""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxDividers -> {
              "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{2}}},
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
             RGBColor[0.994118, 0.709804, 0.601961]], "Grid"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Check\"", "\"Check notebook for potential errors\""}, 
              "PrettyTooltipTemplate"], 
             FunctionResource`DefinitionNotebook`Private`checkNotebook[
              ButtonNotebook[]]& , "\"Check notebook for potential errors\"", 
             True}, "OrangeButtonTemplate"], 
           ActionMenuBox[
            
            TemplateBox[{
             "\"Preview \[FilledDownTriangle]\"", Null& , "\"\"", True}, 
             "OrangeButtonTemplate"], {
            "\"In a notebook\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"Preview\"]]", InputForm], "\"On the cloud\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"Cloud\"]]", InputForm]}, Appearance -> None, Method -> "Queued"], 
           ActionMenuBox[
            
            TemplateBox[{
             "\"Deploy \[FilledDownTriangle]\"", Null& , "\"\"", True}, 
             "OrangeButtonTemplate"], {
            "\"Locally on this computer\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"Local\"]]", InputForm], "\"For my cloud account\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"Cloud\"]]", InputForm], "\"Publicly in the cloud\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"CloudPublic\"]]", InputForm], 
             "\"In this session only (without documentation)\"" :> 
             ToExpression[
              "System`Block[{ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = System`False}, \
System`Symbol[\"System`ResourceFunction\"]; \
FunctionResource`DefinitionNotebook`Private`getResource[System`ButtonNotebook[\
], \"KernelSession\"]]", InputForm]}, Appearance -> None, Method -> "Queued"], 
           ItemBox[
            StyleBox[
             DynamicBox[
              ToBoxes[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
               StandardForm], Evaluator -> "System", Initialization :> If[
                Not[$CloudEvaluation], CurrentValue[
                  EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
                ""]], "Text", 
             GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
            StripOnInput -> False], 
           DynamicBox[
            ToBoxes[
             If[
              CurrentValue[
               EvaluationNotebook[], {
               TaggingRules, "SubmissionReviewData", "Review"}, False], 
              RawBoxes[
               TemplateBox[{
                 TemplateBox[{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349206349206349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, 
                    FaceForm[
                    RGBColor[0.960784, 0.705882, 0.498039, 1.]], StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, 
                    FaceForm[
                    RGBColor[1., 1., 1., 1.]], StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit Update\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> F\
alse, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                   "\"Submit changes to update your resource submission\""}, 
                  "PrettyTooltipTemplate"], 
                 FunctionResource`DefinitionNotebook`Private`\
submitRepositoryUpdate[
                  ButtonNotebook[]]& , 
                 "\"Submit changes to update your resource submission\"", 
                 True}, "OrangeButtonTemplate"]], 
              RawBoxes[
               TemplateBox[{
                 TemplateBox[{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349206349206349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, 
                    FaceForm[
                    RGBColor[0.960784, 0.705882, 0.498039, 1.]], StripOnInput -> 
                    False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, 
                    FaceForm[
                    RGBColor[1., 1., 1., 1.]], StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit to Repository\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                   "\"Submit your function to the Wolfram Function Repository\
\""}, "PrettyTooltipTemplate"], 
                 FunctionResource`DefinitionNotebook`Private`submitRepository[
                 
                  ButtonNotebook[]]& , 
                 "\"Submit your function to the Wolfram Function \
Repository\"", True}, "OrangeButtonTemplate"]]], StandardForm], Evaluator -> 
            "System", SingleEvaluation -> True]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.988235, 0.419608, 0.203922], 
             RGBColor[0.921569, 0.341176, 0.105882]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {
            1 -> RGBColor[0.988235, 0.419608, 0.203922], 2 -> 
             RGBColor[0.921569, 0.341176, 0.105882]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "Columns" -> {5, {0.9}, 5}, 
           "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 1.55}}, FrameStyle -> 
         RGBColor[0.988235, 0.419608, 0.203922]], "Grid"]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{
               Thickness[0.022222222222222223`], {
                FaceForm[{
                  RGBColor[0.87451, 0.278431, 0.03137260000000001], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{45., 22.5}, {45., 10.073999999999998`}, {34.926, 
                 0.}, {22.5, 0.}, {10.074, 0.}, {0., 10.073999999999998`}, {
                 0., 22.5}, {0., 34.926}, {10.074, 45.}, {22.5, 45.}, {34.926,
                  45.}, {45., 34.926}, {45., 22.5}}}]}, {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                  2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLcESxqe7SdlhqnN3zvPblg4w/omyffOl/K0cEp9e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcKUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzmAIymNfOAWj43PfpGg45YIV2Dguk9O+qsGlB
9M+0h9gjpgOxh8fBYePc98uPees5MICAggNE/TF9B6Bl574rO0DcMcsAwmd2
cNCM6T/0VcPQAeQsjh6oeWWGEPt97R3UDTnWyMwyhKh7Yefw5S/QB22GEHe1
2zlIg5yTaAh3by7InUKGDmBnLrR1cOkGudzAYZHrts9/Q2wdHi+dfUShwMBh
Q1HGxLcytg5BO+RaXwsaQN1r6/BdA2jRVn1oeNk6aIEcWq4HcccvWwfTuF2e
PEy6UPPtHIC+CH68VBvOP70QaNFeLTg/T6j5wKlELYdPl3yTBCLsIOGkowVx
71tbhycg93zQdAjonZ4ndNgGzgern2ENVw90TZVInhUkfqy1IO65ZQl3L4wP
iW99B/NOx4SnEyzh4Q+W32XhcBUc0PoQd7dawM1D568H2cdnCOd/A9nzVc/h
I9hdWg4ZoIg6oueQD/Kfoh40nSD4fkDfWpboQOw7oYDBh6mHxIcy3DxYek4A
peOfCD7MPTA+zL0yUSnW9/sV4Hxw/DgpQOL7igUkfi8qwsMHAHSDTZ8=
                  
                  "], {{19.051000000000002`, 14.242}, {19.051000000000002`, 
                  27.594}, {23.828, 27.594}, {23.828, 26.543}, {21.426, 
                  26.308999999999997`}, {21.375, 26.258000000000003`}, {
                  21.375, 24.219}, {21.375, 17.535000000000004`}, {21.375, 
                  15.602}, {21.426, 15.547}, {23.828, 15.315999999999999`}, {
                  23.828, 14.242}}, {{24.578, 18.75}, {24.578, 
                  23.078000000000003`}, {24.578, 23.539}, {24.953, 23.914}, {
                  25.418, 23.91}, {29.746, 23.91}, {30.203, 23.91}, {30.578, 
                  23.539}, {30.578, 23.078000000000003`}, {30.578, 18.75}, {
                  30.581999999999997`, 18.288999999999998`}, {30.207, 
                  17.91}, {29.746, 17.91}, {25.418, 17.91}, {24.953, 
                  17.906}, {24.574, 18.285}, {24.578, 18.75}}, {{31.328, 
                  14.242}, {31.328, 15.315999999999999`}, {33.684, 
                  15.539000000000001`}, {33.789, 15.602}, {33.789, 17.641}, {
                  33.789, 24.188}, {33.789, 26.227}, {33.684, 26.281}, {
                  31.328, 26.512000000000004`}, {31.328, 27.586}, {36.113, 
                  27.586}, {36.113, 14.234000000000002`}}}]}}, {
              ImageSize -> 12, Background -> None, AspectRatio -> Automatic, 
               ImageSize -> {45., 45.}, PlotRange -> {{0., 45.}, {0., 45.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        StyleBox[#, "Text", FontFamily -> "Source Sans Pro SemiBold", 
         FontWeight -> "SemiBold", FontTracking -> -0.9, FontSize -> 13, 
         FontColor -> GrayLevel[1], StripOnInput -> False], ButtonFunction :> 
        Block[{ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
           False}, Symbol["System`ResourceFunction"]; If[
            TrueQ[#4], CurrentValue[
               ButtonNotebook[], {TaggingRules, "StatusMessage"}] = 
             ProgressIndicator[Appearance -> "Necklace"]; 
            FunctionResource`DefinitionNotebook`Private`showProgress, 
            Identity][
            #2[]]], FrameMargins -> {{5, 5}, {0, 0}}, 
        Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQvA6XhqPngeIQhCyIrAwodd2K5Yo5IwQB2XDFcGXPA8Wu
WjBdNmVARkARoDhCWZjUdUsWNDUQBBQHykJcC9RyxRzdKAgCigNlGcCAGGVE
mka824j1KdHhRkwsEBOnAMp0Eag=
            "], "Byte", ColorSpace -> "RGB", 
            Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQvA6XhqMHARIQhCyIrAwotdGIa7UuOwQB2XDFcGX3/MXX
6LEv12ZDRkARoDhc2ctQqQ1GnGhqIAgoDpSFuBarUcgGMoABMcqINI14txHp
U+LDjZhYICZOAZ5bBHA=
            "], "Byte", ColorSpace -> "RGB", 
            Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQvA6XhqN3hfYQhCyIrAwo9e36ma8PbkIQkA1XDFf2vtzt
28Obu6Jsl2uzQRCQDRQBisOVvYlR+nr99I5gU7gaCAKKAMWBshDXArV8vnUR
TQ0EAcWBsgxgQIwyIk0j3m1E+pT4cCMmFoiJUwBDsjmM
            "], "Byte", 
            ColorSpace -> "RGB", Interleaving -> True]}, Background -> 
        RGBColor[0.921569, 0.341176, 0.105882], Method -> "Queued", 
        ImageSize -> {All, 23}, Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              AdjustmentBox[
               TemplateBox[{
                 ActionMenuBox[
                  TagBox[
                   PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                   MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                  Method -> "Queued"], "\"View suggestions\""}, 
                "PrettyTooltipTemplate"], BoxBaselineShift -> -0.3]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -1.}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro SemiBold", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05555555555555555], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh4qXaoYcOfoO
m+a+X37stKZDbP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4PzZRxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA8nn+Z
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.175292500000001, 
             7.416875}, {7.796855000000001, 11.3084375}, {7.796855000000001, 
             13.38}, {10.11998, 13.38}, {10.11998, 11.3084375}, {
             9.741542500000001, 7.416875}, {8.175292500000001, 
             7.416875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cTvZcLf/4oOD6tE1rk/5HNQjDzAkqeL4FsusdsW
1KjgwAAGAg7hCSdehX2Xd5BvfR24Q07QwaZCOJPjjZyDHdf1xQW2Qg56LJYa
iWlyDv2HvmrEzBeG80GmVbmIwvkvtjT6Sb8Qg+t/BLLPUwJuPti6DEm4/WD7
2qTg7gMZJyIm7QBzP4y/zEVob88lJTi/7+dk7hV1ynD9c3LzfPxZVODmr3ro
0futUwVu/0bpbbqnzqjA3Qfjw9wP48P8B9MP8z/MfFj4wOyHhR/MfbDwRQ9/
ACBxmlc=
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {
     "ReturnKeyDown" :> 
      With[{FunctionResourceTools`BuildDefinitionNotebook`Private`nb = 
         Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; 
        NotebookWrite[
         FunctionResourceTools`BuildDefinitionNotebook`Private`nb, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[
         FunctionResourceTools`BuildDefinitionNotebook`Private`nb, Before, 
          CellContents]; Null], {"KeyDown", "\t"} :> Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {
     "ReturnKeyDown" :> 
      With[{FunctionResourceTools`BuildDefinitionNotebook`Private`nb = 
         Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; 
        NotebookWrite[
         FunctionResourceTools`BuildDefinitionNotebook`Private`nb, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[
         FunctionResourceTools`BuildDefinitionNotebook`Private`nb, Before, 
          CellContents]; Null], {"KeyDown", "\t"} :> Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, StyleKeyMapping -> {}, 
    DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> False, 
    GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None, FontSize -> 14], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.921569, 0.341176, 0.105882]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.614379, 0.227451, 0.0705882]], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.854902, 0.396078, 0.145098], 
       RGBColor[0.0196078, 0.286275, 0.65098]]]], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.905882]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, CellFrameColor -> 
    RGBColor[0.880722, 0.611041, 0.142051], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.9821083, 0.94165615, 0.87130765]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    CellFrameColor -> RGBColor[0.368417, 0.506779, 0.709798], Background -> 
    RGBColor[0.90526255, 0.92601685, 0.9564697]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    CellFrameColor -> RGBColor[0.560181, 0.691569, 0.194885], Background -> 
    RGBColor[0.9340271499999999, 0.95373535, 0.87923275]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False]}, Visible -> 
  False, FrontEndVersion -> "12.0 for Linux x86 (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Title"->{
  Cell[558, 20, 50, 1, 70, "Title",ExpressionUUID->"829fea5e-279c-4d38-a281-264779ae48e1",
   CellTags->"Title"]},
 "Description"->{
  Cell[611, 23, 67, 1, 70, "Text",ExpressionUUID->"7c5a26a5-1c1f-4698-b2e6-31fb75e2359b",
   CellTags->"Description"]},
 "Definition"->{
  Cell[703, 28, 887, 21, 70, "Section",ExpressionUUID->"6dd15086-ffed-4168-a1d4-db483fa65d80",
   CellTags->"Definition",
   CellID->474513213]},
 "Documentation"->{
  Cell[35400, 840, 99, 3, 70, "Section",ExpressionUUID->"964c09c3-3d82-494d-b413-c0a483e564b8",
   CellTags->"Documentation",
   CellID->855965831]},
 "Usage"->{
  Cell[35524, 847, 1650, 42, 70, "Subsection",ExpressionUUID->"0dba1727-0d6c-4314-941e-ca799764e91c",
   CellTags->"Usage",
   CellID->643497520]},
 "Details & Options"->{
  Cell[37374, 902, 1131, 24, 70, "Subsection",ExpressionUUID->"8a571452-14f6-46f3-89b2-b61272fa03cc",
   CellTags->"Details & Options",
   CellID->66019318]},
 "TabNext"->{
  Cell[38508, 928, 852, 17, 70, "Notes",ExpressionUUID->"1c1be360-1cff-4a66-8015-fa7ed0344882",
   CellTags->"TabNext",
   CellID->521904482],
  Cell[2505993, 42383, 508, 8, 70, "Item",ExpressionUUID->"1d0f4219-f971-499c-b6c1-515a8910b9ed",
   CellTags->"TabNext",
   CellID->960273585],
  Cell[2552750, 43465, 509, 8, 70, "Text",ExpressionUUID->"31f533c4-4e40-4b4c-a812-73f8ba45d20f",
   CellTags->"TabNext",
   CellID->567921317],
  Cell[2554019, 43499, 495, 8, 70, "Text",ExpressionUUID->"a7b2c1ed-faa4-4ac9-b20d-1f50ba930948",
   CellTags->"TabNext",
   CellID->920818074]},
 "Examples"->{
  Cell[48838, 1204, 6400, 143, 70, "Section",ExpressionUUID->"626b4e40-5b6d-4037-b009-2b7a0a23c9f4",
   CellTags->"Examples",
   CellID->180595041]},
 "Source & Additional Information"->{
  Cell[2502543, 42260, 135, 3, 70, "Section",ExpressionUUID->"19feb75b-485c-4afc-8fa9-fa87e8337ebc",
   CellTags->"Source & Additional Information",
   CellID->318391102]},
 "Contributed By"->{
  Cell[2502703, 42267, 683, 18, 70, "Subsection",ExpressionUUID->"e1f6c044-9352-4cd7-b1a4-f3aa2cd5ea55",
   CellTags->"Contributed By",
   CellID->127820888]},
 "Keywords"->{
  Cell[2503455, 42292, 684, 18, 70, "Subsection",ExpressionUUID->"a6f996eb-6969-40f6-8135-57582bcd1f7d",
   CellTags->"Keywords",
   CellID->547400482]},
 "Categories"->{
  Cell[2504202, 42317, 126, 4, 70, "Subsection",ExpressionUUID->"7baf79fa-9a6b-4803-9eb6-4455ce71026a",
   CellTags->"Categories",
   CellID->749076926]},
 "Related Symbols"->{
  Cell[2504466, 42332, 661, 18, 70, "Subsection",ExpressionUUID->"ad634f84-0ba5-4d9e-b835-974fac416fe8",
   CellTags->"Related Symbols",
   CellID->161079978]},
 "Related Resource Objects"->{
  Cell[2505279, 42363, 711, 18, 70, "Subsection",ExpressionUUID->"1820322b-fd90-4269-a083-5cd5e9e9accd",
   CellTags->"Related Resource Objects",
   CellID->588449267]},
 "Source/Reference Citation"->{
  Cell[2506538, 42396, 762, 19, 70, "Subsection",ExpressionUUID->"a7dee06a-21cd-480f-914c-21dfe70be617",
   CellTags->"Source/Reference Citation",
   CellID->642091068]},
 "Links"->{
  Cell[2507528, 42426, 614, 18, 70, "Subsection",ExpressionUUID->"e51fa0bc-a6b8-43c9-b197-79a968554beb",
   CellTags->"Links",
   CellID->521525586]},
 "Tests"->{
  Cell[2508413, 42456, 767, 20, 70, "Subsection",ExpressionUUID->"cb89aa62-f1de-446c-95f1-77c3aad7d0d4",
   CellTags->"Tests",
   CellID->74308299]},
 "Author Notes"->{
  Cell[2552620, 43459, 127, 4, 70, "Section",ExpressionUUID->"916b349e-9698-44ed-8621-fee6d6f88703",
   CellTags->"Author Notes",
   CellID->795110225]},
 "Submission Notes"->{
  Cell[2553296, 43478, 720, 19, 70, "Section",ExpressionUUID->"e0ad1eeb-9b8d-4090-9fa8-2fc63378024c",
   CellTags->"Submission Notes",
   CellID->843283583]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Title", 2626802, 44900},
 {"Description", 2626935, 44903},
 {"Definition", 2627072, 44906},
 {"Documentation", 2627238, 44910},
 {"Usage", 2627400, 44914},
 {"Details & Options", 2627572, 44918},
 {"TabNext", 2627745, 44922},
 {"Examples", 2628339, 44935},
 {"Source & Additional Information", 2628527, 44939},
 {"Contributed By", 2628721, 44943},
 {"Keywords", 2628896, 44947},
 {"Categories", 2629067, 44951},
 {"Related Symbols", 2629244, 44955},
 {"Related Resource Objects", 2629436, 44959},
 {"Source/Reference Citation", 2629638, 44963},
 {"Links", 2629821, 44967},
 {"Tests", 2629984, 44971},
 {"Author Notes", 2630153, 44975},
 {"Submission Notes", 2630330, 44979}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 50, 1, 70, "Title",ExpressionUUID->"829fea5e-279c-4d38-a281-264779ae48e1",
 CellTags->"Title"],
Cell[611, 23, 67, 1, 70, "Text",ExpressionUUID->"7c5a26a5-1c1f-4698-b2e6-31fb75e2359b",
 CellTags->"Description"],
Cell[CellGroupData[{
Cell[703, 28, 887, 21, 70, "Section",ExpressionUUID->"6dd15086-ffed-4168-a1d4-db483fa65d80",
 CellTags->"Definition",
 CellID->474513213],
Cell[1593, 51, 2531, 65, 70, "Input",ExpressionUUID->"d187fa7e-43ce-4c29-9357-12b8e5206c03",
 CellID->68469169],
Cell[4127, 118, 841, 21, 70, "Input",ExpressionUUID->"67cf871a-85c2-4612-b58d-f3f8188a3cfa",
 CellID->1961522917],
Cell[4971, 141, 3386, 79, 70, "Input",ExpressionUUID->"1e7397ae-4fd0-47f8-9557-5625356c01c8",
 CellID->299579828],
Cell[8360, 222, 3889, 98, 70, "Input",ExpressionUUID->"832b45aa-d1ed-4cd2-9fd5-684db21ee659",
 CellID->1736113201],
Cell[12252, 322, 1508, 23, 70, "Input",ExpressionUUID->"4363f157-ca41-4860-993e-17b1c4a4a68f",
 CellID->398101051],
Cell[13763, 347, 353, 9, 70, "Input",ExpressionUUID->"d014879b-3fd8-4de7-9b37-b4156db56311",
 CellID->1815363322],
Cell[14119, 358, 441, 10, 70, "Input",ExpressionUUID->"bd8ec881-1e72-4175-b685-75ad73bd4bfb",
 CellID->237276367],
Cell[14563, 370, 360, 9, 70, "Input",ExpressionUUID->"fd9e74f1-6831-47d1-972b-302992a13a36",
 CellID->368738492],
Cell[14926, 381, 1685, 29, 70, "Input",ExpressionUUID->"14810613-d224-46b7-80fb-a5fac52d3cf5",
 CellID->647426583],
Cell[16614, 412, 848, 19, 70, "Input",ExpressionUUID->"d9d11e53-2364-438c-8e16-806a81ab91eb",
 CellID->534216816],
Cell[17465, 433, 7808, 182, 70, "Input",ExpressionUUID->"606a5eaf-0dd2-4c43-a75b-499f3c4d5e6c",
 CellID->180484729],
Cell[25276, 617, 889, 15, 70, "Input",ExpressionUUID->"8e77ee4f-1800-41ad-885e-4929be58187d",
 CellID->1324200482],
Cell[26168, 634, 962, 17, 70, "Input",ExpressionUUID->"c27a32cd-7f2d-4349-aca7-9abb89f4ec58",
 CellID->1482419059],
Cell[27133, 653, 8252, 184, 70, "Input",ExpressionUUID->"555175b5-5e88-4f02-8684-6d06647f9165",
 CellID->1328355169]
}, Open  ]],
Cell[35400, 840, 99, 3, 70, "Section",ExpressionUUID->"964c09c3-3d82-494d-b413-c0a483e564b8",
 CellTags->"Documentation",
 CellID->855965831],
Cell[CellGroupData[{
Cell[35524, 847, 1650, 42, 70, "Subsection",ExpressionUUID->"0dba1727-0d6c-4314-941e-ca799764e91c",
 CellTags->"Usage",
 CellID->643497520],
Cell[CellGroupData[{
Cell[37199, 893, 67, 1, 70, "UsageInputs",ExpressionUUID->"eb4a8333-750c-485a-9515-9a8dbe34514d"],
Cell[37269, 896, 56, 0, 70, "UsageDescription",ExpressionUUID->"719555a5-eade-40a8-b6f8-8e2c39ec8d2d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37374, 902, 1131, 24, 70, "Subsection",ExpressionUUID->"8a571452-14f6-46f3-89b2-b61272fa03cc",
 CellTags->"Details & Options",
 CellID->66019318],
Cell[38508, 928, 852, 17, 70, "Notes",ExpressionUUID->"1c1be360-1cff-4a66-8015-fa7ed0344882",
 CellTags->"TabNext",
 CellID->521904482],
Cell[39363, 947, 1411, 31, 70, "Notes",ExpressionUUID->"198b496b-5beb-473f-8c5b-e9c7e79098a0",
 CellID->81468097],
Cell[40777, 980, 2932, 68, 70, "TableNotes",ExpressionUUID->"74aa85f3-5641-4b3d-9796-3f910aaf40f4",
 CellID->1507942041],
Cell[43712, 1050, 5089, 149, 70, "Notes",ExpressionUUID->"621da329-cc16-4516-b230-05f15c000e7a",
 CellID->1341278363]
}, Open  ]],
Cell[CellGroupData[{
Cell[48838, 1204, 6400, 143, 70, "Section",ExpressionUUID->"626b4e40-5b6d-4037-b009-2b7a0a23c9f4",
 CellTags->"Examples",
 CellID->180595041],
Cell[CellGroupData[{
Cell[55263, 1351, 79, 2, 70, "Subsection",ExpressionUUID->"b719dbe4-a170-4e8a-8e4b-a04d4a847e4c",
 CellID->462042388],
Cell[55345, 1355, 137, 2, 70, "Text",ExpressionUUID->"10fd3d97-42c0-4dcd-94b6-6c26d8d87592",
 CellID->13078159],
Cell[CellGroupData[{
Cell[55507, 1361, 517, 9, 70, "Input",ExpressionUUID->"dcbb2ea4-fe14-40ff-9a31-6dea69b8a1f2",
 CellID->443871870],
Cell[56027, 1372, 3610, 61, 70, "Output",ExpressionUUID->"78b422e5-0676-4fe1-9441-66f270b05237",
 CellID->1785267929]
}, Open  ]],
Cell[59652, 1436, 161, 2, 70, "Text",ExpressionUUID->"d14ebf07-ef21-4c8b-b63c-d2e252055922",
 CellID->1857041771],
Cell[CellGroupData[{
Cell[59838, 1442, 541, 11, 70, "Input",ExpressionUUID->"343649f8-120a-4878-9d31-324d18d51818",
 CellID->1006543421],
Cell[60382, 1455, 2890, 49, 70, "Output",ExpressionUUID->"4e3d90a7-c7ed-498f-aaa3-94dd3bb62c5f",
 CellID->356566819]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[63321, 1510, 136, 3, 70, "Subsection",ExpressionUUID->"2c5d2326-2ed9-4983-bc0a-66dec2e1eef9",
 CellID->555722944],
Cell[63460, 1515, 495, 9, 70, "Text",ExpressionUUID->"40999b2c-b015-4cfc-8283-b67f90a29d34",
 CellID->396379541],
Cell[CellGroupData[{
Cell[63980, 1528, 126, 3, 70, "ExampleDelimiter",ExpressionUUID->"484e59b5-93f9-4b1c-886f-f90e2d15e98e",
 CellID->1616697876],
Cell[64109, 1533, 488, 9, 70, "Text",ExpressionUUID->"81edcc1b-cba2-4aa9-9b4c-de0f2645c79b",
 CellID->205003358],
Cell[CellGroupData[{
Cell[64622, 1546, 837, 17, 70, "Input",ExpressionUUID->"12680e07-374b-4a2f-bb6f-fd341d801685",
 CellID->1827208279],
Cell[65462, 1565, 12244, 206, 70, "Output",ExpressionUUID->"ad3764cf-018d-4eec-80e2-27d7d1ce86eb",
 CellID->1339151803]
}, Open  ]],
Cell[CellGroupData[{
Cell[77743, 1776, 987, 20, 70, "Input",ExpressionUUID->"77c649f7-a3f5-4ebc-9e9b-7029bb118122",
 CellID->358079763],
Cell[78733, 1798, 12928, 218, 70, "Output",ExpressionUUID->"558229be-5117-4433-bdf7-d2b5da28686a",
 CellID->1495732461]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[91710, 2022, 126, 3, 70, "ExampleDelimiter",ExpressionUUID->"bc6bf273-3b0d-4403-bc03-49bf7280eb46",
 CellID->1534391003],
Cell[91839, 2027, 243, 6, 70, "Text",ExpressionUUID->"65889313-625e-4174-b6fc-b7f7dbf184ea",
 CellID->1525954245],
Cell[CellGroupData[{
Cell[92107, 2037, 928, 19, 70, "Input",ExpressionUUID->"afa46bd8-876c-4432-a67d-acae4a7b3b6c",
 CellID->669079167],
Cell[93038, 2058, 25783, 429, 70, "Output",ExpressionUUID->"83588cb6-2449-4cff-b6b2-ee6bc6441592",
 CellID->331900245]
}, Open  ]],
Cell[CellGroupData[{
Cell[118858, 2492, 1040, 21, 70, "Input",ExpressionUUID->"775f050b-2d34-4260-8756-69c630d07f68",
 CellID->1730229550],
Cell[119901, 2515, 29161, 479, 70, "Output",ExpressionUUID->"513aaf2c-96c9-458f-b5e5-3802bdb6f543",
 CellID->1232386456]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149123, 3001, 72, 2, 70, "Subsection",ExpressionUUID->"d6e20149-21a5-420b-8e73-bf3dd93b48b3",
 CellID->776923543],
Cell[CellGroupData[{
Cell[149220, 3007, 82, 2, 70, "Subsubsection",ExpressionUUID->"2b1c5346-088b-474d-ac1a-bde154f84414",
 CellID->1483442460],
Cell[149305, 3011, 2342, 72, 70, "Text",ExpressionUUID->"d1445135-cd6d-4cb5-acf2-089ba7489ac3",
 CellID->343138894],
Cell[151650, 3085, 306, 8, 70, "Text",ExpressionUUID->"3e45aaa1-fe8a-41e5-95f2-85331f289bed",
 CellID->1275709849],
Cell[151959, 3095, 173, 4, 70, "Text",ExpressionUUID->"f22c91a6-ca8b-4184-91b2-a22a67e3c994",
 CellID->844764130],
Cell[CellGroupData[{
Cell[152157, 3103, 866, 22, 70, "Input",ExpressionUUID->"1ca19551-d83c-4531-9788-12730714122c",
 CellID->1794786791],
Cell[153026, 3127, 13450, 217, 70, "Output",ExpressionUUID->"24af2ecd-e928-4300-b6ce-1ec4dc0a0ddd",
 CellID->239390677]
}, Open  ]],
Cell[166491, 3347, 277, 5, 70, "Text",ExpressionUUID->"3f8f37a9-98e0-4eb3-be45-f469fc02f74f",
 CellID->2083897094],
Cell[CellGroupData[{
Cell[166793, 3356, 1391, 30, 70, "Input",ExpressionUUID->"5118de0e-52fd-4578-939f-3082fca4623f",
 CellID->957107712],
Cell[168187, 3388, 29534, 484, 70, "Output",ExpressionUUID->"5ef18f44-f279-4f7a-8a64-ee4490fb1fdc",
 CellID->1202237508]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197770, 3878, 254, 5, 70, "Subsubsection",ExpressionUUID->"54345083-580f-4284-bd87-cc79b1acf4c9",
 CellID->131236541],
Cell[198027, 3885, 397, 9, 70, "Text",ExpressionUUID->"489d542c-5cab-4068-91be-220020e99f4b",
 CellID->607542971],
Cell[CellGroupData[{
Cell[198449, 3898, 1298, 27, 70, "Input",ExpressionUUID->"4808f585-dfa7-4809-b210-db048d431f3f",
 CellID->226839118],
Cell[199750, 3927, 15396, 258, 70, "Output",ExpressionUUID->"c126a36e-ab14-4fbe-a8bc-0111e49a1e1b",
 CellID->332162333]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[215195, 4191, 294, 5, 70, "Subsubsection",ExpressionUUID->"e59f31d4-34e5-4f95-b804-53986d090a69",
 CellID->179610317],
Cell[215492, 4198, 401, 10, 70, "Text",ExpressionUUID->"ea85706c-3498-4e52-a887-3c6515485397",
 CellID->1496073784],
Cell[CellGroupData[{
Cell[215918, 4212, 1337, 27, 70, "Input",ExpressionUUID->"98d99466-5166-43e2-affd-3973dd48378e",
 CellID->1773548612],
Cell[217258, 4241, 5638, 102, 70, "Output",ExpressionUUID->"a383ac27-7dfe-44aa-b62d-b9a02d496313",
 CellID->1342332178]
}, Open  ]],
Cell[CellGroupData[{
Cell[222933, 4348, 1361, 27, 70, "Input",ExpressionUUID->"3b565152-5778-445b-b298-d6f7cecf4fb5",
 CellID->1801385332],
Cell[224297, 4377, 5772, 106, 70, "Output",ExpressionUUID->"b1989a29-dd3c-4e47-a87f-6fe91584689e",
 CellID->1261203911]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[230118, 4489, 202, 4, 70, "Subsubsection",ExpressionUUID->"d3085feb-ae30-4b52-86aa-de9d1fdb69f8",
 CellID->2007040362],
Cell[230323, 4495, 495, 12, 70, "Text",ExpressionUUID->"837c3d0b-4d4f-45cb-bfa5-90cf6c704120",
 CellID->738370878],
Cell[CellGroupData[{
Cell[230843, 4511, 1114, 25, 70, "Input",ExpressionUUID->"994c2f6a-98c0-4123-b948-3215c392bfe5",
 CellID->638512766],
Cell[231960, 4538, 10650, 196, 70, "Output",ExpressionUUID->"1595e103-a850-429b-b8e8-4df2fef2e307",
 CellID->1390536287]
}, Open  ]],
Cell[CellGroupData[{
Cell[242647, 4739, 1137, 25, 70, "Input",ExpressionUUID->"70b31658-39ee-4807-b21b-e89eb92d25ff",
 CellID->1662086136],
Cell[243787, 4766, 15271, 251, 70, "Output",ExpressionUUID->"45e16eb0-873d-4869-b2aa-1a25a3edaeae",
 CellID->1826328955]
}, Open  ]],
Cell[259073, 5020, 463, 13, 70, "Text",ExpressionUUID->"d5b9eca5-1ab5-4eec-9844-3392ceef8391",
 CellID->1309521567]
}, Open  ]],
Cell[CellGroupData[{
Cell[259573, 5038, 192, 4, 70, "Subsubsection",ExpressionUUID->"fd228889-90f0-45f5-8a03-b62886add03b",
 CellID->2143089842],
Cell[259768, 5044, 393, 9, 70, "Text",ExpressionUUID->"89685e8e-f8cc-44c9-8d58-2a4e51277f94",
 CellID->243091625],
Cell[CellGroupData[{
Cell[260186, 5057, 1183, 26, 70, "Input",ExpressionUUID->"6fa4e70b-d29d-4761-8bb1-3dac7a9f3a86",
 CellID->1752536521],
Cell[261372, 5085, 12435, 214, 70, "Output",ExpressionUUID->"306c1091-bbe8-42fa-a92d-71e3365be5d1",
 CellID->1126980114]
}, Open  ]],
Cell[CellGroupData[{
Cell[273844, 5304, 126, 3, 70, "ExampleDelimiter",ExpressionUUID->"7305da2d-2b56-4a0e-bc8d-771984764920",
 CellID->1474856175],
Cell[273973, 5309, 354, 7, 70, "Text",ExpressionUUID->"dfaf046d-737c-46dc-bc3e-2d17c81821ef",
 CellID->550679557],
Cell[274330, 5318, 771, 23, 70, "Text",ExpressionUUID->"cd7b8638-0936-405c-bf31-35cbfb392882",
 CellID->1756522347],
Cell[CellGroupData[{
Cell[275126, 5345, 812, 16, 70, "Input",ExpressionUUID->"a2a335c2-111c-4399-beb9-f11a0efa7c79",
 CellID->1158968662],
Cell[275941, 5363, 8900, 153, 70, "Output",ExpressionUUID->"f8035504-252d-4ec5-81ae-e7ec06d97f1f",
 CellID->349009458]
}, Open  ]],
Cell[284856, 5519, 263, 7, 70, "Text",ExpressionUUID->"8828a44c-f75f-4de8-82ad-e2ffe4abde2e",
 CellID->1291275064],
Cell[CellGroupData[{
Cell[285144, 5530, 915, 19, 70, "Input",ExpressionUUID->"914d9d98-b291-4de3-a23e-0737eaea9698",
 CellID->785014743],
Cell[286062, 5551, 9576, 159, 70, "Output",ExpressionUUID->"ce9b7c60-2e21-4dbe-9382-f888f93007b1",
 CellID->1024120649]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[295699, 5717, 304, 5, 70, "Subsubsection",ExpressionUUID->"5dc11a09-132e-49cc-93fb-9dd124ebfe66",
 CellID->1591450289],
Cell[296006, 5724, 395, 10, 70, "Text",ExpressionUUID->"48d2d50f-4b4e-4dcb-ab0d-b14ec6229a79",
 CellID->348738944],
Cell[CellGroupData[{
Cell[296426, 5738, 1307, 30, 70, "Input",ExpressionUUID->"a3abe5f3-3f12-4400-a43a-1ae1f53ae969",
 CellID->596183838],
Cell[297736, 5770, 10735, 190, 70, "Output",ExpressionUUID->"019f0462-7080-475d-a741-449fb248d1ee",
 CellID->314317038]
}, Open  ]],
Cell[CellGroupData[{
Cell[308508, 5965, 1522, 33, 70, "Input",ExpressionUUID->"cc8c2714-6a47-4d58-87e5-70e630a184a3",
 CellID->514215138],
Cell[310033, 6000, 5987, 109, 70, "Output",ExpressionUUID->"4979604f-2105-44a8-8cee-345ccb51f66a",
 CellID->2064169693]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[316069, 6115, 223, 4, 70, "Subsubsection",ExpressionUUID->"084a317b-11b3-45d9-af4d-b4e1fbf592ba",
 CellID->102779823],
Cell[316295, 6121, 328, 9, 70, "Text",ExpressionUUID->"e6c233b7-574d-407b-a04b-46bbb40eb06c",
 CellID->864129566],
Cell[CellGroupData[{
Cell[316648, 6134, 854, 20, 70, "Input",ExpressionUUID->"3c691419-2e03-4812-ad32-774bdb00eeb8",
 CellID->153699908],
Cell[317505, 6156, 5470, 93, 70, "Output",ExpressionUUID->"7750b2ea-2494-4df1-90ee-a1d81eee066e",
 CellID->2049196613]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[323036, 6256, 79, 2, 70, "Subsection",ExpressionUUID->"655613a3-b9e7-4717-bf8a-be7a8af09b01",
 CellID->92483860],
Cell[323118, 6260, 517, 10, 70, "Text",ExpressionUUID->"99d50e86-27f6-45e4-9c76-cdafe1c24e8a",
 CellID->33251573],
Cell[CellGroupData[{
Cell[323660, 6274, 365, 10, 70, "Input",ExpressionUUID->"74cc137d-fe22-410c-ad9d-16d0d7377eb8",
 CellID->1011908234],
Cell[324028, 6286, 659, 13, 70, "Output",ExpressionUUID->"46b89249-6262-49a7-8024-453467864131",
 CellID->1652227752]
}, Open  ]],
Cell[CellGroupData[{
Cell[324724, 6304, 774, 18, 70, "Input",ExpressionUUID->"8b57ad73-67b2-4a5c-9339-402c6e68da61",
 CellID->284227293],
Cell[325501, 6324, 12627, 200, 70, "Output",ExpressionUUID->"81d93b1f-49fa-42dd-af2c-ea4ab0efb06c",
 CellID->2028272154]
}, Open  ]],
Cell[CellGroupData[{
Cell[338165, 6529, 794, 18, 70, "Input",ExpressionUUID->"dc2bdec3-fa08-46b9-af19-2c2ec0ded7dd",
 CellID->1777398011],
Cell[338962, 6549, 13190, 218, 70, "Output",ExpressionUUID->"1a3fb7e2-7ba4-42d7-a205-30267e3174d2",
 CellID->14679800]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[352201, 6773, 78, 2, 70, "Subsection",ExpressionUUID->"c11f820a-c2b2-4078-ac2a-99dceb7a4a7b",
 CellID->540091361],
Cell[CellGroupData[{
Cell[352304, 6779, 212, 4, 70, "Subsubsection",ExpressionUUID->"68a131bb-2539-45af-b1bd-27804b2e5f3f",
 CellID->483904929],
Cell[CellGroupData[{
Cell[352541, 6787, 911, 23, 70, "Input",ExpressionUUID->"87ba4170-cfe2-487b-9a50-6dc3afaadb60",
 CellID->143978082],
Cell[353455, 6812, 101957, 1686, 70, "Output",ExpressionUUID->"5b621eed-0095-4421-98a5-8626ef69c106",
 CellID->1910262842]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[455461, 8504, 247, 4, 70, "Subsubsection",ExpressionUUID->"827342d1-e8d8-4d1f-a99c-d836e76eb6d1",
 CellID->2090320032],
Cell[CellGroupData[{
Cell[455733, 8512, 1687, 37, 70, "Input",ExpressionUUID->"155794c9-41b9-4c78-968c-26df13ecf9cb",
 CellID->293255033],
Cell[457423, 8551, 401617, 6684, 70, "Output",ExpressionUUID->"728eb9a7-1c5a-4b49-8d48-946ce6c0b3b5",
 CellID->907062844]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[859089, 15241, 152, 3, 70, "Subsubsection",ExpressionUUID->"051686cc-f47d-47f2-a862-71e363be2b2f",
 CellID->1537091669],
Cell[CellGroupData[{
Cell[859266, 15248, 1108, 29, 70, "Input",ExpressionUUID->"b8fe64f5-c781-47af-abf8-9b68edfe6df8",
 CellID->786849859],
Cell[860377, 15279, 97758, 1586, 70, "Output",ExpressionUUID->"f587b086-9e60-44f3-963c-eb0a8b322e6b",
 CellID->18809055]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[958184, 16871, 170, 3, 70, "Subsubsection",ExpressionUUID->"cc3d288c-713b-456f-9048-6b920ce2804b",
 CellID->977199057],
Cell[958357, 16876, 135, 2, 70, "Text",ExpressionUUID->"c866d0f4-2304-4fe4-9ba3-56608fc6c67a",
 CellID->254630178],
Cell[CellGroupData[{
Cell[958517, 16882, 643, 15, 70, "Input",ExpressionUUID->"c3075fc6-c3ec-453e-bffc-67ede0b56f5e",
 CellID->1111221377],
Cell[959163, 16899, 107101, 1758, 70, "Output",ExpressionUUID->"4313009e-84e5-4e35-8b81-804b91b6e16d",
 CellID->443691276]
}, Open  ]],
Cell[1066279, 18660, 148, 2, 70, "Text",ExpressionUUID->"6d473c2d-7cc3-44fb-a497-e5c3fba04565",
 CellID->383653034],
Cell[CellGroupData[{
Cell[1066452, 18666, 1156, 25, 70, "Input",ExpressionUUID->"cf540ece-5835-4819-82b2-07795d79e433",
 CellID->1300499642],
Cell[1067611, 18693, 544, 10, 70, "Output",ExpressionUUID->"846d5ecd-6f5b-495b-88ec-3dfd1f6fd436",
 CellID->1056053348]
}, Open  ]],
Cell[1068170, 18706, 292, 7, 70, "Text",ExpressionUUID->"b05e9b0c-13d9-4a77-b3d2-02c3f3be869a",
 CellID->2015561393],
Cell[CellGroupData[{
Cell[1068487, 18717, 2114, 41, 70, "Input",ExpressionUUID->"e96edfec-3659-40f8-a821-d78027acfa21",
 CellID->831011238],
Cell[1070604, 18760, 548, 10, 70, "Output",ExpressionUUID->"81229e45-6494-42f0-897c-426ce8b83e2a",
 CellID->1661791912]
}, Open  ]],
Cell[1071167, 18773, 117, 2, 70, "Text",ExpressionUUID->"3ccb1383-2203-4818-8ed1-ca3d49f03d47",
 CellID->359067595],
Cell[CellGroupData[{
Cell[1071309, 18779, 773, 14, 70, "Input",ExpressionUUID->"7ad3c1f1-6479-46f9-9c34-514187f16e56",
 CellID->1719720625],
Cell[1072085, 18795, 1430385, 23457, 70, "Output",ExpressionUUID->"bb055ade-bdb1-4cbc-ac09-d97a582cf5fa",
 CellID->985014584]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2502543, 42260, 135, 3, 70, "Section",ExpressionUUID->"19feb75b-485c-4afc-8fa9-fa87e8337ebc",
 CellTags->"Source & Additional Information",
 CellID->318391102],
Cell[CellGroupData[{
Cell[2502703, 42267, 683, 18, 70, "Subsection",ExpressionUUID->"e1f6c044-9352-4cd7-b1a4-f3aa2cd5ea55",
 CellTags->"Contributed By",
 CellID->127820888],
Cell[2503389, 42287, 29, 0, 70, "Text",ExpressionUUID->"177184dd-8c18-4698-801f-fec89670adbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2503455, 42292, 684, 18, 70, "Subsection",ExpressionUUID->"a6f996eb-6969-40f6-8135-57582bcd1f7d",
 CellTags->"Keywords",
 CellID->547400482],
Cell[2504142, 42312, 23, 0, 70, "Item",ExpressionUUID->"16fb8286-6884-4d6e-a740-48a14fd0429c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2504202, 42317, 126, 4, 70, "Subsection",ExpressionUUID->"7baf79fa-9a6b-4803-9eb6-4455ce71026a",
 CellTags->"Categories",
 CellID->749076926],
Cell[2504331, 42323, 24, 0, 70, "Item",ExpressionUUID->"cec57de4-11b3-4252-8b6b-6b7fa463d74d"],
Cell[2504358, 42325, 28, 0, 70, "Item",ExpressionUUID->"0718830c-4985-46c3-af54-76f1121756d7"],
Cell[2504389, 42327, 40, 0, 70, "Item",ExpressionUUID->"6fb9df98-9e1c-437b-822f-2c4de75738db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2504466, 42332, 661, 18, 70, "Subsection",ExpressionUUID->"ad634f84-0ba5-4d9e-b835-974fac416fe8",
 CellTags->"Related Symbols",
 CellID->161079978],
Cell[2505130, 42352, 24, 0, 70, "Item",ExpressionUUID->"182a4506-3ada-41d1-b985-18bf85494ff2"],
Cell[2505157, 42354, 27, 0, 70, "Item",ExpressionUUID->"d7df347e-2488-41fe-b077-7ccf1b62e82f"],
Cell[2505187, 42356, 27, 0, 70, "Item",ExpressionUUID->"2074b6d6-3129-40b1-b2c1-4c9e920bf537"],
Cell[2505217, 42358, 25, 0, 70, "Item",ExpressionUUID->"a8929260-2304-4e9c-82b7-2872a4251581"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2505279, 42363, 711, 18, 70, "Subsection",ExpressionUUID->"1820322b-fd90-4269-a083-5cd5e9e9accd",
 CellTags->"Related Resource Objects",
 CellID->588449267],
Cell[2505993, 42383, 508, 8, 70, "Item",ExpressionUUID->"1d0f4219-f971-499c-b6c1-515a8910b9ed",
 CellTags->"TabNext",
 CellID->960273585]
}, Open  ]],
Cell[CellGroupData[{
Cell[2506538, 42396, 762, 19, 70, "Subsection",ExpressionUUID->"a7dee06a-21cd-480f-914c-21dfe70be617",
 CellTags->"Source/Reference Citation",
 CellID->642091068],
Cell[2507303, 42417, 188, 4, 70, "Text",ExpressionUUID->"c23da730-7072-4898-8482-8b22d310e6fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2507528, 42426, 614, 18, 70, "Subsection",ExpressionUUID->"e51fa0bc-a6b8-43c9-b197-79a968554beb",
 CellTags->"Links",
 CellID->521525586],
Cell[2508145, 42446, 160, 3, 70, "Item",ExpressionUUID->"38482ceb-777f-4c50-8f75-84996f3d9e9e"],
Cell[2508308, 42451, 68, 0, 70, "Item",ExpressionUUID->"cbc2208c-a89c-491c-9c0c-c0065baf2de5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2508413, 42456, 767, 20, 70, "Subsection",ExpressionUUID->"cb89aa62-f1de-446c-95f1-77c3aad7d0d4",
 CellTags->"Tests",
 CellID->74308299],
Cell[2509183, 42478, 142, 2, 70, "Text",ExpressionUUID->"2eba7e19-489d-46c0-9669-fc6797baccd6",
 CellID->339790071],
Cell[CellGroupData[{
Cell[2509350, 42484, 357, 9, 70, "Input",ExpressionUUID->"16b2f122-092a-4fd9-958e-85fe31999aaf",
 CellID->898055012],
Cell[2509710, 42495, 1236, 21, 70, "Output",ExpressionUUID->"eea4942d-3ccb-4e80-bfb8-2796908a7598",
 CellID->236495118]
}, Open  ]],
Cell[2510961, 42519, 211, 3, 70, "Text",ExpressionUUID->"42ff64f6-fb5f-4cda-9700-7fdd8f4b4ca0",
 CellID->1424158351],
Cell[CellGroupData[{
Cell[2511197, 42526, 2087, 53, 70, "Input",ExpressionUUID->"e6039ec2-ddaf-4ff0-a8bf-f01a0df02ab8",
 CellID->1656091683],
Cell[2513287, 42581, 4436, 66, 70, "Output",ExpressionUUID->"03f09dd2-bb51-4bde-b6ff-48717f3ab9d7",
 CellID->1928701276]
}, Open  ]],
Cell[2517738, 42650, 213, 3, 70, "Text",ExpressionUUID->"a86152f7-ab8f-4655-851f-341987ace36a",
 CellID->636579626],
Cell[CellGroupData[{
Cell[2517976, 42657, 2171, 54, 70, "Input",ExpressionUUID->"90ced3b9-b0fe-4233-8010-0603a45b81e9",
 CellID->117247322],
Cell[2520150, 42713, 4216, 63, 70, "Output",ExpressionUUID->"742a5237-d975-48e7-9d46-084fd99174ab",
 CellID->1305338730]
}, Open  ]],
Cell[CellGroupData[{
Cell[2524403, 42781, 2317, 56, 70, "Input",ExpressionUUID->"3943fc69-c4dd-48d2-8ee1-38e256ee0623",
 CellID->679420060],
Cell[2526723, 42839, 4269, 64, 70, "Output",ExpressionUUID->"f936072d-be36-45d7-ab7d-7af2fd19a124",
 CellID->135097358]
}, Open  ]],
Cell[CellGroupData[{
Cell[2531029, 42908, 254, 6, 70, "Input",ExpressionUUID->"ca141d8d-ac0b-4607-ae25-a9fb26eb94ed",
 CellID->192437816],
Cell[2531286, 42916, 217, 4, 70, "Output",ExpressionUUID->"f60fd651-ab20-4d16-af96-fef5bbd6cdfd",
 CellID->691081027]
}, Open  ]],
Cell[CellGroupData[{
Cell[2531540, 42925, 350, 9, 70, "Input",ExpressionUUID->"5984c02e-ba66-451d-82e1-13ac6b3881f0",
 CellID->1192201479],
Cell[2531893, 42936, 218, 4, 70, "Output",ExpressionUUID->"87881a42-a00c-4fd4-9206-50ee069bc4cf",
 CellID->1407257813]
}, Open  ]],
Cell[CellGroupData[{
Cell[2532148, 42945, 351, 9, 70, "Input",ExpressionUUID->"a0f742fe-e347-488c-89df-9442623d2950",
 CellID->1862071492],
Cell[2532502, 42956, 218, 4, 70, "Output",ExpressionUUID->"10db28c1-5a04-4f51-b59d-a63185677dac",
 CellID->1544658680]
}, Open  ]],
Cell[CellGroupData[{
Cell[2532757, 42965, 397, 10, 70, "Input",ExpressionUUID->"b32bc8ea-342b-4f88-b32c-31d77fef65c5",
 CellID->989188074],
Cell[2533157, 42977, 147, 3, 70, "Output",ExpressionUUID->"a10c1699-e8cb-4fa8-8369-dde4dd8a3c71",
 CellID->1928061248]
}, Open  ]],
Cell[CellGroupData[{
Cell[2533341, 42985, 374, 10, 70, "Input",ExpressionUUID->"7c96c4ef-bc91-485b-9fdf-efb2f4d0814e",
 CellID->1891823472],
Cell[2533718, 42997, 175, 4, 70, "Output",ExpressionUUID->"4bb2eeb0-899b-4026-9a1b-62ce61e31833",
 CellID->148626177]
}, Open  ]],
Cell[CellGroupData[{
Cell[2533930, 43006, 151, 3, 70, "Subsubsection",ExpressionUUID->"baa754cd-b892-4f24-9946-0915d2f2a18d",
 CellID->49494754],
Cell[CellGroupData[{
Cell[2534106, 43013, 240, 6, 70, "Input",ExpressionUUID->"3b228835-3e92-4233-b39a-924acf346d06",
 CellID->1486259351],
Cell[2534349, 43021, 844, 15, 70, "Message",ExpressionUUID->"b4dad615-0086-4cbd-a61d-9d59c90492d3",
 CellID->436675378],
Cell[2535196, 43038, 521, 9, 70, "Output",ExpressionUUID->"9cd8c677-ba25-4c0c-9709-ae736ac9d098",
 CellID->1251456247]
}, Open  ]],
Cell[CellGroupData[{
Cell[2535754, 43052, 333, 8, 70, "Input",ExpressionUUID->"7b944069-a17c-46ee-bb8d-7f45815ff1d5",
 CellID->2141340476],
Cell[2536090, 43062, 670, 12, 70, "Message",ExpressionUUID->"89821f0e-aa58-4452-b9d4-51b770f73812",
 CellID->770304611],
Cell[2536763, 43076, 359, 6, 70, "Output",ExpressionUUID->"16993316-2d01-4c09-a19a-2eccd769bff1",
 CellID->1478172961]
}, Open  ]],
Cell[CellGroupData[{
Cell[2537159, 43087, 253, 6, 70, "Input",ExpressionUUID->"ce0f9bc7-9b1e-4bf9-b747-9d82686ab58e",
 CellID->727293398],
Cell[2537415, 43095, 816, 16, 70, "Message",ExpressionUUID->"ddbe1c7b-2468-404c-866c-ff9cae96fbfd",
 CellID->1562127031],
Cell[2538234, 43113, 520, 9, 70, "Output",ExpressionUUID->"87ad1342-f31c-4778-ab33-8e08c7192031",
 CellID->1681425442]
}, Open  ]],
Cell[CellGroupData[{
Cell[2538791, 43127, 384, 8, 70, "Input",ExpressionUUID->"8b35f576-9ae5-4d2b-a434-d5e1747c2ccc",
 CellID->922752450],
Cell[2539178, 43137, 855, 16, 70, "Message",ExpressionUUID->"f0910e49-0280-45d7-9866-4cd2a5224fc3",
 CellID->980092821],
Cell[2540036, 43155, 514, 9, 70, "Output",ExpressionUUID->"c96846b3-9f25-4ed9-8d1e-3c46f90411f0",
 CellID->1220470057]
}, Open  ]],
Cell[CellGroupData[{
Cell[2540587, 43169, 349, 8, 70, "Input",ExpressionUUID->"0e22d6ba-7701-441f-92c1-246a9e2a04cc",
 CellID->605998972],
Cell[2540939, 43179, 862, 16, 70, "Message",ExpressionUUID->"5c2e7e20-9b1d-43dc-ba2a-f0609971ac34",
 CellID->1823935502],
Cell[2541804, 43197, 518, 9, 70, "Output",ExpressionUUID->"3efa38b1-8149-46c5-849a-79c6a8a872d8",
 CellID->1702404836]
}, Open  ]],
Cell[CellGroupData[{
Cell[2542359, 43211, 387, 8, 70, "Input",ExpressionUUID->"2562eb7d-2221-4d0b-9544-a23312e3063d",
 CellID->2134600312],
Cell[2542749, 43221, 861, 16, 70, "Message",ExpressionUUID->"1b9f967b-e679-4068-a841-aa01e90f753c",
 CellID->1393449671],
Cell[2543613, 43239, 521, 9, 70, "Output",ExpressionUUID->"96e5b67c-7b36-4ca5-a361-0e3e85d2bc65",
 CellID->1399449962]
}, Open  ]],
Cell[CellGroupData[{
Cell[2544171, 43253, 588, 13, 70, "Input",ExpressionUUID->"055a0dd0-2c03-4ea7-9187-550b9738fd29",
 CellID->1923894224],
Cell[2544762, 43268, 694, 13, 70, "Message",ExpressionUUID->"a98357a4-6aa7-4748-90eb-bdff87a4d9ba",
 CellID->1314609390],
Cell[2545459, 43283, 696, 13, 70, "Message",ExpressionUUID->"411b34f0-1c23-41e3-8ec2-0f9ce68e6098",
 CellID->1328257394],
Cell[2546158, 43298, 693, 13, 70, "Message",ExpressionUUID->"ec3f6ab7-b49f-4750-b58b-791951f9d715",
 CellID->929510393],
Cell[2546854, 43313, 646, 12, 70, "Message",ExpressionUUID->"309a9efb-64cb-4598-9b91-bfc894acb5bb",
 CellID->1485126873],
Cell[2547503, 43327, 360, 6, 70, "Output",ExpressionUUID->"c82f9fdb-c57a-40eb-9b4b-2e6eae61b641",
 CellID->324925430]
}, Open  ]],
Cell[CellGroupData[{
Cell[2547900, 43338, 649, 13, 70, "Input",ExpressionUUID->"544c7c06-885e-4040-93f1-00a0bc8bbeca",
 CellID->1554101902],
Cell[2548552, 43353, 470, 11, 70, "Message",ExpressionUUID->"209992d3-a8b9-4283-ba88-6b5e352d628f",
 CellID->2118271336],
Cell[2549025, 43366, 467, 11, 70, "Message",ExpressionUUID->"d17d618b-3281-416e-93f6-de69ce60bd34",
 CellID->802444186],
Cell[2549495, 43379, 466, 11, 70, "Message",ExpressionUUID->"70099fb2-c7fd-428c-be87-212e7ce88f18",
 CellID->482130942],
Cell[2549964, 43392, 459, 10, 70, "Message",ExpressionUUID->"00cdbf78-1576-4a9d-b392-2b4bae8a0de4",
 CellID->718942063],
Cell[2550426, 43404, 364, 6, 70, "Output",ExpressionUUID->"34000d09-253e-4d25-8841-ea6d7e5e0ee0",
 CellID->1516254819]
}, Open  ]],
Cell[CellGroupData[{
Cell[2550827, 43415, 678, 14, 70, "Input",ExpressionUUID->"c7d4edbd-bea5-4926-9e18-4ad173bb25c7",
 CellID->1732163943],
Cell[2551508, 43431, 676, 12, 70, "Message",ExpressionUUID->"cf7a3ee6-ce43-46aa-a47e-b6cf07425ac5",
 CellID->1653787631],
Cell[2552187, 43445, 360, 6, 70, "Output",ExpressionUUID->"0881a568-1ca2-4dde-bc57-3cc83214c9d6",
 CellID->327871096]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2552620, 43459, 127, 4, 70, "Section",ExpressionUUID->"916b349e-9698-44ed-8621-fee6d6f88703",
 CellTags->"Author Notes",
 CellID->795110225],
Cell[2552750, 43465, 509, 8, 70, "Text",ExpressionUUID->"31f533c4-4e40-4b4c-a812-73f8ba45d20f",
 CellTags->"TabNext",
 CellID->567921317]
}, Open  ]],
Cell[CellGroupData[{
Cell[2553296, 43478, 720, 19, 70, "Section",ExpressionUUID->"e0ad1eeb-9b8d-4090-9fa8-2fc63378024c",
 CellTags->"Submission Notes",
 CellID->843283583],
Cell[2554019, 43499, 495, 8, 70, "Text",ExpressionUUID->"a7b2c1ed-faa4-4ac9-b20d-1f50ba930948",
 CellTags->"TabNext",
 CellID->920818074]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
